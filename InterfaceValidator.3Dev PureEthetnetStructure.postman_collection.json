{
	"info": {
		"_postman_id": "50efaaf2-406b-44fd-8c54-121355eef05a",
		"name": "InterfaceValidator.3Dev PureEthetnetStructure",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "UserInput",
			"item": [
				{
					"name": "UserInput",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "16454c63-e112-4cf0-84f5-0fa93ff97506",
								"exec": [
									"console.log(\"\\n\\n\\n===========================================================================================\");",
									"console.log(\"================================= InterfaceValidator.3 ===================================\");",
									"console.log(\"==========================================================================================\");",
									"/****************************************************************************************",
									"* ",
									"* Request collection for validating the management interface of microwave devices",
									"* as it can be found on https://github.com/openBackhaul",
									"*  ",
									"* This RequestCollection is for perpetual complementation.",
									"* ",
									"*   !   Please, provide the following User Input   !",
									"* ",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Manual Definition of Source of Environmental Parameters",
									"****************************************************************************************/",
									"SOURCE_OF_INPUT_PARAMETERS = \"manual\";          // choose from \"manual\" or \"file\"",
									"MULTIPLICITY_OF_DEVICE_ITERATIONS = \"all\";      // \"none\", \"one\" or \"all\" devices to be validated",
									"MANTIS_INTERFACE_STATUS = \"off\";          // choose from \"off\", \"read-only\" or \"read-write\"",
									"",
									"AreMainInputParametersCorrect(SOURCE_OF_INPUT_PARAMETERS, ",
									"                                MULTIPLICITY_OF_DEVICE_ITERATIONS, ",
									"                                MANTIS_INTERFACE_STATUS",
									"                              );",
									"",
									"",
									"/****************************************************************************************",
									"* Manual Definition of Controller and Device Information (required for \"manual\" only)",
									"****************************************************************************************/",
									"if ( SOURCE_OF_INPUT_PARAMETERS === \"manual\" ) {",
									"    IP_ADDRESS_OF_THE_CONTROLLER = \"172.29.145.220\";  //\"10.118.125.76\";",
									"    RESTCONF_PORT_AT_THE_CONTROLLER = \"8181\";",
									"    AUTHORIZATION_CODE_AT_THE_CONTROLLER = \"c2VudGhpbHZlbC5zOlBSU2UwOA==\"; //\"Basic dGhvcnN0ZW4uaDpQUlRoMDk=\";",
									"    PATH_TO_DB_AND_MOUNT_POINT = \"/rests/data/network-topology:network-topology/topology=topology-netconf\";",
									"        ",
									"    /*NAME_OF_DEVICE_UNDER_TEST = \"highstreet_nts_thorsten_50004\";    //\"ericsson_trafficnode_13322\"; //\"highstreet_nts_thorsten_50004\"; //\"siae_alcplus2e_12970\";",
									"    AUTHORIZATION_CODE_AT_THE_MANTIS = \"\";                      //\"wJPHIpvvvhJHj8tYqhpaPpF6mf-Jo_ao\";                        //\"pHCn4WYf74wyUmn0ZCj_BBkkIvIE4CtM\";",
									"    UUID_OF_LTP_UNDER_TEST = \"e0290b56-5cb7-4175-a226-747114951cf5\"; //\"RF-2146697601\";   //\"e0290b56-5cb7-4175-a226-747114951cf5\";  //\"LTP-MWPS-TTP-RADIO-1A\";",
									"    LID_OF_LP_UNDER_TEST = \"WWKWKKW\";                               //\"2146697601\";    //\"WWKWKKW\"; //\"LP-MWPS-TTP-RADIO-1A\";",
									"    PAC_UNDER_TEST = \"air-interface-2-0:air-interface-pac\";",
									"    */",
									"    /*",
									"    NAME_OF_DEVICE_UNDER_TEST = \"highstreet_nts_thorsten_50004\";    //\"ericsson_trafficnode_13322\"; //\"highstreet_nts_thorsten_50004\"; //\"siae_alcplus2e_12970\";",
									"    AUTHORIZATION_CODE_AT_THE_MANTIS = \"\";                      //\"wJPHIpvvvhJHj8tYqhpaPpF6mf-Jo_ao\";                        //\"pHCn4WYf74wyUmn0ZCj_BBkkIvIE4CtM\";",
									"    UUID_OF_LTP_UNDER_TEST = \"c3ebd9d5-9168-49e6-8444-668ac2007c3d\"; //\"ETH-2134638850\";   //\"c3ebd9d5-9168-49e6-8444-668ac2007c3d\";  //\"\";",
									"    LID_OF_LP_UNDER_TEST = \"MzE4LIIsz4EL4MMIMI\";                    //\"2134638850\";    //\"MzE4LIIsz4EL4MMIMI\"; //\"\";",
									"    PAC_UNDER_TEST = \"ethernet-container-2-0:ethernet-container-pac\";",
									"    */",
									"    ",
									"    /*if (SOURCE_OF_INPUT_PARAMETERS === \"manual\") {",
									"        NAME_OF_DEVICE_UNDER_TEST = \"siae_alcplus2e_12970\";    //\"ericsson_trafficnode_13322\"; ",
									"        AUTHORIZATION_CODE_AT_THE_MANTIS = \"pHCn4WYf74wyUmn0ZCj_BBkkIvIE4CtM\"; //\"wJPHIpvvvhJHj8tYqhpaPpF6mf-Jo_ao\"",
									"        UUID_OF_LTP_UNDER_TEST = \"LTP-MWPS-TTP-RADIO-1A\"; //\"RF-2146697601\";   //\"506f0848-2ae0-4594-ac58",
									"        LID_OF_LP_UNDER_TEST = \"LP-MWPS-TTP-RADIO-1A\";   //\"2146697601\";    //\"jajjj\"; //\"LP-MWPS-TTP-RADIO-1A\";",
									"        PAC_UNDER_TEST = \"air-interface-2-0:air-interface-pac\";",
									"    }*/",
									"    ",
									"    /*if (SOURCE_OF_INPUT_PARAMETERS === \"manual\") {",
									"    NAME_OF_DEVICE_UNDER_TEST = \"siae_alcplus2e_12970\";    //\"ericsson_trafficnode_13322\"; //\"highstreet_nts_andreas_50014\"; //\"siae_alcplus2e_12970\";",
									"    AUTHORIZATION_CODE_AT_THE_MANTIS = \"pHCn4WYf74wyUmn0ZCj_BBkkIvIE4CtM\"; //\"wJPHIpvvvhJHj8tYqhpaPpF6mf-Jo_ao\";                        //\"pHCn4WYf74wyUmn0ZCj_BBkkIvIE4CtM\";",
									"    UUID_OF_LTP_UNDER_TEST = \"LTP-ETC-TTP-PORT-A\";  //\"LTP-MWPS-TTP-RADIO-1A\";",
									"    LID_OF_LP_UNDER_TEST = \"LP-ETC-TTP-PORT-A\";    //\"LP-MWPS-TTP-RADIO-1A\";",
									"    PAC_UNDER_TEST = \"ethernet-container-2-0:ethernet-container-pac\";",
									"    }*/",
									"    ",
									"    /*if (SOURCE_OF_INPUT_PARAMETERS === \"manual\") {",
									"        NAME_OF_DEVICE_UNDER_TEST = \"ericsson_trafficnode_13322\";",
									"        AUTHORIZATION_CODE_AT_THE_MANTIS = \"pHCn4WYf74wyUmn0ZCj_BBkkIvIE4CtM\";",
									"        UUID_OF_LTP_UNDER_TEST = \"ETH-2134638595\";",
									"        LID_OF_LP_UNDER_TEST = \"2134638595\";",
									"        PAC_UNDER_TEST = \"ethernet-container-2-0:ethernet-container-pac\";",
									"    }*/",
									"    ",
									"    if (SOURCE_OF_INPUT_PARAMETERS === \"manual\") {",
									"        NAME_OF_DEVICE_UNDER_TEST = \"ericsson_trafficnode_13322\";",
									"        AUTHORIZATION_CODE_AT_THE_MANTIS = \"pHCn4WYf74wyUmn0ZCj_BBkkIvIE4CtM\";",
									"        UUID_OF_LTP_UNDER_TEST = \"PES-2134638595\";",
									"        LID_OF_LP_UNDER_TEST = \"2134638595\";",
									"        PAC_UNDER_TEST = \"pure-ethernet-structure-2-0:pure-ethernet-structure-pac\";",
									"    }",
									"        ",
									"    IsControllerAndDeviceInformationComplete(IP_ADDRESS_OF_THE_CONTROLLER,",
									"                                                    RESTCONF_PORT_AT_THE_CONTROLLER,",
									"                                                    AUTHORIZATION_CODE_AT_THE_CONTROLLER,",
									"                                                    PATH_TO_DB_AND_MOUNT_POINT,",
									"                                                    NAME_OF_DEVICE_UNDER_TEST,",
									"                                                    AUTHORIZATION_CODE_AT_THE_MANTIS,",
									"                                                    UUID_OF_LTP_UNDER_TEST,",
									"                                                    LID_OF_LP_UNDER_TEST,",
									"                                                    PAC_UNDER_TEST",
									"                                             );",
									"}",
									"",
									"class Interface {",
									"    constructor(newLtpUuid, newlpLid) {",
									"        this.ltpUuid = newLtpUuid;",
									"        this.lpLid = newlpLid;",
									"    }",
									"}",
									"if ( SOURCE_OF_INPUT_PARAMETERS === \"manual\" ) {",
									"    var interfaceUnderTest = new Interface(UUID_OF_LTP_UNDER_TEST, LID_OF_LP_UNDER_TEST);",
									"    IsInterfaceUnderTestDefined(interfaceUnderTest);",
									"}",
									"",
									"class Node {",
									"    constructor(newNodeId,",
									"                    newVendor,",
									"                    newDeviceType,",
									"                    newDeviceNumber,",
									"                    newMantisAuthorizationCode) {",
									"        this.nodeId = newNodeId;",
									"        this.vendor = newVendor;",
									"        this.deviceType = newDeviceType;",
									"        this.deviceNumber = newDeviceNumber;",
									"        this.mantisAuthorizationCode = newMantisAuthorizationCode;",
									"        this.airInterfaceList = [];",
									"        this.ethernetContainerList = [];",
									"        this.hybridMwStructureList = [];",
									"        this.ipInterfaceList = [];",
									"        this.macInterfaceList = [];",
									"        this.pureEthernetStructureList = [];",
									"        this.tdmContainerList = [];",
									"        this.vlanInterfaceList = [];",
									"        this.wireInterfaceList = [];",
									"    }",
									"}",
									"if ( SOURCE_OF_INPUT_PARAMETERS === \"manual\" ) {",
									"    var nodeUnderTest = new Node(NAME_OF_DEVICE_UNDER_TEST,",
									"                                    VendorOf(NAME_OF_DEVICE_UNDER_TEST),",
									"                                    TypeOf(NAME_OF_DEVICE_UNDER_TEST),",
									"                                    NumberOf(NAME_OF_DEVICE_UNDER_TEST),",
									"                                    AUTHORIZATION_CODE_AT_THE_MANTIS",
									"                                );  ",
									"    switch (TechnologyOf(PAC_UNDER_TEST)) {",
									"        case \"air-interface\":",
									"            nodeUnderTest.airInterfaceList.push(interfaceUnderTest);",
									"            break;",
									"        case \"ethernet-container\":",
									"            nodeUnderTest.ethernetContainerList.push(interfaceUnderTest);",
									"            break;",
									"        case \"hybrid-mw-structure\":",
									"            nodeUnderTest.hybridMwStructureList.push(interfaceUnderTest);",
									"            break;",
									"        case \"ip-interface\":",
									"            nodeUnderTest.ipInterfaceList.push(interfaceUnderTest);",
									"            break;",
									"        case \"mac-interface\":",
									"            nodeUnderTest.macInterfaceList.push(interfaceUnderTest);",
									"            break;",
									"        case \"pure-ethernet-structure\":",
									"            nodeUnderTest.pureEthernetStructureList.push(interfaceUnderTest);",
									"            break;",
									"        case \"tdm-container\":",
									"            nodeUnderTest.tdmContainerList.push(interfaceUnderTest);",
									"            break;",
									"        case \"vlan-interface\":",
									"            nodeUnderTest.vlanInterfaceList.push(interfaceUnderTest);",
									"            break;",
									"        case \"wire-interface\":",
									"            nodeUnderTest.wireInterfaceList.push(interfaceUnderTest);",
									"            break;",
									"    }",
									"    IsNodeUnderTestDefined(nodeUnderTest);",
									"}",
									"",
									"class Controller {",
									"    constructor(newControllerAddress,",
									"                    newAuthorizationCode,",
									"                    newPathToDbAndMountPoint) {",
									"        this.controllerAddress = newControllerAddress;",
									"        this.authorizationCode = newAuthorizationCode;",
									"        this.pathToDbAndMountPoint = newPathToDbAndMountPoint;",
									"        this.nodeList = [];",
									"    }",
									"}",
									"if ( SOURCE_OF_INPUT_PARAMETERS === \"manual\" ) {",
									"    var controller = new Controller(IP_ADDRESS_OF_THE_CONTROLLER + \":\" + RESTCONF_PORT_AT_THE_CONTROLLER,",
									"                                        AUTHORIZATION_CODE_AT_THE_CONTROLLER,",
									"                                        PATH_TO_DB_AND_MOUNT_POINT",
									"                                    );",
									"    controller.nodeList.push(nodeUnderTest);",
									"    IsControllerUnderTestDefined(controller);",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Automated Definition of Controller and Device Information by Loading Static Data File",
									"****************************************************************************************/",
									"if (SOURCE_OF_INPUT_PARAMETERS === \"file\") {",
									"    try {",
									"        var controller = data.CONTROLLER;",
									"        CouldControllerBeLoadedFromFile(controller);",
									"    } catch (error) {",
									"        CouldControllerBeLoadedFromFile();",
									"    }",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Automated Definition of Device Information from Controller Topology Information",
									" ****************************************************************************************/",
									"if (SOURCE_OF_INPUT_PARAMETERS === \"network\") {",
									"    /* public version supports only SOURCE_OF_INPUT_PARAMETERS === \"manual\" || \"file\" */",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Provided Environmental Variables ",
									" ****************************************************************************************/",
									"pm.environment.clear();",
									"",
									"INITIAL_INDEX_OF_DEVICE_UNDER_TEST = 0;",
									"//DUMMY_URI = \"ping.openBackhaul.com\";",
									"DUMMY_URI = \"http://172.29.145.220:8181/rests/data/programming:instructions-queue=pcep-topology\";",
									"",
									"pm.environment.set(\"multiplicityOfDeviceIterations\", MULTIPLICITY_OF_DEVICE_ITERATIONS);",
									"pm.environment.set(\"controller\", controller);",
									"pm.environment.set(\"indexOfDeviceUnderTest\", INITIAL_INDEX_OF_DEVICE_UNDER_TEST);",
									"pm.environment.set(\"mantisInterfaceStatus\", MANTIS_INTERFACE_STATUS);",
									"pm.environment.set(\"dummyUri\", DUMMY_URI);",
									"AreAllEnvironmentVariablesSet();",
									"",
									"",
									"/****************************************************************************************",
									" * Provided Collection Variables ",
									" ****************************************************************************************/",
									"pm.collectionVariables.clear();",
									"",
									"",
									"/****************************************************************************************",
									" * Setting up Local Variables and Preparing the Request",
									" ****************************************************************************************/",
									"pm.variables.clear();",
									"",
									"try {",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({ key: \"Authorization\", value: \"\" });",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });",
									"} catch (error) {}",
									"CouldTheRequestBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									" * Functions",
									" ****************************************************************************************/",
									"function TechnologyOf(pacUnderTest) {",
									"    let indexOfColon = pacUnderTest.indexOf(\":\");",
									"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
									"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
									"}",
									"",
									"function VendorOf(deviceUnderTest) {",
									"    let indexOfFirstUnderscore = deviceUnderTest.indexOf(\"_\");",
									"    return deviceUnderTest.slice(0, indexOfFirstUnderscore);",
									"}",
									"",
									"function TypeOf(deviceUnderTest) {",
									"    let deviceNameSegements = deviceUnderTest.split(\"_\");",
									"    return deviceNameSegements[1];",
									"}",
									"",
									"function NumberOf(deviceUnderTest) {",
									"    let indexOfSecondUnderscore = deviceUnderTest.indexOf(\"_\", deviceUnderTest.indexOf(\"_\") + 1);",
									"    return deviceUnderTest.slice(indexOfSecondUnderscore + 1);",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function AreMainInputParametersCorrect(sourceOfInputParameters, ",
									"                                                    multiplicityOfDeviceIterations, ",
									"                                                    mantisInterfaceStatus) {",
									"    pm.test(\"IsValueOfSourceOfInputParametersCorrect\", function() {",
									"        pm.expect(sourceOfInputParameters).to.be.oneOf([\"manual\", \"file\", \"network\"]);",
									"    });",
									"    pm.test(\"IsValueOfMultiplicityOfDeviceIterationsCorrect\", function() {",
									"        pm.expect(multiplicityOfDeviceIterations).to.be.oneOf([\"none\", \"one\", \"all\"]);",
									"    });",
									"    pm.test(\"IsValueOfMantisInterfaceStatusCorrect\", function() {",
									"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"    });",
									"}",
									"",
									"function IsControllerAndDeviceInformationComplete(ipAddressOfTheController,",
									"                                                    restconfPortAtTheController,",
									"                                                    authorizationCodeAtTheController,",
									"                                                    pathToDbAndMountPoint,",
									"                                                    nameOfDeviceUnderTest,",
									"                                                    authorizationCodeAtTheMantis,",
									"                                                    uuidOfLtpUnderTest,",
									"                                                    lidOfLpUnderTest,",
									"                                                    pacUnderTest) {",
									"    pm.test(\"IsControllerAndDeviceInformationComplete\", function() {",
									"        pm.expect(ipAddressOfTheController).to.be.a(\"string\");",
									"        pm.expect(ipAddressOfTheController).to.not.have.lengthOf(0);",
									"        pm.expect(restconfPortAtTheController).to.be.a(\"string\");",
									"        pm.expect(restconfPortAtTheController).to.not.have.lengthOf(0);",
									"        pm.expect(authorizationCodeAtTheController).to.be.a(\"string\");",
									"        pm.expect(authorizationCodeAtTheController).to.not.have.lengthOf(0);",
									"        pm.expect(pathToDbAndMountPoint).to.be.a(\"string\");",
									"        pm.expect(pathToDbAndMountPoint).to.not.have.lengthOf(0);",
									"        pm.expect(nameOfDeviceUnderTest).to.be.a(\"string\");",
									"        pm.expect(nameOfDeviceUnderTest).to.not.have.lengthOf(0);",
									"        pm.expect(authorizationCodeAtTheMantis).to.be.a(\"string\");",
									"        if (MANTIS_INTERFACE_STATUS !== \"off\") {",
									"            pm.expect(authorizationCodeAtTheMantis).to.not.have.lengthOf(0);",
									"        }",
									"        pm.expect(uuidOfLtpUnderTest).to.be.a(\"string\");",
									"        pm.expect(uuidOfLtpUnderTest).to.not.have.lengthOf(0);",
									"        pm.expect(lidOfLpUnderTest).to.be.a(\"string\");",
									"        pm.expect(lidOfLpUnderTest).to.not.have.lengthOf(0);",
									"        pm.expect(pacUnderTest).to.be.a(\"string\");",
									"        pm.expect(pacUnderTest).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldControllerBeLoadedFromFile(controller) {",
									"    pm.test(\"CouldControllerBeLoadedFromFile\", function () {",
									"        pm.expect(controller).to.be.an(\"object\");",
									"    });",
									"}",
									"",
									"function IsInterfaceUnderTestDefined(interfaceUnderTest) {",
									"    pm.test(\"IsInterfaceUnderTestDefined\", function() {",
									"        pm.expect(interfaceUnderTest).to.be.an.instanceof(Interface);",
									"    });",
									"    pm.test(\"IsLtpUuidDefined\", function() {",
									"        pm.expect(interfaceUnderTest.ltpUuid).to.be.a(\"string\");",
									"        pm.expect(interfaceUnderTest.ltpUuid).to.not.have.lengthOf(0);",
									"    });",
									"    pm.test(\"IsLpLidDefined\", function() {",
									"        pm.expect(interfaceUnderTest.lpLid).to.be.a(\"string\");",
									"        pm.expect(interfaceUnderTest.lpLid).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function IsNodeUnderTestDefined(nodeUnderTest) {",
									"    pm.test(\"IsNodeUnderTestDefined\", function() {",
									"        pm.expect(nodeUnderTest).to.be.an.instanceof(Node);",
									"        pm.expect(nodeUnderTest.nodeId).to.be.a(\"string\");",
									"        pm.expect(nodeUnderTest.nodeId).to.not.have.lengthOf(0);",
									"        pm.expect(nodeUnderTest.vendor).to.be.a(\"string\");",
									"        pm.expect(nodeUnderTest.vendor).to.not.have.lengthOf(0);",
									"        pm.expect(nodeUnderTest.deviceType).to.be.a(\"string\");",
									"        pm.expect(nodeUnderTest.deviceType).to.not.have.lengthOf(0);",
									"        pm.expect(nodeUnderTest.deviceNumber).to.be.a(\"string\");",
									"        pm.expect(nodeUnderTest.deviceNumber).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function IsControllerUnderTestDefined(controllerUnderTest) {",
									"    pm.test(\"IsControllerUnderTestDefined\", function() {",
									"        pm.expect(controllerUnderTest).to.be.an.instanceof(Controller);",
									"        pm.expect(controllerUnderTest.controllerAddress).to.be.a(\"string\");",
									"        pm.expect(controllerUnderTest.controllerAddress).to.not.have.lengthOf(0);",
									"        pm.expect(controllerUnderTest.authorizationCode).to.be.a(\"string\");",
									"        pm.expect(controllerUnderTest.authorizationCode).to.not.have.lengthOf(0);",
									"        pm.expect(controllerUnderTest.pathToDbAndMountPoint).to.be.a(\"string\");",
									"        pm.expect(controllerUnderTest.pathToDbAndMountPoint).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function AreAllEnvironmentVariablesSet() {",
									"    pm.test(\"AreAllEnvironmentVariablesSet\", function() {",
									"        pm.expect(pm.environment.get(\"multiplicityOfDeviceIterations\")).to.be.oneOf([\"none\", \"one\", \"all\"]);",
									"        pm.expect(pm.environment.get(\"controller\")).to.be.an(\"object\");",
									"        pm.expect(pm.environment.get(\"indexOfDeviceUnderTest\")).to.be.a(\"number\");",
									"        pm.expect(pm.environment.get(\"indexOfDeviceUnderTest\")).to.be.at.least(0);",
									"        pm.expect(pm.environment.get(\"mantisInterfaceStatus\")).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"        pm.expect(pm.environment.get(\"dummyUri\")).to.be.a(\"string\");",
									"        pm.expect(pm.environment.get(\"dummyUri\")).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
									"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function() {",
									"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
									"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
									"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
									"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function() {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "04fcf13e-02f3-4e98-8fdc-3ca30c3e5ebd",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "PRSe08",
									"type": "string"
								},
								{
									"key": "username",
									"value": "senthilvel.s",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3a2f1f0f-c39a-405f-aa2b-abb2a9e822f6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7d079703-3cfc-4940-b654-999191c57eba",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "functions()",
			"item": [
				{
					"name": "General()",
					"item": [
						{
							"name": "PrintMantisIssuesForTechnologyAndClass()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "73604962-271d-4e77-95a9-c24a8ff76a2c",
										"exec": [
											"console.log(\"\\n-------------Uploading Function for Filtering and Listing of Mantis Issues----------------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of PrintMantisIssuesForTechnologyAndClass()",
											"* ",
											"* Function for filtering a list of Mantis issues for defined technology and class ",
											"* under test and console.log of the filtered issues.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Environment Variables ",
											"****************************************************************************************/",
											"const PRINT_MANTIS_ISSUES_FOR_TECHNOLOGY_AND_CLASS = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var mantisIssueList = pm.environment.get(\"mantisIssueList\");",
											"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
											"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
											"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
											"        CouldInputForFilteringMantisIssuesBeLoaded(mantisIssueList, technologyUnderTest, ",
											"                                                        classUnderTest,",
											"                                                        attributeUnderTest",
											"                                                   );",
											"    } catch (error) {",
											"        CouldInputForFilteringMantisIssuesBeLoaded();",
											"    }",
											"",
											"    // Filtering the Mantis Issues for Technology and Class",
											"    try {",
											"        let technologyAndClassUnderTest = technologyUnderTest + \"-\" + classUnderTest;",
											"        var filteredIssueList = mantisIssueList;",
											"        for (let i=(filteredIssueList.length-1); i>=0; i--) {",
											"            let summary = filteredIssueList[i].summary;",
											"            let indexOfTwoColons = summary.indexOf(\"::\");",
											"            let technologyAndClass = summary.slice(0, indexOfTwoColons);",
											"            if (technologyAndClass!==technologyAndClassUnderTest){",
											"                filteredIssueList.splice(i,1);",
											"            } else {",
											"                if ( (attributeUnderTest!==undefined) && (attributeUnderTest!==\"\") ) {",
											"                    let indexOfBlank = summary.indexOf(\" \");",
											"                    let attributeName = summary.slice(indexOfTwoColons+2, indexOfBlank);",
											"                    if (attributeName!==attributeUnderTest){",
											"                        filteredIssueList.splice(i,1);",
											"                    }",
											"                }",
											"            }",
											"        }",
											"        CouldMantisIssueListBeFiltered(filteredIssueList);",
											"    } catch (error) {",
											"        CouldMantisIssueListBeFiltered();",
											"    }",
											"    ",
											"    // Printing filtered Issues into the Console",
											"    try {",
											"        if ( filteredIssueList.length>0 ) {",
											"            console.log(\"Issues documented in Mantis:\");",
											"            for (let i=0; i<filteredIssueList.length; i++) {",
											"                let indexOfIssue = filteredIssueList[i].id;",
											"                let summary = filteredIssueList[i].summary;",
											"                let indexOfTwoColons = summary.indexOf(\"::\");",
											"                let attributeAndError = summary.slice(indexOfTwoColons+2);",
											"                let status = filteredIssueList[i].status.name;",
											"                console.log(\"#\" + indexOfIssue + \" : \" + attributeAndError + \" (\" + status + \")\");",
											"            }",
											"        }",
											"        CouldMantisIssueListBePrinted(true);",
											"    } catch (error) {",
											"        CouldMantisIssueListBePrinted(false);",
											"    }",
											"    ",
											"    // Provided Output Parameters",
											"    pm.variables.set(\"filteredIssueList\", filteredIssueList);",
											"    ",
											"    // Self Testing Functions",
											"    function CouldInputForFilteringMantisIssuesBeLoaded(mantisIssueList, technologyUnderTest, ",
											"                                                            classUnderTest,",
											"                                                            attributeUnderTest) {",
											"        pm.test(\"CouldInputForFilteringMantisIssuesBeLoaded\", function () {",
											"            pm.expect(mantisIssueList).to.be.an(\"array\");",
											"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
											"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(classUnderTest).to.be.a(\"string\");",
											"            pm.expect(classUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"        });",
											"    }",
											"    ",
											"    function CouldMantisIssueListBeFiltered(filteredIssueList) {",
											"        pm.test(\"CouldMantisIssueListBeFiltered\", function () {",
											"            pm.expect(filteredIssueList).to.be.an(\"array\");",
											"        });",
											"    }",
											"        ",
											"    function CouldMantisIssueListBePrinted(success) {",
											"        pm.test(\"CouldMantisIssueListBePrinted\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"PrintMantisIssuesForTechnologyAndClass\", ",
											"                            PRINT_MANTIS_ISSUES_FOR_TECHNOLOGY_AND_CLASS.toString() );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											" * Self Testing Functions",
											" ****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SettingTheRequestVariables()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "bba5df31-a58d-47fc-b83f-002cc3ca5f6b",
										"exec": [
											"console.log(\"\\n------------------Uploading Function for Setting the Request Variables--------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of SettingTheRequestVariables()",
											"* ",
											"* Function for composing and setting of the local variables for GET requests.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const SETTING_THE_REQUEST_VARIABLES = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
											"            ",
											"        var controller = pm.environment.get(\"controller\");",
											"        var dummyUri = pm.environment.get(\"dummyUri\");",
											"        var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
											"            ",
											"        var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
											"        var pacUnderTest = pm.collectionVariables.get(\"pacUnderTest\");",
											"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
											"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
											"            ",
											"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
											"        var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
											"        var keysOfDatatypeInstanceUnderTest = pm.variables.get(\"keysOfDatatypeInstanceUnderTest\");",
											"        var filteredContent = pm.variables.get(\"filteredContent\");",
											"        var filteredDepth = pm.variables.get(\"filteredDepth\");",
											"        var filteredFields = pm.variables.get(\"filteredFields\");",
											"        CouldInputForSettingTheRequestVariablesBeLoaded(attributeUnderTest,",
											"                                                            controller, ",
											"                                                            dummyUri,",
											"                                                            indexOfDeviceUnderTest, ",
											"                                                            indexOfLtpUnderTest,",
											"                                                            pacUnderTest,",
											"                                                            moduleUnderTest,",
											"                                                            technologyUnderTest,",
											"                                                            classUnderTest,",
											"                                                            datatypeUnderTest,",
											"                                                            keysOfDatatypeInstanceUnderTest,",
											"                                                            filteredContent,",
											"                                                            filteredDepth,",
											"                                                            filteredFields",
											"                                                        );",
											"    } catch (error) {",
											"        CouldInputForSettingTheRequestVariablesBeLoaded();",
											"    }",
											"        ",
											"    // Preparing the Request",
											"    try {",
											"        let nodeIds = controller.nodeList[indexOfDeviceUnderTest];",
											"        var idPair;",
											"        switch (technologyUnderTest) {",
											"            case \"air-interface\":",
											"                idPair = nodeIds.airInterfaceList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"ethernet-container\":",
											"                idPair = nodeIds.ethernetContainerList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"hybrid-mw-structure\":",
											"                idPair = nodeIds.hybridMwStructureList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"ip-interface\":",
											"                idPair = nodeIds.ipInterfaceList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"mac-interface\":",
											"                idPair = nodeIds.macInterfaceList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"pure-ethernet-structure\":",
											"                idPair = nodeIds.pureEthernetStructureList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"tdm-container\":",
											"                idPair = nodeIds.tdmContainerList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"vlan-interface\":",
											"                idPair = nodeIds.vlanInterfaceList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"wire-interface\":",
											"                idPair = nodeIds.wireInterfaceList[indexOfLtpUnderTest];",
											"                break;",
											"        }",
											"        CouldIdPairForSettingTheRequestVariablesBeRetrieved(attributeUnderTest, idPair);",
											"    } catch (error) {",
											"        CouldIdPairForSettingTheRequestVariablesBeRetrieved(attributeUnderTest);",
											"    }",
											"        ",
											"    try {",
											"        var objectUnderTest = \"/core-model-1-4:control-construct/logical-termination-point=\" ",
											"                                    + idPair.ltpUuid",
											"                                    + \"/layer-protocol=\" ",
											"                                    + idPair.lpLid",
											"                                    + \"/\"",
											"                                    + pacUnderTest;",
											"        if ( (typeof technologyUnderTest!=\"undefined\") ",
											"                && (technologyUnderTest!==\"\")",
											"                && (classUnderTest!==\"pac\") ) {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"/\"",
											"                                    + technologyUnderTest",
											"                                    + \"-\"",
											"                                    + classUnderTest;",
											"        }",
											"        if ( (typeof datatypeUnderTest!=\"undefined\") && (datatypeUnderTest !== \"\") ) {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"/\"",
											"                                    + datatypeUnderTest;",
											"        }",
											"        if ( (typeof keysOfDatatypeInstanceUnderTest[0].value!=\"undefined\") && (keysOfDatatypeInstanceUnderTest[0].value!==\"\") ) {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"=\"",
											"                                    + ReplaceColonsInside(keysOfDatatypeInstanceUnderTest[0].value);",
											"            for (let i=1; i<keysOfDatatypeInstanceUnderTest.length; i++) {",
											"                objectUnderTest = objectUnderTest",
											"                                    + \",\"",
											"                                    + ReplaceColonsInside(keysOfDatatypeInstanceUnderTest[i].value);",
											"            }",
											"        } ",
											"        if ( (typeof attributeUnderTest!=\"undefined\") && (attributeUnderTest !== \"\") ) {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"/\"",
											"                                    + attributeUnderTest;",
											"        }    ",
											"        let alreadySomeFilterAttached = false;",
											"        if ( (typeof filteredContent!=\"undefined\") ",
											"                && (typeof filteredDepth!=\"undefined\") ",
											"                && (typeof filteredFields!=\"undefined\") ) {",
											"            if (filteredContent !== \"\" || filteredDepth !== 0 || filteredFields !== \"\") {",
											"                objectUnderTest = objectUnderTest",
											"                                        + \"?\";",
											"            }",
											"            if (filteredContent !== \"\") {",
											"                objectUnderTest = objectUnderTest",
											"                                        + \"content=\"",
											"                                        + filteredContent;",
											"                alreadySomeFilterAttached = true;",
											"            }",
											"            if (filteredDepth !== 0) {",
											"                if (alreadySomeFilterAttached) {",
											"                     objectUnderTest = objectUnderTest",
											"                                        + \"&\";",
											"                }",
											"                objectUnderTest = objectUnderTest",
											"                                        + \"depth=\"",
											"                                        + filteredDepth;",
											"                alreadySomeFilterAttached = true;",
											"            }",
											"            if (filteredFields !== \"\") {",
											"                if (alreadySomeFilterAttached) {",
											"                     objectUnderTest = objectUnderTest",
											"                                        + \"&\";",
											"                }",
											"                objectUnderTest = objectUnderTest",
											"                                        + \"fields=\"",
											"                                        + filteredFields;",
											"                alreadySomeFilterAttached = true;",
											"            }",
											"        }",
											"        HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(attributeUnderTest, objectUnderTest);",
											"    } catch (error) {",
											"        HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(attributeUnderTest);",
											"    }",
											"        ",
											"    try {",
											"        var uri = \"http://\" ",
											"                    + controller.controllerAddress ",
											"                    + controller.pathToDbAndMountPoint ",
											"                    + \"/node=\" ",
											"                    + controller.nodeList[indexOfDeviceUnderTest].nodeId ",
											"                    + \"/yang-ext:mount\" ",
											"                    + objectUnderTest;",
											"        HasUriBeenDefinedForSettingTheRequestVariables(attributeUnderTest, uri);",
											"    } catch (error) {",
											"        uri = dummyUri;",
											"        HasUriBeenDefinedForSettingTheRequestVariables(attributeUnderTest);",
											"    }",
											"        ",
											"    pm.variables.set(\"uri\", uri);",
											"    pm.request.headers.upsert({key:\"Authorization\", value:controller.authorizationCode});",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});",
											"        ",
											"    // Functions",
											"    function ReplaceColonsInside(keyAttributeValue) {",
											"        return encodeURIComponent(keyAttributeValue);",
											"    }",
											"",
											"    // Self Testing Functions",
											"    function CouldInputForSettingTheRequestVariablesBeLoaded(attributeUnderTest,",
											"                                                                controller, ",
											"                                                                uri,",
											"                                                                indexOfDeviceUnderTest, ",
											"                                                                indexOfLtpUnderTest,",
											"                                                                pacUnderTest,",
											"                                                                moduleUnderTest,",
											"                                                                technologyUnderTest,",
											"                                                                classUnderTest,",
											"                                                                datatypeUnderTest,",
											"                                                                keysOfDatatypeInstanceUnderTest,",
											"                                                                filteredContent,",
											"                                                                filteredDepth,",
											"                                                                filteredFields) {",
											"        pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldInputForSettingTheRequestVariablesBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(controller).to.be.an(\"object\");",
											"            pm.expect(uri).to.be.a(\"string\");",
											"            pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
											"            pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
											"            pm.expect(pacUnderTest).to.be.a(\"string\");",
											"            pm.expect(pacUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
											"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
											"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(classUnderTest).to.be.a(\"string\");",
											"            pm.expect(classUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(datatypeUnderTest).to.be.a(\"string\");",
											"            pm.expect(keysOfDatatypeInstanceUnderTest).to.be.an(\"array\");",
											"            pm.expect(filteredContent).to.be.a(\"string\");",
											"            pm.expect(filteredDepth).to.be.a(\"number\");",
											"            pm.expect(filteredFields).to.be.a(\"string\");",
											"        });",
											"    }",
											"        ",
											"    function CouldIdPairForSettingTheRequestVariablesBeRetrieved(location, idPair) {",
											"        pm.test(\"CouldIdPairForSettingTheRequestVariablesBeRetrieved (\" + location + \")\", function () {",
											"            pm.expect(idPair.ltpUuid).to.be.a(\"string\");",
											"            pm.expect(idPair.ltpUuid).to.not.have.lengthOf(0);",
											"            pm.expect(idPair.lpLid).to.be.an(\"string\");",
											"            pm.expect(idPair.lpLid).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"    ",
											"    function HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(location, objectUnderTest) {",
											"        pm.test(\"HasObjectUnderTestBeenDefinedForSettingTheRequestVariables (\" + location + \")\", function () {",
											"            pm.expect(objectUnderTest).to.be.a(\"string\");",
											"            pm.expect(objectUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"    ",
											"    function HasUriBeenDefinedForSettingTheRequestVariables(location, uri) {",
											"        pm.test(\"HasUriBeenDefinedForSettingTheRequestVariables (\" + location + \")\", function () {",
											"            pm.expect(uri).to.be.a(\"string\");",
											"            pm.expect(uri).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"SettingTheRequestVariables\", SETTING_THE_REQUEST_VARIABLES.toString() );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											" ",
											"/****************************************************************************************",
											" * Self Testing Functions",
											" ****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CommentingResponse()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3a0b7f65-5ae1-4538-835b-86fcf9b3a7cb",
										"exec": [
											"console.log(\"\\n--------------------Uploading Function for Commenting GET Responses-----------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of CommentingGetResponse()",
											"* ",
											"* Function for creating a result statement on the console.log based on the Response ",
											"* Code of a GET Request.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const COMMENTING_RESPONSE = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var controller = pm.environment.get(\"controller\");",
											"        var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
											"            ",
											"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
											"            ",
											"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
											"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
											"        var positiveOutcome = pm.variables.get(\"positiveOutcome\");",
											"        var negativeOutcome = pm.variables.get(\"negativeOutcome\");",
											"        var response = pm.variables.get(\"response\");",
											"        CouldInputForCommentingResponseBeLoaded(controller, indexOfDeviceUnderTest,",
											"                                                            technologyUnderTest,",
											"                                                            classUnderTest,",
											"                                                            attributeUnderTest,",
											"                                                            positiveOutcome,",
											"                                                            negativeOutcome,",
											"                                                            response",
											"                                                );",
											"    } catch (error) {",
											"        CouldInputForCommentingResponseBeLoaded();",
											"    }",
											"        ",
											"    // Typing the comment",
											"    try {",
											"        let nameOfTheDeviceUnderTest = controller.nodeList[indexOfDeviceUnderTest].nodeId;",
											"        let objectUnderTest = technologyUnderTest + \"-\" + classUnderTest;",
											"        let responseCode = parseInt(response.code);",
											"        if (attributeUnderTest!==\"\") {",
											"            objectUnderTest = objectUnderTest",
											"                                + \"::\"",
											"                                + attributeUnderTest;",
											"        }",
											"        ",
											"        if (Math.floor(responseCode/100) === 2) {",
											"            console.log(objectUnderTest + \" at \" + nameOfTheDeviceUnderTest + positiveOutcome);",
											"        } else {",
											"            console.log(\" ERROR: \" + objectUnderTest + \" at \" + nameOfTheDeviceUnderTest ",
											"                                + negativeOutcome + \" Response Code: \" + pm.response.code);",
											"        }",
											"        CouldCommentBeComposedandPrinted(nameOfTheDeviceUnderTest, objectUnderTest);",
											"    } catch (error) {",
											"        CouldCommentBeComposedandPrinted();",
											"    }",
											"        ",
											"    // Self Testing Functions",
											"    function CouldInputForCommentingResponseBeLoaded(controller, indexOfDeviceUnderTest,",
											"                                                            technologyUnderTest,",
											"                                                            classUnderTest,",
											"                                                            attributeUnderTest,",
											"                                                            positiveOutcome,",
											"                                                            negativeOutcome,",
											"                                                            response) {",
											"        pm.test(\"CouldEnvironmentForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(controller).to.be.a(\"object\");",
											"        });",
											"        pm.test(\"CouldIndexOfDeviceForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"CouldTechnologyUnderTestForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
											"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldClassUnderTestForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(classUnderTest).to.be.a(\"string\");",
											"            pm.expect(classUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldAttributeUnderTestForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldPositiveOutcomeForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(positiveOutcome).to.be.a(\"string\");",
											"            pm.expect(positiveOutcome).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldNegativeOutcomeForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(negativeOutcome).to.be.a(\"string\");",
											"            pm.expect(negativeOutcome).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldResponseForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(response).to.be.a(\"object\");",
											"        });",
											"    }",
											"    function CouldCommentBeComposedandPrinted(nameOfTheDeviceUnderTest, objectUnderTest) {",
											"        pm.test(\"CouldCommentBeComposedandPrinted\", function () {",
											"            pm.expect(nameOfTheDeviceUnderTest).to.be.a(\"string\");",
											"            pm.expect(nameOfTheDeviceUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(objectUnderTest).to.be.a(\"string\");",
											"            pm.expect(objectUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"CommentingResponse\", COMMENTING_RESPONSE.toString() );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											" * Self Testing Functions",
											" ****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Completeness()",
					"item": [
						{
							"name": "RemoveAttributeFromRequired()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d2f71506-6071-4c6b-9f2b-1f648ef09cad",
										"exec": [
											"console.log(\"\\n----------------Uploading Function for Shortening the Reference Schema--------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of RemoveAttributeFromRequired()",
											"* ",
											"* Function for removing some attribute from the list of required attributes in the ",
											"* reference schema.",
											"* ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const REMOVE_ATTRIBUTE_FROM_REQUIRED = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var schemaToBeShortened = pm.variables.get(\"schemaToBeShortened\");",
											"        var unRequiredAttribute = pm.variables.get(\"unRequiredAttribute\");",
											"        CouldInputForRemoveAttributeFromRequiredBeLoaded(schemaToBeShortened, unRequiredAttribute);",
											"    } catch (error) {",
											"        CouldInputForRemoveAttributeFromRequiredBeLoaded();",
											"    }",
											"        ",
											"    // Removing the Attribute from Required",
											"    try {",
											"        unRequiredAttribute = '\"' + unRequiredAttribute + '\"';",
											"        let schemaString = JSON.stringify(schemaToBeShortened);",
											"        let indexOfStartOfSubStringToBeDeleted = schemaString.lastIndexOf(unRequiredAttribute);",
											"        let precedingSubString = schemaString.slice(0, indexOfStartOfSubStringToBeDeleted);",
											"        const COMMA = 1;",
											"        let indexOfEndOfSubStringToBeDeleted = indexOfStartOfSubStringToBeDeleted + unRequiredAttribute.length + COMMA;",
											"        let subsequentSubString = schemaString.slice(indexOfEndOfSubStringToBeDeleted);",
											"        schemaString = precedingSubString + subsequentSubString;",
											"        var shortenedSchema = JSON.parse(schemaString);",
											"        CouldTheAttributeBeRemovedFromRequired(shortenedSchema);",
											"    } catch (error) {",
											"        CouldTheAttributeBeRemovedFromRequired();",
											"    }    ",
											"        ",
											"    // Provided Output Parameters",
											"    pm.variables.set(\"shortenedSchema\", shortenedSchema);",
											"    ",
											"    // Self Testing Functions",
											"    function CouldInputForRemoveAttributeFromRequiredBeLoaded(schemaToBeShortened, unRequiredAttribute) {",
											"        pm.test(\"CouldInputForRemoveAttributeFromRequiredBeLoaded\", function () {",
											"            pm.expect(schemaToBeShortened).to.be.a(\"object\");",
											"            pm.expect(unRequiredAttribute).to.be.a(\"string\");",
											"            pm.expect(unRequiredAttribute).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"    ",
											"    function CouldTheAttributeBeRemovedFromRequired(shortenedSchema) {",
											"        pm.test(\"CouldTheAttributeBeRemovedFromRequired\", function () {",
											"            pm.expect(shortenedSchema).to.be.an(\"object\");",
											"        });",
											"    }    ",
											"};",
											"pm.environment.set( \"RemoveAttributeFromRequired\", REMOVE_ATTRIBUTE_FROM_REQUIRED.toString() );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											" * Self Testing Functions",
											" ****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ValidatingCompleteness()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "032dad55-7cdc-48e1-9bf7-c7bda50a64d9",
										"exec": [
											"console.log(\"\\n---------------------Uploading Function for Validating Completeness-----------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of ValidatingCompleteness()",
											"* ",
											"* Function for Validating the uploaded device response against a reference schema.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const VALIDATING_COMPLETENESS = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var controller = pm.environment.get(\"controller\");",
											"        var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
											"        var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
											"        var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
											"            ",
											"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
											"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
											"",
											"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
											"        var reference = pm.variables.get(\"schema\");",
											"        var response = pm.variables.get(\"response\");",
											"        CouldInputForValidatingCompletenessBeLoaded(controller, mantisInterfaceStatus, ",
											"                                                        indexOfDeviceUnderTest, ",
											"                                                        moduleUnderTest, ",
											"                                                        technologyUnderTest, ",
											"                                                        PrintMantisIssuesForTechnologyAndClass, ",
											"                                                        classUnderTest, ",
											"                                                        reference,",
											"                                                        response);",
											"    } catch (error) {",
											"        CouldInputForValidatingCompletenessBeLoaded();",
											"    }",
											"",
											"    // Validating Completeness",
											"    try {",
											"        var nameOfTheDeviceUnderTest = controller.nodeList[indexOfDeviceUnderTest].nodeId;",
											"        var objectUnderTest = technologyUnderTest + \"-\" + classUnderTest;",
											"        CouldLocalVariablesBeRetrieved(nameOfTheDeviceUnderTest, objectUnderTest);",
											"    } catch (error) {",
											"        CouldLocalVariablesBeRetrieved();",
											"    }",
											"        ",
											"    try {",
											"        if (response.code == 200) {",
											"            var objectInclHeadline = response.json();",
											"            var object = objectInclHeadline[moduleUnderTest + \":\" + technologyUnderTest + \"-\" + classUnderTest];",
											"            console.log(objectUnderTest + \" at \" + nameOfTheDeviceUnderTest + \" could be retrieved:\");",
											"            console.log(object);",
											"            ",
											"            console.log(objectUnderTest + \" Reference:\");               ",
											"            console.log(reference);                                     ",
											"            ",
											"            console.log(objectUnderTest + \" at \" + nameOfTheDeviceUnderTest + \" Validation Result: \");",
											"            console.log(tv4.validateMultiple(object, reference, true, true));",
											"        } else {",
											"            console.log(\" ERROR: \" + objectUnderTest + \" at \" + nameOfTheDeviceUnderTest ",
											"                            + \" could not be retrieved. Response Code: \" + response.code);",
											"        }",
											"        CouldValidationBeExecuted(true);",
											"    } catch (error) {",
											"        CouldValidationBeExecuted(false);",
											"    }",
											"        ",
											"    try {",
											"        if (mantisInterfaceStatus===\"read-only\") {",
											"            eval(PrintMantisIssuesForTechnologyAndClass)();",
											"            CouldMantisIssuesBeListed(true);",
											"        }",
											"    } catch (error) {",
											"        CouldMantisIssuesBeListed(false);",
											"    }",
											"",
											"    // Self Testing Functions",
											"    function CouldInputForValidatingCompletenessBeLoaded(controller, mantisInterfaceStatus, ",
											"                                                            indexOfDeviceUnderTest, ",
											"                                                            moduleUnderTest, ",
											"                                                            technologyUnderTest, ",
											"                                                            PrintMantisIssuesForTechnologyAndClass, ",
											"                                                            classUnderTest, ",
											"                                                            reference,",
											"                                                            response) {",
											"        pm.test(\"CouldControllerBeLoaded\", function () {",
											"            pm.expect(controller).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldMantisInterfaceStatusBeLoaded\", function () {",
											"            pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
											"        });",
											"        pm.test(\"CouldIndexOfDeviceUnderTestBeLoaded\", function () {            ",
											"            pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"CouldModuleUnderTestBeLoaded\", function () {            ",
											"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
											"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
											"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
											"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldPrintMantisIssuesForTechnologyAndClassBeLoaded\", function () {",
											"            pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
											"            pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
											"            pm.expect(classUnderTest).to.be.a(\"string\");",
											"            pm.expect(classUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldReferenceBeLoaded\", function () {",
											"            pm.expect(reference).to.be.a(\"object\");",
											"            pm.expect(response).to.be.a(\"object\");",
											"        });",
											"    }",
											"        ",
											"    function CouldLocalVariablesBeRetrieved(nameOfTheDeviceUnderTest, objectUnderTest) {",
											"        pm.test(\"CouldLocalVariablesBeRetrieved\", function () {",
											"            pm.expect(nameOfTheDeviceUnderTest).to.be.a(\"string\");",
											"            pm.expect(nameOfTheDeviceUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(objectUnderTest).to.be.a(\"string\");",
											"            pm.expect(objectUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"        ",
											"    function CouldValidationBeExecuted(success) {",
											"        pm.test(\"CouldValidationBeExecuted\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"        ",
											"    function CouldMantisIssuesBeListed(success) {",
											"        pm.test(\"CouldMantisIssuesBeListed\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"ValidatingCompleteness\", VALIDATING_COMPLETENESS.toString() );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											" * Self Testing Functions",
											" ****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Configuration()",
					"item": [
						{
							"name": "PreRequestOfWriting()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "93f5985c-35e6-4058-afc0-a658852c665c",
										"exec": [
											"console.log(\"\\n-----------Defining standard Pre-Request for Writing in Configuration Validation----------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of PreRequestOfWriting()",
											"* ",
											"* Entire Pre-Request Script of the Writing Request in all Configuration Validations.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"        ",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const PRE_REQUEST_OF_WRITING = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        pm.variables.clear();",
											"            ",
											"        var indexOfAttributeUnderTest =  pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
											"",
											"        var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
											"            ",
											"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
											"        var capability = pm.collectionVariables.get(\"capability\");",
											"        var configuration = pm.collectionVariables.get(\"configuration\");",
											"        var status = pm.collectionVariables.get(\"status\");",
											"        var attributes = pm.collectionVariables.get(\"attributes\");",
											"            ",
											"        CouldInputBeLoaded(indexOfAttributeUnderTest,",
											"                                SettingTheRequestVariables, ",
											"                                moduleUnderTest, ",
											"                                capability, ",
											"                                configuration, ",
											"                                status,",
											"                                attributes",
											"                           );",
											"    } catch (error) {",
											"        CouldInputBeLoaded(indexOfAttributeUnderTest);",
											"    }",
											"        ",
											"    // CASE SPECIFIC Parameters",
											"    try {",
											"        eval(attributes[indexOfAttributeUnderTest].CreatingDummyValueAsaString);",
											"        CouldCreatingDummyValueBeExecuted(indexOfAttributeUnderTest, true);",
											"    } catch (error) {",
											"        CouldCreatingDummyValueBeExecuted(indexOfAttributeUnderTest, false);",
											"    }",
											"        ",
											"    // Determining the Request Body",
											"    try {",
											"        var CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
											"                                                    // \"status\", \"current-problems\", \"current-performance\" ",
											"                                                    // or \"historical-performances\"",
											"            ",
											"        var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
											"        var FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
											"        var FILTERED_FIELDS = \"\";",
											"        var requestBody = '{ \"'",
											"                            + moduleUnderTest",
											"                            + ':'",
											"                            + ATTRIBUTE_UNDER_TEST",
											"                            + '\": ';",
											"        if (typeof dummyValue === \"string\") {",
											"            requestBody = requestBody",
											"                            + '\"'",
											"                            + dummyValue",
											"                            + '\" }';",
											"        } else {",
											"            requestBody = requestBody",
											"                            + dummyValue",
											"                            + ' }'; ",
											"        }",
											"        AreValuesOfInputParametersCorrect(ATTRIBUTE_UNDER_TEST, ",
											"                                            CLASS_UNDER_TEST, ",
											"                                            DATATYPE_UNDER_TEST, ",
											"                                            KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST,",
											"                                            CONTENT_TYPE, ",
											"                                            FILTER_DEPTH, ",
											"                                            FILTERED_FIELDS, ",
											"                                            requestBody",
											"                                          );",
											"    } catch (error) {",
											"        AreValuesOfInputParametersCorrect(ATTRIBUTE_UNDER_TEST);",
											"    }",
											"        ",
											"    // Setting Local Variables and Calling for Preparation of the Request",
											"    pm.variables.clear();",
											"        ",
											"    let dummyValueString = JSON.stringify(dummyValue);",
											"    console.log(\"DummyValue: \" + dummyValueString);",
											"        ",
											"    pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
											"    pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
											"    pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
											"    pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
											"    pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
											"    pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
											"    pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
											"    pm.variables.set(\"requestBody\", requestBody);",
											"    pm.variables.set(\"dummyValueString\", dummyValueString);",
											"        ",
											"    try {",
											"        eval(SettingTheRequestVariables)();",
											"        CouldFunctionForSettingTheRequestVariablesBeCalled(ATTRIBUTE_UNDER_TEST, true);",
											"    } catch (error) {",
											"        CouldFunctionForSettingTheRequestVariablesBeCalled(ATTRIBUTE_UNDER_TEST, false);",
											"    }",
											"        ",
											"    //Self Testing Functions",
											"    function CouldInputBeLoaded(indexOfAttributeUnderTest, ",
											"                                    SettingTheRequestVariables, ",
											"                                    moduleUnderTest, ",
											"                                    capability, ",
											"                                    configuration, ",
											"                                    status,",
											"                                    attributes) {",
											"        pm.test(\"CouldIndexOfAttributeUnderTestBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
											"        });   ",
											"        pm.test(\"CouldSettingTheRequestVariablesBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
											"            pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldModuleUnderTestBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
											"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldCapabilityBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(capability).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldConfigurationBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(configuration).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldStatusBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(status).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldAttributesBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(attributes).to.be.an(\"array\");",
											"        });        ",
											"    }",
											"        ",
											"    function CouldCreatingDummyValueBeExecuted(location, success) {",
											"        pm.test(\"CouldCreatingDummyValueBeExecuted (\" + location + \")\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"        ",
											"    function AreValuesOfInputParametersCorrect(attributeUnderTest, ",
											"                                                classUnderTest, ",
											"                                                datatypeUnderTest, ",
											"                                                keysOfDatatypeInstanceUnderTest, ",
											"                                                contentType, ",
											"                                                filteredDepth, ",
											"                                                filteredFields, ",
											"                                                requestBody) {",
											"        pm.test(\"IsValueOfAttributeUnderTestCorrect (\" + attributeUnderTest + \")\", function() {",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"            pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"IsValueOfClassUnderTestCorrect (\" + attributeUnderTest + \")\", function() {",
											"            pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
											"                                                    \"current-problems\", \"current-performance\",",
											"                                                    \"historical-performances\"]);",
											"        });",
											"        pm.test(\"IsValueOfDatatypeUnderTestCorrect (\" + attributeUnderTest + \")\", function() {",
											"            pm.expect(datatypeUnderTest).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect (\" + attributeUnderTest + \")\", function() {",
											"            pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
											"        });",
											"        pm.test(\"IsValueOfContentTypeCorrect (\" + attributeUnderTest + \")\", function() {",
											"            pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
											"        });",
											"        pm.test(\"IsValueOfFilteredDepthCorrect (\" + attributeUnderTest + \")\", function() {",
											"            pm.expect(filteredDepth).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"IsValueOfFilteredFieldsCorrect (\" + attributeUnderTest + \")\", function() {",
											"            pm.expect(filteredFields).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"IsValueOfRequestBodyCorrect (\" + attributeUnderTest + \")\", function() {",
											"            pm.expect(requestBody).to.be.a(\"string\");",
											"            pm.expect(requestBody).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"        ",
											"    function CouldFunctionForSettingTheRequestVariablesBeCalled(location, success) {",
											"        pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled (\" + location + \")\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"PreRequestOfWritingAsaString\", ConvertingThisFunctionToString(PRE_REQUEST_OF_WRITING) );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"function ConvertingThisFunctionToString(functionToBeConverted) {",
											"    let functionAsAString = String(functionToBeConverted);",
											"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
											"    return functionAsAString.slice(indexOfFirstCurly);",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Self Testing Functions",
											"****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PreRequestOfReading()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4eb35f9b-78fe-4aac-8c1e-6ffdff177562",
										"exec": [
											"console.log(\"\\n-----------Defining standard Pre-Request for Reading in Configuration Validation----------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of PreRequestOfReading()",
											"* ",
											"* Entire Pre-Request Script of the Reading Request in all Configuration Validations.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"        ",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const PRE_REQUEST_OF_READING = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
											"        CouldInputBeLoaded(SettingTheRequestVariables);",
											"    } catch (error) {",
											"        CouldInputBeLoaded();",
											"    }",
											"        ",
											"    // Setting Local Variables and Calling for Preparation of the Request",
											"    const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
											"    const REQUEST_BODY = \"\";",
											"        ",
											"    AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
											"        ",
											"    pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
											"    pm.variables.set(\"requestBody\", REQUEST_BODY);",
											"        ",
											"    try {",
											"        eval(SettingTheRequestVariables)();",
											"        CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
											"    } catch (error) {",
											"        CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
											"    }",
											"        ",
											"    // Self Testing Functions",
											"    function CouldInputBeLoaded(SettingTheRequestVariables) {",
											"        pm.test(\"CouldInputBeLoaded\", function () {",
											"            pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
											"            pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"        ",
											"    function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
											"        pm.test(\"IsValueOfContentTypeCorrect\", function() {",
											"            pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
											"        });",
											"        pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
											"            pm.expect(requestBody).to.be.a(\"string\");",
											"        });",
											"    }",
											"        ",
											"    function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
											"        pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"PreRequestOfReadingAsaString\", ConvertingThisFunctionToString(PRE_REQUEST_OF_READING) );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"function ConvertingThisFunctionToString(functionToBeConverted) {",
											"    let functionAsAString = String(functionToBeConverted);",
											"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
											"    return functionAsAString.slice(indexOfFirstCurly);",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Self Testing Functions",
											"****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PostRequestOfReading()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9d479010-0f99-4fb9-af21-5f745b85cca8",
										"exec": [
											"console.log(\"\\n----------Defining standard Post-Request for Reading in Configuration Validation----------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of PostRequestOfReading()",
											"* ",
											"* Entire Post-Request Script of the Reading Request in all Configuration Validations.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"        ",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const POST_REQUEST_OF_READING = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
											"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
											"        CouldInputForGetResultValueBeLoaded(attributeUnderTest, moduleUnderTest);",
											"    } catch (error) {",
											"        CouldInputForGetResultValueBeLoaded();",
											"    }",
											"        ",
											"    // Retrieving ResultValue",
											"    try {",
											"        let response = pm.response;",
											"            ",
											"        var responseCode = parseInt(response.code);",
											"            ",
											"        let responseBody = JSON.parse(response.stream);",
											"        let completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
											"        let responseValue = responseBody[completeAttributeName];",
											"        var responseValueString = JSON.stringify(responseValue);",
											"        console.log(\"ResultValue: \" + responseValueString);",
											"            ",
											"        CouldResponseBeRetrieved(attributeUnderTest, responseValueString, responseCode);",
											"    } catch (error) {",
											"        CouldResponseBeRetrieved(attributeUnderTest, responseValueString, responseCode);",
											"    }",
											"        ",
											"    // Setting Local Variables",
											"    pm.variables.set(\"resultValueString\", responseValueString);",
											"    pm.variables.set(\"resultCode\", responseCode);",
											"        ",
											"    // Self Testing Functions",
											"    function CouldInputForGetResultValueBeLoaded(attributeUnderTest, moduleUnderTest) {",
											"        pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"            pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldModuleUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
											"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"        ",
											"    function CouldResponseBeRetrieved(location, responseValueString, responseCode) {",
											"        pm.test(\"CouldResponseValueStringBeRetrieved (\" + location + \")\", function () {",
											"            pm.expect(responseValueString).to.be.a(\"string\");",
											"            pm.expect(responseValueString).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldResponseCodeBeRetrieved (\" + location + \")\", function () {",
											"            pm.expect(responseCode).to.be.a(\"number\");",
											"        });",
											"    }   ",
											"};",
											"pm.environment.set( \"PostRequestOfReadingAsaString\", ConvertingThisFunctionToString(POST_REQUEST_OF_READING) );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"function ConvertingThisFunctionToString(functionToBeConverted) {",
											"    let functionAsAString = String(functionToBeConverted);",
											"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
											"    return functionAsAString.slice(indexOfFirstCurly);",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Self Testing Functions",
											"****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PreRequestOfEvaluating()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "14a992ea-962a-4bbe-9d1b-ecf43571bcc7",
										"exec": [
											"console.log(\"\\n---------Defining standard Pre-Request for Evaluating in Configuration Validation---------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of PreRequestOfEvaluating()",
											"* ",
											"* Entire Pre-Request Script of the Evaluating Request in all Configuration Validations.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"        ",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const PRE_REQUEST_OF_EVALUATING = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
											"            ",
											"        var dummyUri = pm.environment.get(\"dummyUri\");",
											"        var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
											"        var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
											"            ",
											"        var responseCodeForOperationFailed = pm.collectionVariables.get(\"responseCodeForOperationFailed\");",
											"        var capability = pm.collectionVariables.get(\"capability\");",
											"        var configuration = pm.collectionVariables.get(\"configuration\");",
											"        var status = pm.collectionVariables.get(\"status\");",
											"        var attributes = pm.collectionVariables.get(\"attributes\");",
											"        var indexOfAttributeUnderTest =  pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
											"        var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
											"            ",
											"        var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
											"        var keysOfDatatypeInstanceUnderTest = pm.variables.get(\"keysOfDatatypeInstanceUnderTest\");",
											"            ",
											"        var dummyValueString = pm.variables.get(\"dummyValueString\");",
											"        var dummyCode = pm.variables.get(\"dummyCode\");",
											"        var dummyErrorMessage = pm.variables.get(\"dummyErrorMessage\"); ",
											"        var resultValueString = pm.variables.get(\"resultValueString\");",
											"        var resultCode = pm.variables.get(\"resultCode\");",
											"            ",
											"        if ( (datatypeUnderTest===undefined) || (datatypeUnderTest===\"\") ) {",
											"            var NameOfAttributeUnderTest = attributeUnderTest;",
											"        } else {",
											"            var NameOfAttributeUnderTest = datatypeUnderTest + \"/\" + attributeUnderTest;",
											"        }",
											"    } catch (error) { }",
											"    CouldTheInputBeLoaded(attributeUnderTest,",
											"                            dummyUri, ",
											"                            mantisInterfaceStatus, ",
											"                            PrintMantisIssuesForTechnologyAndClass,",
											"                            responseCodeForOperationFailed,",
											"                            capability,",
											"                            configuration,",
											"                            status,",
											"                            attributes,",
											"                            indexOfAttributeUnderTest,",
											"                            configurationValidationResults,",
											"                            datatypeUnderTest,",
											"                            keysOfDatatypeInstanceUnderTest,",
											"                            dummyValueString,",
											"                            dummyCode,",
											"                            dummyErrorMessage,",
											"                            resultValueString,",
											"                            resultCode,",
											"                            NameOfAttributeUnderTest",
											"                         );",
											"        ",
											"    // CASE SPECIFIC Parameters",
											"    try {",
											"        var aCaseSpecificEvaluationHasBeenDefined;",
											"        if ( attributes[indexOfAttributeUnderTest].EvaluatingResultAsaString === \"{}\" ) {",
											"            aCaseSpecificEvaluationHasBeenDefined = false;",
											"        } else {",
											"            aCaseSpecificEvaluationHasBeenDefined = true;",
											"        }",
											"        ",
											"        var defaultValueString = \"\";",
											"        try {",
											"            defaultValueString ",
											"                = JSON.stringify(attributes[indexOfAttributeUnderTest].defaultValueForStandardEvaluation);",
											"        } catch (error) { }",
											"        ",
											"        var capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
											"        var capabilitiesAreIndicatingThatFeatureNotSupported = true;",
											"        try {",
											"            capabilityAttributeToBeFalseIfFeatureNotSupported ",
											"                = attributes[indexOfAttributeUnderTest].capabilityAttributeToBeFalseIfFeatureNotSupported;",
											"                ",
											"            console.log(\"capabilityAttributeToBeFalseIfFeatureNotSupported: \" + capabilityAttributeToBeFalseIfFeatureNotSupported);  // for debugging only",
											"            ",
											"            if ( capabilityAttributeToBeFalseIfFeatureNotSupported !== \"\" ) {",
											"                if ( capability[capabilityAttributeToBeFalseIfFeatureNotSupported] === false) {",
											"                    capabilitiesAreIndicatingThatFeatureNotSupported = true;",
											"                } else {",
											"                    capabilitiesAreIndicatingThatFeatureNotSupported = false;",
											"                }",
											"            }",
											"        } catch (error) { }",
											"            ",
											"        if ( aCaseSpecificEvaluationHasBeenDefined === true ) {",
											"            ",
											"            console.log(\"case specific evaluation is available for \" + NameOfAttributeUnderTest);       // for debugging only",
											"            ",
											"            eval(attributes[indexOfAttributeUnderTest].EvaluatingResultAsaString);",
											"            ",
											"        } else {",
											"            ",
											"            console.log(\"standard evaluation will be executed for \" + NameOfAttributeUnderTest);       // for debugging only",
											"            ",
											"            if ( Math.floor(resultCode/100) === 2 ) {",
											"                ",
											"                if ( (Math.floor(dummyCode/100)===2) && (resultValueString===dummyValueString) ) {",
											"                    configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
											"                    ",
											"                } else if ( dummyCode === responseCodeForOperationFailed ) {",
											"console.log(\"ErrorMessageIsIndicatingANotSupported(dummyErrorMessage): \" + ErrorMessageIsIndicatingANotSupported(dummyErrorMessage));       // for debugging only",
											"console.log(\"capabilitiesAreIndicatingThatFeatureNotSupported: \" + capabilitiesAreIndicatingThatFeatureNotSupported);       // for debugging only",
											"console.log(\"resultValueString===defaultValueString: \" + (resultValueString===defaultValueString));       // for debugging only",
											"                    if ( (ErrorMessageIsIndicatingANotSupported(dummyErrorMessage)===true) ",
											"                            && (capabilitiesAreIndicatingThatFeatureNotSupported===true)",
											"                            && (resultValueString===defaultValueString) ) {",
											"                        configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
											"                        ",
											"                    } else if ( ErrorMessageIsIndicatingADummyOutOfRange(dummyErrorMessage) === true ) {",
											"                        configurationValidationResults[NameOfAttributeUnderTest] = \"dummyValue out of hardware range\";",
											"                        ",
											"                    } else if ( ErrorMessageIsIndicatingAContradictingDummy(dummyErrorMessage) === true ) {",
											"                        configurationValidationResults[NameOfAttributeUnderTest] = \"dummyValue contradicts existing configuration\";",
											"                        ",
											"                    } else {",
											"                        configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable on application layer\";",
											"                    }",
											"                    ",
											"                } else {",
											"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable on server layer\";",
											"                }",
											"                ",
											"            } else {",
											"                configurationValidationResults[NameOfAttributeUnderTest] = \"not existing\";",
											"            }",
											"        }",
											"            ",
											"        CouldResultEvaluationBeExecuted(attributeUnderTest, ",
											"                                            resultCode, ",
											"                                            dummyCode, ",
											"                                            resultValueString, ",
											"                                            dummyValueString,",
											"                                            dummyErrorMessage,",
											"                                            defaultValueString, ",
											"                                            configurationValidationResults[NameOfAttributeUnderTest]",
											"                                        );",
											"    } catch (error) {",
											"        CouldResultEvaluationBeExecuted(attributeUnderTest);",
											"    }    ",
											"        ",
											"    // console.log",
											"    console.log(\"EvaluationResult: \" + configurationValidationResults[NameOfAttributeUnderTest]);",
											"        ",
											"    try {",
											"        if (mantisInterfaceStatus===\"read-only\") {",
											"            eval(PrintMantisIssuesForTechnologyAndClass)();",
											"            CouldMantisIssuesBeListed(attributeUnderTest, true);",
											"        }",
											"    } catch (error) {",
											"        CouldMantisIssuesBeListed(attributeUnderTest, false);",
											"    }",
											"        ",
											"    // Output provided to the Collection Variables",
											"    pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
											"        ",
											"    // Setting up Local Variables and Preparing the Request",
											"    try {",
											"        pm.variables.set(\"uri\", dummyUri);",
											"        pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"        CouldTheRequestBePrepared(attributeUnderTest, true);",
											"    } catch (error) {",
											"        CouldTheRequestBePrepared(attributeUnderTest, false);",
											"    }",
											"    ",
											"    // Functions",
											"    function DistillingOnfErrorMessageFrom(dummyErrorMessage) {",
											"        let indexOfStartTag = dummyErrorMessage.indexOf(\"#[onf:\");",
											"        let indexOfEndTag = dummyErrorMessage.indexOf(\"]#\");",
											"        return dummyErrorMessage.slice(indexOfStartTag+6, indexOfEndTag);",
											"    }",
											"        ",
											"    function ErrorMessageIsIndicatingANotSupported(dummyErrorMessage) {",
											"        ",
											"        return true;            // to be deleted after 20th of May 2020",
											"        ",
											"        onfErrorMessage = DistillingOnfErrorMessageFrom(dummyErrorMessage);",
											"        if ( onfErrorMessage === \"Attribute/feature not supported by the hardware.\" ) {",
											"            return true;",
											"        } else {",
											"            return false;",
											"        }",
											"    }",
											"        ",
											"    function ErrorMessageIsIndicatingADummyOutOfRange() {",
											"        onfErrorMessage = DistillingOnfErrorMessageFrom(dummyErrorMessage);",
											"        if ( onfErrorMessage === \"Configuration value out of range of hardware capabilities.\" ) {",
											"            return true;",
											"        } else {",
											"            return false;",
											"        }",
											"    }",
											"        ",
											"    function ErrorMessageIsIndicatingAContradictingDummy() {",
											"        onfErrorMessage = DistillingOnfErrorMessageFrom(dummyErrorMessage);",
											"        if ( onfErrorMessage === \"Wished change contradicts existing configuration.\" ) {",
											"            return true;",
											"        } else {",
											"            return false;",
											"        }",
											"    }",
											"        ",
											"    // Self Testing Functions",
											"    function CouldTheInputBeLoaded(attributeUnderTest,",
											"                                        dummyUri, ",
											"                                        mantisInterfaceStatus, ",
											"                                        PrintMantisIssuesForTechnologyAndClass,",
											"                                        responseCodeForOperationFailed,",
											"                                        capability,",
											"                                        configuration,",
											"                                        status,",
											"                                        attributes,",
											"                                        indexOfAttributeUnderTest,",
											"                                        configurationValidationResults,",
											"                                        datatypeUnderTest,",
											"                                        keysOfDatatypeInstanceUnderTest,",
											"                                        dummyValueString,",
											"                                        dummyCode,",
											"                                        dummyErrorMessage,",
											"                                        resultValueString,",
											"                                        resultCode,",
											"                                        NameOfAttributeUnderTest) {",
											"        pm.test(\"CouldTheAttributeUnderTestBeLoaded\", function () {",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"            pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTheDummyUriBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(dummyUri).to.be.a(\"string\");",
											"            pm.expect(dummyUri).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTheMantisInterfaceStatusBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
											"        });",
											"        pm.test(\"CouldPrintMantisIssuesForTechnologyAndClassBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
											"            pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTheResponseCodeForOperationFailedBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(responseCodeForOperationFailed).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"CouldTheCapabilityBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(capability).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldTheConfigurationBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(configuration).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldTheStatusBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(status).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldAttributesBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(attributes).to.be.an(\"array\");",
											"        }); ",
											"        pm.test(\"CouldIndexOfAttributeUnderTestBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
											"        });    ",
											"        pm.test(\"CouldTheConfigurationValidationResultsBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(configurationValidationResults).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldTheDatatypeUnderTestBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(datatypeUnderTest).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldTheKeysOfDatatypeInstanceUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(keysOfDatatypeInstanceUnderTest).to.be.an(\"array\");",
											"        });",
											"        pm.test(\"CouldTheDummyValueStringBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(dummyValueString).to.be.a(\"string\");",
											"            pm.expect(dummyValueString).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTheDummyCodeBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(dummyCode).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"CouldTheDummyErrorMessageBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(dummyErrorMessage).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldTheResultValueStringBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(resultValueString).to.be.a(\"string\");",
											"            pm.expect(resultValueString).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTheResultCodeBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(resultCode).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"CouldTheNameOfAttributeUnderTestBeCombined (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(NameOfAttributeUnderTest).to.be.a(\"string\");",
											"            pm.expect(NameOfAttributeUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"        ",
											"    function CouldResultEvaluationBeExecuted(location,",
											"                                                resultCode, ",
											"                                                dummyCode, ",
											"                                                resultValueString, ",
											"                                                dummyValueString, ",
											"                                                dummyErrorMessage,",
											"                                                defaultValueString, ",
											"                                                configurationValidationResult",
											"                                            ) {",
											"        pm.test(\"WasResultCodeAvailable (\" + location + \")\", function () {",
											"            pm.expect(resultCode).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"WasDummyCodeAvailable (\" + location + \")\", function () {",
											"            pm.expect(dummyCode).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"WasResultValueStringAvailable (\" + location + \")\", function () {",
											"            pm.expect(resultValueString).to.be.a(\"string\");",
											"            pm.expect(resultValueString).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"WasDummyValueStringAvailable (\" + location + \")\", function () {",
											"            pm.expect(dummyValueString).to.be.a(\"string\");",
											"            pm.expect(dummyValueString).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"WasDummyErrorMessageAvailable (\" + location + \")\", function () {            ",
											"            pm.expect(dummyErrorMessage).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"WasDefaultValueStringAvailable (\" + location + \")\", function () {            ",
											"            pm.expect(defaultValueString).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldConfigurationValidationResultBeCalculated (\" + location + \")\", function () {            ",
											"            pm.expect(configurationValidationResult).to.be.a(\"string\");",
											"            pm.expect(configurationValidationResult).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"        ",
											"    function CouldMantisIssuesBeListed(location, success) {",
											"        pm.test(\"CouldMantisIssuesBeListed (\" + location + \")\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"        ",
											"    function CouldTheRequestBePrepared(location, success) {",
											"        pm.test(\"CouldTheRequestBePrepared (\" + location + \")\", function () {",
											"            pm.expect(success).to.be.true;",
											"            pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"            pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"PreRequestOfEvaluatingAsaString\", ConvertingThisFunctionToString(PRE_REQUEST_OF_EVALUATING) );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"function ConvertingThisFunctionToString(functionToBeConverted) {",
											"    let functionAsAString = String(functionToBeConverted);",
											"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
											"    return functionAsAString.slice(indexOfFirstCurly);",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Self Testing Functions",
											"****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PreRequestOfRestoring()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b16d6f56-9a6d-4e58-9feb-2259686aa00d",
										"exec": [
											"console.log(\"\\n----------Defining standard Pre-Request for Restoring in Configuration Validation---------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of PreRequestOfRestoring()",
											"* ",
											"* Entire Pre-Request Script of the Restoring Request in all Configuration Validations.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"        ",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const PRE_REQUEST_OF_RESTORING = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
											"            ",
											"        var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
											"            ",
											"        var configuration = pm.collectionVariables.get(\"configuration\");",
											"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
											"            ",
											"        var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
											"        var keysOfDatatypeInstanceUnderTest = pm.variables.get(\"keysOfDatatypeInstanceUnderTest\");",
											"            ",
											"        CouldInputBeLoaded(attributeUnderTest,",
											"                                SettingTheRequestVariables, ",
											"                                configuration, ",
											"                                moduleUnderTest,",
											"                                datatypeUnderTest,",
											"                                keysOfDatatypeInstanceUnderTest",
											"                           );",
											"    } catch (error) {",
											"        CouldInputBeLoaded(attributeUnderTest);",
											"    }",
											"        ",
											"    // Determining the Request Body",
											"    try {",
											"        var originalValue;",
											"        if ( (typeof datatypeUnderTest==\"undefined\") || (datatypeUnderTest===\"\") ) {",
											"            originalValue = configuration[attributeUnderTest];",
											"        } else {",
											"            let instanceIndexUnderTest = InstanceIndexOf(keysOfDatatypeInstanceUnderTest[0], datatypeUnderTest, configuration);",
											"            originalValue = configuration[datatypeUnderTest][instanceIndexUnderTest][attributeUnderTest];",
											"        }",
											"            ",
											"        var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
											"        var requestBody = '{ \"'",
											"                            + moduleUnderTest",
											"                            + ':'",
											"                            + attributeUnderTest",
											"                            + '\": ';",
											"        if (typeof originalValue === \"string\") {",
											"            requestBody = requestBody",
											"                            + '\"'",
											"                            + originalValue",
											"                            + '\" }';",
											"        } else {",
											"            requestBody = requestBody",
											"                            + originalValue",
											"                            + ' }'; ",
											"        }",
											"        AreValuesOfTheRequestBodyCorrect(attributeUnderTest, originalValue, CONTENT_TYPE, requestBody);",
											"    } catch (error) {",
											"        AreValuesOfTheRequestBodyCorrect(attributeUnderTest);",
											"    }",
											"        ",
											"    // Setting Local Variables and Calling for Preparation of the Request",
											"    pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
											"    pm.variables.set(\"requestBody\", requestBody);",
											"        ",
											"    try {",
											"        eval(SettingTheRequestVariables)();",
											"        CouldFunctionForSettingTheRequestVariablesBeCalled(attributeUnderTest, true);",
											"    } catch (error) {",
											"        CouldFunctionForSettingTheRequestVariablesBeCalled(attributeUnderTest, false);",
											"    }",
											"        ",
											"    // Functions",
											"    function InstanceIndexOf(keyValueOfInstanceUnderTest, datatypeUnderTest, configuration) {",
											"        for (let i=0; i<(configuration[datatypeUnderTest].length); i++) {",
											"            let sampleName = configuration[datatypeUnderTest][i][keyValueOfInstanceUnderTest.key];",
											"            if ( sampleName === keyValueOfInstanceUnderTest.value ) {",
											"                return i;",
											"            }",
											"        }",
											"    }",
											"        ",
											"    //Self Testing Functions",
											"    function CouldInputBeLoaded(attributeUnderTest,",
											"                                    SettingTheRequestVariables, ",
											"                                    configuration, ",
											"                                    moduleUnderTest,",
											"                                    datatypeUnderTest,",
											"                                    keysOfDatatypeInstanceUnderTest) {",
											"        pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"            pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldSettingTheRequestVariablesBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
											"            pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldConfigurationBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(configuration).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldModuleUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
											"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldDatatypeUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(datatypeUnderTest).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldKeysOfDatatypeInstanceUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(keysOfDatatypeInstanceUnderTest[0]).to.be.an(\"object\");",
											"        });",
											"    }",
											"        ",
											"    function AreValuesOfTheRequestBodyCorrect(location, originalValue, contentType, requestBody) {",
											"        pm.test(\"CouldTheOriginalValueBeRead (\" + location + \")\", function() {",
											"            pm.expect(originalValue).to.not.be.undefined;",
											"        });",
											"        pm.test(\"IsValueOfContentTypeCorrect (\" + location + \")\", function() {",
											"            pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
											"        });",
											"        pm.test(\"IsValueOfRequestBodyCorrect (\" + location + \")\", function() {",
											"            pm.expect(requestBody).to.be.a(\"string\");",
											"            pm.expect(requestBody).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"        ",
											"    function CouldFunctionForSettingTheRequestVariablesBeCalled(location, success) {",
											"        pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled (\" + location + \")\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"PreRequestOfRestoringAsaString\", ConvertingThisFunctionToString(PRE_REQUEST_OF_RESTORING) );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"function ConvertingThisFunctionToString(functionToBeConverted) {",
											"    let functionAsAString = String(functionToBeConverted);",
											"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
											"    return functionAsAString.slice(indexOfFirstCurly);",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Self Testing Functions",
											"****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UploadingInterfaceInformation()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "53c968ba-69fd-4dc8-a9d8-2b2b46139d90",
										"exec": [
											"console.log(\"\\n-----------------Uploading Function for Uploading Interface Information-------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of UploadingInterfaceInformation()",
											"* ",
											"* Defines code that is shared by UploadingInterfaceCapability and ",
											"* UploadingInterfaceConfiguration in the Tests script.",
											"*",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const UPLOADING_INTERFACE_INFORMATION = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
											"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
											"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
											"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
											"        var response = pm.variables.get(\"response\");",
											"        CouldInputForUploadingInterfaceInformationBeLoaded(moduleUnderTest, ",
											"                                                                technologyUnderTest, ",
											"                                                                CommentingResponse, ",
											"                                                                classUnderTest,",
											"                                                                response",
											"                                                            );",
											"    } catch (error) {",
											"        CouldInputForUploadingInterfaceInformationBeLoaded();",
											"    }",
											"    ",
											"    // Commenting the ResponseCode",
											"    pm.variables.set(\"positiveOutcome\", \" successfully uploaded.\");",
											"    pm.variables.set(\"negativeOutcome\", \" could not be retrieved.\");",
											"    try {",
											"        eval(CommentingResponse)();",
											"        CouldCommentingResponseBeSuccessfullyCalled(true);",
											"    } catch (error) {",
											"        CouldCommentingResponseBeSuccessfullyCalled(false);",
											"    }",
											"    ",
											"    // Extracting Uploaded Information",
											"    try {",
											"        let objectInclHeadline;",
											"        var objectWithoutHeadline;",
											"        if (response.code == 200) {",
											"            objectInclHeadline = response.json();",
											"            objectWithoutHeadline = objectInclHeadline[moduleUnderTest ",
											"                                                            + \":\" ",
											"                                                            + technologyUnderTest ",
											"                                                            + \"-\" ",
											"                                                            + classUnderTest",
											"                                                        ];",
											"        }",
											"        CouldInformationBeSuccessfullyUploaded(response.code, objectWithoutHeadline);",
											"    } catch (error) {",
											"        CouldInformationBeSuccessfullyUploaded();",
											"    }",
											"    ",
											"    // Provided Output Parameters",
											"    pm.collectionVariables.set(classUnderTest, objectWithoutHeadline);",
											"        ",
											"    // Self Testing Functions",
											"    function CouldInputForUploadingInterfaceInformationBeLoaded(moduleUnderTest, ",
											"                                                                technologyUnderTest, ",
											"                                                                CommentingResponse, ",
											"                                                                classUnderTest,",
											"                                                                response) {",
											"        pm.test(\"CouldModuleUnderTestForUploadingInterfaceInformationBeLoaded\", function () {",
											"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
											"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTechnologyUnderTestForUploadingInterfaceInformationBeLoaded\", function () {",
											"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
											"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldCommentingResponseForUploadingInterfaceInformationBeLoaded\", function () {",
											"            pm.expect(CommentingResponse).to.be.a(\"string\");",
											"            pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldClassUnderTestForUploadingInterfaceInformationBeLoaded\", function () {",
											"            pm.expect(classUnderTest).to.be.a(\"string\");",
											"            pm.expect(classUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldResponseForUploadingInterfaceInformationBeLoaded\", function () {",
											"            pm.expect(response).to.be.a(\"object\");",
											"        });",
											"    }",
											"        ",
											"    function CouldCommentingResponseBeSuccessfullyCalled(success) {",
											"        pm.test(\"CouldCommentingResponseBeSuccessfullyCalled\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"    ",
											"    function CouldInformationBeSuccessfullyUploaded(responseCode, response) {",
											"        pm.test(\"CouldInformationBeSuccessfullyUploaded\", function () {",
											"            pm.expect(responseCode).to.equal(200);",
											"            pm.expect(response).to.be.a(\"object\");",
											"        });",
											"    }    ",
											"};",
											"pm.environment.set( \"UploadingInterfaceInformation\", UPLOADING_INTERFACE_INFORMATION.toString() );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											" * Self Testing Functions",
											" ****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "2da77756-768c-4bff-9b1d-f674990d007d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2a4218ec-1aad-4cfe-ac37-3ee89b9a1241",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "EnvironmentInformationLoading",
			"item": [
				{
					"name": "StartPointDeviceTesting",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "ebbab6ab-6668-4f04-ad16-bfca9d6ef14e",
								"exec": [
									"console.log(\"\\n######################## StartingPoint of Validation of a Device #########################\");",
									"/****************************************************************************************",
									"* ",
									"* StartPoint",
									"* ",
									"* Manages the number of iterations over several devices in the environment",
									"* ",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var multiplicityOfDeviceIterations = pm.environment.get(\"multiplicityOfDeviceIterations\");",
									"    var controller = pm.environment.get(\"controller\");",
									"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, multiplicityOfDeviceIterations, dummyUri);",
									"} catch (error) {",
									"    CouldTheInputBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Displaying ",
									"****************************************************************************************/",
									"try {",
									"    var numberOfExistingDevices = controller.nodeList.length;",
									"    var maximumIndexOfDeviceUnderTest;",
									"    switch (multiplicityOfDeviceIterations) {",
									"        case \"none\":",
									"            maximumIndexOfDeviceUnderTest = -1;",
									"            break;",
									"        case \"one\":",
									"            maximumIndexOfDeviceUnderTest = Math.min( 0, (numberOfExistingDevices-1) );",
									"            break;",
									"        case \"all\":",
									"            maximumIndexOfDeviceUnderTest = (numberOfExistingDevices-1);",
									"            break;",
									"    }",
									"    CouldMaximumIndexOfDeviceUnderTestBeDetermined(maximumIndexOfDeviceUnderTest);",
									"} catch (error) {",
									"    CouldMaximumIndexOfDeviceUnderTestBeDetermined();",
									"}    ",
									"try {",
									"    if (indexOfDeviceUnderTest<=maximumIndexOfDeviceUnderTest) {",
									"        postman.setNextRequest();",
									"        console.log(\"Testing of the \" + (indexOfDeviceUnderTest+1) + \". out of \" ",
									"                        + (maximumIndexOfDeviceUnderTest+1) ",
									"                        + \" Devices will be started.\");",
									"    } else {",
									"        postman.setNextRequest(\"EndPointInterfaceValidator\");",
									"        console.log(\"Proceeding with terminating the Interface Validator.\");",
									"    }",
									"    CouldFurtherProceedingBeDetermined(true);",
									"} catch (error) {",
									"    CouldFurtherProceedingBeDetermined(false);",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheRequestBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, ",
									"                                multiplicityOfDeviceIterations, uri) {",
									"    pm.test(\"CouldTheInputBeLoaded\", function () {",
									"        pm.expect(controller).to.be.an(\"object\");",
									"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
									"        pm.expect(multiplicityOfDeviceIterations).to.be.a(\"string\");",
									"        pm.expect(multiplicityOfDeviceIterations).to.not.have.lengthOf(0);",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldMaximumIndexOfDeviceUnderTestBeDetermined(maximumIndexOfDeviceUnderTest) {",
									"    pm.test(\"CouldMaximumIndexOfDeviceUnderTestBeDetermined\", function () {",
									"        pm.expect(maximumIndexOfDeviceUnderTest).to.be.a(\"number\");",
									"    });",
									"}",
									"",
									"function CouldFurtherProceedingBeDetermined(success) {",
									"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
									"        pm.expect(success).to.be.true;",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "LoadingMantisIssues",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f4664ef2-91a7-4c25-94bd-1dec25f9ae11",
								"exec": [
									"console.log(\"\\n----------------------------------Loading Mantis Issues-----------------------------------\");",
									"/****************************************************************************************",
									"* ",
									"* Loading Mantis Issues",
									"*  ",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
									"    var controller = pm.environment.get(\"controller\");",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
									"    CouldInputForLoadingMantisIssuesBeLoaded(mantisInterfaceStatus, controller, ",
									"                                            dummyUri, ",
									"                                            indexOfDeviceUnderTest",
									"                                           );",
									"} catch (error) {",
									"    CouldInputForLoadingMantisIssuesBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    if (mantisInterfaceStatus===\"read-only\" || mantisInterfaceStatus===\"read-write\") {",
									"        var vendor = controller.nodeList[indexOfDeviceUnderTest].vendor;",
									"        var mantisAuthorizationCode = controller.nodeList[indexOfDeviceUnderTest].mantisAuthorizationCode;",
									"        var uri = \"https://\" + vendor + \".bugtracker.openBackhaul.com/api/rest/issues\";",
									"        CouldTheMantisUriBeComposed(vendor, mantisAuthorizationCode, uri);",
									"    } else {",
									"        console.log(\"Loading Mantis Issues has been configured to be switched-off.\")",
									"        uri = dummyUri;",
									"    }",
									"} catch (error) {",
									"    CouldTheMantisUriBeComposed();",
									"    uri = dummyUri;",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {   ",
									"    pm.variables.set(\"uri\", uri);",
									"    pm.request.headers.upsert({key:\"Authorization\", value:mantisAuthorizationCode});",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheGetRequestForMantisIssuesBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									"* Self Testing Functions",
									"****************************************************************************************/",
									"function CouldInputForLoadingMantisIssuesBeLoaded(mantisInterfaceStatus, ",
									"                                                    controller, ",
									"                                                    uri, ",
									"                                                    indexOfDeviceUnderTest) {",
									"    pm.test(\"CouldInputForLoadingMantisIssuesBeLoaded\", function () {",
									"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"        pm.expect(controller).to.be.an(\"object\");",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");      ",
									"    });",
									"}",
									"",
									"function CouldTheMantisUriBeComposed(vendor, mantisAuthorizationCode, uri) {",
									"    pm.test(\"CouldTheMantisUriBeComposed\", function () {",
									"        pm.expect(vendor).to.be.a(\"string\");",
									"        pm.expect(vendor).to.not.have.lengthOf(0);  ",
									"        pm.expect(mantisAuthorizationCode).to.be.a(\"string\");",
									"        pm.expect(mantisAuthorizationCode).to.not.have.lengthOf(0);  ",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);  ",
									"    });",
									"}",
									"",
									"function CouldTheGetRequestForMantisIssuesBePrepared() {",
									"    pm.test(\"CouldTheGetRequestForMantisIssuesBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f9850277-5b96-4f8a-9dff-c57b6522b2bc",
								"exec": [
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
									"    var controller = pm.environment.get(\"controller\");",
									"    ",
									"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
									"",
									"    CouldRequiredInputBeRead(mantisInterfaceStatus, controller, indexOfDeviceUnderTest);",
									"} catch (error) {",
									"    CouldRequiredInputBeRead();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Processing received data to a list of MantisBT issues",
									"****************************************************************************************/",
									"try {",
									"    if (mantisInterfaceStatus===\"read-only\" || mantisInterfaceStatus===\"read-write\") {",
									"        var deviceType = controller.nodeList[indexOfDeviceUnderTest].deviceType;",
									"        CouldDeviceTypeBeRetrieved(deviceType);",
									"",
									"        let responseWithHeadline = pm.response.json();",
									"        var mantisIssueList = responseWithHeadline.issues;",
									"        mantisIssueList = FilterIssuesForDeviceType(mantisIssueList, deviceType);",
									"        CouldMantisIssueListBeRead(pm.response.code);",
									"    }",
									"} catch (error) {",
									"    CouldDeviceTypeBeRetrieved();",
									"    CouldMantisIssueListBeRead();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Commenting the ResponseCode",
									"****************************************************************************************/",
									"try {",
									"    if (mantisInterfaceStatus===\"read-only\" || mantisInterfaceStatus===\"read-write\") {",
									"        let responseCode = parseInt(pm.response.code);",
									"        if (Math.floor(responseCode/100) === 2) {",
									"            console.log(\"Mantis issues for \" + deviceType + \" could successfully be loaded.\");",
									"        } else {",
									"            console.log(\"ERROR: Mantis issues for \" + deviceType + \" could not be \"",
									"                            + \"successfully be loaded.\");",
									"        }",
									"        CouldCommentBeComposedandPrinted(responseCode);",
									"    }",
									"} catch (error) {",
									"    CouldCommentBeComposedandPrinted();",
									"}",
									"",
									"pm.variables.clear();",
									"",
									"",
									"/****************************************************************************************",
									"* Provided Output Parameters",
									"****************************************************************************************/",
									"if (mantisInterfaceStatus===\"read-only\" || mantisInterfaceStatus===\"read-write\") {",
									"    pm.environment.set(\"mantisIssueList\", mantisIssueList);",
									"    AreAllEnvironmentVariablesSet();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Functions",
									" ****************************************************************************************/",
									"function FilterIssuesForDeviceType(issueList, deviceType) {",
									"    for (let i=(issueList.length-1); i>=0; i--) {",
									"        if (issueList[i].project.name!==deviceType){",
									"            issueList.splice(i,1);",
									"        }",
									"    }",
									"    return issueList;",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Test Driven Development",
									" ****************************************************************************************/",
									"function CouldRequiredInputBeRead(mantisInterfaceStatus, controller, indexOfDeviceUnderTest) {",
									"    pm.test(\"CouldRequiredInputBeRead\", function () {",
									"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"        pm.expect(controller).to.be.an(\"object\");",
									"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
									"    });",
									"}",
									"",
									"function CouldDeviceTypeBeRetrieved(deviceType) {",
									"    pm.test(\"CouldDeviceTypeBeRetrieved\", function () {",
									"        pm.expect(deviceType).to.be.a(\"string\");",
									"        pm.expect(deviceType).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldMantisIssueListBeRead(ResponseCode) {",
									"    pm.test(\"CouldMantisIssueListBeRead\", function () {",
									"        pm.expect(ResponseCode).to.equal(200);",
									"    });",
									"}",
									"",
									"function CouldCommentBeComposedandPrinted(ResponseCode) {",
									"    pm.test(\"CouldMantisIssueListBeRead\", function () {",
									"        pm.expect(ResponseCode).to.equal(200);",
									"    });",
									"}",
									"",
									"function AreAllEnvironmentVariablesSet() {",
									"    pm.test(\"AreAllEnvironmentVariablesSet\", function () {",
									"        pm.expect(pm.environment.get(\"mantisIssueList\")).to.be.an(\"array\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DisplayEnvironmentVariables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "03156e11-e0c8-412c-9a71-59e8f46bc2ff",
								"exec": [
									"console.log(\"\\n-------------------------Displaying all Environment variables-----------------------------\");",
									"/****************************************************************************************",
									"* ",
									"* Console.log of all Environment variables",
									"* ",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    CouldTheInputBeLoaded(dummyUri);",
									"} catch (error) {",
									"    CouldTheInputBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Displaying ",
									"****************************************************************************************/",
									"try {",
									"    console.log(\"Device will be tested with the following set of Environment variables:\");",
									"    let allEnvironmentVariables = { \"allEnvironmentVariables\" : pm.environment.toObject() };",
									"    console.log(allEnvironmentVariables);",
									"    CouldAllEnvironmentalVariablesBeDisplayed(true);",
									"} catch (error) {",
									"    CouldAllEnvironmentalVariablesBeDisplayed(false);",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheRequestBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function CouldTheInputBeLoaded(uri) {",
									"    pm.test(\"CouldTheInputBeLoaded\", function () {",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldAllEnvironmentalVariablesBeDisplayed(success) {",
									"    pm.test(\"CouldAllEnvironmentalVariablesBeDisplayed\", function () {",
									"        pm.expect(success).to.be.true;",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b43bef39-9bb4-46c1-af5d-15d7e14834f3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a8f6a685-6b37-444a-a44b-8fddb61ed136",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "InterfaceValidation",
			"item": [
				{
					"name": "PureEthernetStructure",
					"item": [
						{
							"name": "PureEthernetStructureCompleteness",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "13edebe9-1f7f-4a43-afec-087304ef5b72",
														"exec": [
															"console.log(\"\\n\\n============================ PureEthernetStructureCompleteness.3 =============================\");",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Completeness of PureEthernetStructure Objects against definition ",
															"* ",
															"*                   PureEthernetStructure_2.0.0-tsp.191123.1000",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/pureEthernetStructure/tree/tsp",
															"* ",
															"****************************************************************************************/",
															" ",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"all\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"pure-ethernet-structure-2-0:pure-ethernet-structure-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function() {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function() {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1c246fda-9d74-49d1-8ae3-166f302ba831",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointPureEthernetStructureCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5a482436-4a5b-429b-aed3-5a4a49f9075a",
														"exec": [
															"console.log(\"\\n--------------EntryPoint of PureEthernetStructure Validation for Completeness-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the PureEthernetStructureCompleteness TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].pureEthernetStructureList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointPureEthernetStructureCompleteness\");",
															"        console.log(\"Proceeding with terminating PureEthernetStructure validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ab11cbdc-9e0d-40b1-818c-85c06b8c8486",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "784917fd-bc81-4bdf-b1b3-435ac7f375a2",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "301d530b-e51c-4d92-ac20-d51a6638cf3f",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "264657f2-f0f0-4705-be6b-2a3349b72928",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e963cc7b-495b-4eef-98da-9b856c24253d",
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "338006a4-dab7-49ad-a1f5-a5d9f400612e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2841543b-4fbc-40b7-b129-38e16dc26255",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "NetworkPreparation",
									"item": [
										{
											"name": "SwitchingOnMonitoring",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "fe93ab53-d6c2-4316-aeee-bac52d9dc70f",
														"exec": [
															"console.log(\"\\n---------------------------------Switching Monitoring On----------------------------------\");",
															"/****************************************************************************************",
															" * ",
															" * Switching Monitoring On",
															" * ",
															" * This Request is for activating collection of performance data on the device under",
															" * test, so the data can be retrieved during validating completeness of the implementation",
															" *  ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration);",
															"} catch (error) {",
															"    CouldInputForSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Forming the Body",
															" ****************************************************************************************/",
															"try {",
															"    let requestBodyString = ('{ \"' + moduleUnderTest + ':performance-monitoring-is-on\": true }');",
															"    var requestBody = JSON.parse(requestBodyString);",
															"    CouldRequestBodyBeFormed(requestBody);",
															"} catch (error) {",
															"    CouldRequestBodyBeFormed();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Calling for Preparation of the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(requestBody);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration) {",
															"    pm.test(\"CouldInputForSwitchingMonitoringOnBeLoaded\", function() {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(configuration).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyBeFormed(requestBody) {",
															"    pm.test(\"CouldRequestBodyBeFormed\", function() {",
															"        pm.expect(requestBody).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, ",
															"                                                keysOfDatatypeInstanceUnderTest,",
															"                                                attributeUnterTest, ",
															"                                                contentType,",
															"                                                filteredDepth, ",
															"                                                filteredFields, ",
															"                                                requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"            \"current-problems\", \"current-performance\",",
															"            \"historical-performances\"",
															"        ]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function() {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "cbad7283-1439-4b93-ae09-eec2ff274dbc",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched on.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched on.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ef5af3d7-552e-4f5c-844c-3a0ec9b12e60",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "138564ef-12f1-4d71-83b1-f576b1f83be4",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ValidationRequests",
									"item": [
										{
											"name": "PacCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ab4c911e-ea8c-4681-9e69-a9ebbc071593",
														"exec": [
															"console.log(\"\\n---------------------Checking PureEthernetStructure_Pac for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* PacCompleteness",
															"* ",
															"* This Request is for validating PureEthernetStructure Pac Objects against definition ",
															"* PureEthernetStructure_Pac_2.0.0-tsp.191123.1000",
															"* as it can be found on https://github.com/openBackhaul/pureEthernetStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the *_Pac class",
															"*  - availability of all attributes in this particular class",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"pac\";             // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 3;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let PURE_ETHERNET_STRUCTURE_PAC_SCHEMA = {\t",
															"    \"type\": \"object\",",
															"\t\"properties\": {",
															"        \"pure-ethernet-structure-capability\": {",
															"\t\t\t\"supported-alarm-list\": \t\t\t\t\t{ \"type\": \"array\"   },",
															"\t\t\t\"performance-monitoring-is-avail\":\t\t\t{ \"type\": \"boolean\" }",
															"\t\t},",
															"\t\t\"pure-ethernet-structure-configuration\":{",
															"\t\t\t\"problem-kind-severity-list\": \t\t\t\t{ \"type\": \"array\"   }, ",
															"\t\t\t\"g-826-threshold-cross-alarm-list\": \t\t{ \"type\": \"array\"   },",
															"\t\t\t\"clearing-threshold-cross-alarms-is-on\":\t{ \"type\": \"boolean\" },  ",
															"\t\t\t\"performance-monitoring-is-on\": \t\t\t{ \"type\": \"boolean\" }\t",
															"\t\t},",
															"\t\t\"pure-ethernet-structure-status\": {",
															"\t\t\t\"segment-status-list\": \t\t\t\t\t\t{ \"type\": \"array\"   },",
															"\t\t\t\"performance-monitoring-is-up\": \t\t\t{ \"type\": \"boolean\" }",
															"\t\t},",
															"\t\t\"pure-ethernet-structure-current-problems\": {",
															"\t\t\t\"current-problem-list\": \t\t\t\t\t{ \"type\": \"array\"  }",
															"\t\t},",
															"\t\t\"pure-ethernet-structure-current-performance\": {",
															"\t\t\t\"current-performance-data-list\":\t\t\t{ \"type\": \"array\"  }",
															"\t\t},",
															"\t\t\"pure-ethernet-structure-historical-performances\": {",
															"\t\t\t\"historical-performance-data-list\": \t\t{ \"type\": \"array\"  }",
															"\t\t}",
															"\t}",
															"};",
															"",
															"pm.variables.set(\"schema\", PURE_ETHERNET_STRUCTURE_PAC_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e8cdcc81-c010-40c6-b804-27136b5abb02",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CapabilityCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0eed34c5-a058-491f-8b2f-0bd790cb052a",
														"exec": [
															"console.log(\"\\n--------------------Checking PureEthernetStructure Capability for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* CapabilityCompleteness",
															"* ",
															"* This Request is for validating PureEthernetStructure Capability Objects against definition ",
															"* PureEthernetStructure_2.0.0-tsp.191123.1000",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/pureEthernetStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Capability class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let PURE_ETHERNET_STRUCTURE_CAPABILITY_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"supported-alarm-list\": {",
															"            \"type\": \"array\",",
															"            \"item\":                          { \"type\": \"string\" }",
															"\t\t},\t\t",
															"\t\t\"performance-monitoring-is-avail\":\t { \"type\": \"boolean\" }",
															"\t},",
															"\t\"required\": [ \"supported-alarm-list\", ",
															"\t\t\t\t\"performance-monitoring-is-avail\"\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t]",
															"};",
															"",
															"pm.variables.set(\"schema\", PURE_ETHERNET_STRUCTURE_CAPABILITY_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "60f93923-3fc5-467d-9ebf-26e9564ecc43",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ConfigurationCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a1da9e4e-561d-4a85-90a4-1219d9c6ca81",
														"exec": [
															"console.log(\"\\n----------------Checking PureEthernetStructure Configuration for Completeness------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ConfigurationCompleteness",
															"* ",
															"* This Request is for validating PureEthernetStructure Configuration Objects against definition ",
															"* PureEthernetStructure_2.0.0-tsp.191123.1000",
															"* as it can be found on https://github.com/openBackhaul/pureEthernetStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Configuration class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let PURE_ETHERNET_STRUCTURE_CONFIGURATION_SCHEMA = {\t",
															"\t\"$schema\": \"\",",
															"    \"$id\": \"\",",
															"    \"title\": \"\",",
															"    \"description\": \"\",",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"\t\t\"pure-ethernet-structure-2-0:pure-ethernet-structure-configuration\": {",
															"\t\t\"type\": \"object\", ",
															"\t\t\"properties\": {",
															" \t\t\t\"problem-kind-severity-list\": { ",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t\t\"problem-kind-name\": \t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\"problem-kind-severity\": \t\t\t{ \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_WARNING\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_MINOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_MAJOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_CRITICAL\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t}",
															"\t\t\t}",
															"\t\t\t}, ",
															" \t\t\t\"g-826-threshold-cross-alarm-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t\t\"g-826-value-kind\": \t\t\t\t{ \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:G826_TYPE_ES\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:G826_TYPE_SES\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:G826_TYPE_CSES\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:G826_TYPE_UAS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:G826_TYPE_NOT_SPECIFIED\"",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t},",
															"\t\t\t\t\"alarm-raising-threshold\": \t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\"alarm-clearing-threshold\": \t\t{ \"type\": \"number\" },",
															"\t\t\t\t\"granularity-period\": \t\t\t\t{ \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t}\t\t\t\t",
															"\t\t\t}",
															"\t\t\t}, \t\t\t",
															"\t\t\t\"clearing-threshold-cross-alarms-is-on\":{ \"type\": \"boolean\" },  ",
															"\t\t\t\"performance-monitoring-is-on\": \t\t{ \"type\": \"boolean\" }, \t ",
															" \t\t\t\"required\": \t\t\t\t\t\t\t[ \"problem-kind-severity-list\", ",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t  \"g-826-threshold-cross-alarm-list\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t  \"clearing-threshold-cross-alarms-is-on\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t  \"performance-monitoring-is-on\"\t",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t]\t\t",
															" \t\t}",
															"\t\t},",
															"    \"required\": [\"pure-ethernet-structure-2-0:pure-ethernet-structure-configuration\"]",
															"\t}",
															"};",
															"",
															"pm.variables.set(\"schema\", PURE_ETHERNET_STRUCTURE_CONFIGURATION_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "73ba8b37-ff76-41fa-a3da-a79e43b2fa36",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "StatusCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "cfaa49e1-bb1b-406d-a912-933c5910547e",
														"exec": [
															"console.log(\"\\n-------------------Checking PureEthernetStructure Status for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* StatusCompleteness",
															"* ",
															"* This Request is for validating PureEthernetStructure Status Objects against definition ",
															"* PureEthernetStructure_2.0.0-tsp.191123.1000",
															"* as it can be found on https://github.com/openBackhaul/pureEthernetStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Status class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let PURE_ETHERNET_STRUCTURE_STATUS_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"segment-status-list\": { ",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": { ",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"segment-status-type-id\": \t{ \"type\": \"number\" },",
															"\t\t\t\t\t\"operational-status\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:OPERATIONAL_STATE_TYPE_ENABLED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:OPERATIONAL_STATE_TYPE_DISABLED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:OPERATIONAL_STATE_TYPE_NOT_YET_DEFINED\"\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t}",
															"\t\t\t\t},",
															"\t\t\t\t\"required\": [ \"segment-status-type-id\", ",
															"\t\t\t\t\t\t\t\"operational-status\"\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\t\t]\t",
															"\t\t\t}",
															"\t\t},\t\t",
															"\t\t\"performance-monitoring-is-up\": { \"type\": \"boolean\" }\t\t\t\t",
															"\t},",
															"\t\"required\": [ \"segment-status-list\", ",
															"\t\t\t\t\"performance-monitoring-is-up\"\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t]\t",
															"};",
															"pm.variables.set(\"schema\", PURE_ETHERNET_STRUCTURE_STATUS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "72e1b8d7-3162-41f4-bcce-a8b9ee080d26",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentProblemsCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "de7b9053-5a81-4277-bb6e-1cd77767df08",
														"exec": [
															"console.log(\"\\n---------------Checking PureEthernetStructureCurrentProblems for Completeness-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentProblemsCompleteness",
															"* ",
															"* This Request is for validating PureEthernetStructure CurrentProblems Objects against definition ",
															"* PureEthernetStructure_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/pureEthernetStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentProblems class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-problems\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let PURE_ETHERNET_STRUCTURE_CURRENT_PROBLEMS_SCHEMA = {\t",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"\t\t\"current-problem-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"problem-name\": \t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"sequence-number\": \t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\"timestamp\": \t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"problem-severity\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_WARNING\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_MINOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_MAJOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_CRITICAL\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t}\t \t",
															"\t\t\t\t},",
															"\t\t\t\t\"required\": [ \"problem-name\", ",
															"\t\t\t\t\t\t\t\"sequence-number\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\t\t\"timestamp\",",
															"\t\t\t\t\t\t\t\"problem-severity\"\t",
															"\t\t\t\t\t\t\t]\t\t\t",
															"\t\t\t}",
															"\t\t}\t",
															"\t},",
															"\t\"required\":\t[ \"current-problem-list\"] ",
															"};",
															"",
															"pm.variables.set(\"schema\", PURE_ETHERNET_STRUCTURE_CURRENT_PROBLEMS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a53c4489-308f-4ed1-be89-3a7b6189870a",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentPerformanceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "df319817-7af8-48e5-a220-ba3a96a786bb",
														"exec": [
															"console.log(\"\\n-------------Checking PureEthernetStructure CurrentPerformance for Completeness----------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentPerformanceCompleteness",
															"* ",
															"* This Request is for validating PureEthernetStructure CurrentPerformance Objects against definition ",
															"* PureEthernetStructure_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/PureEthernetStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentPerformance class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-performance\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let PURE_ETHERNET_STRUCTURE_CURRENT_PERFORMANCE_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"current-performance-data-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\"time-period\": \t\t\t\t\t{ \"type\": \"number\" }, \t\t\t\t",
															"\t\t\t\t\t\t\t\"es\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"ses\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, \t\t",
															"\t\t\t\t\t\t\t\"cses\": \t\t\t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"unavailability\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rx-level-min\": \t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"rx-level-max\": \t\t\t\t{ \"type\": \"number\" },\t\t",
															"\t\t\t\t\t\t\t\"rx-level-avg\": \t\t\t\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\"required\":[ \"time-period\",",
															"\t\t\t\t\t\t\t\t\t\"es\", ",
															"\t\t\t\t\t\t\t\t\t\"ses\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\t\t\t\t\"cses\",",
															"\t\t\t\t\t\t\t\t\t\"unavailability\",\t",
															"\t\t\t\t\t\t\t\t\t\"rx-level-min\",",
															"\t\t\t\t\t\t\t\t\t\"rx-level-max\",",
															"\t\t\t\t\t\t\t\t\t\"rx-level-avg\"",
															"\t\t\t\t\t\t\t\t\t]\t",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"timestamp\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"suspect-interval-flag\": \t\t\t{ \"type\": \"boolean\" },\t\t\t",
															"\t\t\t\t\t\"elapsed-time\": \t\t\t\t\t{ \"type\": \"integer\" },\t\t",
															"\t\t\t\t\t\"scanner-id\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"operational-state\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:OPERATIONAL_STATE_TYPE_ENABLED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:OPERATIONAL_STATE_TYPE_DISABLED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:OPERATIONAL_STATE_TYPE_NOT_YET_DEFINED\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t},\t ",
															"\t\t\t\t\t\"granularity-period\":{ \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t},\t ",
															"\t\t\t\t\t\"administrative-state\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:ADMINISTRATIVE_STATE_TYPE_UNLOCKED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:ADMINISTRATIVE_STATE_TYPE_LOCKED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:ADMINISTRATIVE_STATE_TYPE_SHUTTING_DOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:ADMINISTRATIVE_STATE_TYPE_NOT_YET_DEFINED\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t},\t ",
															"\t\t\t\t\t\"object-class\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"name-binding\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"packages\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"allomorphs\": \t\t\t\t\t\t{ \"type\": \"string\" }",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"performance-data\",",
															"\t\t\t\t\t\t\t\"timestamp\",",
															"\t\t\t\t\t\t\t\"suspect-interval-flag\",",
															"\t\t\t\t\t\t\t\"elapsed-time\",",
															"\t\t\t\t\t\t\t\"scanner-id\",",
															"\t\t\t\t\t\t\t\"operational-state\",",
															"\t\t\t\t\t\t\t\"granularity-period\",",
															"\t\t\t\t\t\t\t\"administrative-state\",",
															"\t\t\t\t\t\t\t\"object-class\",",
															"\t\t\t\t\t\t\t\"name-binding\",",
															"\t\t\t\t\t\t\t\"packages\",",
															"\t\t\t\t\t\t\t\"allomorphs\"",
															"\t\t\t\t\t\t\t]",
															"\t\t\t}",
															"\t\t}",
															"\t},",
															"\t\"required\":\t[ \"current-performance-data-list\" ]",
															"};",
															"",
															"try {",
															"    if (capability[\"performance-monitoring-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", PURE_ETHERNET_STRUCTURE_CURRENT_PERFORMANCE_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"current-performance-data-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        PURE_ETHERNET_STRUCTURE_CURRENT_PERFORMANCE_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldPureEthernetStructureCurrentPerformanceBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldPureEthernetStructureCurrentPerformanceBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", PURE_ETHERNET_STRUCTURE_CURRENT_PERFORMANCE_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldPureEthernetStructureCurrentPerformanceBeShortened(success) {",
															"    pm.test(\"CouldPureEthernetStructureCurrentPerformanceBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a919a5fb-ef46-4a41-9256-73b8b46cce8c",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "HistoricalPerformancesCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0745b19a-4423-403e-a903-a01878d4161c",
														"exec": [
															"console.log(\"\\n------------Checking PureEthernetStructure HistoricalPerformances for Completeness-------------\");",
															"/*******************************************************************************",
															"* ",
															"* HistoricalPerformancesCompleteness",
															"* ",
															"* This Request is for validating PureEthernetStructure HistoricalPerformances Objects against definition ",
															"* PureEthernetStructure_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/pureEthernetStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the HistoricalPerformances class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"*******************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"historical-performances\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let PURE_ETHERNET_STRUCTURE_HISTORICAL_PERFORMANCES_SCHEMA = {",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"historical-performance-data-list\": {",
															"\t\t\t\"type\": \"array\",",
															"            \"items\": {",
															"            \t\"type\": \"object\",",
															"            \t\"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\"time-period\": \t\t\t\t\t{ \"type\": \"number\" }, \t\t\t\t",
															"\t\t\t\t\t\t\t\"es\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"ses\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, \t\t",
															"\t\t\t\t\t\t\t\"cses\": \t\t\t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"unavailability\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rx-level-min\": \t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"rx-level-max\": \t\t\t\t{ \"type\": \"number\" },\t\t",
															"\t\t\t\t\t\t\t\"rx-level-avg\": \t\t\t\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t},\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\"required\": [ \"time-period\",",
															"\t\t\t\t\t\t\t\t\t\"es\", ",
															"\t\t\t\t\t\t\t\t\t\"ses\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\t\t\t\t\"cses\",",
															"\t\t\t\t\t\t\t\t\t\"unavailability\",\t",
															"\t\t\t\t\t\t\t\t\t\"rx-level-min\",",
															"\t\t\t\t\t\t\t\t\t\"rx-level-max\",",
															"\t\t\t\t\t\t\t\t\t\"rx-level-avg\"",
															"\t\t\t\t\t\t\t\t\t]\t\t\t\t\t",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"suspect-interval-flag\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\t\"history-data-id\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"period-end-time\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"granularity-period\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t]\t\t\t\t",
															"\t\t\t\t\t},\t \t ",
															"\t\t\t\t\t\"object-class\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"name-binding\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"packages\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"allomorphs\": \t\t\t\t\t\t{ \"type\": \"string\" }",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"performance-data\",",
															"\t\t\t\t\t\t\t\"suspect-interval-flag\",",
															"\t\t\t\t\t\t\t\"history-data-id\",",
															"\t\t\t\t\t\t\t\"period-end-time\",",
															"\t\t\t\t\t\t\t\"granularity-period\",",
															"\t\t\t\t\t\t\t\"object-class\",",
															"\t\t\t\t\t\t\t\"name-binding\",",
															"\t\t\t\t\t\t\t\"packages\",",
															"\t\t\t\t\t\t\t\"allomorphs\"",
															"\t\t\t\t\t\t\t]",
															"\t\t\t}",
															"\t\t}",
															"\t},",
															"\t\"required\":\t[ \"historical-performance-data-list\" ]",
															"};",
															"",
															"try {",
															"    if (capability[\"performance-monitoring-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", PURE_ETHERNET_STRUCTURE_HISTORICAL_PERFORMANCES_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"historical-performance-data-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        PURE_ETHERNET_STRUCTURE_HISTORICAL_PERFORMANCES_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldPureEthernetStructureHistoricalPerformancesBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldPureEthernetStructureHistoricalPerformancesBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", PURE_ETHERNET_STRUCTURE_HISTORICAL_PERFORMANCES_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldPureEthernetStructureHistoricalPerformancesBeShortened(success) {",
															"    pm.test(\"CouldPureEthernetStructureHistoricalPerformancesBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "fe6b04b7-014d-49e1-9be9-374df0f5d287",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6520cf6f-11cf-4b40-a3dd-0ed913faa10a",
														"exec": [
															"console.log(\"\\n-------------------Restoring the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"        ",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration",
															"                                                   );",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    completeClassName = moduleUnderTest + \":\" + technologyUnderTest + \"-configuration\";",
															"    configuration = AddHeadlineToDataObject(configuration, completeClassName);",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6a51efe0-ca18-43c6-b630-a938707fe94e",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d9452a80-e83d-4d80-a4c3-8a2c8e3f8fe4",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a9058ac7-b3bd-4e04-ac57-acbe2236d506",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointPureEthernetStructureCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d40662ba-c403-466d-b788-b024b241e267",
														"exec": [
															"console.log(\"\\n-------------ReversalPoint of PureEthernetStructure Validation for Completeness---------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointPureEthernetStructureCompleteness\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "48b77451-ab10-4ac7-9753-cd374d2e86fa",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointPureEthernetStructureCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "24592c91-24c2-40a1-ba48-66cc8ad74629",
														"exec": [
															"console.log(\"\\n-----------------------Terminating PureEthernetStructureCompleteness--------------------------\");",
															"/****************************************************************************************",
															" * ",
															" * ExitPoint",
															" * ",
															" * This Request is for clearing the Collection variables and terminating the TestCase",
															" * ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Preparing the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({",
															"        key: \"Accept\",",
															"        value: \"application/json\"",
															"    });",
															"} catch (error) {}",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, controller, indexOfDeviceUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function() {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function() {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5b146512-9882-4078-8be7-b4c644a6fc35",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "54735d02-d7d5-4444-9de3-cc415b2f049c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8723d6e3-4427-42a3-b8c6-f4eaa63591a6",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1188f4e9-5ab9-4960-96cd-721464d8e571",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c587bfdc-b92c-4a54-87dc-35a118cd7500",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "PureEthernetStructureConfiguration",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3745392b-0928-4916-92d2-efbf8f24dda2",
														"exec": [
															"console.log(\"\\n\\n============================ PureEthernetStructureConfiguration.1 =============================\");",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Configuration of PureEthernetStructure Objects against definition ",
															"* ",
															"*                   PureEthernetStructure_2.0.0-tsp.191123.1000",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/pureEthernetStructure/tree/tsp",
															"* ",
															"****************************************************************************************/",
															" ",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"* ",
															"* It is recommended to apply this TestCase on devices on the local (not remote) site",
															"* of the microwave connection, otherwise the management connection might break and ",
															"* configurations, which are done during the validation, cannot be reversed.",
															"* ",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"one\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"pure-ethernet-structure-2-0:pure-ethernet-structure-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"RESPONSE_CODE_FOR_OPERATION_FAILED = 501;       // 500: Expected translation of aggreed <error-tag> operation failed",
															"CONFIGURATION_VALIDATION_RESULTS = {};",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"pm.collectionVariables.set(\"responseCodeForOperationFailed\", RESPONSE_CODE_FOR_OPERATION_FAILED);",
															"pm.collectionVariables.set(\"configurationValidationResults\", CONFIGURATION_VALIDATION_RESULTS);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function() {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function() {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9dbdaf6f-5f42-427b-b74f-1746ecb4c452",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DefiningDummyValuesAndEvaluations()",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "19547dd2-2fca-44b4-a8a7-e883c07a07be",
														"exec": [
															"console.log(\"\\n----------Defining DummyValues and Evaluation Criteria in Configuration Validation--------\");",
															"/****************************************************************************************",
															"* ",
															"* Definition of DefiningDummyValuesAndEvaluations()",
															"*  ",
															"* Functions for Defining DummyValues and Evaluation Criteria in all Configuration Validations.",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"        ",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"class Attribute {",
															"    constructor (CreatingDummyValueAsaString, ",
															"                    EvaluatingResultAsaString, ",
															"                    defaultValueForStandardEvaluation,",
															"                    capabilityAttributeToBeFalseIfFeatureNotSupported) {",
															"        this.CreatingDummyValueAsaString = CreatingDummyValueAsaString;",
															"        this.EvaluatingResultAsaString = EvaluatingResultAsaString;",
															"        this.defaultValueForStandardEvaluation = defaultValueForStandardEvaluation;",
															"        this.capabilityAttributeToBeFalseIfFeatureNotSupported = capabilityAttributeToBeFalseIfFeatureNotSupported;",
															"    }",
															"}",
															"var attributes = [];",
															"",
															"var CreatingDummyValueAsaString;",
															"var EvaluatingResultAsaString;",
															"var defaultValueForStandardEvaluation;",
															"var capabilityAttributeToBeFalseIfFeatureNotSupported;",
															"var newAttribute;",
															"",
															"/*// problem-kind-severity-list/problem-kind-name",
															"{",
															"}attributes.push(newAttribute);*/",
															"",
															"// problem-kind-severity-list/problem-kind-severity",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------Checking Configuration of problem-kind-severity-list/problem-kind-severity--------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"problem-kind-severity-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"problem-kind-name\";",
															"        var ATTRIBUTE_UNDER_TEST = \"problem-kind-severity\";",
															"            ",
															"        try {",
															"            var currentValue;",
															"            currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"            keysOfDatatypeInstanceUnderTest[0].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"            CouldCurrentConfigurationValuesBeRead(currentValue);",
															"        } catch (error) {",
															"            CouldCurrentConfigurationValuesBeRead();",
															"        }",
															"            ",
															"        try {",
															"            if ( currentValue !== \"pure-ethernet-structure-2-0:SEVERITY_TYPE_MINOR\" ) {",
															"                var dummyValue = \"pure-ethernet-structure-2-0:SEVERITY_TYPE_MINOR\";",
															"            } else {",
															"                var dummyValue = \"pure-ethernet-structure-2-0:SEVERITY_TYPE_MAJOR\";",
															"            }",
															"            CouldDummyValueBeDefined(true);",
															"        } catch (error) {",
															"            CouldDummyValueBeDefined(false);",
															"        }",
															"            ",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"            ",
															"        // Self Testing Function",
															"        function CouldCurrentConfigurationValuesBeRead(currentValue) {",
															"            pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
															"                pm.expect(currentValue).to.be.a(\"string\");",
															"                pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"            ",
															"        function CouldDummyValueBeDefined(success) {",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"pure-ethernet-structure-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"/*",
															"// g-826-threshold-cross-alarm-list/g-826-value-kind",
															"{",
															"}   attributes.push(newAttribute);",
															"",
															"// g-826-threshold-cross-alarm-list/alarm-raising-threshold",
															"{",
															"}   attributes.push(newAttribute);",
															"",
															"// g-826-threshold-cross-alarm-list/alarm-clearing-threshold",
															"{",
															"}   attributes.push(newAttribute);",
															"",
															"// g-826-threshold-cross-alarm-list/granularity-period",
															"{",
															"}   attributes.push(newAttribute);",
															"",
															"//clearing-threshold-cross-alarms-is-on",
															"{",
															"}   attributes.push(newAttribute);",
															"*/",
															"",
															"// performance-monitoring-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------Checking Configuration of performance-monitoring-is-on-----------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"            ",
															"        try {",
															"            var dummyValue = !configuration[\"performance-monitoring-is-on\"];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"performance-monitoring-is-avail\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"/*//    another attribute's YANG name",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------Checking Configuration of performance-monitoring-is-on-----------------\");",
															"            ",
															"        try {",
															"            ",
															"            ",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"?\");",
															"            });",
															"        }    ",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try {",
															"        ",
															"        ",
															"            CouldResultBeEvaluated(true);",
															"        } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"        }",
															"            ",
															"        // Self Testing Function",
															"        function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, EvaluatingResultAsaString);",
															"}   //attributes.push(newAttribute);",
															"*/",
															"",
															"pm.collectionVariables.set( \"attributes\", attributes);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function ConvertingThisFunctionToString(functionToBeConverted) {",
															"    let functionAsAString = String(functionToBeConverted);",
															"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
															"    return functionAsAString.slice(indexOfFirstCurly);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointPureEthernetStructureConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7f823862-a626-472d-ae3c-cf2c878cf6ba",
														"exec": [
															"console.log(\"\\n--------------EntryPoint of PureEthernetStructure Validation of Configuration-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the PureEthernetStructureConfiguration TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].pureEthernetStructureList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointPureEthernetStructureConfiguration\");",
															"        console.log(\"Proceeding with terminating PureEthernetStructure validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST = 0;",
															"",
															"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "798c422a-ce17-4c5d-8a2a-316a97fcb4eb",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6c1c685e-f31d-4218-b6fc-ce62825cdc57",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "CollectionInformationLoading",
									"item": [
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "53915c94-853b-410d-89df-1a5f4290a233",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4be2925b-f373-4404-9867-93597cb65628",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d23f6a49-b74f-42ee-8e78-5187b6d3e53f",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ebce5cd8-833c-43a6-9bc9-d11177d00a3e",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "PRSe08",
															"type": "string"
														},
														{
															"key": "username",
															"value": "senthilvel.s",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceStatus",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2efe4e6a-8c82-467d-9efc-437d5b2748b3",
														"exec": [
															"console.log(\"\\n------------------------------Uploading Interface Status----------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Status",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e10815b7-2a86-45dc-9bc5-973a3f4838d7",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "81098dae-98d1-4596-a173-e3206b50ca2a",
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "AttributeConfiguration",
									"item": [
										{
											"name": "EntryPointAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "089f9d94-0ee7-427a-8589-1da6d369d787",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the AttributeConfiguration Tests ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var attributes = pm.collectionVariables.get(\"attributes\");",
															"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
															"    ",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    ",
															"    CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"        ",
															"    if ( indexOfAttributeUnderTest < attributes.length ) {",
															"        postman.setNextRequest();",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointAttributeConfiguration\");",
															"    }",
															"        ",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri) {",
															"    pm.test(\"CouldTheAttributesBeLoaded\", function () {",
															"        pm.expect(attributes).to.be.an(\"array\");",
															"    });",
															"    pm.test(\"CouldIndexOfAttributeUnderTestBeLoaded\", function () {",
															"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"CouldTheDummyUriBeLoaded\", function () {",
															"        pm.expect(dummyUri).to.be.a(\"string\");",
															"        pm.expect(dummyUri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Writing",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c334d5e0-3b99-4bb2-a0d8-98e8afbc1c15",
														"exec": [
															"/****************************************************************************************",
															"* Retrieving DummyCode",
															"****************************************************************************************/",
															"try {",
															"    var dummyCode = JSON.parse(pm.response.code);",
															"    var dummyErrorMessage = \"\";",
															"    if ( Math.floor(dummyCode/100) !== 2 ) {",
															"        var dummyErrorMessage = JSON.parse(pm.response.stream).errors.error[0][\"error-message\"];",
															"    }",
															"    CouldResponseBeRetrieved(dummyCode, dummyErrorMessage);",
															"} catch (error) {",
															"    CouldResponseBeRetrieved();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting Local Variables",
															"****************************************************************************************/   ",
															"pm.variables.set(\"dummyCode\", dummyCode);",
															"pm.variables.set(\"dummyErrorMessage\", dummyErrorMessage);",
															"",
															"    ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldResponseBeRetrieved(responseCode, responseErrorMessage) {",
															"    pm.test(\"CouldTheDummyCodeOfPuttingBeReceived\", function () {",
															"        pm.expect(responseCode).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"CouldTheErrorMessagePuttingBeComposed\", function () {",
															"        pm.expect(responseErrorMessage).to.be.a(\"string\");",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "e1786261-1b00-416c-85fd-0be273336abf",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Writing",
															"* ",
															"* This Request is for PUTting an boolean attribute with the alternate value and",
															"* providing this value as dummyValueString to the local Variables.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfWritingAsaString = pm.environment.get(\"PreRequestOfWritingAsaString\");",
															"    eval(PreRequestOfWritingAsaString);",
															"    CouldPreRequestOfWritingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfWritingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfWritingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfWritingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Reading",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "54e4e6fb-f05c-46e0-af32-230b63893b4e",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Reading",
															"* ",
															"* This Request is for GETting the value of the attributeUnderTest and providing it ",
															"* as ResultValue to the local Variables",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfReadingAsaString = pm.environment.get(\"PreRequestOfReadingAsaString\");",
															"    eval(PreRequestOfReadingAsaString);",
															"    CouldPreRequestOfReadingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfReadingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfReadingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfReadingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "8637f649-5140-4197-84a3-45eb2964018a",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PostRequestOfReadingAsaString = pm.environment.get(\"PostRequestOfReadingAsaString\");",
															"    eval(PostRequestOfReadingAsaString);",
															"    CouldPostRequestOfReadingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPostRequestOfReadingBeExecuted();",
															"}",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPostRequestOfReadingBeExecuted(success) {",
															"    pm.test(\"CouldPostRequestOfReadingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Evaluating",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f121b613-e3e5-49bb-afeb-dcd0ae31f927",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Evaluating",
															"* ",
															"* This Request compares resultValue with dummyValue.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfEvaluatingAsaString = pm.environment.get(\"PreRequestOfEvaluatingAsaString\");",
															"    eval(PreRequestOfEvaluatingAsaString);",
															"    CouldPreRequestOfEvaluatingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfEvaluatingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfEvaluatingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfEvaluatingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Restoring",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "fb347d0b-1708-4aee-826b-6e19f2a92986",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Restoring",
															"* ",
															"* This Request is for Restoring the initial value to the attributeUnderTest",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfRestoringAsaString = pm.environment.get(\"PreRequestOfRestoringAsaString\");",
															"    eval(PreRequestOfRestoringAsaString);",
															"    CouldPreRequestOfRestoringBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfRestoringBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfRestoringBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfRestoringBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b52426a0-d971-4d62-be63-9473900be495",
														"exec": [
															"/****************************************************************************************",
															"* Setting Local Variables",
															"****************************************************************************************/   ",
															"pm.variables.clear();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ReversalPointAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7fb9e8de-02fa-4572-8eae-24b6bdd4105f",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"        ",
															"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
															"        ",
															"    CouldTheInputBeLoaded(dummyUri, indexOfAttributeUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextAttributeUnderTest = indexOfAttributeUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", indexOfPotentialNextAttributeUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointAttributeConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfAttributeUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0c048b2c-ac74-4657-812d-97fca9076845",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ccbc3551-3ff9-4514-a09a-1ff27d0a1cdd",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is terminating the Test",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "463d808c-a22b-453b-adf9-1336d47ddb28",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b0f06556-03d7-42d0-acfa-d0e25add459a",
														"exec": [
															"console.log(\"\\n-------------------Restoring the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"        ",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration",
															"                                                   );",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    completeClassName = moduleUnderTest + \":\" + technologyUnderTest + \"-configuration\";",
															"    configuration = AddHeadlineToDataObject(configuration, completeClassName);",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7015f174-591e-4055-8cdc-6334adb8df10",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "883a7da7-cb96-45ad-9a85-fb54ca0e8769",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "dad1f451-e50c-4fee-99e3-b8c51e39fd77",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointPureEthernetStructureConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "69d2a006-14b3-4e7b-9daa-8a6efce94652",
														"exec": [
															"console.log(\"\\n-------------ReversalPoint of PureEthernetStructure Validation of Configuration---------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Console.log of Validation Results",
															" ****************************************************************************************/",
															"let allConfigurationValidationResults = { \"allConfigurationValidationResults\" : configurationValidationResults };",
															"console.log(allConfigurationValidationResults);",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointPureEthernetStructureConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "876a2cf9-8c1f-4801-97e8-a405daace502",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointPureEthernetStructureConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "04c481d9-aad7-4542-8f0f-d2d67de4684e",
														"exec": [
															"console.log(\"\\n----------------------Terminating PureEthernetStructureConfiguration--------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is for clearing the Collection variables and terminating the TestCase",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "fba31559-754f-4d95-a4b7-08cd36f60a97",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "69a2be59-9da5-49ca-b52e-3f939bfab432",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e560578e-9833-414d-bd15-58e3322af684",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e89ca7e0-a6f2-491d-bbf6-6133619b4c17",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e6cd2396-ac3f-4f3c-a7c6-d225fc833c89",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d7d2ac87-60e4-4c1a-9bda-1cef8f8e3b24",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "50c72111-37ca-41b3-ab31-cf9bb8560f49",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "NetworkRestoration",
			"item": [],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "fc092f89-4772-4964-985b-e2af16c70988",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "337ee00d-8519-464b-9861-af66f43aefde",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Terminating",
			"item": [
				{
					"name": "ReversalPointInterfaceValidator",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "23289492-b791-491c-bd65-4d7163a02ad0",
								"exec": [
									"console.log(\"\\n------------------------ReversalPoint of the Interface Validator--------------------------\");",
									"/****************************************************************************************",
									"* ",
									"* ReversalPoint",
									"* ",
									"* Directs the flow of execution back to the StartPoint",
									"* ",
									"****************************************************************************************/",
									" ",
									" ",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
									"    CouldTheInputBeLoaded(dummyUri, indexOfDeviceUnderTest);",
									"} catch (error) {",
									"    CouldTheInputBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Providing Environment Variables for either Repeating or Terminating the Device Testing",
									" ****************************************************************************************/",
									"var indexOfPotentialNextDeviceUnderTest = indexOfDeviceUnderTest + 1;",
									"pm.environment.set(\"indexOfDeviceUnderTest\", indexOfPotentialNextDeviceUnderTest);",
									"",
									"postman.setNextRequest(\"StartPointDeviceTesting\");",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheRequestBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function CouldTheInputBeLoaded(uri, indexOfDeviceUnderTest) {",
									"    pm.test(\"CouldTheInputBeLoaded\", function () {",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "97f1cf3f-113e-4876-9410-60f6e1838931",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "EndPointInterfaceValidator",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "28c6f08c-36f2-432e-bba8-4dc61a0ff43d",
								"exec": [
									"console.log(\"\\n--------------------------Terminating the InterfaceValidator------------------------------\");",
									"/****************************************************************************************",
									"* ",
									"* EndPoint of the Interface Validator",
									"* ",
									"* This Request is for clearing the Environment variables and terminating the Program",
									"* ",
									"****************************************************************************************/",
									" ",
									" ",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    CouldTheInputBeLoaded(dummyUri);",
									"} catch (error) {",
									"    CouldTheInputBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Clearing all Environment Variables for Terminating the Program",
									" ****************************************************************************************/",
									"pm.environment.clear();",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheRequestBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function CouldTheInputBeLoaded(uri, controller, indexOfDeviceUnderTest) {",
									"    pm.test(\"CouldTheInputBeLoaded\", function () {",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2408572b-a490-4486-bd97-63ebe35b6036",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "b030129b-959a-4f4a-9d39-652abfd77083",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "09d37da7-4039-49a2-a7e6-eb1ef2f313eb",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "44f83e35-fdb8-4f01-b078-e8ad838d16c4",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "95e53f64-d1c9-4a4f-aafd-2b3ef29c44c4",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}