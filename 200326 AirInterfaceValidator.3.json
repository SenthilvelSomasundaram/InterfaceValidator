{XYZ
	"info": {
		"_postman_id": "a931ac2e-1268-42b5-a910-b72185b33138",
		"name": "AirInterfaceValidator.3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "UserInput",
			"item": [
				{
					"name": "UserInput",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "832f9ce8-d89d-43ab-89af-aeb94e48cdf4",
								"exec": [
									"console.log(\"\\n\\n\\n==========================================================================================\");",
									"console.log(\"================================= InterfaceValidator.3 ===================================\");",
									"console.log(\"==========================================================================================\");",
									"/*********************************************************************************************************",
									" * ",
									" * Request collection for validating the management interface of microwave devices",
									" * as it can be found on https://github.com/openBackhaul",
									" *  ",
									" * This RequestCollection is for perpetual complementation.",
									" * ",
									" *   !   Please, provide the following User Input   !",
									" * ",
									" *********************************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									" * Manual Definition of Source of Environmental Parameters",
									" ****************************************************************************************/",
									"SOURCE_OF_INPUT_PARAMETERS = \"manual\"; // choose from \"manual\", \"file\" or \"network\"",
									"IsValueOfSourceOfInputParametersCorrect(SOURCE_OF_INPUT_PARAMETERS);",
									"MULTIPLICITY_OF_DEVICE_ITERATIONS = \"all\"; // \"none\", \"one\" or \"all\" devices to be validated",
									"IsValueOfMultiplicityOfDeviceIterationsCorrect(MULTIPLICITY_OF_DEVICE_ITERATIONS);",
									"MANTIS_INTERFACE_STATUS = \"off\"; // choose from \"off\", \"read-only\" or \"read-write\"",
									"IsValueOfMantisInterfaceStatusCorrect(MANTIS_INTERFACE_STATUS);",
									"",
									"",
									"/****************************************************************************************",
									" * Manual Definition of Controller Information (required for \"manual\" and \"network\" only)",
									" ****************************************************************************************/",
									"if (SOURCE_OF_INPUT_PARAMETERS === \"manual\" || SOURCE_OF_INPUT_PARAMETERS === \"network\") {",
									"    IP_ADDRESS_OF_THE_CONTROLLER = \"172.29.145.200\";",
									"    RESTCONF_PORT_AT_THE_CONTROLLER = \"8181\";",

									"    AUTHORIZATION_CODE_AT_THE_CONTROLLER = \" -> Your authorization code at the controller- senthilvelsomasundaram <- \";",

									"    PATH_TO_DB_AND_MOUNT_POINT = \"/rests/data/network-topology:network-topology/topology=topology-netconf\";",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Manual Definition of Device Information (required for \"manual\" only)",
									" ****************************************************************************************/",
									"if (SOURCE_OF_INPUT_PARAMETERS === \"manual\") {",
									"    NAME_OF_DEVICE_UNDER_TEST = \" -> Mount name of the device under test <- \";",
									"    AUTHORIZATION_CODE_AT_THE_MANTIS = \" -> Your authorization code at the MantisBugTracker <- \";",
									"    UUID_OF_LTP_UNDER_TEST = \" -> UUID of the LTP under test <- \";",
									"    LID_OF_LP_UNDER_TEST = \" -> LID of the LP under test <- \";",
									"    PAC_UNDER_TEST = \"air-interface-2-0:air-interface-pac\";             // e.g. \"air-interface-2-0:air-interface-pac\"",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Automated Definition of Controller and Device Information by Loading Static Data File",
									" ****************************************************************************************/",
									"if (SOURCE_OF_INPUT_PARAMETERS === \"file\") {",
									"    IP_ADDRESS_OF_THE_CONTROLLER = data.IP_ADDRESS_OF_THE_CONTROLLER;",
									"    RESTCONF_PORT_AT_THE_CONTROLLER = data.RESTCONF_PORT_AT_THE_CONTROLLER;",
									"    AUTHORIZATION_CODE_AT_THE_CONTROLLER = data.AUTHORIZATION_CODE_AT_THE_CONTROLLER;",
									"    PATH_TO_DB_AND_MOUNT_POINT = data.PATH_TO_DB_AND_MOUNT_POINT;",
									"",
									"    NAME_OF_DEVICE_UNDER_TEST = data.NAME_OF_DEVICE_UNDER_TEST;",
									"    AUTHORIZATION_CODE_AT_THE_MANTIS = data.AUTHORIZATION_CODE_AT_THE_MANTIS;",
									"    UUID_OF_LTP_UNDER_TEST = data.UUID_OF_LTP_UNDER_TEST;",
									"    LID_OF_LP_UNDER_TEST = data.LID_OF_LP_UNDER_TEST;",
									"",
									"    PAC_UNDER_TEST = data.PAC_UNDER_TEST;",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Automated Definition of Device Information from Controller Topology Information",
									" ****************************************************************************************/",
									"if (SOURCE_OF_INPUT_PARAMETERS === \"network\") {",
									"    /* public version supports only SOURCE_OF_INPUT_PARAMETERS === \"manual\" || \"file\" */",
									"}",
									"",
									"/****************************************************************************************",
									" * Checking InputData",
									" ****************************************************************************************/",
									"try {",
									"    IsControllerAndDeviceInformationComplete(IP_ADDRESS_OF_THE_CONTROLLER,",
									"                                                RESTCONF_PORT_AT_THE_CONTROLLER,",
									"                                                AUTHORIZATION_CODE_AT_THE_CONTROLLER,",
									"                                                PATH_TO_DB_AND_MOUNT_POINT,",
									"                                                NAME_OF_DEVICE_UNDER_TEST,",
									"                                                AUTHORIZATION_CODE_AT_THE_MANTIS,",
									"                                                UUID_OF_LTP_UNDER_TEST,",
									"                                                LID_OF_LP_UNDER_TEST,",
									"                                                PAC_UNDER_TEST",
									"                                            );",
									"} catch (error) {",
									"    IsControllerAndDeviceInformationComplete();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Provided Environmental Variables ",
									" ****************************************************************************************/",
									"pm.environment.clear();",
									"",
									"INITIAL_INDEX_OF_DEVICE_UNDER_TEST = 0;",
									"DUMMY_URI = \"ping.openBackhaul.com\";",
									"",
									"class Interface {",
									"    constructor(newLtpUuid, newlpLid) {",
									"        this.ltpUuid = newLtpUuid;",
									"        this.lpLid = newlpLid;",
									"    }",
									"}",
									"try {",
									"    var interfaceUnderTest = new Interface(UUID_OF_LTP_UNDER_TEST, LID_OF_LP_UNDER_TEST);",
									"    IsInterfaceUnderTestDefined(interfaceUnderTest);",
									"} catch (error) {",
									"    IsInterfaceUnderTestDefined();",
									"}",
									"",
									"class Node {",
									"    constructor(newNodeId,",
									"                    newVendor,",
									"                    newDeviceType,",
									"                    newDeviceNumber,",
									"                    newMantisAuthorizationCode) {",
									"        this.nodeId = newNodeId;",
									"        this.vendor = newVendor;",
									"        this.deviceType = newDeviceType;",
									"        this.deviceNumber = newDeviceNumber;",
									"        this.mantisAuthorizationCode = newMantisAuthorizationCode;",
									"        this.airInterfaceList = [];",
									"        this.ethernetContainerList = [];",
									"        this.hybridMwStructureList = [];",
									"        this.ipInterfaceList = [];",
									"        this.macInterfaceList = [];",
									"        this.pureEthernetStructureList = [];",
									"        this.tdmContainerList = [];",
									"        this.vlanInterfaceList = [];",
									"        this.wireInterfaceList = [];",
									"    }",
									"}",
									"try {",
									"    var nodeUnderTest = new Node(NAME_OF_DEVICE_UNDER_TEST,",
									"                                    VendorOf(NAME_OF_DEVICE_UNDER_TEST),",
									"                                    TypeOf(NAME_OF_DEVICE_UNDER_TEST),",
									"                                    NumberOf(NAME_OF_DEVICE_UNDER_TEST),",
									"                                    AUTHORIZATION_CODE_AT_THE_MANTIS",
									"                                );  ",
									"    switch (TechnologyOf(PAC_UNDER_TEST)) {",
									"        case \"air-interface\":",
									"            nodeUnderTest.airInterfaceList.push(interfaceUnderTest);",
									"            break;",
									"        case \"ethernet-container\":",
									"            nodeUnderTest.ethernetContainerList.push(interfaceUnderTest);",
									"            break;",
									"        case \"hybrid-mw-structure\":",
									"            nodeUnderTest.hybridMwStructureList.push(interfaceUnderTest);",
									"            break;",
									"        case \"ip-interface\":",
									"            nodeUnderTest.ipInterfaceList.push(interfaceUnderTest);",
									"            break;",
									"        case \"mac-interface\":",
									"            nodeUnderTest.macInterfaceList.push(interfaceUnderTest);",
									"            break;",
									"        case \"pure-ethernet-structure\":",
									"            nodeUnderTest.pureEthernetStructureList.push(interfaceUnderTest);",
									"            break;",
									"        case \"tdm-container\":",
									"            nodeUnderTest.tdmContainerList.push(interfaceUnderTest);",
									"            break;",
									"        case \"vlan-interface\":",
									"            nodeUnderTest.vlanInterfaceList.push(interfaceUnderTest);",
									"            break;",
									"        case \"wire-interface\":",
									"            nodeUnderTest.wireInterfaceList.push(interfaceUnderTest);",
									"            break;",
									"    }",
									"    IsNodeUnderTestDefined(nodeUnderTest);",
									"} catch (error) {",
									"    IsNodeUnderTestDefined();",
									"}",
									"",
									"class Controller {",
									"    constructor(newControllerAddress,",
									"                    newAuthorizationCode,",
									"                    newPathToDbAndMountPoint) {",
									"        this.controllerAddress = newControllerAddress;",
									"        this.authorizationCode = newAuthorizationCode;",
									"        this.pathToDbAndMountPoint = newPathToDbAndMountPoint;",
									"        this.nodeList = [];",
									"    }",
									"}",
									"try {",
									"    var controller = new Controller(IP_ADDRESS_OF_THE_CONTROLLER + \":\" + RESTCONF_PORT_AT_THE_CONTROLLER,",
									"                                        AUTHORIZATION_CODE_AT_THE_CONTROLLER,",
									"                                        PATH_TO_DB_AND_MOUNT_POINT",
									"                                    );",
									"    controller.nodeList.push(nodeUnderTest);",
									"    IsControllerUnderTestDefined(controller);",
									"} catch (error) {",
									"    IsControllerUnderTestDefined();",
									"}",
									"",
									"pm.environment.set(\"multiplicityOfDeviceIterations\", MULTIPLICITY_OF_DEVICE_ITERATIONS);",
									"pm.environment.set(\"controller\", controller);",
									"pm.environment.set(\"indexOfDeviceUnderTest\", INITIAL_INDEX_OF_DEVICE_UNDER_TEST);",
									"pm.environment.set(\"mantisInterfaceStatus\", MANTIS_INTERFACE_STATUS);",
									"pm.environment.set(\"dummyUri\", DUMMY_URI);",
									"AreAllEnvironmentVariablesSet();",
									"",
									"",
									"/****************************************************************************************",
									" * Provided Collection Variables ",
									" ****************************************************************************************/",
									"pm.collectionVariables.clear();",
									"",
									"",
									"/****************************************************************************************",
									" * Setting up Local Variables and Preparing the Request",
									" ****************************************************************************************/",
									"pm.variables.clear();",
									"",
									"try {",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({ key: \"Authorization\", value: \"\" });",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });",
									"} catch (error) {}",
									"CouldTheRequestBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									" * Functions",
									" ****************************************************************************************/",
									"function TechnologyOf(pacUnderTest) {",
									"    let indexOfColon = pacUnderTest.indexOf(\":\");",
									"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
									"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
									"}",
									"",
									"function VendorOf(deviceUnderTest) {",
									"    let indexOfFirstUnderscore = deviceUnderTest.indexOf(\"_\");",
									"    return deviceUnderTest.slice(0, indexOfFirstUnderscore);",
									"}",
									"",
									"function TypeOf(deviceUnderTest) {",
									"    let deviceNameSegements = deviceUnderTest.split(\"_\");",
									"    return deviceNameSegements[1];",
									"}",
									"",
									"function NumberOf(deviceUnderTest) {",
									"    let indexOfSecondUnderscore = deviceUnderTest.indexOf(\"_\", deviceUnderTest.indexOf(\"_\") + 1);",
									"    return deviceUnderTest.slice(indexOfSecondUnderscore + 1);",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function IsValueOfSourceOfInputParametersCorrect(sourceOfInputParameters) {",
									"    pm.test(\"IsValueOfSourceOfInputParametersCorrect\", function() {",
									"        pm.expect(sourceOfInputParameters).to.be.oneOf([\"manual\", \"file\", \"network\"]);",
									"    });",
									"}",
									"",
									"function IsValueOfMultiplicityOfDeviceIterationsCorrect(multiplicityOfDeviceIterations) {",
									"    pm.test(\"IsValueOfMultiplicityOfDeviceIterationsCorrect\", function() {",
									"        pm.expect(multiplicityOfDeviceIterations).to.be.oneOf([\"none\", \"one\", \"all\"]);",
									"    });",
									"}",
									"",
									"function IsValueOfMantisInterfaceStatusCorrect(mantisInterfaceStatus) {",
									"    pm.test(\"IsValueOfMantisInterfaceStatusCorrect\", function() {",
									"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"    });",
									"}",
									"",
									"function IsControllerAndDeviceInformationComplete(ipAddressOfTheController,",
									"                                                    restconfPortAtTheController,",
									"                                                    authorizationCodeAtTheController,",
									"                                                    pathToDbAndMountPoint,",
									"                                                    nameOfDeviceUnderTest,",
									"                                                    authorizationCodeAtTheMantis,",
									"                                                    uuidOfLtpUnderTest,",
									"                                                    lidOfLpUnderTest,",
									"                                                    pacUnderTest) {",
									"    pm.test(\"IsControllerAndDeviceInformationComplete\", function() {",
									"        pm.expect(ipAddressOfTheController).to.be.a(\"string\");",
									"        pm.expect(ipAddressOfTheController).to.not.have.lengthOf(0);",
									"        pm.expect(restconfPortAtTheController).to.be.a(\"string\");",
									"        pm.expect(restconfPortAtTheController).to.not.have.lengthOf(0);",
									"        pm.expect(authorizationCodeAtTheController).to.be.a(\"string\");",
									"        pm.expect(authorizationCodeAtTheController).to.not.have.lengthOf(0);",
									"        pm.expect(pathToDbAndMountPoint).to.be.a(\"string\");",
									"        pm.expect(pathToDbAndMountPoint).to.not.have.lengthOf(0);",
									"        pm.expect(nameOfDeviceUnderTest).to.be.a(\"string\");",
									"        pm.expect(nameOfDeviceUnderTest).to.not.have.lengthOf(0);",
									"        pm.expect(authorizationCodeAtTheMantis).to.be.a(\"string\");",
									"        if (MANTIS_INTERFACE_STATUS !== \"off\") {",
									"            pm.expect(authorizationCodeAtTheMantis).to.not.have.lengthOf(0);",
									"        }",
									"        pm.expect(uuidOfLtpUnderTest).to.be.a(\"string\");",
									"        pm.expect(uuidOfLtpUnderTest).to.not.have.lengthOf(0);",
									"        pm.expect(lidOfLpUnderTest).to.be.a(\"string\");",
									"        pm.expect(lidOfLpUnderTest).to.not.have.lengthOf(0);",
									"        pm.expect(pacUnderTest).to.be.a(\"string\");",
									"        pm.expect(pacUnderTest).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function IsInterfaceUnderTestDefined(interfaceUnderTest) {",
									"    pm.test(\"IsInterfaceUnderTestDefined\", function() {",
									"        pm.expect(interfaceUnderTest).to.be.an.instanceof(Interface);",
									"        pm.expect(interfaceUnderTest.ltpUuid).to.be.a(\"string\");",
									"        pm.expect(interfaceUnderTest.ltpUuid).to.not.have.lengthOf(0);",
									"        pm.expect(interfaceUnderTest.lpLid).to.be.a(\"string\");",
									"        pm.expect(interfaceUnderTest.lpLid).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function IsNodeUnderTestDefined(nodeUnderTest) {",
									"    pm.test(\"IsNodeUnderTestDefined\", function() {",
									"        pm.expect(nodeUnderTest).to.be.an.instanceof(Node);",
									"        pm.expect(nodeUnderTest.nodeId).to.be.a(\"string\");",
									"        pm.expect(nodeUnderTest.nodeId).to.not.have.lengthOf(0);",
									"        pm.expect(nodeUnderTest.vendor).to.be.a(\"string\");",
									"        pm.expect(nodeUnderTest.vendor).to.not.have.lengthOf(0);",
									"        pm.expect(nodeUnderTest.deviceType).to.be.a(\"string\");",
									"        pm.expect(nodeUnderTest.deviceType).to.not.have.lengthOf(0);",
									"        pm.expect(nodeUnderTest.deviceNumber).to.be.a(\"string\");",
									"        pm.expect(nodeUnderTest.deviceNumber).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function IsControllerUnderTestDefined(controllerUnderTest) {",
									"    pm.test(\"IsControllerUnderTestDefined\", function() {",
									"        pm.expect(controllerUnderTest).to.be.an.instanceof(Controller);",
									"        pm.expect(controllerUnderTest.controllerAddress).to.be.a(\"string\");",
									"        pm.expect(controllerUnderTest.controllerAddress).to.not.have.lengthOf(0);",
									"        pm.expect(controllerUnderTest.authorizationCode).to.be.a(\"string\");",
									"        pm.expect(controllerUnderTest.authorizationCode).to.not.have.lengthOf(0);",
									"        pm.expect(controllerUnderTest.pathToDbAndMountPoint).to.be.a(\"string\");",
									"        pm.expect(controllerUnderTest.pathToDbAndMountPoint).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function AreAllEnvironmentVariablesSet() {",
									"    pm.test(\"AreAllEnvironmentVariablesSet\", function() {",
									"        pm.expect(pm.environment.get(\"controller\")).to.be.an.instanceof(Controller);",
									"        pm.expect(pm.environment.get(\"mantisInterfaceStatus\")).to.be.a(\"string\");",
									"        pm.expect(pm.environment.get(\"mantisInterfaceStatus\")).to.not.have.lengthOf(0);",
									"        pm.expect(pm.environment.get(\"dummyUri\")).to.be.a(\"string\");",
									"        pm.expect(pm.environment.get(\"dummyUri\")).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
									"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function() {",
									"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
									"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
									"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
									"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function() {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3f4c31f2-dedf-4c60-bbb3-43abc8abdbb9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "df505205-019b-4f4d-99a3-b9253691a518",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "a2472693-82f5-4013-8bf8-70be708350f5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "functions()",
			"item": [
				{
					"name": "PrintMantisIssuesForTechnologyAndClass()",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "86a8a8d1-653d-42ab-a676-846a23ba1a88",
								"exec": [
									"console.log(\"\\n-------------Uploading Function for Filtering and Listing of Mantis Issues----------------\");",
									"/****************************************************************************************",
									"* ",
									"* Definition of PrintMantisIssuesForTechnologyAndClass()",
									"* ",
									"* Function for filtering a list of Mantis issues for defined technology and class ",
									"* under test and console.log of the filtered issues.",
									"*  ",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    CouldTheInputBeLoaded(dummyUri);",
									"} catch (error) {",
									"    CouldTheInputBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Provided Environment Variables ",
									"****************************************************************************************/",
									"const PRINT_MANTIS_ISSUES_FOR_TECHNOLOGY_AND_CLASS = () => {",
									"    // Required Input Parameters",
									"    try {",
									"        var mantisIssueList = pm.environment.get(\"mantisIssueList\");",
									"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
									"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
									"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
									"        CouldInputForFilteringMantisIssuesBeLoaded(mantisIssueList, technologyUnderTest, ",
									"                                                        classUnderTest,",
									"                                                        attributeUnderTest",
									"                                                   );",
									"    } catch (error) {",
									"        CouldInputForFilteringMantisIssuesBeLoaded();",
									"    }",
									"",
									"    // Filtering the Mantis Issues for Technology and Class",
									"    try {",
									"        let technologyAndClassUnderTest = technologyUnderTest + \"-\" + classUnderTest;",
									"        var filteredIssueList = mantisIssueList;",
									"        for (let i=(filteredIssueList.length-1); i>=0; i--) {",
									"            let summary = filteredIssueList[i].summary;",
									"            let indexOfTwoColons = summary.indexOf(\"::\");",
									"            let technologyAndClass = summary.slice(0, indexOfTwoColons);",
									"            if (technologyAndClass!==technologyAndClassUnderTest){",
									"                filteredIssueList.splice(i,1);",
									"            } else {",
									"                if ( (attributeUnderTest!==undefined) && (attributeUnderTest!==\"\") ) {",
									"                    let indexOfBlank = summary.indexOf(\" \");",
									"                    let attributeName = summary.slice(indexOfTwoColons+2, indexOfBlank);",
									"                    if (attributeName!==attributeUnderTest){",
									"                        filteredIssueList.splice(i,1);",
									"                    }",
									"                }",
									"            }",
									"        }",
									"        CouldMantisIssueListBeFiltered(filteredIssueList);",
									"    } catch (error) {",
									"        CouldMantisIssueListBeFiltered();",
									"    }",
									"    ",
									"    // Printing filtered Issues into the Console",
									"    try {",
									"        if ( (filteredIssueList.length>0) && (attributeUnderTest!==\"\") ) {",
									"            console.log(\"Issues documented in Mantis:\");",
									"            for (let i=0; i<filteredIssueList.length; i++) {",
									"                let indexOfIssue = filteredIssueList[i].id;",
									"                let summary = filteredIssueList[i].summary;",
									"                let indexOfTwoColons = summary.indexOf(\"::\");",
									"                let attributeAndError = summary.slice(indexOfTwoColons+2);",
									"                let status = filteredIssueList[i].status.name;",
									"                console.log(\"#\" + indexOfIssue + \" : \" + attributeAndError + \" (\" + status + \")\");",
									"            }",
									"        }",
									"        CouldMantisIssueListBePrinted(true);",
									"    } catch (error) {",
									"        CouldMantisIssueListBePrinted(false);",
									"    }",
									"    ",
									"    // Provided Output Parameters",
									"    pm.variables.set(\"filteredIssueList\", filteredIssueList);",
									"    ",
									"    // Self Testing Functions",
									"    function CouldInputForFilteringMantisIssuesBeLoaded(mantisIssueList, technologyUnderTest, ",
									"                                                            classUnderTest,",
									"                                                            attributeUnderTest) {",
									"        pm.test(\"CouldInputForFilteringMantisIssuesBeLoaded\", function () {",
									"            pm.expect(mantisIssueList).to.be.an(\"array\");",
									"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
									"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
									"            pm.expect(classUnderTest).to.be.a(\"string\");",
									"            pm.expect(classUnderTest).to.not.have.lengthOf(0);",
									"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
									"        });",
									"    }",
									"    ",
									"    function CouldMantisIssueListBeFiltered(filteredIssueList) {",
									"        pm.test(\"CouldMantisIssueListBeFiltered\", function () {",
									"            pm.expect(filteredIssueList).to.be.an(\"array\");",
									"        });",
									"    }",
									"        ",
									"    function CouldMantisIssueListBePrinted(success) {",
									"        pm.test(\"CouldMantisIssueListBePrinted\", function () {",
									"            pm.expect(success).to.be.true;",
									"        });",
									"    }",
									"};",
									"pm.environment.set( \"PrintMantisIssuesForTechnologyAndClass\", ",
									"                            PRINT_MANTIS_ISSUES_FOR_TECHNOLOGY_AND_CLASS.toString() );",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheRequestBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function CouldTheInputBeLoaded(uri) {",
									"    pm.test(\"CouldTheInputBeLoaded\", function () {",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SettingTheRequestVariables()",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "86a8a8d1-653d-42ab-a676-846a23ba1a88",
								"exec": [
									"console.log(\"\\n------------------Uploading Function for Setting the Request Variables--------------------\");",
									"/****************************************************************************************",
									"* ",
									"* Definition of SettingTheRequestVariables()",
									"* ",
									"* Function for composing and setting of the local variables for GET requests.",
									"*  ",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    CouldTheInputBeLoaded(dummyUri);",
									"} catch (error) {",
									"    CouldTheInputBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Provided Collection Variables ",
									"****************************************************************************************/",
									"const SETTING_THE_REQUEST_VARIABLES = () => {",
									"    // Required Input Parameters",
									"    try {",
									"        var controller = pm.environment.get(\"controller\");",
									"        var dummyUri = pm.environment.get(\"dummyUri\");",
									"        var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
									"            ",
									"        var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
									"        var pacUnderTest = pm.collectionVariables.get(\"pacUnderTest\");",
									"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
									"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
									"            ",
									"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
									"        var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
									"        var keysOfDatatypeInstanceUnderTest = pm.variables.get(\"keysOfDatatypeInstanceUnderTest\");",
									"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
									"        var filteredContent = pm.variables.get(\"filteredContent\");",
									"        var filteredDepth = pm.variables.get(\"filteredDepth\");",
									"        var filteredFields = pm.variables.get(\"filteredFields\");",
									"        CouldInputForSettingTheRequestVariablesBeLoaded(controller, dummyUri,",
									"                                                            indexOfDeviceUnderTest, ",
									"                                                            indexOfLtpUnderTest,",
									"                                                            pacUnderTest,",
									"                                                            moduleUnderTest,",
									"                                                            technologyUnderTest,",
									"                                                            classUnderTest,",
									"                                                            datatypeUnderTest,",
									"                                                            keysOfDatatypeInstanceUnderTest,",
									"                                                            attributeUnderTest,",
									"                                                            filteredContent,",
									"                                                            filteredDepth,",
									"                                                            filteredFields",
									"                                                        );",
									"    } catch (error) {",
									"        CouldInputForSettingTheRequestVariablesBeLoaded();",
									"    }",
									"        ",
									"    // Preparing the Request",
									"    try {",
									"        let nodeIds = controller.nodeList[indexOfDeviceUnderTest];",
									"        var idPair;",
									"        switch (technologyUnderTest) {",
									"            case \"air-interface\":",
									"                idPair = nodeIds.airInterfaceList[indexOfLtpUnderTest];",
									"                break;",
									"            case \"ethernet-container\":",
									"                idPair = nodeIds.ethernetContainerList[indexOfLtpUnderTest];",
									"                break;",
									"            case \"hybrid-mw-structure\":",
									"                idPair = nodeIds.hybridMwStructureList[indexOfLtpUnderTest];",
									"                break;",
									"            case \"ip-interface\":",
									"                idPair = nodeIds.ipInterfaceList[indexOfLtpUnderTest];",
									"                break;",
									"            case \"mac-interface\":",
									"                idPair = nodeIds.macInterfaceList[indexOfLtpUnderTest];",
									"                break;",
									"            case \"pure-ethernet-structure\":",
									"                idPair = nodeIds.pureEthernetStructureList[indexOfLtpUnderTest];",
									"                break;",
									"            case \"tdm-container\":",
									"                idPair = nodeIds.tdmContainerList[indexOfLtpUnderTest];",
									"                break;",
									"            case \"vlan-interface\":",
									"                idPair = nodeIds.vlanInterfaceList[indexOfLtpUnderTest];",
									"                break;",
									"            case \"wire-interface\":",
									"                idPair = nodeIds.wireInterfaceList[indexOfLtpUnderTest];",
									"                break;",
									"        }",
									"        CouldIdPairForSettingTheRequestVariablesBeRetrieved(idPair);",
									"    } catch (error) {",
									"        CouldIdPairForSettingTheRequestVariablesBeRetrieved();",
									"    }",
									"        ",
									"    try {",
									"        var objectUnderTest = \"/core-model-1-4:control-construct/logical-termination-point=\" ",
									"                                    + idPair.ltpUuid",
									"                                    + \"/layer-protocol=\" ",
									"                                    + idPair.lpLid",
									"                                    + \"/\"",
									"                                    + pacUnderTest;",
									"        if ( (typeof technologyUnderTest!=\"undefined\") ",
									"                && (technologyUnderTest!==\"\")",
									"                && (classUnderTest!==\"pac\") ) {",
									"            objectUnderTest = objectUnderTest",
									"                                    + \"/\"",
									"                                    + technologyUnderTest",
									"                                    + \"-\"",
									"                                    + classUnderTest;",
									"        }",
									"        if ( (typeof datatypeUnderTest!=\"undefined\") && (datatypeUnderTest !== \"\") ) {",
									"            objectUnderTest = objectUnderTest",
									"                                    + \"/\"",
									"                                    + datatypeUnderTest",
									"                                    + \"=\"",
									"                                    + ReplaceColonsInside(keysOfDatatypeInstanceUnderTest[0]);",
									"            for (let i=1; i<keysOfDatatypeInstanceUnderTest.length; i++) {",
									"                objectUnderTest = objectUnderTest",
									"                                    + \",\"",
									"                                    + ReplaceColonsInside(keysOfDatatypeInstanceUnderTest[i]);",
									"            }",
									"        } ",
									"        if ( (typeof attributeUnderTest!=\"undefined\") && (attributeUnderTest !== \"\") ) {",
									"            objectUnderTest = objectUnderTest",
									"                                    + \"/\"",
									"                                    + attributeUnderTest;",
									"        }    ",
									"        let alreadySomeFilterAttached = false;",
									"        if ( (typeof filteredContent!=\"undefined\") ",
									"                && (typeof filteredDepth!=\"undefined\") ",
									"                && (typeof filteredFields!=\"undefined\") ) {",
									"            if (filteredContent !== \"\" || filteredDepth !== 0 || filteredFields !== \"\") {",
									"                objectUnderTest = objectUnderTest",
									"                                        + \"?\";",
									"            }",
									"            if (filteredContent !== \"\") {",
									"                objectUnderTest = objectUnderTest",
									"                                        + \"content=\"",
									"                                        + filteredContent;",
									"                alreadySomeFilterAttached = true;",
									"            }",
									"            if (filteredDepth !== 0) {",
									"                if (alreadySomeFilterAttached) {",
									"                     objectUnderTest = objectUnderTest",
									"                                        + \"&\";",
									"                }",
									"                objectUnderTest = objectUnderTest",
									"                                        + \"depth=\"",
									"                                        + filteredDepth;",
									"                alreadySomeFilterAttached = true;",
									"            }",
									"            if (filteredFields !== \"\") {",
									"                if (alreadySomeFilterAttached) {",
									"                     objectUnderTest = objectUnderTest",
									"                                        + \"&\";",
									"                }",
									"                objectUnderTest = objectUnderTest",
									"                                        + \"fields=\"",
									"                                        + filteredFields;",
									"                alreadySomeFilterAttached = true;",
									"            }",
									"        }",
									"        HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(objectUnderTest);",
									"    } catch (error) {",
									"        HasObjectUnderTestBeenDefinedForSettingTheRequestVariables();",
									"    }",
									"        ",
									"    try {",
									"        var uri = \"http://\" ",
									"                    + controller.controllerAddress ",
									"                    + controller.pathToDbAndMountPoint ",
									"                    + \"/node=\" ",
									"                    + controller.nodeList[indexOfDeviceUnderTest].nodeId ",
									"                    + \"/yang-ext:mount\" ",
									"                    + objectUnderTest;",
									"        HasUriBeenDefinedForSettingTheRequestVariables(uri);",
									"    } catch (error) {",
									"        uri = dummyUri;",
									"        HasUriBeenDefinedForSettingTheRequestVariables();",
									"    }",
									"        ",
									"    pm.variables.set(\"uri\", uri);",
									"    pm.request.headers.upsert({key:\"Authorization\", value:controller.authorizationCode});",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});",
									"        ",
									"    // Functions",
									"    function ReplaceColonsInside(keyAttributeValue) {",
									"        return encodeURIComponent(keyAttributeValue);",
									"    }",
									"",
									"    // Self Testing Functions",
									"    function CouldInputForSettingTheRequestVariablesBeLoaded(controller, uri,",
									"                                                                indexOfDeviceUnderTest, ",
									"                                                                indexOfLtpUnderTest,",
									"                                                                pacUnderTest,",
									"                                                                moduleUnderTest,",
									"                                                                technologyUnderTest,",
									"                                                                classUnderTest,",
									"                                                                datatypeUnderTest,",
									"                                                                keysOfDatatypeInstanceUnderTest,",
									"                                                                attributeUnderTest,",
									"                                                                filteredContent,",
									"                                                                filteredDepth,",
									"                                                                filteredFields) {",
									"        pm.test(\"CouldInputForSettingTheRequestVariablesBeLoaded\", function () {",
									"            pm.expect(controller).to.be.an(\"object\");",
									"            pm.expect(uri).to.be.a(\"string\");",
									"            pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
									"            pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
									"            pm.expect(pacUnderTest).to.be.a(\"string\");",
									"            pm.expect(pacUnderTest).to.not.have.lengthOf(0);",
									"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
									"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
									"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
									"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
									"            pm.expect(classUnderTest).to.be.a(\"string\");",
									"            pm.expect(classUnderTest).to.not.have.lengthOf(0);",
									"            pm.expect(datatypeUnderTest).to.be.a(\"string\");",
									"            pm.expect(keysOfDatatypeInstanceUnderTest).to.be.an(\"array\");",
									"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
									"            pm.expect(filteredContent).to.be.a(\"string\");",
									"            pm.expect(filteredDepth).to.be.a(\"number\");",
									"            pm.expect(filteredFields).to.be.a(\"string\");",
									"        });",
									"    }",
									"        ",
									"    function CouldIdPairForSettingTheRequestVariablesBeRetrieved(idPair) {",
									"        pm.test(\"CouldIdPairForSettingTheRequestVariablesBeRetrieved\", function () {",
									"            pm.expect(idPair.ltpUuid).to.be.a(\"string\");",
									"            pm.expect(idPair.ltpUuid).to.not.have.lengthOf(0);",
									"            pm.expect(idPair.lpLid).to.be.an(\"string\");",
									"            pm.expect(idPair.lpLid).to.not.have.lengthOf(0);",
									"        });",
									"    }",
									"    ",
									"    function HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(objectUnderTest) {",
									"        pm.test(\"HasObjectUnderTestBeenDefinedForSettingTheRequestVariables\", function () {",
									"            pm.expect(objectUnderTest).to.be.a(\"string\");",
									"            pm.expect(objectUnderTest).to.not.have.lengthOf(0);",
									"        });",
									"    }",
									"    ",
									"    function HasUriBeenDefinedForSettingTheRequestVariables(uri) {",
									"        pm.test(\"HasUriBeenDefinedForSettingTheRequestVariables\", function () {",
									"            pm.expect(uri).to.be.a(\"string\");",
									"            pm.expect(uri).to.not.have.lengthOf(0);",
									"        });",
									"    }",
									"};",
									"pm.environment.set( \"SettingTheRequestVariables\", SETTING_THE_REQUEST_VARIABLES.toString() );",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheRequestBePrepared();",
									"",
									" ",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function CouldTheInputBeLoaded(uri) {",
									"    pm.test(\"CouldTheInputBeLoaded\", function () {",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "CommentingResponse()",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "86a8a8d1-653d-42ab-a676-846a23ba1a88",
								"exec": [
									"console.log(\"\\n--------------------Uploading Function for Commenting GET Responses-----------------------\");",
									"/****************************************************************************************",
									"* ",
									"* Definition of CommentingGetResponse()",
									"* ",
									"* Function for creating a result statement on the console.log based on the Response ",
									"* Code of a GET Request.",
									"*  ",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    CouldTheInputBeLoaded(dummyUri);",
									"} catch (error) {",
									"    CouldTheInputBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Provided Collection Variables ",
									"****************************************************************************************/",
									"const COMMENTING_RESPONSE = () => {",
									"    // Required Input Parameters",
									"    try {",
									"        var controller = pm.environment.get(\"controller\");",
									"        var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
									"            ",
									"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
									"            ",
									"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
									"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
									"        var positiveOutcome = pm.variables.get(\"positiveOutcome\");",
									"        var negativeOutcome = pm.variables.get(\"negativeOutcome\");",
									"        var response = pm.variables.get(\"response\");",
									"        CouldInputForCommentingResponseBeLoaded(controller, indexOfDeviceUnderTest,",
									"                                                            technologyUnderTest,",
									"                                                            classUnderTest,",
									"                                                            attributeUnderTest,",
									"                                                            positiveOutcome,",
									"                                                            negativeOutcome,",
									"                                                            response",
									"                                                );",
									"    } catch (error) {",
									"        CouldInputForCommentingResponseBeLoaded();",
									"    }",
									"        ",
									"    // Typing the comment",
									"    try {",
									"        let nameOfTheDeviceUnderTest = controller.nodeList[indexOfDeviceUnderTest].nodeId;",
									"        let objectUnderTest = technologyUnderTest + \"-\" + classUnderTest;",
									"        let responseCode = parseInt(response.code);",
									"        if (attributeUnderTest!==\"\") {",
									"            objectUnderTest = objectUnderTest",
									"                                + \"::\"",
									"                                + attributeUnderTest;",
									"        }",
									"        ",
									"        if (Math.floor(responseCode/100) === 2) {",
									"            console.log(objectUnderTest + \" at \" + nameOfTheDeviceUnderTest + positiveOutcome);",
									"        } else {",
									"            console.log(\" ERROR: \" + objectUnderTest + \" at \" + nameOfTheDeviceUnderTest ",
									"                                + negativeOutcome + \" Response Code: \" + pm.response.code);",
									"        }",
									"        CouldCommentBeComposedandPrinted(nameOfTheDeviceUnderTest, objectUnderTest);",
									"    } catch (error) {",
									"        CouldCommentBeComposedandPrinted();",
									"    }",
									"        ",
									"    // Self Testing Functions",
									"    function CouldInputForCommentingResponseBeLoaded(controller, indexOfDeviceUnderTest,",
									"                                                            technologyUnderTest,",
									"                                                            classUnderTest,",
									"                                                            attributeUnderTest,",
									"                                                            positiveOutcome,",
									"                                                            negativeOutcome,",
									"                                                            response) {",
									"        pm.test(\"CouldEnvironmentForCommentingResponseBeLoaded\", function () {",
									"            pm.expect(controller).to.be.a(\"object\");",
									"        });",
									"        pm.test(\"CouldIndexOfDeviceForCommentingResponseBeLoaded\", function () {",
									"            pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
									"        });",
									"        pm.test(\"CouldTechnologyUnderTestForCommentingResponseBeLoaded\", function () {",
									"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
									"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
									"        });",
									"        pm.test(\"CouldClassUnderTestForCommentingResponseBeLoaded\", function () {",
									"            pm.expect(classUnderTest).to.be.a(\"string\");",
									"            pm.expect(classUnderTest).to.not.have.lengthOf(0);",
									"        });",
									"        pm.test(\"CouldAttributeUnderTestForCommentingResponseBeLoaded\", function () {",
									"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
									"        });",
									"        pm.test(\"CouldPositiveOutcomeForCommentingResponseBeLoaded\", function () {",
									"            pm.expect(positiveOutcome).to.be.a(\"string\");",
									"            pm.expect(positiveOutcome).to.not.have.lengthOf(0);",
									"        });",
									"        pm.test(\"CouldNegativeOutcomeForCommentingResponseBeLoaded\", function () {",
									"            pm.expect(negativeOutcome).to.be.a(\"string\");",
									"            pm.expect(negativeOutcome).to.not.have.lengthOf(0);",
									"        });",
									"        pm.test(\"CouldResponseForCommentingResponseBeLoaded\", function () {",
									"            pm.expect(response).to.be.a(\"object\");",
									"        });",
									"    }",
									"    function CouldCommentBeComposedandPrinted(nameOfTheDeviceUnderTest, objectUnderTest) {",
									"        pm.test(\"CouldCommentBeComposedandPrinted\", function () {",
									"            pm.expect(nameOfTheDeviceUnderTest).to.be.a(\"string\");",
									"            pm.expect(nameOfTheDeviceUnderTest).to.not.have.lengthOf(0);",
									"            pm.expect(objectUnderTest).to.be.a(\"string\");",
									"            pm.expect(objectUnderTest).to.not.have.lengthOf(0);",
									"        });",
									"    }",
									"};",
									"pm.environment.set( \"CommentingResponse\", COMMENTING_RESPONSE.toString() );",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheRequestBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function CouldTheInputBeLoaded(uri) {",
									"    pm.test(\"CouldTheInputBeLoaded\", function () {",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UploadingInterfaceInformation()",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "86a8a8d1-653d-42ab-a676-846a23ba1a88",
								"exec": [
									"console.log(\"\\n-----------------Uploading Function for Uploading Interface Information-------------------\");",
									"/****************************************************************************************",
									"* ",
									"* Definition of UploadingInterfaceInformation()",
									"* ",
									"* Defines code that is shared by UploadingInterfaceCapability and ",
									"* UploadingInterfaceConfiguration in the Tests script.",
									"*",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    CouldTheInputBeLoaded(dummyUri);",
									"} catch (error) {",
									"    CouldTheInputBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Provided Collection Variables ",
									"****************************************************************************************/",
									"const UPLOADING_INTERFACE_INFORMATION = () => {",
									"    // Required Input Parameters",
									"    try {",
									"        var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
									"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
									"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
									"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
									"        var response = pm.variables.get(\"response\");",
									"        CouldInputForUploadingInterfaceInformationBeLoaded(moduleUnderTest, ",
									"                                                                technologyUnderTest, ",
									"                                                                CommentingResponse, ",
									"                                                                classUnderTest,",
									"                                                                response",
									"                                                            );",
									"    } catch (error) {",
									"        CouldInputForUploadingInterfaceInformationBeLoaded();",
									"    }",
									"    ",
									"    // Commenting the ResponseCode",
									"    pm.variables.set(\"positiveOutcome\", \" successfully uploaded.\");",
									"    pm.variables.set(\"negativeOutcome\", \" could not be retrieved.\");",
									"    try {",
									"        eval(CommentingResponse)();",
									"        CouldCommentingResponseBeSuccessfullyCalled(true);",
									"    } catch (error) {",
									"        CouldCommentingResponseBeSuccessfullyCalled(false);",
									"    }",
									"    ",
									"    // Extracting Uploaded Information",
									"    try {",
									"        let objectInclHeadline;",
									"        var objectWithoutHeadline;",
									"        if (response.code == 200) {",
									"            objectInclHeadline = response.json();",
									"            objectWithoutHeadline = objectInclHeadline[moduleUnderTest ",
									"                                                            + \":\" ",
									"                                                            + technologyUnderTest ",
									"                                                            + \"-\" ",
									"                                                            + classUnderTest",
									"                                                        ];",
									"        }",
									"        CouldInformationBeSuccessfullyUploaded(response.code, objectWithoutHeadline);",
									"    } catch (error) {",
									"        CouldInformationBeSuccessfullyUploaded();",
									"    }",
									"    ",
									"    // Provided Output Parameters",
									"    pm.collectionVariables.set(classUnderTest, objectWithoutHeadline);",
									"        ",
									"    // Self Testing Functions",
									"    function CouldInputForUploadingInterfaceInformationBeLoaded(moduleUnderTest, ",
									"                                                                technologyUnderTest, ",
									"                                                                CommentingResponse, ",
									"                                                                classUnderTest,",
									"                                                                response) {",
									"        pm.test(\"CouldModuleUnderTestForUploadingInterfaceInformationBeLoaded\", function () {",
									"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
									"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
									"        });",
									"        pm.test(\"CouldTechnologyUnderTestForUploadingInterfaceInformationBeLoaded\", function () {",
									"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
									"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
									"        });",
									"        pm.test(\"CouldCommentingResponseForUploadingInterfaceInformationBeLoaded\", function () {",
									"            pm.expect(CommentingResponse).to.be.a(\"string\");",
									"            pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
									"        });",
									"        pm.test(\"CouldClassUnderTestForUploadingInterfaceInformationBeLoaded\", function () {",
									"            pm.expect(classUnderTest).to.be.a(\"string\");",
									"            pm.expect(classUnderTest).to.not.have.lengthOf(0);",
									"        });",
									"        pm.test(\"CouldResponseForUploadingInterfaceInformationBeLoaded\", function () {",
									"            pm.expect(response).to.be.a(\"object\");",
									"        });",
									"    }",
									"        ",
									"    function CouldCommentingResponseBeSuccessfullyCalled(success) {",
									"        pm.test(\"CouldCommentingResponseBeSuccessfullyCalled\", function () {",
									"            pm.expect(success).to.be.true;",
									"        });",
									"    }",
									"    ",
									"    function CouldInformationBeSuccessfullyUploaded(responseCode, response) {",
									"        pm.test(\"CouldInformationBeSuccessfullyUploaded\", function () {",
									"            pm.expect(responseCode).to.equal(200);",
									"            pm.expect(response).to.be.a(\"object\");",
									"        });",
									"    }    ",
									"};",
									"pm.environment.set( \"UploadingInterfaceInformation\", UPLOADING_INTERFACE_INFORMATION.toString() );",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheRequestBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function CouldTheInputBeLoaded(uri) {",
									"    pm.test(\"CouldTheInputBeLoaded\", function () {",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "RemoveAttributeFromRequired()",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "86a8a8d1-653d-42ab-a676-846a23ba1a88",
								"exec": [
									"console.log(\"\\n----------------Uploading Function for Shortening the Reference Schema--------------------\");",
									"/****************************************************************************************",
									"* ",
									"* Definition of RemoveAttributeFromRequired()",
									"* ",
									"* Function for removing some attribute from the list of required attributes in the ",
									"* reference schema.",
									"* ",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    CouldTheInputBeLoaded(dummyUri);",
									"} catch (error) {",
									"    CouldTheInputBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Provided Collection Variables ",
									"****************************************************************************************/",
									"const REMOVE_ATTRIBUTE_FROM_REQUIRED = () => {",
									"    // Required Input Parameters",
									"    try {",
									"        var schemaToBeShortened = pm.variables.get(\"schemaToBeShortened\");",
									"        var unRequiredAttribute = pm.variables.get(\"unRequiredAttribute\");",
									"        CouldInputForRemoveAttributeFromRequiredBeLoaded(schemaToBeShortened, unRequiredAttribute);",
									"    } catch (error) {",
									"        CouldInputForRemoveAttributeFromRequiredBeLoaded();",
									"    }",
									"        ",
									"    // Removing the Attribute from Required",
									"    try {",
									"        unRequiredAttribute = '\"' + unRequiredAttribute + '\"';",
									"        let schemaString = JSON.stringify(schemaToBeShortened);",
									"        let indexOfStartOfSubStringToBeDeleted = schemaString.lastIndexOf(unRequiredAttribute);",
									"        let precedingSubString = schemaString.slice(0, indexOfStartOfSubStringToBeDeleted);",
									"        let indexOfEndOfSubStringToBeDeleted = indexOfStartOfSubStringToBeDeleted + unRequiredAttribute.length;",
									"        let subsequentSubString = schemaString.slice(indexOfEndOfSubStringToBeDeleted);",
									"        schemaString = precedingSubString + subsequentSubString;",
									"        let shortenedSchema = JSON.parse(schemaString);",
									"        CouldTheAttributeBeRemovedFromRequired(shortenedSchema);",
									"    } catch (error) {",
									"        CouldTheAttributeBeRemovedFromRequired();",
									"    }    ",
									"        ",
									"    // Provided Output Parameters",
									"    pm.variables.set(\"shortenedSchema\", shortenedSchema);",
									"    ",
									"    // Self Testing Functions",
									"    function CouldInputForRemoveAttributeFromRequiredBeLoaded(schemaToBeShortened, unRequiredAttribute) {",
									"        pm.test(\"CouldInputForRemoveAttributeFromRequiredBeLoaded\", function () {",
									"            pm.expect(schemaToBeShortened).to.be.a(\"string\");",
									"            pm.expect(schemaToBeShortened).to.not.have.lengthOf(0);",
									"            pm.expect(unRequiredAttribute).to.be.a(\"string\");",
									"            pm.expect(unRequiredAttribute).to.not.have.lengthOf(0);",
									"        });",
									"    }",
									"    ",
									"    function CouldTheAttributeBeRemovedFromRequired(shortenedSchema) {",
									"        pm.test(\"CouldTheAttributeBeRemovedFromRequired\", function () {",
									"            pm.expect(shortenedSchema).to.be.an(\"object\");",
									"        });",
									"    }    ",
									"};",
									"pm.environment.set( \"RemoveAttributeFromRequired\", REMOVE_ATTRIBUTE_FROM_REQUIRED.toString() );",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheRequestBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function CouldTheInputBeLoaded(uri) {",
									"    pm.test(\"CouldTheInputBeLoaded\", function () {",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ValidatingCompleteness()",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "86a8a8d1-653d-42ab-a676-846a23ba1a88",
								"exec": [
									"console.log(\"\\n---------------------Uploading Function for Validating Completeness-----------------------\");",
									"/****************************************************************************************",
									"* ",
									"* Definition of ValidatingCompleteness()",
									"* ",
									"* Function for Validating the uploaded device response against a reference schema.",
									"*  ",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    CouldTheInputBeLoaded(dummyUri);",
									"} catch (error) {",
									"    CouldTheInputBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Provided Collection Variables ",
									"****************************************************************************************/",
									"const VALIDATING_COMPLETENESS = () => {",
									"    // Required Input Parameters",
									"    try {",
									"        var controller = pm.environment.get(\"controller\");",
									"        var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
									"        var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
									"        var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
									"            ",
									"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
									"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
									"",
									"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
									"        var reference = pm.variables.get(\"schema\");",
									"        var response = pm.variables.get(\"response\");",
									"        CouldInputForValidatingCompletenessBeLoaded(controller, mantisInterfaceStatus, ",
									"                                                        indexOfDeviceUnderTest, ",
									"                                                        moduleUnderTest, ",
									"                                                        technologyUnderTest, ",
									"                                                        PrintMantisIssuesForTechnologyAndClass, ",
									"                                                        classUnderTest, ",
									"                                                        reference,",
									"                                                        response);",
									"    } catch (error) {",
									"        CouldInputForValidatingCompletenessBeLoaded();",
									"    }",
									"",
									"    // Validating Completeness",
									"    try {",
									"        var nameOfTheDeviceUnderTest = controller.nodeList[indexOfDeviceUnderTest].nodeId;",
									"        var objectUnderTest = technologyUnderTest + \"-\" + classUnderTest;",
									"        CouldLocalVariablesBeRetrieved(nameOfTheDeviceUnderTest, objectUnderTest);",
									"    } catch (error) {",
									"        CouldLocalVariablesBeRetrieved();",
									"    }",
									"        ",
									"    try {",
									"        if (response.code == 200) {",
									"            var objectInclHeadline = response.json();",
									"            var object = objectInclHeadline[moduleUnderTest + \":\" + technologyUnderTest + \"-\" + classUnderTest];",
									"            console.log(objectUnderTest + \" at \" + nameOfTheDeviceUnderTest + \" could be retrieved:\");",
									"            console.log(object);",
									"            ",
									"            console.log(objectUnderTest + \" Reference:\");               ",
									"            console.log(reference);                                     ",
									"            ",
									"            console.log(objectUnderTest + \" at \" + nameOfTheDeviceUnderTest + \" Validation Result: \");",
									"            console.log(tv4.validateMultiple(object, reference, true, true));",
									"        } else {",
									"            console.log(\" ERROR: \" + objectUnderTest + \" at \" + nameOfTheDeviceUnderTest ",
									"                            + \" could not be retrieved. Response Code: \" + response.code);",
									"        }",
									"        CouldValidationBeExecuted(true);",
									"    } catch (error) {",
									"        CouldValidationBeExecuted(false);",
									"    }",
									"        ",
									"    try {",
									"        if (mantisInterfaceStatus===\"read-only\") {",
									"            eval(PrintMantisIssuesForTechnologyAndClass)();",
									"            CouldMantisIssuesBeListed(true);",
									"        }",
									"    } catch (error) {",
									"        CouldMantisIssuesBeListed(false);",
									"    }",
									"",
									"    // Self Testing Functions",
									"    function CouldInputForValidatingCompletenessBeLoaded(controller, mantisInterfaceStatus, ",
									"                                                            indexOfDeviceUnderTest, ",
									"                                                            moduleUnderTest, ",
									"                                                            technologyUnderTest, ",
									"                                                            PrintMantisIssuesForTechnologyAndClass, ",
									"                                                            classUnderTest, ",
									"                                                            reference,",
									"                                                            response) {",
									"        pm.test(\"CouldInputForValidatingCompletenessBeLoaded\", function () {",
									"            pm.expect(controller).to.be.an(\"object\");",
									"            pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"            pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
									"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
									"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
									"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
									"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
									"            pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
									"            pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
									"            pm.expect(classUnderTest).to.be.a(\"string\");",
									"            pm.expect(classUnderTest).to.not.have.lengthOf(0);",
									"            pm.expect(reference).to.be.a(\"object\");",
									"            pm.expect(response).to.be.a(\"object\");",
									"        });",
									"    }",
									"        ",
									"    function CouldLocalVariablesBeRetrieved(nameOfTheDeviceUnderTest, objectUnderTest) {",
									"        pm.test(\"CouldLocalVariablesBeRetrieved\", function () {",
									"            pm.expect(nameOfTheDeviceUnderTest).to.be.a(\"string\");",
									"            pm.expect(nameOfTheDeviceUnderTest).to.not.have.lengthOf(0);",
									"            pm.expect(objectUnderTest).to.be.a(\"string\");",
									"            pm.expect(objectUnderTest).to.not.have.lengthOf(0);",
									"        });",
									"    }",
									"        ",
									"    function CouldValidationBeExecuted(success) {",
									"        pm.test(\"CouldValidationBeExecuted\", function () {",
									"            pm.expect(success).to.be.true;",
									"        });",
									"    }",
									"        ",
									"    function CouldMantisIssuesBeListed(success) {",
									"        pm.test(\"CouldMantisIssuesBeListed\", function () {",
									"            pm.expect(success).to.be.true;",
									"        });",
									"    }",
									"};",
									"pm.environment.set( \"ValidatingCompleteness\", VALIDATING_COMPLETENESS.toString() );",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheRequestBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function CouldTheInputBeLoaded(uri) {",
									"    pm.test(\"CouldTheInputBeLoaded\", function () {",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5d74efbf-bda6-462a-be59-2f6d01a72f25",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "bd13da36-0c59-4874-bd48-5b037ad6cf0d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "EnvironmentInformationLoading",
			"item": [
				{
					"name": "StartPointDeviceTesting",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "86a8a8d1-653d-42ab-a676-846a23ba1a88",
								"exec": [
									"console.log(\"\\n######################## StartingPoint of Validation of a Device #########################\");",
									"/****************************************************************************************",
									"* ",
									"* StartPoint",
									"* ",
									"* Manages the number of iterations over several devices in the environment",
									"* ",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var multiplicityOfDeviceIterations = pm.environment.get(\"multiplicityOfDeviceIterations\");",
									"    var controller = pm.environment.get(\"controller\");",
									"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, multiplicityOfDeviceIterations, dummyUri);",
									"} catch (error) {",
									"    CouldTheInputBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Displaying ",
									"****************************************************************************************/",
									"try {",
									"    var numberOfExistingDevices = controller.nodeList.length;",
									"    var maximumIndexOfDeviceUnderTest;",
									"    switch (multiplicityOfDeviceIterations) {",
									"        case \"none\":",
									"            maximumIndexOfDeviceUnderTest = -1;",
									"            break;",
									"        case \"one\":",
									"            maximumIndexOfDeviceUnderTest = Math.max( 0, (numberOfExistingDevices-1) );",
									"            break;",
									"        case \"all\":",
									"            maximumIndexOfDeviceUnderTest = (numberOfExistingDevices-1);",
									"            break;",
									"    }",
									"    CouldMaximumIndexOfDeviceUnderTestBeDetermined(maximumIndexOfDeviceUnderTest);",
									"} catch (error) {",
									"    CouldMaximumIndexOfDeviceUnderTestBeDetermined();",
									"}    ",
									"try {",
									"    if (indexOfDeviceUnderTest<=maximumIndexOfDeviceUnderTest) {",
									"        postman.setNextRequest();",
									"        console.log(\"Testing of the \" + (indexOfDeviceUnderTest+1) + \". out of \" ",
									"                        + (maximumIndexOfDeviceUnderTest+1) ",
									"                        + \" Devices will be started.\");",
									"    } else {",
									"        postman.setNextRequest(\"EndPointInterfaceValidator\");",
									"        console.log(\"Proceeding with terminating the Interface Validator.\");",
									"    }",
									"    CouldFurtherProceedingBeDetermined(true);",
									"} catch (error) {",
									"    CouldFurtherProceedingBeDetermined(false);",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheRequestBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, ",
									"                                multiplicityOfDeviceIterations, uri) {",
									"    pm.test(\"CouldTheInputBeLoaded\", function () {",
									"        pm.expect(controller).to.be.an(\"object\");",
									"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
									"        pm.expect(multiplicityOfDeviceIterations).to.be.a(\"string\");",
									"        pm.expect(multiplicityOfDeviceIterations).to.not.have.lengthOf(0);",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldMaximumIndexOfDeviceUnderTestBeDetermined(maximumIndexOfDeviceUnderTest) {",
									"    pm.test(\"CouldMaximumIndexOfDeviceUnderTestBeDetermined\", function () {",
									"        pm.expect(maximumIndexOfDeviceUnderTest).to.be.a(\"number\");",
									"    });",
									"}",
									"",
									"function CouldFurtherProceedingBeDetermined(success) {",
									"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
									"        pm.expect(success).to.be.true;",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "LoadingMantisIssues",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "86a8a8d1-653d-42ab-a676-846a23ba1a88",
								"exec": [
									"console.log(\"\\n----------------------------------Loading Mantis Issues-----------------------------------\");",
									"/****************************************************************************************",
									"* ",
									"* Loading Mantis Issues",
									"*  ",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
									"    var controller = pm.environment.get(\"controller\");",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
									"    CouldInputForLoadingMantisIssuesBeLoaded(mantisInterfaceStatus, controller, ",
									"                                            dummyUri, ",
									"                                            indexOfDeviceUnderTest",
									"                                           );",
									"} catch (error) {",
									"    CouldInputForLoadingMantisIssuesBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    if (mantisInterfaceStatus===\"read-only\" || mantisInterfaceStatus===\"read-write\") {",
									"        var vendor = controller.nodeList[indexOfDeviceUnderTest].vendor;",
									"        var mantisAuthorizationCode = controller.nodeList[indexOfDeviceUnderTest].mantisAuthorizationCode;",
									"        var uri = \"https://\" + vendor + \".bugtracker.openBackhaul.com/api/rest/issues\";",
									"        CouldTheMantisUriBeComposed(vendor, mantisAuthorizationCode, uri);",
									"    } else {",
									"        console.log(\"Loading Mantis Issues has been configured to be switched-off.\")",
									"        uri = dummyUri;",
									"    }",
									"} catch (error) {",
									"    CouldTheMantisUriBeComposed();",
									"    uri = dummyUri;",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {   ",
									"    pm.variables.set(\"uri\", uri);",
									"    pm.request.headers.upsert({key:\"Authorization\", value:mantisAuthorizationCode});",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheGetRequestForMantisIssuesBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									"* Self Testing Functions",
									"****************************************************************************************/",
									"function CouldInputForLoadingMantisIssuesBeLoaded(mantisInterfaceStatus, ",
									"                                                    controller, ",
									"                                                    uri, ",
									"                                                    indexOfDeviceUnderTest) {",
									"    pm.test(\"CouldInputForLoadingMantisIssuesBeLoaded\", function () {",
									"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"        pm.expect(controller).to.be.an(\"object\");",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");      ",
									"    });",
									"}",
									"",
									"function CouldTheMantisUriBeComposed(vendor, mantisAuthorizationCode, uri) {",
									"    pm.test(\"CouldTheMantisUriBeComposed\", function () {",
									"        pm.expect(vendor).to.be.a(\"string\");",
									"        pm.expect(vendor).to.not.have.lengthOf(0);  ",
									"        pm.expect(mantisAuthorizationCode).to.be.a(\"string\");",
									"        pm.expect(mantisAuthorizationCode).to.not.have.lengthOf(0);  ",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);  ",
									"    });",
									"}",
									"",
									"function CouldTheGetRequestForMantisIssuesBePrepared() {",
									"    pm.test(\"CouldTheGetRequestForMantisIssuesBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "44d2e376-83b3-4874-92d8-85a6ca795070",
								"exec": [
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
									"    var controller = pm.environment.get(\"controller\");",
									"    ",
									"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
									"",
									"    CouldRequiredInputBeRead(mantisInterfaceStatus, controller, indexOfDeviceUnderTest);",
									"} catch (error) {",
									"    CouldRequiredInputBeRead();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Processing received data to a list of MantisBT issues",
									"****************************************************************************************/",
									"try {",
									"    if (mantisInterfaceStatus===\"read-only\" || mantisInterfaceStatus===\"read-write\") {",
									"        var deviceType = controller.nodeList[indexOfDeviceUnderTest].deviceType;",
									"        CouldDeviceTypeBeRetrieved(deviceType);",
									"",
									"        let responseWithHeadline = pm.response.json();",
									"        var mantisIssueList = responseWithHeadline.issues;",
									"        mantisIssueList = FilterIssuesForDeviceType(mantisIssueList, deviceType);",
									"        CouldMantisIssueListBeRead(pm.response.code);",
									"    }",
									"} catch (error) {",
									"    CouldDeviceTypeBeRetrieved();",
									"    CouldMantisIssueListBeRead();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Commenting the ResponseCode",
									"****************************************************************************************/",
									"try {",
									"    if (mantisInterfaceStatus===\"read-only\" || mantisInterfaceStatus===\"read-write\") {",
									"        let responseCode = parseInt(pm.response.code);",
									"        if (Math.floor(responseCode/100) === 2) {",
									"            console.log(\"Mantis issues for \" + deviceType + \" could successfully be loaded.\");",
									"        } else {",
									"            console.log(\"ERROR: Mantis issues for \" + deviceType + \" could not be \"",
									"                            + \"successfully be loaded.\");",
									"        }",
									"        CouldCommentBeComposedandPrinted(responseCode);",
									"    }",
									"} catch (error) {",
									"    CouldCommentBeComposedandPrinted();",
									"}",
									"",
									"pm.variables.clear();",
									"",
									"",
									"/****************************************************************************************",
									"* Provided Output Parameters",
									"****************************************************************************************/",
									"if (mantisInterfaceStatus===\"read-only\" || mantisInterfaceStatus===\"read-write\") {",
									"    pm.environment.set(\"mantisIssueList\", mantisIssueList);",
									"    AreAllEnvironmentVariablesSet();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Functions",
									" ****************************************************************************************/",
									"function FilterIssuesForDeviceType(issueList, deviceType) {",
									"    for (let i=(issueList.length-1); i>=0; i--) {",
									"        if (issueList[i].project.name!==deviceType){",
									"            issueList.splice(i,1);",
									"        }",
									"    }",
									"    return issueList;",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Test Driven Development",
									" ****************************************************************************************/",
									"function CouldRequiredInputBeRead(mantisInterfaceStatus, controller, indexOfDeviceUnderTest) {",
									"    pm.test(\"CouldRequiredInputBeRead\", function () {",
									"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"        pm.expect(controller).to.be.an(\"object\");",
									"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
									"    });",
									"}",
									"",
									"function CouldDeviceTypeBeRetrieved(deviceType) {",
									"    pm.test(\"CouldDeviceTypeBeRetrieved\", function () {",
									"        pm.expect(deviceType).to.be.a(\"string\");",
									"        pm.expect(deviceType).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldMantisIssueListBeRead(ResponseCode) {",
									"    pm.test(\"CouldMantisIssueListBeRead\", function () {",
									"        pm.expect(ResponseCode).to.equal(200);",
									"    });",
									"}",
									"",
									"function CouldCommentBeComposedandPrinted(ResponseCode) {",
									"    pm.test(\"CouldMantisIssueListBeRead\", function () {",
									"        pm.expect(ResponseCode).to.equal(200);",
									"    });",
									"}",
									"",
									"function AreAllEnvironmentVariablesSet() {",
									"    pm.test(\"AreAllEnvironmentVariablesSet\", function () {",
									"        pm.expect(pm.environment.get(\"mantisIssueList\")).to.be.an(\"array\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DisplayEnvironmentVariables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "86a8a8d1-653d-42ab-a676-846a23ba1a88",
								"exec": [
									"console.log(\"\\n-------------------------Displaying all Environment variables-----------------------------\");",
									"/****************************************************************************************",
									"* ",
									"* Console.log of all Environment variables",
									"* ",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    CouldTheInputBeLoaded(dummyUri);",
									"} catch (error) {",
									"    CouldTheInputBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Displaying ",
									"****************************************************************************************/",
									"try {",
									"    console.log(\"Device will be tested with the following set of Environment variables:\");",
									"    let allEnvironmentVariables = { \"allEnvironmentVariables\" : pm.environment.toObject() };",
									"    console.log(allEnvironmentVariables);",
									"    CouldAllEnvironmentalVariablesBeDisplayed(true);",
									"} catch (error) {",
									"    CouldAllEnvironmentalVariablesBeDisplayed(false);",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheRequestBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function CouldTheInputBeLoaded(uri) {",
									"    pm.test(\"CouldTheInputBeLoaded\", function () {",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldAllEnvironmentalVariablesBeDisplayed(success) {",
									"    pm.test(\"CouldAllEnvironmentalVariablesBeDisplayed\", function () {",
									"        pm.expect(success).to.be.true;",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "6cdfc068-098d-44f4-a032-8faba0a71c17",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "e2773cee-fe00-4694-996a-c5ad80fcd86a",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "InterfaceValidation",
			"item": [
				{
					"name": "AirInterfaceValidation",
					"item": [
						{
							"name": "AirInterfaceCompleteness",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputAirInterfaceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "832f9ce8-d89d-43ab-89af-aeb94e48cdf4",
														"exec": [
															"console.log(\"\\n\\n=============================== AirInterfaceCompleteness.3 ===============================\");",
															"/****************************************************************************************",
															" * ",
															" * RequestCollection for validating Completeness of AirInterface Objects against definition ",
															" * ",
															" *                   AirInterface_2.0.0-tsp.191122.1800",
															" * ",
															" * as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															" * ",
															" ****************************************************************************************/",
															" ",
															"",
															"/****************************************************************************************",
															" * Manual Definition of the Mode of Operation of this TestCase",
															" ****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"all\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"air-interface-2-0:air-interface-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function() {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function() {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3f4c31f2-dedf-4c60-bbb3-43abc8abdbb9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointAirInterfaceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "86a8a8d1-653d-42ab-a676-846a23ba1a88",
														"exec": [
															"console.log(\"\\n-----------------EntryPoint of AirInterface Validation for Completeness-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the AirInterfaceCompleteness TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].airInterfaceList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.max( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointAirInterfaceCompleteness\");",
															"        console.log(\"Proceeding with terminating AirInterface validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "86a8a8d1-653d-42ab-a676-846a23ba1a88",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "50dd0692-fba4-4dc1-bf20-62c26ed7723f",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "86a8a8d1-653d-42ab-a676-846a23ba1a88",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "50dd0692-fba4-4dc1-bf20-62c26ed7723f",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "86a8a8d1-653d-42ab-a676-846a23ba1a88",
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* StartPoint",
															"* ",
															"* Manages the number of iterations of the AirInterfaceCompleteness TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "df505205-019b-4f4d-99a3-b9253691a518",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a2472693-82f5-4013-8bf8-70be708350f5",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "NetworkPreparation",
									"item": [
										{
											"name": "SwitchingOnMonitoring",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "86a8a8d1-653d-42ab-a676-846a23ba1a88",
														"exec": [
															"console.log(\"\\n---------------------------------Switching Monitoring On----------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Switching Monitoring On",
															"* ",
															"* This Request is for activating collection of performance data on the device under",
															"* test, so the data can be retrieved during validating completeness of the implementation",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration);",
															"} catch (error) {",
															"    CouldInputForSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify({ \"air-interface-2-0:performance-monitoring-is-on\": true });",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration) {",
															"    pm.test(\"CouldInputForSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(configuration).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "50dd0692-fba4-4dc1-bf20-62c26ed7723f",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched on.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched on.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "SettingWrongRadioSignalId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "86a8a8d1-653d-42ab-a676-846a23ba1a88",
														"exec": [
															"console.log(\"\\n-------------------------------Setting Wrong RadioSignalId--------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting wrong Expected RadioSignalID for provocing entries in CurrentProblemList",
															"* ",
															"* This Request is for provocing an alarm to be able to validate completeness of the ",
															"* representation of currently active alarms.",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, capability, configuration);",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    var faultyNumericValue = Math.floor(Math.random() * capability[\"supported-radio-signal-id-length\"]);",
															"    var faultyAlphaNumericValue = GenerateRandomString(capability[\"supported-radio-signal-id-length\"]);",
															"    CouldFaultyValuesBeGenerated(faultyNumericValue, faultyAlphaNumericValue);",
															"} catch (error) {",
															"    CouldFaultyValuesBeGenerated();",
															"}",
															"",
															"try {",
															"    if ( capability[\"supported-radio-signal-id-datatype\"] === \"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_INTEGER\" ) {",
															"        configuration[\"expected-radio-signal-id\"][\"numeric-radio-signal-id\"] = faultyNumericValue;",
															"        if ( capability[\"expected-equals-transmitted-radio-signal-id\"] === true ) {",
															"            configuration[\"transmitted-radio-signal-id\"][\"numeric-radio-signal-id\"] = faultyNumericValue;",
															"        }",
															"    } else {",
															"        configuration[\"expected-radio-signal-id\"][\"alphanumeric-radio-signal-id\"] = faultyAlphaNumericValue;",
															"        if ( capability[\"expected-equals-transmitted-radio-signal-id\"] === true ) {",
															"            configuration[\"transmitted-radio-signal-id\"][\"alphanumeric-radio-signal-id\"] = faultyAlphaNumericValue;",
															"        }",
															"    }",
															"    configuration = AddHeadlineToDataObject(configuration, \"air-interface-2-0:air-interface-configuration\");",
															"    CouldRequestBodyOfSettingWrongRadioSignalIdBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingWrongRadioSignalIdBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const requestBody = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", requestBody);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function GenerateRandomString(length) {",
															"    let randomString = \"\";",
															"    let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
															"    let charactersLength = characters.length;",
															"    for ( let i=0; i<length; i++ ) {",
															"        randomString += characters.charAt(Math.floor(Math.random() * charactersLength));",
															"    }",
															"    return randomString;",
															"}",
															"",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, capability, configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldFaultyValuesBeGenerated(faultyNumericValue, faultyAlphaNumericValue) {",
															"    pm.test(\"CouldFaultyValuesBeGenerated\", function () {",
															"        pm.expect(faultyNumericValue).to.be.an(\"number\");",
															"        pm.expect(faultyAlphaNumericValue).to.be.a(\"string\");",
															"        pm.expect(faultyAlphaNumericValue).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingWrongRadioSignalIdBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingWrongRadioSignalIdBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "50dd0692-fba4-4dc1-bf20-62c26ed7723f",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSettingWrongRadioSignalIdBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully misconfigured for provoking an alarm.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be changed.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSettingWrongRadioSignalIdBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "088e78f3-fac2-4cf7-ad44-62d7e7ff382d",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6d6594d8-8ecf-4e7b-9ff7-c02fbf4f566b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ValidationRequests",
									"item": [
										{
											"name": "PacCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "832f9ce8-d89d-43ab-89af-aeb94e48cdf4",
														"exec": [
															"console.log(\"\\n-----------------------Checking AirInterface_Pac for Completeness-------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* PacCompleteness",
															"* ",
															"* This Request is for validating AirInterface Pac Objects against definition ",
															"* AirInterface_2.0.0-tsp.191122.1800",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the *_Pac class",
															"*  - availability of all attributes in this particular class",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"pac\";             // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 3;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let AIR_INTERFACE_PAC_SCHEMA = {",
															"    \"type\": \"object\",",
															"\t\"properties\": {",
															"        \"air-interface-capability\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"type-of-equipment\": \t\t\t\t\t\t\t{ \"type\": \"string\"  },",
															"                \"tx-frequency-min\": \t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"tx-frequency-max\": \t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"rx-frequency-min\": \t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"rx-frequency-max\": \t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"transmission-mode-list\":                       { \"type\": \"array\"   },",
															"                \"duplex-distance-is-freely-configurable\": \t\t{ \"type\": \"boolean\" },",
															"                \"duplex-distance-list\":                         { \"type\": \"array\"   },",
															"                \"auto-freq-select-is-avail\": \t\t\t\t\t{ \"type\": \"boolean\" },\t",
															"                \"adaptive-modulation-is-avail\": \t\t\t\t{ \"type\": \"boolean\" },\t",
															"                \"atpc-is-avail\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"atpc-range\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"supported-radio-signal-id-datatype\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_INTEGER\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_STRING\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t]",
															"                },",
															"                \"supported-radio-signal-id-length\": \t\t\t{ \"type\": \"number\"  },",
															"                \"expected-equals-transmitted-radio-signal-id\":\t{ \"type\": \"boolean\" },",
															"                \"encryption-is-avail\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"supported-loop-back-kind-list\":                { \"type\": \"array\"   },",
															"                \"maintenance-timer-range\": \t\t\t\t\t\t{ \"type\": \"string\"  },",
															"                \"supported-alarm-list\":                         { \"type\": \"array\"   },",
															"                \"performance-monitoring-is-avail\": \t\t\t\t{ \"type\": \"boolean\" },",
															"                \"direction-of-acm-performance-values\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:DIRECTION_TYPE_TX\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:DIRECTION_TYPE_RX\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:DIRECTION_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t]",
															"                },",
															"            },",
															"        },",
															"        \"air-interface-configuration\":{",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"air-interface-name\": \t\t\t\t\t{ \"type\": \"string\"  },",
															"                \"remote-air-interface-name\": \t\t\t{ \"type\": \"string\"  },",
															"                \"transmitted-radio-signal-id\":          { \"type\": \"object\"  },",
															"                \"expected-radio-signal-id\":             { \"type\": \"object\"  },",
															"                \"tx-frequency\": \t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"rx-frequency\": \t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"transmission-mode-min\": \t\t\t\t{ \"type\": \"string\"  },",
															"                \"transmission-mode-max\": \t\t\t\t{ \"type\": \"string\"  },",
															"                \"power-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"transmitter-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"receiver-is-on\": \t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"tx-power\": \t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"adaptive-modulation-is-on\": \t\t\t{ \"type\": \"boolean\" },",
															"                \"xpic-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"mimo-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"alic-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"atpc-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"atpc-thresh-upper\": \t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"atpc-thresh-lower\": \t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"atpc-tx-power-min\": \t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"auto-freq-select-is-on\": \t\t\t\t{ \"type\": \"boolean\" },",
															"                \"auto-freq-select-range\": \t\t\t\t{ \"type\": \"number\"  },",
															"                \"modulation-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"encryption-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"cryptographic-key\": \t\t\t\t\t{ \"type\": \"string\"  },",
															"                \"loop-back-kind-on\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_NONE\",\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t   ]",
															"                },",
															"                \"maintenance-timer\": \t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"problem-kind-severity-list\":           { \"type\": \"array\"   },",
															"                \"g-826-threshold-cross-alarm-list\":     { \"type\": \"array\"   },",
															"                \"xlts-threshold-cross-alarm-list\":      { \"type\": \"array\"   },",
															"                \"acm-threshold-cross-alarm-list\":       { \"type\": \"array\"   },",
															"                \"clearing-threshold-cross-alarms-is-on\":{ \"type\": \"boolean\" },",
															"                \"performance-monitoring-is-on\": \t\t{ \"type\": \"boolean\" },",
															"\t        },",
															"        },",
															"        \"air-interface-status\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"interface-status\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_UP\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_DOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_TESTING\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_DORMANT\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t]",
															"                },",
															"                \"tx-frequency-cur\": \t\t\t\t    { \"type\": \"number\"  },",
															"                \"rx-frequency-cur\": \t\t\t\t    { \"type\": \"number\"  },",
															"                \"transmission-mode-cur\":                { \"type\": \"string\"  },",
															"                \"received-radio-signal-id\":             { \"type\": \"object\"  },",
															"                \"radio-power-is-up\": \t\t\t\t    { \"type\": \"boolean\" },",
															"                \"link-is-up\": \t\t\t\t\t\t    { \"type\": \"boolean\" },",
															"                \"xpic-is-up\": \t\t\t\t\t\t    { \"type\": \"boolean\" },",
															"                \"mimo-is-up\": \t\t\t\t\t\t    { \"type\": \"boolean\" },",
															"                \"alic-is-up\": \t\t\t\t\t\t    { \"type\": \"boolean\" },",
															"                \"atpc-is-up\": \t\t\t\t\t\t    { \"type\": \"boolean\" },",
															"                \"auto-freq-select-is-up\": \t\t\t    { \"type\": \"boolean\" },",
															"                \"local-end-point-id\": \t\t\t\t    { \"type\": \"string\"  },",
															"                \"remote-end-point-id\":\t \t\t\t    { \"type\": \"string\"  },",
															"                \"loop-back-kind-up\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_NONE\",",
															"                                ]",
															"                },",
															"                \"performance-monitoring-is-up\":     \t{ \"type\": \"boolean\" },",
															"                \"rx-level-cur\": \t\t\t\t\t    { \"type\": \"number\"  },",
															"                \"tx-level-cur\": \t\t\t\t\t    { \"type\": \"number\"  },",
															"                \"snir-cur\": \t\t\t\t\t\t    { \"type\": \"number\"  },",
															"                \"xpd-cur\": \t\t\t\t\t\t\t    { \"type\": \"number\"  },",
															"                \"rf-temp-cur\": \t\t\t\t\t\t    { \"type\": \"number\"  },",
															"            },",
															"        },",
															"        \"air-interface-current-problems\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"current-problem-list\":                 { \"type\": \"array\"   },",
															"                \"number-of-current-problems\":  \t\t\t{ \"type\": \"number\"  },",
															"                \"time-of-latest-change\":                { \"type\": \"string\"  },",
															"            },",
															"        },",
															"        \"air-interface-current-performance\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"current-performance-data-list\":        { \"type\": \"array\"   },",
															"                \"number-of-current-performance-sets\":   { \"type\": \"number\"  },",
															"            },",
															"\t    },",
															"        \"air-interface-historical-performances\":{",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"historical-performance-data-list\":     { \"type\": \"array\"   },",
															"                \"number-of-historical-performance-sets\":{ \"type\": \"number\"  },",
															"                \"time-of-latest-change\": \t\t\t    { \"type\": \"string\"  },",
															"            },",
															"        },",
															"\t},    ",
															"\t\"required\": [\"air-interface-capability\",",
															"                    \"air-interface-configuration\",",
															"                    \"air-interface-status\",",
															"                    \"air-interface-current-problems\",",
															"                    \"air-interface-current-performance\",",
															"                    \"air-interface-historical-performances\",",
															"    ]",
															"};",
															"pm.variables.set(\"schema\", AIR_INTERFACE_PAC_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3f4c31f2-dedf-4c60-bbb3-43abc8abdbb9",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CapabilityCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6a1e746e-a742-4b4d-ba2f-962986fd39c4",
														"exec": [
															"console.log(\"\\n--------------------Checking AirInterfaceCapability for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* CapabilityCompleteness",
															"* ",
															"* This Request is for validating AirInterface Capability Objects against definition ",
															"* AirInterface_2.0.0-tsp.191122.1800",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Capability class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let AIR_INTERFACE_CAPABILITY_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"type-of-equipment\": \t\t\t\t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"tx-frequency-min\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"tx-frequency-max\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"rx-frequency-min\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"rx-frequency-max\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"transmission-mode-list\": {",
															"    \t\t\"type\": \"array\",",
															"    \t\t\"items\": { ",
															"        \t\t\"type\": \"object\",",
															"        \t\t\"properties\": {",
															"                    \"transmission-mode-name\":     \t\t\t\t{ \"type\": \"string\" },",
															"                    \"transmission-mode-rank\":     \t\t\t\t{ \"type\": \"number\" },",
															"                    \"channel-bandwidth\":      \t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"modulation-scheme\":     \t\t\t\t    { \"type\": \"number\" },",
															"                    \"code-rate\":        \t\t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"symbol-rate-reduction-factor\":   \t\t\t{ \"type\": \"number\" },",
															"                    \"tx-power-min\":      \t\t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"tx-power-max\":       \t\t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"rx-threshold\":       \t\t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"am-upshift-level\":      \t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"am-downshift-level\":      \t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"xpic-is-avail\":       \t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                    \"supported-as-fixed-configuration\":  \t\t{ \"type\": \"boolean\" }",
															"        \t\t},",
															"                \"required\": [\"transmission-mode-name\", ",
															"                                \"transmission-mode-rank\",",
															"\t\t\t\t\t\t\t\t\"channel-bandwidth\",",
															"\t\t\t\t\t\t\t\t\"modulation-scheme\",",
															"\t\t\t\t\t\t\t\t\"code-rate\",",
															"\t\t\t\t\t\t\t\t\"symbol-rate-reduction-factor\",",
															"\t\t\t\t\t\t\t\t\"tx-power-min\",",
															"\t\t\t\t\t\t\t\t\"tx-power-max\",",
															"\t\t\t\t\t\t\t\t\"rx-threshold\",",
															"\t\t\t\t\t\t\t\t\"am-upshift-level\",",
															"\t\t\t\t\t\t\t\t\"am-downshift-level\",",
															"\t\t\t\t\t\t\t\t\"xpic-is-avail\",",
															"\t\t\t\t\t\t\t\t\"supported-as-fixed-configuration\"",
															"                ]",
															"    \t\t}",
															"\t\t},",
															"\t\t\"duplex-distance-is-freely-configurable\": \t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"duplex-distance-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\":                                    { \"type\": \"number\" }",
															"\t\t},",
															"\t\t\"auto-freq-select-is-avail\": \t\t\t\t\t{ \"type\": \"boolean\" }, \t\t",
															"\t\t\"adaptive-modulation-is-avail\": \t\t\t\t{ \"type\": \"boolean\" }, \t\t",
															"\t\t\"atpc-is-avail\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"atpc-range\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\"supported-radio-signal-id-datatype\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_INTEGER\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_STRING\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t\t]",
															"\t\t},",
															"\t\t\"supported-radio-signal-id-length\": \t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"expected-equals-transmitted-radio-signal-id\":\t{ \"type\": \"boolean\" }, ",
															"\t\t\"encryption-is-avail\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },\t",
															"\t\t\"supported-loop-back-kind-list\": { ",
															"\t\t    \"type\": \"array\",",
															"\t\t\t\"items\": { \"enum\": [",
															"\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_REMOTE\",",
															"\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_LOCAL\",",
															"\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_REMOTE\",",
															"\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_LOCAL\",",
															"\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_NONE\"\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t   ]",
															"\t\t\t}",
															"\t\t}, \t\t ",
															"\t\t\"maintenance-timer-range\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\"supported-alarm-list\": {",
															"            \"type\": \"array\",",
															"            \"item\":                                     { \"type\": \"string\" }",
															"\t\t},",
															"\t\t\"performance-monitoring-is-avail\": \t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"direction-of-acm-performance-values\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:DIRECTION_TYPE_TX\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:DIRECTION_TYPE_RX\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:DIRECTION_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t ]",
															"\t\t},",
															"\t},",
															"\t\"required\": [\"type-of-equipment\", ",
															"\t\t\t\t\t\"tx-frequency-min\",",
															"\t\t\t\t\t\"tx-frequency-max\",",
															"\t\t\t\t\t\"rx-frequency-min\",",
															"\t\t\t\t\t\"rx-frequency-max\",",
															"\t\t\t\t\t\"duplex-distance-is-freely-configurable\",",
															"\t\t\t\t\t\"duplex-distance-list\",",
															"\t\t\t\t\t\"auto-freq-select-is-avail\",",
															"\t\t\t\t\t\"adaptive-modulation-is-avail\",",
															"\t\t\t\t\t\"atpc-is-avail\",",
															"\t\t\t\t\t\"atpc-range\",",
															"\t\t\t\t\t\"supported-radio-signal-id-datatype\",",
															"\t\t\t\t\t\"expected-equals-transmitted-radio-signal-id\",",
															"\t\t\t\t\t\"encryption-is-avail\",",
															"\t\t\t\t\t\"supported-loop-back-kind-list\",",
															"\t\t\t\t\t\"maintenance-timer-range\",",
															"\t\t\t\t\t\"supported-alarm-list\",",
															"\t\t\t\t\t\"performance-monitoring-is-avail\",",
															"\t\t\t\t\t\"direction-of-acm-performance-values\",",
															"\t]",
															"};",
															"pm.variables.set(\"schema\", AIR_INTERFACE_CAPABILITY_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ec562c48-5724-43dd-9827-6b93725cf290",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ConfigurationCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6a1e746e-a742-4b4d-ba2f-962986fd39c4",
														"exec": [
															"console.log(\"\\n-------------------Checking AirInterfaceConfiguration for Completeness--------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ConfigurationCompleteness",
															"* ",
															"* This Request is for validating AirInterface Configuration Objects against definition ",
															"* AirInterface_2.0.0-tsp.191122.1800",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Configuration class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let AIR_INTERFACE_CONFIGURATION_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"air-interface-name\": \t\t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"remote-air-interface-name\": \t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"transmitted-radio-signal-id\": { ",
															"\t\t\t\"type\": \"object\", ",
															"\t\t\t\"properties\": {",
															"\t\t\t\t\"numeric-radio-signal-id\": \t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\"alphanumeric-radio-signal-id\": \t{ \"type\": \"string\" }",
															"\t\t\t}",
															"\t\t}, ",
															"\t\t\"expected-radio-signal-id\": {",
															"\t\t\t\"type\": \"object\", ",
															"\t\t\t\"properties\": {",
															"\t\t\t\t\"numeric-radio-signal-id\": \t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\"alphanumeric-radio-signal-id\": \t{ \"type\": \"string\" }",
															"\t\t\t}",
															"\t\t}, ",
															"\t\t\"tx-frequency\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"rx-frequency\": \t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"transmission-mode-min\": \t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"transmission-mode-max\": \t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"power-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"transmitter-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"receiver-is-on\": \t\t\t\t\t\t{ \"type\": \"boolean\" }, \t",
															"\t\t\"tx-power\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"adaptive-modulation-is-on\": \t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"xpic-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"mimo-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"alic-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"atpc-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" }, \t",
															"\t\t\"atpc-thresh-upper\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"atpc-thresh-lower\": \t\t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\"atpc-tx-power-min\": \t\t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\"auto-freq-select-is-on\": \t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"auto-freq-select-range\": \t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\"modulation-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" }, \t",
															"\t\t\"encryption-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" }, \t",
															"\t\t\"cryptographic-key\": \t\t\t\t\t{ \"type\": \"string\" }, \t",
															"\t\t\"loop-back-kind-on\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_NONE\"\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t   ]",
															"\t\t}, \t",
															"\t\t\"maintenance-timer\": \t\t\t\t\t{ \"type\": \"number\" }, \t",
															" \t\t\"problem-kind-severity-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"    \t\t\t\t\"problem-kind-name\": \t\t\t\t{ \"type\": \"string\" },",
															"    \t\t\t\t\"problem-kind-severity\": { \"enum\": [",
															"    \t\t\t\t\t\t\t\t\t\t\t    \"air-interface-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_WARNING\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_MINOR\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_MAJOR\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_CRITICAL\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"",
															"    \t\t\t\t\t\t\t\t\t\t   ]",
															"    \t\t\t\t}",
															"\t\t\t    },",
															"\t\t\t    \"required\": [\"problem-kind-name\",",
															"\t\t\t                    \"problem-kind-severity\"",
															"\t\t\t    ]",
															"\t\t\t}    ",
															"\t\t}, \t\t\t",
															" \t\t\"g-826-threshold-cross-alarm-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"    \t\t\t\t\"g-826-value-kind\": { \"enum\": [",
															"    \t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:G_826_TYPE_ES\",",
															"    \t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:G_826_TYPE_SES\",",
															"    \t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:G_826_TYPE_CSES\",",
															"    \t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:G_826_TYPE_UAS\",",
															"    \t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:G_826_TYPE_NOT_SPECIFIED\"",
															"    \t\t\t\t\t\t\t\t\t  ]",
															"    \t\t\t\t},\t\t\t",
															"    \t\t\t\t\"alarm-raising-threshold\": \t\t\t{ \"type\": \"number\" },",
															"    \t\t\t\t\"alarm-clearing-threshold\": \t\t{ \"type\": \"number\" },",
															"    \t\t\t\t\"granularity-period\": { \"enum\": [",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"    \t\t\t\t\t\t\t\t\t    ]",
															"    \t\t\t\t}",
															"\t\t\t    },",
															"\t\t\t    \"required\": [\"g-826-value-kind\",",
															"\t\t\t                    \"alarm-raising-threshold\",",
															"\t\t\t                    \"alarm-clearing-threshold\",",
															"\t\t\t                    \"granularity-period\"",
															"\t\t\t    ]",
															"\t\t\t}",
															"\t\t}, \t\t\t",
															" \t\t\"xlts-threshold-cross-alarm-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"    \t\t\t\t\"level-threshold-second-kind\": { \"enum\": [",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_RLTS\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_TLTS\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_NOT_YET_DEFINED\"",
															"    \t\t\t\t\t\t\t\t\t\t\t\t ]",
															"    \t\t\t\t},\t\t\t\t\t",
															"    \t\t\t\t\"xlts-level\": \t\t\t\t\t    { \"type\": \"number\" },",
															"    \t\t\t\t\"amount-of-seconds\":\t\t\t    { \"type\": \"number\" },",
															"    \t\t\t\t\"granularity-period\": { \"enum\": [",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"    \t\t\t\t\t\t\t\t\t\t]",
															"    \t\t\t\t},",
															"    \t\t\t\t\"xlts-threshold-cross-alarm-definition-number\": { \"type\": \"number\" },",
															"\t\t\t    },",
															"\t\t\t    \"required\": [\"level-threshold-second-kind\",",
															"\t\t\t                    \"xlts-level\",",
															"\t\t\t                    \"amount-of-seconds\",",
															"\t\t\t                    \"granularity-period\",",
															"\t\t\t                    \"xlts-threshold-cross-alarm-definition-number\"",
															"\t\t\t    ]\t",
															"\t\t\t}",
															"\t\t}, \t\t\t\t\t\t",
															" \t\t\"acm-threshold-cross-alarm-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"    \t\t\t\t\"acm-threshold-cross-alarm-definition-number\": \t{ \"type\": \"number\" },",
															"    \t\t\t\t\"amount-of-seconds\": \t\t\t\t{ \"type\": \"number\" },\t",
															"    \t\t\t\t\"granularity-period\": { \"enum\": [",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"    \t\t\t\t\t\t\t\t\t\t]",
															"    \t\t\t\t},",
															"    \t\t\t\t\"transmission-mode\":                { \"type\": \"string\" }",
															"\t\t\t    },",
															"\t\t\t    \"required\": [\"acm-threshold-cross-alarm-definition-number\",",
															"\t\t\t                    \"amount-of-seconds\",",
															"\t\t\t                    \"granularity-period\",",
															"\t\t\t                    \"transmission-mode\"",
															"\t\t\t    ]",
															"\t\t\t}",
															"\t\t}, \t\t\t\t\t\t",
															"\t\t\"clearing-threshold-cross-alarms-is-on\":{ \"type\": \"boolean\" },\t",
															"\t\t\"performance-monitoring-is-on\": \t\t{ \"type\": \"boolean\" }",
															"\t},",
															" \t\"required\": [ \"air-interface-name\", ",
															"\t\t\t\t\t\"remote-air-interface-name\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"transmitted-radio-signal-id\",",
															"\t\t\t\t\t\"expected-radio-signal-id\",\t",
															"\t\t\t\t\t\"tx-frequency\",",
															"\t\t\t\t\t\"rx-frequency\",",
															"\t\t\t\t\t\"transmission-mode-min\",",
															"\t\t\t\t\t\"transmission-mode-max\",",
															"\t\t\t\t\t\"power-is-on\",",
															"\t\t\t\t\t\"transmitter-is-on\",\t",
															"\t\t\t\t\t\"receiver-is-on\",\t\t\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"tx-power\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"adaptive-modulation-is-on\",",
															"\t\t\t\t\t\"xpic-is-on\",\t",
															"\t\t\t\t\t\"mimo-is-on\",",
															"\t\t\t\t\t\"alic-is-on\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"atpc-is-on\",",
															"\t\t\t\t\t\"atpc-thresh-upper\",\t",
															"\t\t\t\t\t\"atpc-thresh-lower\",",
															"\t\t\t\t\t\"atpc-tx-power-min\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"auto-freq-select-is-on\",",
															"\t\t\t\t\t\"auto-freq-select-range\",\t",
															"\t\t\t\t\t\"modulation-is-on\",",
															"\t\t\t\t\t\"encryption-is-on\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"cryptographic-key\",",
															"\t\t\t\t\t\"loop-back-kind-on\",\t",
															"\t\t\t\t\t\"maintenance-timer\",\t\t",
															"\t\t\t\t\t\"problem-kind-severity-list\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"g-826-threshold-cross-alarm-list\",",
															"\t\t\t\t\t\"xlts-threshold-cross-alarm-list\",\t",
															"\t\t\t\t\t\"acm-threshold-cross-alarm-list\",",
															"\t\t\t\t\t\"clearing-threshold-cross-alarms-is-on\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"performance-monitoring-is-on\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t ]",
															"};",
															"pm.variables.set(\"schema\", AIR_INTERFACE_CONFIGURATION_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ec562c48-5724-43dd-9827-6b93725cf290",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "StatusCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6a1e746e-a742-4b4d-ba2f-962986fd39c4",
														"exec": [
															"console.log(\"\\n----------------------Checking AirInterfaceStatus for Completeness------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* StatusCompleteness",
															"* ",
															"* This Request is for validating AirInterface Status Objects against definition ",
															"* AirInterface_2.0.0-tsp.191122.1800",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Status class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let AIR_INTERFACE_STATUS_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"interface-status\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_UP\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_DOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_TESTING\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_DORMANT\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\"\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t]",
															"\t\t}, \t\t  ",
															"\t\t\"tx-frequency-cur\": \t\t\t\t{ \"type\": \"number\"  }, ",
															"\t\t\"rx-frequency-cur\": \t\t\t\t{ \"type\": \"number\"  }, ",
															"\t\t\"transmission-mode-cur\":            { \"type\": \"string\" },",
															"\t\t\"received-radio-signal-id\": {",
															"\t\t\t\"type\": \"object\", ",
															"\t\t\t\"properties\": {",
															"\t\t\t\t\"numeric-radio-signal-id\": \t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\"alphanumeric-radio-signal-id\": { \"type\": \"string\" }",
															"\t\t\t},",
															"\t\t\t\"required\": [\"numeric-radio-signal-id\", ",
															"\t\t\t\t\t\t    \"alphanumeric-radio-signal-id\"",
															"\t\t\t]\t\t\t\t\t\t\t\t\t\t",
															"\t\t}, ",
															"\t\t\"radio-power-is-up\": \t\t\t\t{ \"type\": \"boolean\" }, \t ",
															"\t\t\"link-is-up\": \t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"xpic-is-up\": \t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"mimo-is-up\": \t\t\t\t\t\t{ \"type\": \"boolean\" }, \t ",
															"\t\t\"alic-is-up\": \t\t\t\t\t\t{ \"type\": \"boolean\" },\t ",
															"\t\t\"atpc-is-up\": \t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"auto-freq-select-is-up\": \t\t\t{ \"type\": \"boolean\" }, \t ",
															"\t\t\"local-end-point-id\": \t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"remote-end-point-id\":\t \t\t\t{ \"type\": \"string\" },",
															"\t\t\"loop-back-kind-up\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_NONE\"\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t]",
															"\t\t}, \t\t ",
															"\t\t\"performance-monitoring-is-up\": \t{ \"type\": \"boolean\" }, ",
															"\t\t\"rx-level-cur\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"tx-level-cur\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"snir-cur\": \t\t\t\t\t\t{ \"type\": \"number\" }, \t ",
															"\t\t\"xpd-cur\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"rf-temp-cur\": \t\t\t\t\t\t{ \"type\": \"number\" }",
															"\t},",
															"\t\"required\": [\"interface-status\", ",
															"\t\t\t\t\"tx-frequency-cur\",\t",
															"\t\t\t\t\"rx-frequency-cur\",\t",
															"\t\t\t\t\"transmission-mode-cur\",",
															"\t\t\t\t\"received-radio-signal-id\",\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\"radio-power-is-up\",\t",
															"\t\t\t\t\"link-is-up\",",
															"\t\t\t\t\"xpic-is-up\",",
															"\t\t\t\t\"mimo-is-up\",",
															"\t\t\t\t\"alic-is-up\",",
															"\t\t\t\t\"atpc-is-up\",",
															"\t\t\t\t\"auto-freq-select-is-up\",",
															"\t\t\t\t\"local-end-point-id\",\t",
															"\t\t\t\t\"remote-end-point-id\",\t",
															"\t\t\t\t\"loop-back-kind-up\",\t",
															"\t\t\t\t\"performance-monitoring-is-up\",",
															"\t\t\t\t\"rx-level-cur\",",
															"\t\t\t\t\"tx-level-cur\",",
															"\t\t\t\t\"snir-cur\",",
															"\t\t\t\t\"xpd-cur\",",
															"\t\t\t\t\"rf-temp-cur\"",
															"\t]\t",
															"};",
															"pm.variables.set(\"schema\", AIR_INTERFACE_STATUS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ec562c48-5724-43dd-9827-6b93725cf290",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentProblemsCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6a1e746e-a742-4b4d-ba2f-962986fd39c4",
														"exec": [
															"console.log(\"\\n------------------Checking AirInterfaceCurrentProblems for Completeness-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentProblemsCompleteness",
															"* ",
															"* This Request is for validating AirInterface CurrentProblems Objects against definition ",
															"* AirInterface_2.0.0-tsp.191122.1800",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentProblems class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-problems\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let AIR_INTERFACE_CURRENT_PROBLEMS_SCHEMA = {\t",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"\t\t\"current-problem-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"problem-name\": \t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"sequence-number\": \t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\"timestamp\": \t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"problem-severity\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_WARNING\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_MINOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_MAJOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_CRITICAL\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t}\t\t\t\t\t",
															"\t\t\t\t},",
															"\t\t\t\t\"required\": [ \"problem-name\", ",
															"\t\t\t\t    \t\t\t\"sequence-number\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t    \t\t\"timestamp\",",
															"\t\t\t\t\t\t    \t\"problem-severity\"\t",
															"\t\t\t\t]\t\t\t",
															"\t\t\t}\t\t\t\t\t\t\t",
															"\t\t},",
															"\t\t\"number-of-current-problems\":  \t\t\t{ \"type\": \"number\" },",
															"\t\t\"time-of-latest-change\":                { \"type\": \"string\" },",
															"\t},",
															"\t\"required\": [ \"current-problem-list\",",
															"                    \"number-of-current-problems\",",
															"                    \"time-of-latest-change\",",
															"\t] ",
															"};",
															"pm.variables.set(\"schema\", AIR_INTERFACE_CURRENT_PROBLEMS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ec562c48-5724-43dd-9827-6b93725cf290",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentPerformanceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6a1e746e-a742-4b4d-ba2f-962986fd39c4",
														"exec": [
															"console.log(\"\\n----------------Checking AirInterfaceCurrentPerformance for Completeness------------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentPerformanceCompleteness",
															"* ",
															"* This Request is for validating AirInterface CurrentPerformance Objects against definition ",
															"* AirInterface_2.0.0-tsp.191122.1800",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentPerformance class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-performance\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let AIR_INTERFACE_CURRENT_PERFORMANCE_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"current-performance-data-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\"es\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"ses\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, \t\t",
															"\t\t\t\t\t\t\t\"cses\": \t\t\t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"unavailability\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"tx-level-min\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"tx-level-max\":\t\t\t\t    { \"type\": \"number\" }, \t\t\t",
															"\t\t\t\t\t\t\t\"tx-level-avg\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rx-level-min\": \t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"rx-level-max\": \t\t\t\t{ \"type\": \"number\" },\t\t",
															"\t\t\t\t\t\t\t\"rx-level-avg\": \t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"time-xstates-list\": {    ",
															"\t\t\t\t\t\t\t\t\"type\": \"array\",",
															"\t\t\t\t\t\t\t\t\"items\": {\t\t",
															"\t\t\t\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\t\t\t\"properties\": {\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t\"time-xstate-sequence-number\":\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\t\t\t\"transmission-mode\":            { \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\t\t\t\"time\": \t\t            \t{ \"type\": \"number\" }\t\t\t",
															"\t\t\t\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\t\t\t\"required\": [ \"time-xstate-sequence-number\",",
															"\t\t\t\t\t\t\t\t\t\t\t    \t\"transmission-mode\",\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t\t    \t\"time\"\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\t\t\t\t]\t\t",
															"\t\t\t\t\t\t\t\t}",
															"\t\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\t\"snir-min\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"snir-max\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"snir-avg\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"xpd-min\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"xpd-max\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"xpd-avg\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rf-temp-min\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rf-temp-max\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rf-temp-avg\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"defect-blocks-sum\": \t\t\t{ \"type\": \"number\" }, \t\t\t",
															"\t\t\t\t\t\t\t\"time-period\": \t\t\t\t\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\"required\": [ \"es\", ",
															"                            \t\t\t\"ses\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"                            \t\t\t\"cses\",",
															"                            \t\t\t\"unavailability\",\t",
															"                            \t\t\t\"tx-level-min\",",
															"                            \t\t\t\"tx-level-max\",",
															"                            \t\t\t\"tx-level-avg\",",
															"                            \t\t\t\"rx-level-min\",",
															"                            \t\t\t\"rx-level-max\",",
															"                            \t\t\t\"rx-level-avg\",",
															"                            \t\t\t\"time-xstates-list\",",
															"                            \t\t\t\"snir-min\",",
															"                            \t\t\t\"snir-max\",",
															"                            \t\t\t\"snir-avg\",",
															"                            \t\t\t\"xpd-min\",",
															"                            \t\t\t\"xpd-max\",",
															"                            \t\t\t\"xpd-avg\",",
															"                            \t\t\t\"rf-temp-min\",",
															"                            \t\t\t\"rf-temp-max\",",
															"                            \t\t\t\"rf-temp-avg\",",
															"                            \t\t\t\"defect-blocks-sum\",",
															"                            \t\t\t\"time-period\"",
															"\t\t\t\t\t\t]\t\t\t\t\t",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"timestamp\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"suspect-interval-flag\": \t\t\t{ \"type\": \"boolean\" },\t\t\t",
															"\t\t\t\t\t\"elapsed-time\": \t\t\t\t\t{ \"type\": \"integer\" },\t\t",
															"\t\t\t\t\t\"scanner-id\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"granularity-period\": \t{ \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t  ]",
															"\t\t\t\t\t},\t ",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"performance-data\",",
															"    \t\t\t\t\t\t\t\"timestamp\",",
															"    \t\t\t\t\t\t\t\"suspect-interval-flag\",",
															"    \t\t\t\t\t\t\t\"elapsed-time\",",
															"    \t\t\t\t\t\t\t\"scanner-id\",",
															"    \t\t\t\t\t\t\t\"granularity-period\",",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-current-performance-sets\":  \t\t\t{ \"type\": \"number\" },",
															"\t},\t\t",
															"\t\"required\":\t[ \"current-performance-data-list\",",
															"\t               \"number-of-current-performance-sets\",",
															"\t]",
															"};",
															"try {",
															"    if (capability[\"performance-monitoring-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", AIR_INTERFACE_CURRENT_PERFORMANCE_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"current-performance-data-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        AIR_INTERFACE_CURRENT_PERFORMANCE_SCHEMA = pm.collectionVariables.get(\"shortenedSchema\");",
															"        CouldAirInterfaceCurrentPerformanceBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldAirInterfaceCurrentPerformanceBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", AIR_INTERFACE_CURRENT_PERFORMANCE_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldAirInterfaceCurrentPerformanceBeShortened(success) {",
															"    pm.test(\"CouldAirInterfaceCurrentPerformanceBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ec562c48-5724-43dd-9827-6b93725cf290",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "HistoricalPerformancesCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6a1e746e-a742-4b4d-ba2f-962986fd39c4",
														"exec": [
															"console.log(\"\\n---------------Checking AirInterfaceHistoricalPerformances for Completeness---------------\");",
															"/*******************************************************************************",
															"* ",
															"* HistoricalPerformancesCompleteness",
															"* ",
															"* This Request is for validating AirInterface HistoricalPerformances Objects against definition ",
															"* AirInterface_2.0.0-tsp.191122.1800",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the HistoricalPerformances class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"*******************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"historical-performances\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let AIR_INTERFACE_HISTORICAL_PERFORMANCES_SCHEMA = {\t",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"\t\t\"historical-performance-data-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\"es\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"ses\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, \t\t",
															"\t\t\t\t\t\t\t\"cses\": \t\t\t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"unavailability\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"tx-level-min\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"tx-level-max\":\t\t\t\t    { \"type\": \"number\" }, \t\t\t",
															"\t\t\t\t\t\t\t\"tx-level-avg\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rx-level-min\": \t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"rx-level-max\": \t\t\t\t{ \"type\": \"number\" },\t\t",
															"\t\t\t\t\t\t\t\"rx-level-avg\": \t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"time-xstates-list\": {    ",
															"\t\t\t\t\t\t\t\t\"type\": \"array\",",
															"\t\t\t\t\t\t\t\t\"items\": {\t\t",
															"\t\t\t\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\t\t\t\"properties\": {\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t\"time-xstate-sequence-number\":\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\t\t\t\"transmission-mode\":            { \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\t\t\t\"time\": \t\t            \t{ \"type\": \"number\" }\t\t\t",
															"\t\t\t\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\t\t\t\"required\": [ \"time-xstate-sequence-number\",",
															"\t\t\t\t\t\t\t\t\t\t\t    \t\"transmission-mode\",\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t\t    \t\"time\"\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\t\t\t\t]\t\t",
															"\t\t\t\t\t\t\t\t}",
															"\t\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\t\"snir-min\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"snir-max\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"snir-avg\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"xpd-min\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"xpd-max\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"xpd-avg\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rf-temp-min\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rf-temp-max\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rf-temp-avg\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"defect-blocks-sum\": \t\t\t{ \"type\": \"number\" }, \t\t\t",
															"\t\t\t\t\t\t\t\"time-period\": \t\t\t\t\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\"required\": [ \"es\", ",
															"                            \t\t\t\"ses\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"                            \t\t\t\"cses\",",
															"                            \t\t\t\"unavailability\",\t",
															"                            \t\t\t\"tx-level-min\",",
															"                            \t\t\t\"tx-level-max\",",
															"                            \t\t\t\"tx-level-avg\",",
															"                            \t\t\t\"rx-level-min\",",
															"                            \t\t\t\"rx-level-max\",",
															"                            \t\t\t\"rx-level-avg\",",
															"                            \t\t\t\"time-xstates-list\",",
															"                            \t\t\t\"snir-min\",",
															"                            \t\t\t\"snir-max\",",
															"                            \t\t\t\"snir-avg\",",
															"                            \t\t\t\"xpd-min\",",
															"                            \t\t\t\"xpd-max\",",
															"                            \t\t\t\"xpd-avg\",",
															"                            \t\t\t\"rf-temp-min\",",
															"                            \t\t\t\"rf-temp-max\",",
															"                            \t\t\t\"rf-temp-avg\",",
															"                            \t\t\t\"defect-blocks-sum\",",
															"                            \t\t\t\"time-period\"",
															"\t\t\t\t\t\t]\t\t\t\t\t",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"suspect-interval-flag\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\t\"history-data-id\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"period-end-time\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"granularity-period\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t]\t\t\t\t",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"object-class\": \t\t\t\t\t{ \"type\": \"string\" },   // Attribute to be removed with February-Release of Mediators",
															"\t\t\t\t\t\"name-binding\": \t\t\t\t\t{ \"type\": \"string\" },   // Attribute to be removed with February-Release of Mediators",
															"\t\t\t\t\t\"packages\": \t\t\t\t\t\t{ \"type\": \"string\" },   // Attribute to be removed with February-Release of Mediators",
															"\t\t\t\t\t\"allomorphs\": \t\t\t\t\t\t{ \"type\": \"string\" },   // Attribute to be removed with February-Release of Mediators",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"performance-data\",",
															"    \t\t\t\t\t\t\t\"suspect-interval-flag\",",
															"    \t\t\t\t\t\t\t\"history-data-id\",",
															"    \t\t\t\t\t\t\t\"period-end-time\",",
															"    \t\t\t\t\t\t\t\"granularity-period\",",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-historical-performance-sets\":  \t\t{ \"type\": \"number\" },",
															"\t\t\"time-of-latest-change\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t},",
															"\t\"required\":\t[ \"historical-performance-data-list\",",
															"//                    \"number-of-historical-performance-sets\",              // Commenting to be removed with February-Release of Mediators",
															"//                    \"time-of-latest-change\",                              // Commenting to be removed with February-Release of Mediators",
															"\t]",
															"};",
															"try {",
															"    if (capability[\"performance-monitoring-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", AIR_INTERFACE_HISTORICAL_PERFORMANCES_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"historical-performance-data-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        AIR_INTERFACE_HISTORICAL_PERFORMANCES_SCHEMA = pm.collectionVariables.get(\"shortenedSchema\");",
															"        CouldAirInterfaceHistoricalPerformancesBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldAirInterfaceHistoricalPerformancesBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", AIR_INTERFACE_HISTORICAL_PERFORMANCES_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldAirInterfaceHistoricalPerformancesBeShortened(success) {",
															"    pm.test(\"CouldAirInterfaceHistoricalPerformancesBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ec562c48-5724-43dd-9827-6b93725cf290",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "86a8a8d1-653d-42ab-a676-846a23ba1a88",
														"exec": [
															"console.log(\"\\n------------------Restoring the Original Interface Configuration Again--------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, configuration);",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    configuration = AddHeadlineToDataObject(configuration, \"air-interface-2-0:air-interface-configuration\");",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "50dd0692-fba4-4dc1-bf20-62c26ed7723f",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d723859f-6cd4-49b2-a201-f6ee9d7c9b6f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "652a776c-0b6e-4541-9adf-cdc59191c830",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointAirInterfaceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "832f9ce8-d89d-43ab-89af-aeb94e48cdf4",
														"exec": [
															"console.log(\"\\n---------------ReversalPoint of AirInterface Validation for Completeness------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointAirInterfaceCompleteness\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3f4c31f2-dedf-4c60-bbb3-43abc8abdbb9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointAirInterfaceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "832f9ce8-d89d-43ab-89af-aeb94e48cdf4",
														"exec": [
															"console.log(\"\\n-------------------------Terminating AirInterfaceCompleteness-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is for clearing the Collection variables and terminating the TestCase",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, controller, indexOfDeviceUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3f4c31f2-dedf-4c60-bbb3-43abc8abdbb9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b2610f36-2836-4933-a2a8-9bd58531d3aa",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "76b560c1-b680-4e8e-af1d-9370527c0a1b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "AirInterfaceConfiguration",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputAirInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "832f9ce8-d89d-43ab-89af-aeb94e48cdf4",
														"exec": [
															"console.log(\"\\n\\n=============================== AirInterfaceConfiguration.1 ===============================\");",
															"/****************************************************************************************",
															" * ",
															" * RequestCollection for validating Configuration of AirInterface Objects against definition ",
															" * ",
															" *                   AirInterface_2.0.0-tsp.191122.1800",
															" * ",
															" * as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															" * ",
															" ****************************************************************************************/",
															" ",
															"",
															"/****************************************************************************************",
															" * Manual Definition of the Mode of Operation of this TestCase",
															" * ",
															" * It is recommended to apply this TestCase on devices on the local (not remote) site",
															" * of the microwave connection, otherwise the management connection might break and ",
															" * configurations, which are done during the validation, cannot be reversed.",
															" * ",
															" ****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"all\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"air-interface-2-0:air-interface-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"RESPONSE_CODE_FOR_OPERATIONS_NOT_SUPPORTED = 405;",
															"CONFIGURATION_VALIDATION_RESULTS = {};",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"pm.collectionVariables.set(\"responseCodeForOperationNotSupported\", RESPONSE_CODE_FOR_OPERATIONS_NOT_SUPPORTED);",
															"pm.collectionVariables.set(\"configurationValidationResults\", CONFIGURATION_VALIDATION_RESULTS);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function() {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function() {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3f4c31f2-dedf-4c60-bbb3-43abc8abdbb9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointAirInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "86a8a8d1-653d-42ab-a676-846a23ba1a88",
														"exec": [
															"console.log(\"\\n-----------------EntryPoint of AirInterface Validation of Configuration-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the AirInterfaceConfiguration TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].airInterfaceList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.max( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointAirInterfaceConfiguration\");",
															"        console.log(\"Proceeding with terminating AirInterface validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "86a8a8d1-653d-42ab-a676-846a23ba1a88",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "50dd0692-fba4-4dc1-bf20-62c26ed7723f",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "86a8a8d1-653d-42ab-a676-846a23ba1a88",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "50dd0692-fba4-4dc1-bf20-62c26ed7723f",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceStatus",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "86a8a8d1-653d-42ab-a676-846a23ba1a88",
														"exec": [
															"console.log(\"\\n------------------------------Uploading Interface Status----------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Status",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "50dd0692-fba4-4dc1-bf20-62c26ed7723f",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "86a8a8d1-653d-42ab-a676-846a23ba1a88",
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the AirInterfaceConfiguration TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "df505205-019b-4f4d-99a3-b9253691a518",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a2472693-82f5-4013-8bf8-70be708350f5",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ValidationRequests",
									"item": [
										{
											"name": "airInterfaceName",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n-----------------------Checking Configuration of air-interface-name-----------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an attribute with a DummyValue and providing the",
																	"* dummyValueString as a local Variable.",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var status = pm.collectionVariables.get(\"status\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, capability, configuration, status, moduleUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"air-interface-name\";",
																	"",
																	"let dummyValue = \"Dummy \" + AddRandomIntString();",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddRandomIntString() {",
																	"    return String(Math.floor(Math.random() * 999));",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, capability, ",
																	"                                configuration, ",
																	"                                status,",
																	"                                moduleUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(status).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus, ",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            attributeUnderTest,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString)) {",
																	"        configurationValidationResults[attributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        if ( (resultValueString === JSON.stringify(\"Air interface ID not yet defined.\"))",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
																	"        } else {",
																	"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
																	"        }",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[attributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus, ",
																	"                                PrintMantisIssuesForTechnologyAndClass,",
																	"                                responseCodeForOperationNotSupported,",
																	"                                configurationValidationResults,",
																	"                                attributeUnderTest,",
																	"                                dummyValueString,",
																	"                                dummyCode,",
																	"                                resultValueString,",
																	"                                resultCode) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    let originalValue = configuration[attributeUnderTest];",
																	"    ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "remoteAirInterfaceName",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n-------------------Checking Configuration of remote-air-interface-name--------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an attribute with a DummyValue and providing the",
																	"* dummyValueString as a local Variable.",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"remote-air-interface-name\";",
																	"",
																	"let dummyValue = \"Dummy \" + AddRandomIntString();",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddRandomIntString() {",
																	"    return String(Math.floor(Math.random() * 999));",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus, ",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            attributeUnderTest,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString)) {",
																	"        configurationValidationResults[attributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        if ( (resultValueString === JSON.stringify(\"Air interface ID at the remote site not yet defined.\"))",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
																	"        } else {",
																	"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
																	"        }",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[attributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus, ",
																	"                                PrintMantisIssuesForTechnologyAndClass,",
																	"                                responseCodeForOperationNotSupported,",
																	"                                configurationValidationResults,",
																	"                                attributeUnderTest,",
																	"                                dummyValueString,",
																	"                                dummyCode,",
																	"                                resultValueString,",
																	"                                resultCode) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    let originalValue = configuration[attributeUnderTest];",
																	"    ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3933d1c5-28eb-49d7-91c0-c6743fad6d9a",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b8b62f82-8086-410b-9dcc-28e0575bf73a",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "config/transmittedRadioSignalID",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n------------------Checking Configuration of transmitted-radio-signal-id-------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an attribute with a DummyValue and providing the",
																	"* dummyValueString as a local Variable.",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, capability, configuration);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"\";",
																	"",
																	"try {",
																	"    var dummyValueOfTypeInteger = Math.floor(Math.random() * capability[\"supported-radio-signal-id-length\"]);",
																	"    var dummyValueOfTypeString = GenerateRandomString(capability[\"supported-radio-signal-id-length\"]);",
																	"    CouldDummyValuesBeGenerated(dummyValueOfTypeInteger, dummyValueOfTypeString);",
																	"} catch (error) {",
																	"    CouldDummyValuesBeGenerated();",
																	"}",
																	"",
																	"try {",
																	"    if ( capability[\"supported-radio-signal-id-datatype\"] === \"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_INTEGER\" ) {",
																	"        configuration[\"transmitted-radio-signal-id\"][\"numeric-radio-signal-id\"] = dummyValueOfTypeInteger;",
																	"        var dummyValue = dummyValueOfTypeInteger;",
																	"        if ( capability[\"expected-equals-transmitted-radio-signal-id\"] === true ) {",
																	"            configuration[\"expected-radio-signal-id\"][\"numeric-radio-signal-id\"] = dummyValueOfTypeInteger;",
																	"        }",
																	"    } else {",
																	"        configuration[\"transmitted-radio-signal-id\"][\"alphanumeric-radio-signal-id\"] = dummyValueOfTypeString;",
																	"        var dummyValue = dummyValueOfTypeString;",
																	"        if ( capability[\"expected-equals-transmitted-radio-signal-id\"] === true ) {",
																	"            configuration[\"expected-radio-signal-id\"][\"alphanumeric-radio-signal-id\"] = dummyValueOfTypeString;",
																	"        }",
																	"    }",
																	"    configuration = AddHeadlineToDataObject(configuration, \"air-interface-2-0:air-interface-configuration\");",
																	"    CouldRequestBodyBeDefined(true);",
																	"} catch (error) {",
																	"    CouldRequestBodyBeDefined(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = JSON.stringify(configuration);",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function GenerateRandomString(length) {",
																	"    let randomString = \"\";",
																	"    let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
																	"    let charactersLength = characters.length;",
																	"    for ( let i=0; i<length; i++ ) {",
																	"        randomString += characters.charAt(Math.floor(Math.random() * charactersLength));",
																	"    }",
																	"    return randomString;",
																	"}",
																	"",
																	"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
																	"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
																	"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
																	"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
																	"    return objectInclHeadline;",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValuesBeGenerated(dummyValueOfTypeInteger, dummyValueOfTypeString) {",
																	"    pm.test(\"CouldDummyValuesBeGenerated\", function () {",
																	"        pm.expect(dummyValueOfTypeInteger).to.be.an(\"number\");",
																	"        pm.expect(dummyValueOfTypeString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueOfTypeString).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldRequestBodyBeDefined(success) {",
																	"    pm.test(\"CouldRequestBodyBeDefined\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            capability,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBodyInclHeader = JSON.parse(response.stream);",
																	"    var responseBody = responseBodyInclHeader[\"air-interface-2-0:air-interface-configuration\"];",
																	"",
																	"    if ( capability[\"supported-radio-signal-id-datatype\"] === \"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_INTEGER\" ) {",
																	"        responseValue = responseBody[\"transmitted-radio-signal-id\"][\"numeric-radio-signal-id\"];",
																	"    } else {",
																	"        responseValue = responseBody[\"transmitted-radio-signal-id\"][\"alphanumeric-radio-signal-id\"];",
																	"    }",
																	"",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                capability,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldCapabilityBeLoaded\", function () {",
																	"        pm.expect(capability).to.be.a(\"object\");",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(responseValueString).to.be.a(\"string\");",
																	"        pm.expect(responseValueString).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus, ",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            attributeUnderTest,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"transmitted-radio-signal-id\";",
																	"",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString)) {",
																	"        configurationValidationResults[ATTRIBUTE_UNDER_TEST] = \"ok\";",
																	"    } else {",
																	"        configurationValidationResults[ATTRIBUTE_UNDER_TEST] = \"not configurable\";",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[ATTRIBUTE_UNDER_TEST]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus, ",
																	"                                PrintMantisIssuesForTechnologyAndClass,",
																	"                                responseCodeForOperationNotSupported,",
																	"                                configurationValidationResults,",
																	"                                attributeUnderTest,",
																	"                                dummyValueString,",
																	"                                dummyCode,",
																	"                                resultValueString,",
																	"                                resultCode) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"configuration = AddHeadlineToDataObject(configuration, \"air-interface-2-0:air-interface-configuration\");",
																	"",
																	"try {",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = JSON.stringify(configuration);",
																	"    AreValuesOfTheRequestBodyCorrect(CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
																	"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
																	"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
																	"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
																	"    return objectInclHeadline;",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ee3668e4-f302-4a30-9911-37b1a7de7c77",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4c3b64c9-f24b-41f0-91b1-3b03e10bb688",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "config/expectedRadioSignalID",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n--------------------Checking Configuration of expected-radio-signal-id--------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an attribute with a DummyValue and providing the",
																	"* dummyValueString as a local Variable.",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, capability, configuration);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"\";",
																	"",
																	"try {",
																	"    var dummyValueOfTypeInteger = Math.floor(Math.random() * capability[\"supported-radio-signal-id-length\"]);",
																	"    var dummyValueOfTypeString = GenerateRandomString(capability[\"supported-radio-signal-id-length\"]);",
																	"    CouldDummyValuesBeGenerated(dummyValueOfTypeInteger, dummyValueOfTypeString);",
																	"} catch (error) {",
																	"    CouldDummyValuesBeGenerated();",
																	"}",
																	"",
																	"try {",
																	"    if ( capability[\"supported-radio-signal-id-datatype\"] === \"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_INTEGER\" ) {",
																	"        configuration[\"expected-radio-signal-id\"][\"numeric-radio-signal-id\"] = dummyValueOfTypeInteger;",
																	"        var dummyValue = dummyValueOfTypeInteger;",
																	"        if ( capability[\"expected-equals-transmitted-radio-signal-id\"] === true ) {",
																	"            configuration[\"transmitted-radio-signal-id\"][\"numeric-radio-signal-id\"] = dummyValueOfTypeInteger;",
																	"        }",
																	"    } else {",
																	"        configuration[\"expected-radio-signal-id\"][\"alphanumeric-radio-signal-id\"] = dummyValueOfTypeString;",
																	"        var dummyValue = dummyValueOfTypeString;",
																	"        if ( capability[\"expected-equals-transmitted-radio-signal-id\"] === true ) {",
																	"            configuration[\"transmitted-radio-signal-id\"][\"alphanumeric-radio-signal-id\"] = dummyValueOfTypeString;",
																	"        }",
																	"    }",
																	"    configuration = AddHeadlineToDataObject(configuration, \"air-interface-2-0:air-interface-configuration\");",
																	"    CouldRequestBodyOfSettingWrongRadioSignalIdBeDefined(true);",
																	"} catch (error) {",
																	"    CouldRequestBodyOfSettingWrongRadioSignalIdBeDefined(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = JSON.stringify(configuration);",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function GenerateRandomString(length) {",
																	"    let randomString = \"\";",
																	"    let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
																	"    let charactersLength = characters.length;",
																	"    for ( let i=0; i<length; i++ ) {",
																	"        randomString += characters.charAt(Math.floor(Math.random() * charactersLength));",
																	"    }",
																	"    return randomString;",
																	"}",
																	"",
																	"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
																	"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
																	"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
																	"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
																	"    return objectInclHeadline;",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValuesBeGenerated(dummyValueOfTypeInteger, dummyValueOfTypeString) {",
																	"    pm.test(\"CouldDummyValuesBeGenerated\", function () {",
																	"        pm.expect(dummyValueOfTypeInteger).to.be.an(\"number\");",
																	"        pm.expect(dummyValueOfTypeString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueOfTypeString).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldRequestBodyOfSettingWrongRadioSignalIdBeDefined(success) {",
																	"    pm.test(\"CouldRequestBodyOfSettingWrongRadioSignalIdBeDefined\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            capability,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBodyInclHeader = JSON.parse(response.stream);",
																	"    var responseBody = responseBodyInclHeader[\"air-interface-2-0:air-interface-configuration\"];",
																	"",
																	"    if ( capability[\"supported-radio-signal-id-datatype\"] === \"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_INTEGER\" ) {",
																	"        responseValue = responseBody[\"expected-radio-signal-id\"][\"numeric-radio-signal-id\"];",
																	"    } else {",
																	"        responseValue = responseBody[\"expected-radio-signal-id\"][\"alphanumeric-radio-signal-id\"];",
																	"    }",
																	"",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                capability,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldCapabilityBeLoaded\", function () {",
																	"        pm.expect(capability).to.be.a(\"object\");",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(responseValueString).to.be.a(\"string\");",
																	"        pm.expect(responseValueString).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus, ",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            attributeUnderTest,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"expected-radio-signal-id\";",
																	"",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString)) {",
																	"        configurationValidationResults[ATTRIBUTE_UNDER_TEST] = \"ok\";",
																	"    } else {",
																	"        configurationValidationResults[ATTRIBUTE_UNDER_TEST] = \"not configurable\";",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[ATTRIBUTE_UNDER_TEST]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus, ",
																	"                                PrintMantisIssuesForTechnologyAndClass,",
																	"                                responseCodeForOperationNotSupported,",
																	"                                configurationValidationResults,",
																	"                                attributeUnderTest,",
																	"                                dummyValueString,",
																	"                                dummyCode,",
																	"                                resultValueString,",
																	"                                resultCode) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"configuration = AddHeadlineToDataObject(configuration, \"air-interface-2-0:air-interface-configuration\");",
																	"",
																	"try {",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = JSON.stringify(configuration);",
																	"    AreValuesOfTheRequestBodyCorrect(CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
																	"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
																	"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
																	"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
																	"    return objectInclHeadline;",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "700ddc3f-745d-46c4-ad87-32693b7c598d",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e10c1cb9-184d-414e-9d0a-a5b1a720aac7",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "txFrequency",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n--------------------------Checking Configuration of tx-frequency--------------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an attribute with a DummyValue and providing the",
																	"* dummyValueString as a local Variable.",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var status = pm.collectionVariables.get(\"status\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, capability, configuration, status, moduleUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"tx-frequency\";",
																	"",
																	"try {",
																	"    var configuredTxFrequency = configuration[\"tx-frequency\"];",
																	"    var configuredTransmissionModeName = configuration[\"transmission-mode-min\"];",
																	"    var configuredModeIndex = TransmissionModeIndexOf(configuredTransmissionModeName, capability);",
																	"    var configuredChannelBandwidth = capability[\"transmission-mode-list\"][configuredModeIndex][\"channel-bandwidth\"];",
																	"        ",
																	"    var minimumTxFrequency = capability[\"tx-frequency-min\"];",
																	"    var maximumTxFrequency = capability[\"tx-frequency-max\"];",
																	"        ",
																	"    if ( (configuredTxFrequency + (3/2)*configuredChannelBandwidth) < maximumTxFrequency) {",
																	"        var dummyValue = configuredTxFrequency + configuredChannelBandwidth;",
																	"    } else {",
																	"        var dummyValue = configuredTxFrequency - configuredChannelBandwidth;",
																	"    }",
																	"        ",
																	"    CouldDummyValueBeSet(configuredTxFrequency, configuredTransmissionModeName,",
																	"                                            configuredModeIndex,",
																	"                                            configuredChannelBandwidth,",
																	"                                            minimumTxFrequency,",
																	"                                            maximumTxFrequency,",
																	"                                            dummyValue);",
																	"} catch (error) {",
																	"    CouldDummyValueBeSet(configuredTxFrequency, configuredTransmissionModeName,",
																	"                                            configuredModeIndex,",
																	"                                            configuredChannelBandwidth,",
																	"                                            minimumTxFrequency,",
																	"                                            maximumTxFrequency,",
																	"                                            dummyValue);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Functions",
																	"****************************************************************************************/",
																	"function TransmissionModeIndexOf(currentModeName, capability) {",
																	"    for (let i=0; i<(capability[\"transmission-mode-list\"].length-1); i++) {",
																	"        let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
																	"        if ( sampleModeName === currentModeName ) {",
																	"            return i;",
																	"        }",
																	"    }",
																	"    console.log(\"ERROR: Name of transmission mode could not be found in air-interface-capability::transmission-mode-list.\");",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, capability, ",
																	"                                configuration, ",
																	"                                status,",
																	"                                moduleUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(status).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeSet(configuredTxFrequency, configuredTransmissionModeName,",
																	"                                            configuredModeIndex,",
																	"                                            configuredChannelBandwidth,",
																	"                                            minimumTxFrequency,",
																	"                                            maximumTxFrequency,",
																	"                                            dummyValue) {",
																	"    pm.test(\"CouldConfigurationInformationBeRetrieved\", function () {",
																	"        pm.expect(configuredTxFrequency).to.be.a(\"number\");",
																	"        pm.expect(configuredTransmissionModeName).to.be.a(\"string\");",
																	"        pm.expect(configuredTransmissionModeName).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldConfiguredModeIndexBeEvaluated\", function () {",
																	"        pm.expect(configuredModeIndex).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldConfiguredChannelBandwidthBeEvaluated\", function () {",
																	"        pm.expect(configuredChannelBandwidth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldAvailableFrequenciesBeRetrieved\", function () {",
																	"        pm.expect(minimumTxFrequency).to.be.a(\"number\");",
																	"        pm.expect(maximumTxFrequency).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldDummyValueBeSet\", function () {",
																	"        pm.expect(dummyValue).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus, ",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            attributeUnderTest,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString)) {",
																	"        configurationValidationResults[attributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        configurationValidationResults[attributeUnderTest] = \"not configurable\";",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[attributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus, ",
																	"                                PrintMantisIssuesForTechnologyAndClass,",
																	"                                responseCodeForOperationNotSupported,",
																	"                                configurationValidationResults,",
																	"                                attributeUnderTest,",
																	"                                dummyValueString,",
																	"                                dummyCode,",
																	"                                resultValueString,",
																	"                                resultCode) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    let originalValue = configuration[attributeUnderTest];",
																	"    ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "679f8660-de6d-480a-8b6c-e33d318c1972",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c5e06966-234a-461b-b90e-df784749ab45",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "rxFrequency",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n--------------------------Checking Configuration of rx-frequency--------------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an attribute with a DummyValue and providing the",
																	"* dummyValueString as a local Variable.",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"rx-frequency\";",
																	"",
																	"try {",
																	"    var configuredRxFrequency = configuration[\"rx-frequency\"];",
																	"    var configuredTransmissionModeName = configuration[\"transmission-mode-min\"];",
																	"    var configuredModeIndex = TransmissionModeIndexOf(configuredTransmissionModeName, capability);",
																	"    var configuredChannelBandwidth = capability[\"transmission-mode-list\"][configuredModeIndex][\"channel-bandwidth\"];",
																	"        ",
																	"    var minimumRxFrequency = capability[\"rx-frequency-min\"];",
																	"    var maximumRxFrequency = capability[\"rx-frequency-max\"];",
																	"        ",
																	"    if ( (configuredRxFrequency + (3/2)*configuredChannelBandwidth) < maximumRxFrequency) {",
																	"        var dummyValue = configuredRxFrequency + configuredChannelBandwidth;",
																	"    } else {",
																	"        var dummyValue = configuredRxFrequency - configuredChannelBandwidth;",
																	"    }",
																	"        ",
																	"    CouldDummyValueBeSet(configuredRxFrequency, configuredTransmissionModeName,",
																	"                                            configuredModeIndex,",
																	"                                            configuredChannelBandwidth,",
																	"                                            minimumRxFrequency,",
																	"                                            maximumRxFrequency,",
																	"                                            dummyValue);",
																	"} catch (error) {",
																	"    CouldDummyValueBeSet(configuredRxFrequency, configuredTransmissionModeName,",
																	"                                            configuredModeIndex,",
																	"                                            configuredChannelBandwidth,",
																	"                                            minimumRxFrequency,",
																	"                                            maximumRxFrequency,",
																	"                                            dummyValue);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Functions",
																	"****************************************************************************************/",
																	"function TransmissionModeIndexOf(currentModeName, capability) {",
																	"    for (let i=0; i<(capability[\"transmission-mode-list\"].length-1); i++) {",
																	"        let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
																	"        if ( sampleModeName === currentModeName ) {",
																	"            return i;",
																	"        }",
																	"    }",
																	"    console.log(\"ERROR: Name of transmission mode could not be found in air-interface-capability::transmission-mode-list.\");",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeSet(configuredRxFrequency, configuredTransmissionModeName,",
																	"                                            configuredModeIndex,",
																	"                                            configuredChannelBandwidth,",
																	"                                            minimumRxFrequency,",
																	"                                            maximumRxFrequency,",
																	"                                            dummyValue) {",
																	"    pm.test(\"CouldConfigurationInformationBeRetrieved\", function () {",
																	"        pm.expect(configuredRxFrequency).to.be.a(\"number\");",
																	"        pm.expect(configuredTransmissionModeName).to.be.a(\"string\");",
																	"        pm.expect(configuredTransmissionModeName).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldConfiguredModeIndexBeEvaluated\", function () {",
																	"        pm.expect(configuredModeIndex).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldConfiguredChannelBandwidthBeEvaluated\", function () {",
																	"        pm.expect(configuredChannelBandwidth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldAvailableFrequenciesBeRetrieved\", function () {",
																	"        pm.expect(minimumRxFrequency).to.be.a(\"number\");",
																	"        pm.expect(maximumRxFrequency).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldDummyValueBeSet\", function () {",
																	"        pm.expect(dummyValue).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus, ",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            attributeUnderTest,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString)) {",
																	"        configurationValidationResults[attributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        if ( (resultValueString === \"-1\")",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
																	"        } else {",
																	"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
																	"        }",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[attributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus, ",
																	"                                PrintMantisIssuesForTechnologyAndClass,",
																	"                                responseCodeForOperationNotSupported,",
																	"                                configurationValidationResults,",
																	"                                attributeUnderTest,",
																	"                                dummyValueString,",
																	"                                dummyCode,",
																	"                                resultValueString,",
																	"                                resultCode) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    let originalValue = configuration[attributeUnderTest];",
																	"    ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "679f8660-de6d-480a-8b6c-e33d318c1972",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c5e06966-234a-461b-b90e-df784749ab45",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "transmissionModeMin",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n---------------------Checking Configuration of transmission-mode-min----------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an attribute with a DummyValue and providing the",
																	"* dummyValueString as a local Variable.",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var status = pm.collectionVariables.get(\"status\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, capability, configuration, status, moduleUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"transmission-mode-min\";",
																	"",
																	"try {",
																	"    let currentModeName = configuration[\"transmission-mode-min\"];",
																	"    let currentModeIndex = TransmissionModeIndexOf(currentModeName, capability);",
																	"    let currentChannelBandwidth = capability[\"transmission-mode-list\"][currentModeIndex][\"channel-bandwidth\"];",
																	"    let currentXpicAvailability = capability[\"transmission-mode-list\"][currentModeIndex][\"xpic-is-avail\"];",
																	"    let minimumRankedModeName = \"\";",
																	"    let minimumRank = Number.MAX_VALUE;",
																	"        ",
																	"    for (let i=0; i<(capability[\"transmission-mode-list\"].length); i++) {",
																	"        let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
																	"        let sampleModeRank = capability[\"transmission-mode-list\"][i][\"transmission-mode-rank\"];",
																	"        let sampleModeChannelBandwidth = capability[\"transmission-mode-list\"][i][\"channel-bandwidth\"];",
																	"        let sampleModeXpicAvailability = capability[\"transmission-mode-list\"][i][\"xpic-is-avail\"];",
																	"        let sampleModeAvailabilityAsFixedConfiguration = capability[\"transmission-mode-list\"][i][\"supported-as-fixed-configuration\"];",
																	"        if ( (sampleModeName !== currentModeName) ",
																	"                && (sampleModeRank < minimumRank)",
																	"                && (sampleModeChannelBandwidth === currentChannelBandwidth)",
																	"                && (sampleModeXpicAvailability === currentXpicAvailability) ",
																	"                && (sampleModeAvailabilityAsFixedConfiguration === true)",
																	"              ) {",
																	"            minimumRankedModeName = sampleModeName;",
																	"            minimumRank = sampleModeRank;",
																	"        }",
																	"    }",
																	"        ",
																	"    var dummyValue = minimumRankedModeName;",
																	"        ",
																	"    CouldDummyValueBeSet(currentModeIndex, currentChannelBandwidth, dummyValue);",
																	"} catch (error) {",
																	"    CouldDummyValueBeSet();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"console.log(\"Index: \" + TransmissionModeIndexOf(dummyValue, capability));",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function TransmissionModeIndexOf (currentModeName, capability) {",
																	"    for (let i=0; i<(capability[\"transmission-mode-list\"].length-1); i++) {",
																	"        let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
																	"        if ( sampleModeName === currentModeName ) {",
																	"            return i;",
																	"        }",
																	"    }",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, capability, ",
																	"                                configuration, ",
																	"                                status,",
																	"                                moduleUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(status).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeSet(currentModeIndex, currentChannelBandwidth, dummyValue) {",
																	"    pm.test(\"CouldDummyValueBeSet\", function () {",
																	"        pm.expect(currentModeIndex).to.be.a(\"number\");",
																	"        pm.expect(currentChannelBandwidth).to.be.a(\"number\");",
																	"        pm.expect(dummyValue).to.be.a(\"string\");",
																	"        pm.expect(dummyValue).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"    var capability = pm.collectionVariables.get(\"capability\");                             // for debugging only",
																	"    console.log(\"Index: \" + TransmissionModeIndexOf(responseValue, capability));           // for debugging only",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	" function TransmissionModeIndexOf (currentModeName, capability) {                            // for debugging only",
																	"    for (let i=0; i<(capability[\"transmission-mode-list\"].length-1); i++) {",
																	"        let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
																	"        if ( sampleModeName === currentModeName ) {",
																	"            return i;",
																	"        }",
																	"    }",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus, ",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            attributeUnderTest,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString)) {",
																	"        configurationValidationResults[attributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        configurationValidationResults[attributeUnderTest] = \"not configurable\";",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[attributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus, ",
																	"                                PrintMantisIssuesForTechnologyAndClass,",
																	"                                responseCodeForOperationNotSupported,",
																	"                                configurationValidationResults,",
																	"                                attributeUnderTest,",
																	"                                dummyValueString,",
																	"                                dummyCode,",
																	"                                resultValueString,",
																	"                                resultCode) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    let originalValue = configuration[attributeUnderTest];",
																	"    ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "679f8660-de6d-480a-8b6c-e33d318c1972",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c5e06966-234a-461b-b90e-df784749ab45",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "transmissionModeMax",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n---------------------Checking Configuration of transmission-mode-max----------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an attribute with a DummyValue and providing the",
																	"* dummyValueString as a local Variable.",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var status = pm.collectionVariables.get(\"status\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, capability, configuration, status, moduleUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"transmission-mode-max\";",
																	"",
																	"try {",
																	"    let currentModeName = configuration[\"transmission-mode-max\"];",
																	"    let currentModeIndex = TransmissionModeIndexOf(currentModeName, capability);",
																	"    let currentChannelBandwidth = capability[\"transmission-mode-list\"][currentModeIndex][\"channel-bandwidth\"];",
																	"    let currentXpicAvailability = capability[\"transmission-mode-list\"][currentModeIndex][\"xpic-is-avail\"];",
																	"    let maximumRankedModeName = \"\";",
																	"    let maximumRank = 0;",
																	"        ",
																	"    for (let i=0; i<(capability[\"transmission-mode-list\"].length); i++) {",
																	"        let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
																	"        let sampleModeRank = capability[\"transmission-mode-list\"][i][\"transmission-mode-rank\"];",
																	"        let sampleModeChannelBandwidth = capability[\"transmission-mode-list\"][i][\"channel-bandwidth\"];",
																	"        let sampleModeXpicAvailability = capability[\"transmission-mode-list\"][i][\"xpic-is-avail\"];",
																	"        if ( (sampleModeName !== currentModeName) ",
																	"                && (sampleModeRank > maximumRank)",
																	"                && (sampleModeChannelBandwidth === currentChannelBandwidth)",
																	"                && (sampleModeXpicAvailability === currentXpicAvailability) ",
																	"              ) {",
																	"            maximumRankedModeName = sampleModeName;",
																	"            maximumRank = sampleModeRank;",
																	"        }",
																	"    }",
																	"        ",
																	"    var dummyValue = maximumRankedModeName;",
																	"    CouldDummyValueBeSet(currentModeName, currentModeIndex,",
																	"                            currentChannelBandwidth,",
																	"                            currentXpicAvailability,",
																	"                            dummyValue",
																	"                         );",
																	"} catch (error) {",
																	"    CouldDummyValueBeSet();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"console.log(\"Index: \" + TransmissionModeIndexOf(dummyValue, capability));",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	" function TransmissionModeIndexOf (currentModeName, capability) {",
																	"    for (let i=0; i<(capability[\"transmission-mode-list\"].length-1); i++) {",
																	"        let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
																	"        if ( sampleModeName === currentModeName ) {",
																	"            return i;",
																	"        }",
																	"    }",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, capability, ",
																	"                                configuration, ",
																	"                                status,",
																	"                                moduleUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(status).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeSet(currentModeName, currentModeIndex,",
																	"                                currentChannelBandwidth,",
																	"                                currentXpicAvailability,",
																	"                                dummyValue) {",
																	"    pm.test(\"CouldCurrentModeNameBeRetrieved\", function () {",
																	"        pm.expect(currentModeName).to.be.a(\"string\");",
																	"        pm.expect(currentModeName).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldCurrentModeIndexBeEvaluated\", function () {",
																	"        pm.expect(currentModeIndex).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldCurrentChannelBandwidthBeRetrieved\", function () {",
																	"        pm.expect(currentChannelBandwidth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldCurrentXpicAvailabilityBeRetrieved\", function () {",
																	"        pm.expect(currentXpicAvailability).to.be.a(\"boolean\");",
																	"    });",
																	"    pm.test(\"CouldDummyValueBeDerived\", function () {",
																	"        pm.expect(dummyValue).to.be.a(\"string\");",
																	"        pm.expect(dummyValue).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"    var capability = pm.collectionVariables.get(\"capability\");                             // for debugging only",
																	"    console.log(\"Index: \" + TransmissionModeIndexOf(responseValue, capability));           // for debugging only",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	" function TransmissionModeIndexOf (currentModeName, capability) {                            // for debugging only",
																	"    for (let i=0; i<(capability[\"transmission-mode-list\"].length-1); i++) {",
																	"        let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
																	"        if ( sampleModeName === currentModeName ) {",
																	"            return i;",
																	"        }",
																	"    }",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus, ",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            attributeUnderTest,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString)) {",
																	"        configurationValidationResults[attributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        configurationValidationResults[attributeUnderTest] = \"not configurable\";",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[attributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus, ",
																	"                                PrintMantisIssuesForTechnologyAndClass,",
																	"                                responseCodeForOperationNotSupported,",
																	"                                configurationValidationResults,",
																	"                                attributeUnderTest,",
																	"                                dummyValueString,",
																	"                                dummyCode,",
																	"                                resultValueString,",
																	"                                resultCode) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    let originalValue = configuration[attributeUnderTest];",
																	"    ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "679f8660-de6d-480a-8b6c-e33d318c1972",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c5e06966-234a-461b-b90e-df784749ab45",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "powerIsOn",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n---------------------------Checking Configuration of power-is-on--------------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an boolean attribute with the alternate value and",
																	"* providing this value as dummyValueString to the local Variables.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, configuration);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"power-is-on\";",
																	"",
																	"try {",
																	"    var dummyValue = !configuration[\"power-is-on\"];",
																	"    CouldDummyValueBeSet(dummyValue);",
																	"} catch (error) {",
																	"    CouldDummyValueBeSet();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddRandomIntString() {",
																	"    return String(Math.floor(Math.random() * 999));",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, configuration) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeSet(dummyValue) {",
																	"    pm.test(\"CouldDummyValueBeSet\", function () {",
																	"        pm.expect(dummyValue).to.be.a(\"boolean\");",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus, ",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            attributeUnderTest,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString)) {",
																	"        configurationValidationResults[attributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        if ( (resultValueString === \"true\")",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
																	"        } else {",
																	"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
																	"        }",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[attributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus, ",
																	"                                PrintMantisIssuesForTechnologyAndClass,",
																	"                                responseCodeForOperationNotSupported,",
																	"                                configurationValidationResults,",
																	"                                attributeUnderTest,",
																	"                                dummyValueString,",
																	"                                dummyCode,",
																	"                                resultValueString,",
																	"                                resultCode) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    let originalValue = configuration[attributeUnderTest];",
																	"    ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "transmitterIsOn",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n----------------------Checking Configuration of transmitter-is-on-------------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an boolean attribute with the alternate value and",
																	"* providing this value as dummyValueString to the local Variables.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, configuration);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"transmitter-is-on\";",
																	"",
																	"try {",
																	"    var dummyValue = !configuration[\"transmitter-is-on\"];",
																	"    CouldDummyValueBeSet(dummyValue);",
																	"} catch (error) {",
																	"    CouldDummyValueBeSet();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddRandomIntString() {",
																	"    return String(Math.floor(Math.random() * 999));",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, configuration) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeSet(dummyValue) {",
																	"    pm.test(\"CouldDummyValueBeSet\", function () {",
																	"        pm.expect(dummyValue).to.be.a(\"boolean\");",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus, ",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            attributeUnderTest,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString)) {",
																	"        configurationValidationResults[attributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        configurationValidationResults[attributeUnderTest] = \"not configurable\";",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[attributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus, ",
																	"                                PrintMantisIssuesForTechnologyAndClass,",
																	"                                responseCodeForOperationNotSupported,",
																	"                                configurationValidationResults,",
																	"                                attributeUnderTest,",
																	"                                dummyValueString,",
																	"                                dummyCode,",
																	"                                resultValueString,",
																	"                                resultCode) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    let originalValue = configuration[attributeUnderTest];",
																	"    ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "receiverIsOn",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n-------------------------Checking Configuration of receiver-is-on-------------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an boolean attribute with the alternate value and",
																	"* providing this value as dummyValueString to the local Variables.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, configuration);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"receiver-is-on\";",
																	"",
																	"try {",
																	"    var dummyValue = !configuration[\"receiver-is-on\"];",
																	"    CouldDummyValueBeSet(dummyValue);",
																	"} catch (error) {",
																	"    CouldDummyValueBeSet();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddRandomIntString() {",
																	"    return String(Math.floor(Math.random() * 999));",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, configuration) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeSet(dummyValue) {",
																	"    pm.test(\"CouldDummyValueBeSet\", function () {",
																	"        pm.expect(dummyValue).to.be.a(\"boolean\");",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus, ",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            attributeUnderTest,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString)) {",
																	"        configurationValidationResults[attributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        if ( (resultValueString === \"true\")",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
																	"        } else {",
																	"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
																	"        }",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[attributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus, ",
																	"                                PrintMantisIssuesForTechnologyAndClass,",
																	"                                responseCodeForOperationNotSupported,",
																	"                                configurationValidationResults,",
																	"                                attributeUnderTest,",
																	"                                dummyValueString,",
																	"                                dummyCode,",
																	"                                resultValueString,",
																	"                                resultCode) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    let originalValue = configuration[attributeUnderTest];",
																	"    ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "txPower",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n----------------------------Checking Configuration of tx-power----------------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an attribute with a DummyValue and providing the",
																	"* dummyValueString as a local Variable.",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var status = pm.collectionVariables.get(\"status\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"tx-power\";",
																	"",
																	"try {",
																	"    var currentValue = configuration[\"tx-power\"];",
																	"        ",
																	"    var currentModeName = status[\"transmission-mode-cur\"];",
																	"    var currentModeIndex = TransmissionModeIndexOf(currentModeName, capability);",
																	"    var minimumValue = capability[\"transmission-mode-list\"][currentModeIndex][\"tx-power-min\"];",
																	"    var maximumValue = capability[\"transmission-mode-list\"][currentModeIndex][\"tx-power-max\"];",
																	"    var valueRange = maximumValue - minimumValue; ",
																	"        ",
																	"    var dummyValue = minimumValue + Math.floor(Math.random() * valueRange);",
																	"",
																	"    CouldDummyValueBeSet(currentValue, currentModeName, currentModeIndex, minimumValue, ",
																	"                            maximumValue, ",
																	"                            valueRange, ",
																	"                            dummyValue",
																	"                        );",
																	"} catch (error) {",
																	"    CouldDummyValueBeSet(currentValue, currentModeName, currentModeIndex, minimumValue, ",
																	"                            maximumValue, ",
																	"                            valueRange, ",
																	"                            dummyValue",
																	"                        );",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Functions",
																	"****************************************************************************************/",
																	"function TransmissionModeIndexOf(currentModeName, capability) {",
																	"    for (let i=0; i<(capability[\"transmission-mode-list\"].length-1); i++) {",
																	"        let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
																	"        if ( sampleModeName === currentModeName ) {",
																	"            return i;",
																	"        }",
																	"    }",
																	"    console.log(\"ERROR: Name of transmission mode could not be found in air-interface-capability::transmission-mode-list.\");",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeSet(currentValue, currentModeName, currentModeIndex, minimumValue, ",
																	"                                maximumValue, ",
																	"                                valueRange, ",
																	"                                dummyValue) {",
																	"    pm.test(\"CouldCurrentValueBeReadFromConfiguration\", function () {",
																	"        pm.expect(currentValue).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldCurrentModeNameBeReadFromStatus\", function () {",
																	"        pm.expect(currentModeName).to.be.a(\"string\");",
																	"        pm.expect(currentModeName).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldCurrentModeIndexBeDerivedFromCapabilities\", function () {",
																	"        pm.expect(currentModeIndex).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldMinimumValueBeReadFromCapabilities\", function () {",
																	"        pm.expect(minimumValue).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldMaximumValueBeReadFromCapabilities\", function () {",
																	"        pm.expect(maximumValue).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldValueRangeBeCalculated\", function () {",
																	"        pm.expect(valueRange).to.be.a(\"number\");",
																	"        pm.expect(valueRange).to.be.above(0);",
																	"    });",
																	"    pm.test(\"CouldDummyValueBeDefined\", function () {",
																	"        pm.expect(dummyValue).to.be.a(\"number\");",
																	"        pm.expect(dummyValue).to.be.at.least(minimumValue);",
																	"        pm.expect(dummyValue).to.be.at.most(maximumValue);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus, ",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            attributeUnderTest,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString)) {",
																	"        configurationValidationResults[attributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        configurationValidationResults[attributeUnderTest] = \"not configurable\";",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[attributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus, ",
																	"                                PrintMantisIssuesForTechnologyAndClass,",
																	"                                responseCodeForOperationNotSupported,",
																	"                                configurationValidationResults,",
																	"                                attributeUnderTest,",
																	"                                dummyValueString,",
																	"                                dummyCode,",
																	"                                resultValueString,",
																	"                                resultCode) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    let originalValue = configuration[attributeUnderTest];",
																	"    ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "679f8660-de6d-480a-8b6c-e33d318c1972",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c5e06966-234a-461b-b90e-df784749ab45",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "adaptiveModulationIsOn",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n--------------------Checking Configuration of adaptive-modulation-is-on-------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an boolean attribute with the alternate value and",
																	"* providing this value as dummyValueString to the local Variables.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, configuration);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"adaptive-modulation-is-on\";",
																	"",
																	"try {",
																	"    var dummyValue = !configuration[\"adaptive-modulation-is-on\"];",
																	"    CouldDummyValueBeSet(dummyValue);",
																	"} catch (error) {",
																	"    CouldDummyValueBeSet();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddRandomIntString() {",
																	"    return String(Math.floor(Math.random() * 999));",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, configuration) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeSet(dummyValue) {",
																	"    pm.test(\"CouldDummyValueBeSet\", function () {",
																	"        pm.expect(dummyValue).to.be.a(\"boolean\");",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus, ",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            attributeUnderTest,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2)",
																	"            && (dummyValueString===resultValueString)) {",
																	"        configurationValidationResults[attributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        if ( (capability[\"adaptive-modulation-is-avail\"] === false)",
																	"                && (resultValueString === \"false\")",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
																	"        } else {",
																	"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
																	"        }",
																	"    }",
																	"        ",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[attributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus, ",
																	"                                PrintMantisIssuesForTechnologyAndClass,",
																	"                                responseCodeForOperationNotSupported,",
																	"                                configurationValidationResults,",
																	"                                attributeUnderTest,",
																	"                                dummyValueString,",
																	"                                dummyCode,",
																	"                                resultValueString,",
																	"                                resultCode) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    let originalValue = configuration[attributeUnderTest];",
																	"    ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"IsValueOfTheOriginalValueCorrect\", function() {",
																	"        pm.expect(originalValue).to.be.a(\"boolean\");",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "xpicIsOn",
											"item": [
												{
													"name": "Preparing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "f55f81fb-41a7-4be8-82b0-f27f181f2288",
																"exec": [
																	"console.log(\"\\n---------------------------Checking Configuration of xpic-is-on---------------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Preparation",
																	"* ",
																	"* This Request is for assuring conditions for successful configuration validation",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var status = pm.collectionVariables.get(\"status\");",
																	"    CouldInputBeLoaded(dummyUri, SettingTheRequestVariables, ",
																	"                            moduleUnderTest, ",
																	"                            capability, ",
																	"                            configuration, ",
																	"                            status);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"\";",
																	"",
																	"try {",
																	"    var currentModeName = status[\"transmission-mode-cur\"];",
																	"    var currentModeIndex = TransmissionModeIndexOf(currentModeName, capability);",
																	"    var xpicIsAvailableInCurrentMode = capability[\"transmission-mode-list\"][currentModeIndex][\"xpic-is-avail\"];",
																	"",
																	"    var configurationChangeRequired = false;",
																	"    var  transmissionModeWithXpix = \"\";",
																	"    if ( xpicIsAvailableInCurrentMode === false ) {",
																	"        transmissionModeWithXpix = SearchForTransmissionModeWithXpic(capability);",
																	"        if ( transmissionModeWithXpix !== \"\" ) {",
																	"            configurationChangeRequired = true;",
																	"            configuration[\"transmission-mode-min\"] = transmissionModeWithXpix;",
																	"            configuration[\"adaptive-modulation-is-on\"] = false;",
																	"            configuration = AddHeadlineToDataObject(configuration, \"air-interface-2-0:air-interface-configuration\");",
																	"        }",
																	"    }",
																	"    CouldRequestBodyBeDefined(currentModeName, currentModeIndex, xpicIsAvailableInCurrentMode, ",
																	"                                transmissionModeWithXpix);",
																	"} catch (error) {",
																	"    CouldRequestBodyBeDefined(currentModeName, currentModeIndex, xpicIsAvailableInCurrentMode, ",
																	"                                transmissionModeWithXpix);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = JSON.stringify(configuration);",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    if (configurationChangeRequired) {",
																	"        eval(SettingTheRequestVariables)();",
																	"        CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"    } else {",
																	"        pm.variables.set(\"uri\", dummyUri);",
																	"        pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"        CouldTheDummyRequestBePrepared(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"    CouldTheDummyRequestBePrepared(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Functions",
																	"****************************************************************************************/",
																	"function TransmissionModeIndexOf(currentModeName, capability) {",
																	"    for (let i=0; i<(capability[\"transmission-mode-list\"].length-1); i++) {",
																	"        let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
																	"        if ( sampleModeName === currentModeName ) {",
																	"            return i;",
																	"        }",
																	"    }",
																	"    console.log(\"ERROR: Name of transmission mode could not be found in air-interface-capability::transmission-mode-list.\");",
																	"}",
																	"",
																	"function SearchForTransmissionModeWithXpic(capability) {",
																	"    for (let i=0; i<(capability[\"transmission-mode-list\"].length-1); i++) {",
																	"        let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
																	"        let xpicIsAvailableInSampleMode = capability[\"transmission-mode-list\"][i][\"xpic-is-avail\"];",
																	"        let fixedConfigurationIsAvailableInSampleMode ",
																	"                    = capability[\"transmission-mode-list\"][i][\"supported-as-fixed-configuration\"];",
																	"        if ( xpicIsAvailableInSampleMode && fixedConfigurationIsAvailableInSampleMode ) {",
																	"            return sampleModeName;",
																	"        }",
																	"    }        ",
																	"}",
																	"",
																	"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
																	"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
																	"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
																	"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
																	"    return objectInclHeadline;",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(uri, SettingTheRequestVariables, moduleUnderTest, capability, ",
																	"                            configuration, ",
																	"                            status) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(status).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldRequestBodyBeDefined(currentModeName, currentModeIndex, ",
																	"                                    xpicIsAvailableInCurrentMode, ",
																	"                                    transmissionModeWithXpix) {",
																	"    pm.test(\"CouldCurrentModeNameBeDerived\", function() {",
																	"        pm.expect(currentModeName).to.be.a(\"string\");",
																	"        pm.expect(currentModeName).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldCurrentModeIndexBeDerived\", function() {",
																	"        pm.expect(currentModeIndex).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldXpicIsAvailableInCurrentModeBeDerived\", function() {",
																	"        pm.expect(xpicIsAvailableInCurrentMode).to.be.a(\"boolean\");",
																	"    });",
																	"    pm.test(\"CouldTransmissionModeWithXpixBeDerived\", function() {",
																	"        pm.expect(transmissionModeWithXpix).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheDummyRequestBePrepared(success) {",
																	"    pm.test(\"CouldTheDummyRequestBePrepared\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an boolean attribute with the alternate value and",
																	"* providing this value as dummyValueString to the local Variables.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, configuration);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"xpic-is-on\";",
																	"",
																	"try {",
																	"    var dummyValue = !configuration[\"xpic-is-on\"];",
																	"    CouldDummyValueBeSet(true);",
																	"} catch (error) {",
																	"    CouldDummyValueBeSet(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddRandomIntString() {",
																	"    return String(Math.floor(Math.random() * 999));",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, configuration) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeSet(success) {",
																	"    pm.test(\"CouldDummyValueBeSet\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus, ",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            capability,",
																	"                            configuration,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            attributeUnderTest,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"    let currentModeName = configuration[\"transmission-mode-min\"];",
																	"    let currentModeIndex = TransmissionModeIndexOf(currentModeName, capability);",
																	"    let currentXpicIsAvail = capability[\"transmission-mode-list\"][currentModeIndex][\"xpic-is-avail\"];",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString) ) {",
																	"        configurationValidationResults[attributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        if ( (currentXpicIsAvail === false)",
																	"                && (resultValueString === \"false\")",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
																	"        } else {",
																	"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
																	"        }",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(currentModeName, currentModeIndex, currentXpicIsAvail);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[attributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	" function TransmissionModeIndexOf (currentModeName, capability) {",
																	"    for (let i=0; i<(capability[\"transmission-mode-list\"].length-1); i++) {",
																	"        let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
																	"        if ( sampleModeName === currentModeName ) {",
																	"            return i;",
																	"        }",
																	"    }",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus, ",
																	"                                PrintMantisIssuesForTechnologyAndClass,",
																	"                                capability,",
																	"                                configuration,",
																	"                                responseCodeForOperationNotSupported,",
																	"                                configurationValidationResults,",
																	"                                attributeUnderTest,",
																	"                                dummyValueString,",
																	"                                dummyCode,",
																	"                                resultValueString,",
																	"                                resultCode) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldTheCapabilityBeLoaded\", function () {",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"    });",
																	"    pm.test(\"CouldTheConfigurationBeLoaded\", function () {",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"    pm.test(\"CouldTheResponseCodeForOperationNotSupportedBeLoaded\", function () {",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldTheConfigurationValidationResultsBeLoaded\", function () {",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(currentModeName, currentModeIndex, currentXpicIsAvail) {",
																	"    pm.test(\"CouldCurrentModeNameBeDerived\", function () {",
																	"        pm.expect(currentModeName).to.be.a(\"string\");",
																	"        pm.expect(currentModeName).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldCurrentModeIndexBeDerived\", function () {",
																	"        pm.expect(currentModeIndex).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldCurrentXpicIsAvailBeDerived\", function () {",
																	"        pm.expect(currentXpicIsAvail).to.be.a(\"boolean\");",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    let originalValue = configuration[attributeUnderTest];",
																	"    ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "mimoIsOn",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n---------------------------Checking Configuration of mimo-is-on---------------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an boolean attribute with the alternate value and",
																	"* providing this value as dummyValueString to the local Variables.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, configuration);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"mimo-is-on\";",
																	"",
																	"try {",
																	"    var dummyValue = !configuration[\"mimo-is-on\"];",
																	"    CouldDummyValueBeSet(dummyValue);",
																	"} catch (error) {",
																	"    CouldDummyValueBeSet();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddRandomIntString() {",
																	"    return String(Math.floor(Math.random() * 999));",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, configuration) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeSet(dummyValue) {",
																	"    pm.test(\"CouldDummyValueBeSet\", function () {",
																	"        pm.expect(dummyValue).to.be.a(\"boolean\");",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus, ",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            attributeUnderTest,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString) ) {",
																	"        configurationValidationResults[attributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        if ( (resultValueString === \"false\")",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
																	"        } else {",
																	"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
																	"        }    ",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[attributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus, ",
																	"                                PrintMantisIssuesForTechnologyAndClass,",
																	"                                responseCodeForOperationNotSupported,",
																	"                                configurationValidationResults,",
																	"                                attributeUnderTest,",
																	"                                dummyValueString,",
																	"                                dummyCode,",
																	"                                resultValueString,",
																	"                                resultCode) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    let originalValue = configuration[attributeUnderTest];",
																	"    ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "alicIsOn",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n---------------------------Checking Configuration of alic-is-on---------------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an boolean attribute with the alternate value and",
																	"* providing this value as dummyValueString to the local Variables.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, configuration);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"alic-is-on\";",
																	"",
																	"try {",
																	"    var dummyValue = !configuration[\"alic-is-on\"];",
																	"    CouldDummyValueBeSet(dummyValue);",
																	"} catch (error) {",
																	"    CouldDummyValueBeSet();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddRandomIntString() {",
																	"    return String(Math.floor(Math.random() * 999));",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, configuration) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeSet(dummyValue) {",
																	"    pm.test(\"CouldDummyValueBeSet\", function () {",
																	"        pm.expect(dummyValue).to.be.a(\"boolean\");",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus, ",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            attributeUnderTest,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString) ) {",
																	"        configurationValidationResults[attributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        if ( (resultValueString === \"false\")",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
																	"        } else {",
																	"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
																	"        }        ",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[attributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus, ",
																	"                                PrintMantisIssuesForTechnologyAndClass,",
																	"                                responseCodeForOperationNotSupported,",
																	"                                configurationValidationResults,",
																	"                                attributeUnderTest,",
																	"                                dummyValueString,",
																	"                                dummyCode,",
																	"                                resultValueString,",
																	"                                resultCode) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus, ",
																	"                                PrintMantisIssuesForTechnologyAndClass,",
																	"                                responseCodeForOperationNotSupported,",
																	"                                configurationValidationResults,",
																	"                                attributeUnderTest,",
																	"                                dummyValueString,",
																	"                                dummyCode,",
																	"                                resultValueString,",
																	"                                resultCode) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    let originalValue = configuration[attributeUnderTest];",
																	"    ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "atpcIsOn",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n---------------------------Checking Configuration of atpc-is-on---------------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an boolean attribute with the alternate value and",
																	"* providing this value as dummyValueString to the local Variables.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, configuration);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"atpc-is-on\";",
																	"",
																	"try {",
																	"    var dummyValue = !configuration[\"atpc-is-on\"];",
																	"    CouldDummyValueBeSet(dummyValue);",
																	"} catch (error) {",
																	"    CouldDummyValueBeSet();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddRandomIntString() {",
																	"    return String(Math.floor(Math.random() * 999));",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, configuration) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeSet(dummyValue) {",
																	"    pm.test(\"CouldDummyValueBeSet\", function () {",
																	"        pm.expect(dummyValue).to.be.a(\"boolean\");",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus, ",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            capability,",
																	"                            configuration,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            attributeUnderTest,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString) ) {",
																	"        configurationValidationResults[attributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        if ( (capability[\"atpc-is-avail\"] === false)",
																	"                && (resultValueString === \"false\")",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
																	"        } else {",
																	"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
																	"        }",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[attributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus, ",
																	"                                PrintMantisIssuesForTechnologyAndClass,",
																	"                                capability,",
																	"                                configuration,",
																	"                                responseCodeForOperationNotSupported,",
																	"                                configurationValidationResults,",
																	"                                attributeUnderTest,",
																	"                                dummyValueString,",
																	"                                dummyCode,",
																	"                                resultValueString,",
																	"                                resultCode) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    let originalValue = configuration[attributeUnderTest];",
																	"    ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "atpcThreshUpper",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n-----------------------Checking Configuration of atpc-thresh-upper------------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an attribute with a DummyValue and providing the",
																	"* dummyValueString as a local Variable.",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, capability, configuration);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"atpc-thresh-upper\";",
																	"",
																	"try {",
																	"    var currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
																	"    var minimumValue = configuration[\"atpc-thresh-lower\"];",
																	"    CouldCurrentConfigurationValuesBeRead(currentValue, minimumValue);",
																	"} catch (error) {",
																	"    CouldCurrentConfigurationValuesBeRead();",
																	"}",
																	"",
																	"try {",
																	"    if ( (currentValue - 1) > minimumValue) {",
																	"        var dummyValue = currentValue - 1;",
																	"    } else {",
																	"        var dummyValue = currentValue + 1;",
																	"    }",
																	"    CouldDummyValueBeDefined(true);",
																	"} catch (error) {",
																	"    CouldDummyValueBeDefined(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddRandomIntString() {",
																	"    return String(Math.floor(Math.random() * 999));",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldCurrentConfigurationValuesBeRead(currentValue, minimumValue) {",
																	"    pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
																	"        pm.expect(currentValue).to.be.a(\"number\");",
																	"        pm.expect(minimumValue).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeDefined(success) {",
																	"    pm.test(\"CouldDummyValueBeDefined\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus,",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            capability,",
																	"                            configuration,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString) ) {",
																	"        configurationValidationResults[attributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        if ( (resultValueString === \"99\") ",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
																	"        } else {",
																	"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
																	"        }",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[attributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus,",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            capability,",
																	"                            configuration,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    let originalValue = configuration[attributeUnderTest];",
																	"    ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "atpcThreshLower",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n-----------------------Checking Configuration of atpc-thresh-lower------------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an attribute with a DummyValue and providing the",
																	"* dummyValueString as a local Variable.",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, capability, configuration);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"atpc-thresh-lower\";",
																	"",
																	"try {",
																	"    var currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
																	"    var maximumValue = configuration[\"atpc-thresh-upper\"];",
																	"    CouldCurrentConfigurationValuesBeRead(currentValue, maximumValue);",
																	"} catch (error) {",
																	"    CouldCurrentConfigurationValuesBeRead();",
																	"}",
																	"",
																	"try {",
																	"    if ( (currentValue + 1) < maximumValue) {",
																	"        var dummyValue = currentValue + 1;",
																	"    } else {",
																	"        var dummyValue = currentValue - 1;",
																	"    }",
																	"    CouldDummyValueBeDefined(true);",
																	"} catch (error) {",
																	"    CouldDummyValueBeDefined(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddRandomIntString() {",
																	"    return String(Math.floor(Math.random() * 999));",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldCurrentConfigurationValuesBeRead(currentValue, maximumValue) {",
																	"    pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
																	"        pm.expect(currentValue).to.be.a(\"number\");",
																	"        pm.expect(maximumValue).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeDefined(success) {",
																	"    pm.test(\"CouldDummyValueBeDefined\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus,",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            capability,",
																	"                            configuration,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString)) {",
																	"        configurationValidationResults[attributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        if ( (resultValueString === \"99\")",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
																	"        } else {",
																	"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
																	"        }",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[attributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus,",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            capability,",
																	"                            configuration,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    let originalValue = configuration[attributeUnderTest];",
																	"    ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "atpcTxPowerMin",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n-----------------------Checking Configuration of atpc-tx-power-min------------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an attribute with a DummyValue and providing the",
																	"* dummyValueString as a local Variable.",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, capability, configuration);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"atpc-tx-power-min\";",
																	"",
																	"try {",
																	"    var currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
																	"    CouldCurrentConfigurationValuesBeRead(currentValue);",
																	"} catch (error) {",
																	"    CouldCurrentConfigurationValuesBeRead();",
																	"}",
																	"",
																	"try {",
																	"    let currentModeName = configuration[\"transmission-mode-min\"];",
																	"",
																	"    for (let i=0; i<(capability[\"transmission-mode-list\"].length-1); i++) {",
																	"        let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
																	"            ",
																	"        if ( sampleModeName === currentModeName ) {",
																	"            var minimumValue = capability[\"transmission-mode-list\"][i][\"tx-power-min\"];",
																	"        }",
																	"    }",
																	"",
																	"    CouldMinimumValueBeRetrieved(minimumValue);",
																	"} catch (error) {",
																	"    CouldMinimumValueBeRetrieved();",
																	"}",
																	"",
																	"try {",
																	"    var dummyValue = minimumValue + Math.floor(Math.random() * 3);",
																	"    ",
																	"    if ( dummyValue === currentValue ) {",
																	"        dummyValue = dummyValue + 1;",
																	"    }",
																	"    ",
																	"    CouldDummyValueBeDefined(true);",
																	"} catch (error) {",
																	"    CouldDummyValueBeDefined(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddRandomIntString() {",
																	"    return String(Math.floor(Math.random() * 999));",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldCurrentConfigurationValuesBeRead(currentValue) {",
																	"    pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
																	"        pm.expect(currentValue).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldMinimumValueBeRetrieved(minimumValue) {",
																	"    pm.test(\"CouldMinimumValueBeRetrieved\", function () {",
																	"        pm.expect(minimumValue).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeDefined(success) {",
																	"    pm.test(\"CouldDummyValueBeDefined\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus,",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            capability,",
																	"                            configuration,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString)) {",
																	"        configurationValidationResults[attributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        if ( (resultValueString === \"-99\")",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
																	"        } else {",
																	"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
																	"        }",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[attributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus,",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            capability,",
																	"                            configuration,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    let originalValue = configuration[attributeUnderTest];",
																	"    ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "autoFreqSelectIsOn",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n----------------------Checking Configuration of auto-freq-select-is-on--------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an boolean attribute with the alternate value and",
																	"* providing this value as dummyValueString to the local Variables.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, configuration);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"auto-freq-select-is-on\";",
																	"",
																	"try {",
																	"    var dummyValue = !configuration[\"auto-freq-select-is-on\"];",
																	"    CouldDummyValueBeSet(dummyValue);",
																	"} catch (error) {",
																	"    CouldDummyValueBeSet();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddRandomIntString() {",
																	"    return String(Math.floor(Math.random() * 999));",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, configuration) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeSet(dummyValue) {",
																	"    pm.test(\"CouldDummyValueBeSet\", function () {",
																	"        pm.expect(dummyValue).to.be.a(\"boolean\");",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus, ",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            capability,",
																	"                            configuration,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            attributeUnderTest,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString)) {",
																	"        configurationValidationResults[attributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        if ( (capability[\"auto-freq-select-is-avail\"] === false)",
																	"                && (resultValueString === \"false\") ",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
																	"        } else {",
																	"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
																	"        }",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[attributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus, ",
																	"                                PrintMantisIssuesForTechnologyAndClass,",
																	"                                capability,",
																	"                                configuration,",
																	"                                responseCodeForOperationNotSupported,",
																	"                                configurationValidationResults,",
																	"                                attributeUnderTest,",
																	"                                dummyValueString,",
																	"                                dummyCode,",
																	"                                resultValueString,",
																	"                                resultCode) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    let originalValue = configuration[attributeUnderTest];",
																	"    ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "autoFreqSelectRange",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n--------------------Checking Configuration of auto-freq-select-range----------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an attribute with a DummyValue and providing the",
																	"* dummyValueString as a local Variable.",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, capability, configuration);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"auto-freq-select-range\";",
																	"",
																	"try {",
																	"    var dummyValue = Math.floor(Math.random() * 5);",
																	"    CouldDummyValueBeDefined(true);",
																	"} catch (error) {",
																	"    CouldDummyValueBeDefined(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddRandomIntString() {",
																	"    return String(Math.floor(Math.random() * 999));",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldCurrentConfigurationValuesBeRead(currentValue, minimumValue) {",
																	"    pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
																	"        pm.expect(currentValue).to.be.a(\"number\");",
																	"        pm.expect(minimumValue).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeDefined(success) {",
																	"    pm.test(\"CouldDummyValueBeDefined\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus,",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            capability,",
																	"                            configuration,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString)) {",
																	"        configurationValidationResults[attributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        if ( (capability[\"auto-freq-select-is-avail\"] === false)",
																	"                && (resultValueString === \"-1\") ",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
																	"        } else {",
																	"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
																	"        }",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[attributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus,",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            capability,",
																	"                            configuration,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    let originalValue = configuration[attributeUnderTest];",
																	"    ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "modulationIsOn",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n------------------------Checking Configuration of modulation-is-on------------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an boolean attribute with the alternate value and",
																	"* providing this value as dummyValueString to the local Variables.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, configuration);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"modulation-is-on\";",
																	"",
																	"try {",
																	"    var dummyValue = !configuration[\"modulation-is-on\"];",
																	"    CouldDummyValueBeSet(dummyValue);",
																	"} catch (error) {",
																	"    CouldDummyValueBeSet();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddRandomIntString() {",
																	"    return String(Math.floor(Math.random() * 999));",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, configuration) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeSet(dummyValue) {",
																	"    pm.test(\"CouldDummyValueBeSet\", function () {",
																	"        pm.expect(dummyValue).to.be.a(\"boolean\");",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"    ",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"    ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus, ",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            capability,",
																	"                            configuration,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString)) {",
																	"        configurationValidationResults[attributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        if ( (resultValueString === \"true\") ",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
																	"        } else {",
																	"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
																	"        }",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[attributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus, ",
																	"                                PrintMantisIssuesForTechnologyAndClass,",
																	"                                capability,",
																	"                                configuration,",
																	"                                responseCodeForOperationNotSupported,",
																	"                                configurationValidationResults,",
																	"                                dummyValueString,",
																	"                                dummyCode,",
																	"                                resultValueString,",
																	"                                resultCode) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    let originalValue = configuration[attributeUnderTest];",
																	"    ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "encryptionIsOn",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n-------------------------Checking Configuration of encryption-is-on-----------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an boolean attribute with the alternate value and",
																	"* providing this value as dummyValueString to the local Variables.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, configuration);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"encryption-is-on\";",
																	"",
																	"try {",
																	"    var dummyValue = !configuration[\"encryption-is-on\"];",
																	"    CouldDummyValueBeSet(dummyValue);",
																	"} catch (error) {",
																	"    CouldDummyValueBeSet();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddRandomIntString() {",
																	"    return String(Math.floor(Math.random() * 999));",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, configuration) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeSet(dummyValue) {",
																	"    pm.test(\"CouldDummyValueBeSet\", function () {",
																	"        pm.expect(dummyValue).to.be.a(\"boolean\");",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus, ",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            capability,",
																	"                            configuration,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            attributeUnderTest,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2)",
																	"            && (dummyValueString===resultValueString)) {",
																	"        configurationValidationResults[attributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        if ( (capability[\"encryption-is-avail\"] === false)",
																	"                && (resultValueString === \"false\")",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
																	"        } else {",
																	"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
																	"        }",
																	"    }",
																	"        ",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[attributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus, ",
																	"                                PrintMantisIssuesForTechnologyAndClass,",
																	"                                capability,",
																	"                                configuration,",
																	"                                responseCodeForOperationNotSupported,",
																	"                                configurationValidationResults,",
																	"                                attributeUnderTest,",
																	"                                dummyValueString,",
																	"                                dummyCode,",
																	"                                resultValueString,",
																	"                                resultCode) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    let originalValue = configuration[attributeUnderTest];",
																	"    ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "cryptographicKey",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n-----------------------Checking Configuration of cryptographic-key------------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an attribute with a DummyValue and providing the",
																	"* dummyValueString as a local Variable.",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"cryptographic-key\";",
																	"",
																	"let dummyValue = \"Dummy \" + AddRandomIntString();",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddRandomIntString() {",
																	"    return String(Math.floor(Math.random() * 999));",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus, ",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            capability,",
																	"                            configuration,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            attributeUnderTest,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString)) {",
																	"        configurationValidationResults[attributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        if ( (capability[\"encryption-is-avail\"] === false)",
																	"                && (resultValueString === JSON.stringify(\"Cryptographic key not yet defined.\"))",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
																	"        } else {",
																	"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
																	"        }",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[attributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus, ",
																	"                                PrintMantisIssuesForTechnologyAndClass,",
																	"                                capability,",
																	"                                configuration,",
																	"                                responseCodeForOperationNotSupported,",
																	"                                configurationValidationResults,",
																	"                                attributeUnderTest,",
																	"                                dummyValueString,",
																	"                                dummyCode,",
																	"                                resultValueString,",
																	"                                resultCode) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    let originalValue = configuration[attributeUnderTest];",
																	"    ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "loopBackKindOn",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n-----------------------Checking Configuration of loop-back-kind-on------------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an attribute with a DummyValue and providing the",
																	"* dummyValueString as a local Variable.",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, capability, configuration);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"loop-back-kind-on\";",
																	"",
																	"try {",
																	"    var availableValue = capability[\"supported-loop-back-kind-list\"][0];",
																	"    CouldAnAvailableConfigurationValueBeRead(availableValue);",
																	"} catch (error) {",
																	"    CouldAnAvailableConfigurationValueBeRead();",
																	"}",
																	"",
																	"try {",
																	"    dummyValue = availableValue;",
																	"    CouldDummyValueBeDefined(true);",
																	"} catch (error) {",
																	"    CouldDummyValueBeDefined(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddRandomIntString() {",
																	"    return String(Math.floor(Math.random() * 999));",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldAnAvailableConfigurationValueBeRead(availableValue) {",
																	"    pm.test(\"CouldAnAvailableConfigurationValueBeRead\", function () {",
																	"        pm.expect(availableValue).to.be.a(\"string\");",
																	"        pm.expect(availableValue).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeDefined(success) {",
																	"    pm.test(\"CouldDummyValueBeDefined\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus,",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            capability,",
																	"                            configuration,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2)",
																	"            && (dummyValueString === resultValueString)",
																	"            && (resultValueString !== \"air-interface-2-0:LOOP_BACK_TYPE_NONE\")) {",
																	"        configurationValidationResults[attributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        if ( (resultValueString === \"air-interface-2-0:LOOP_BACK_TYPE_NONE\")",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
																	"        } else {",
																	"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
																	"        }",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[attributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus,",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            capability,",
																	"                            configuration,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          ) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(dummyUri).to.be.a(\"string\");",
																	"        pm.expect(dummyUri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    let originalValue = configuration[attributeUnderTest];",
																	"    ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "maintenanceTimer",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n-----------------------Checking Configuration of maintenance-timer------------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an attribute with a DummyValue and providing the",
																	"* dummyValueString as a local Variable.",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, capability, configuration);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"maintenance-timer\";",
																	"",
																	"try {",
																	"    var dummyValue = 5;",
																	"    CouldDummyValueBeDefined(true);",
																	"} catch (error) {",
																	"    CouldDummyValueBeDefined(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddRandomIntString() {",
																	"    return String(Math.floor(Math.random() * 999));",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeDefined(success) {",
																	"    pm.test(\"CouldDummyValueBeDefined\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus,",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            capability,",
																	"                            configuration,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"        ",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (parseInt(resultValueString) >= 0)",
																	"            && (parseInt(resultValueString) <= parseInt(dummyValueString)) ) {",
																	"        configurationValidationResults[attributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        if ( (resultValueString === \"-1\")",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
																	"        } else {",
																	"            if (resultValueString === capability[\"maintenance-timer-range\"]) {",
																	"                configurationValidationResults[attributeUnderTest] = \"not supported\";",
																	"            } else {",
																	"                configurationValidationResults[attributeUnderTest] = \"not configurable\";",
																	"            }",
																	"        }",
																	"    }",
																	"        ",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[attributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus,",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            capability,",
																	"                            configuration,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          ) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(dummyUri).to.be.a(\"string\");",
																	"        pm.expect(dummyUri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldTimerRangeBeTranslatedIntoAFixedValue(fixedMaintenanceTime) {",
																	"    pm.test(\"CouldTimerRangeBeTranslatedIntoAFixedValue\", function () {",
																	"        pm.expect(fixedMaintenanceTime).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    let originalValue = configuration[attributeUnderTest];",
																	"    ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "pks/problemKindSeverity",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n-------------------Checking Configuration of pks/problem-kind-severity--------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an attribute with a DummyValue and providing the",
																	"* dummyValueString as a local Variable.",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, capability, configuration);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const DATATYPE_UNDER_TEST = \"problem-kind-severity-list\";",
																	"const DATATYPE_INDEX_UNDER_TEST = 0;",
																	"let keysOfDatatypeInstanceUnderTest = [\"\"];",
																	"const ATTRIBUTE_UNDER_TEST = \"problem-kind-severity\";",
																	"",
																	"try {",
																	"    var currentValue;",
																	"    if ( (DATATYPE_UNDER_TEST===\"\") ) {",
																	"        currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
																	"    } else {",
																	"        currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
																	"        keysOfDatatypeInstanceUnderTest[0] = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"problem-kind-name\"];",
																	"    }",
																	"    CouldCurrentConfigurationValuesBeRead(currentValue);",
																	"} catch (error) {",
																	"    CouldCurrentConfigurationValuesBeRead();",
																	"}",
																	"",
																	"try {",
																	"    if ( currentValue !== \"air-interface-2-0:SEVERITY_TYPE_MINOR\" ) {",
																	"        var dummyValue = \"air-interface-2-0:SEVERITY_TYPE_MINOR\";",
																	"    } else {",
																	"        var dummyValue = \"air-interface-2-0:SEVERITY_TYPE_MAJOR\";",
																	"    }",
																	"    CouldDummyValueBeDefined(true);",
																	"} catch (error) {",
																	"    CouldDummyValueBeDefined(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, DATATYPE_INDEX_UNDER_TEST,",
																	"                                    keysOfDatatypeInstanceUnderTest, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
																	"                                    FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"datatypeIndexUnderTest\", DATATYPE_INDEX_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", keysOfDatatypeInstanceUnderTest);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddRandomIntString() {",
																	"    return String(Math.floor(Math.random() * 999));",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldCurrentConfigurationValuesBeRead(currentValue) {",
																	"    pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
																	"        pm.expect(currentValue).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeDefined(success) {",
																	"    pm.test(\"CouldDummyValueBeDefined\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, datatypeIndexUnderTest, ",
																	"                                            keysOfDatatypeInstanceUnderTest, attributeUnderTest, ",
																	"                                            contentType, filteredDepth, filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"HasValueOfDatatypeUnderTestCorrectDatatype\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"HasValueOfDatatypeIndexUnderTestCorrectDatatype\", function() {",
																	"        pm.expect(datatypeIndexUnderTest).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"HasValueOfkeysOfDatatypeInstanceUnderTestCorrectDatatype\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.an(\"array\");",
																	"    });",
																	"    pm.test(\"HasValueOfAttributeUnderTestBeenProvided\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"HasValueOfFilteredDepthCorrectDatatype\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"HasValueOfFilteredFieldsCorrectDatatype\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"HasRequestBodyBeenProvided\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    if ( (datatypeUnderTest===undefined) || (datatypeUnderTest===\"\") ) {",
																	"        var NameOfAttributeUnderTest = attributeUnderTest;",
																	"    } else {",
																	"        var NameOfAttributeUnderTest = datatypeUnderTest + \"/\" + attributeUnderTest;",
																	"    }",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus,",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            capability,",
																	"                            configuration,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode,",
																	"                            NameOfAttributeUnderTest",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString) ) {",
																	"        configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        if ( (resultValueString === JSON.stringify(\"air-interface-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"))",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
																	"        } else {",
																	"            configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
																	"        }",
																	"    }",
																	"    ",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[NameOfAttributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus,",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            capability,",
																	"                            configuration,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode,",
																	"                            NameOfAttributeUnderTest",
																	"                          ) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(dummyUri).to.be.a(\"string\");",
																	"        pm.expect(dummyUri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"        pm.expect(NameOfAttributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(NameOfAttributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
																	"    var datatypeIndexUnderTest = pm.variables.get(\"datatypeIndexUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, ",
																	"                            moduleUnderTest, ",
																	"                            datatypeUnderTest, ",
																	"                            datatypeIndexUnderTest, ",
																	"                            attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    var originalValue;",
																	"    if ( (typeof datatypeUnderTest==\"undefined\") || (datatypeUnderTest===\"\") ) {",
																	"        originalValue = configuration[attributeUnderTest];",
																	"    } else {",
																	"        originalValue = configuration[datatypeUnderTest][datatypeIndexUnderTest][attributeUnderTest];",
																	"    }",
																	"        ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, ",
																	"                            moduleUnderTest, ",
																	"                            datatypeUnderTest, ",
																	"                            datatypeIndexUnderTest, ",
																	"                            attributeUnderTest) {",
																	"    pm.test(\"CouldSettingTheRequestVariablesBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldConfigurationBeLoaded\", function () {",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldDatatypeUnderTestBeLoaded\", function () {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"CouldDatatypeIndexUnderTestBeLoaded\", function () {",
																	"        pm.expect(datatypeIndexUnderTest).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "13722f72-f2be-48fb-ab4f-e232256e0e4f",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "30e927f3-5800-4ce2-8e86-f425659a900a",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "g826/alarmRaisingThreshold",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n-----------------Checking Configuration of g826/alarm-raising-threshold-------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an attribute with a DummyValue and providing the",
																	"* dummyValueString as a local Variable.",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var status = pm.collectionVariables.get(\"status\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, capability, configuration, status, moduleUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const DATATYPE_UNDER_TEST = \"g-826-threshold-cross-alarm-list\";",
																	"const DATATYPE_INDEX_UNDER_TEST = 0;",
																	"let keysOfDatatypeInstanceUnderTest = [\"\"];",
																	"const ATTRIBUTE_UNDER_TEST = \"alarm-raising-threshold\";",
																	"",
																	"try {",
																	"    var currentValue;",
																	"    if ( (DATATYPE_UNDER_TEST===\"\") ) {",
																	"        currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
																	"    } else {",
																	"        currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
																	"        keysOfDatatypeInstanceUnderTest[0] = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"g-826-value-kind\"];",
																	"        keysOfDatatypeInstanceUnderTest[1] = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"granularity-period\"];",
																	"    }",
																	"    CouldCurrentConfigurationValuesBeRead(currentValue);",
																	"} catch (error) {",
																	"    CouldCurrentConfigurationValuesBeRead();",
																	"}",
																	"",
																	"try {",
																	"    let alarmClearingThreshold = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"alarm-clearing-threshold\"];",
																	"    var dummyValue =  alarmClearingThreshold + Math.floor(Math.random() * 9);",
																	"    CouldDummyValueBeDefined(true);",
																	"} catch (error) {",
																	"    CouldDummyValueBeDefined(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, DATATYPE_INDEX_UNDER_TEST,",
																	"                                    keysOfDatatypeInstanceUnderTest, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
																	"                                    FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"datatypeIndexUnderTest\", DATATYPE_INDEX_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", keysOfDatatypeInstanceUnderTest);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddRandomIntString() {",
																	"    return String(Math.floor(Math.random() * 999));",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, capability, ",
																	"                                configuration, ",
																	"                                status,",
																	"                                moduleUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(status).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldCurrentConfigurationValuesBeRead(currentValue) {",
																	"    pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
																	"        pm.expect(currentValue).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeDefined(success) {",
																	"    pm.test(\"CouldDummyValueBeDefined\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, datatypeIndexUnderTest, ",
																	"                                            keysOfDatatypeInstanceUnderTest, attributeUnderTest, ",
																	"                                            contentType, filteredDepth, filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"HasValueOfDatatypeUnderTestCorrectDatatype\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"HasValueOfDatatypeIndexUnderTestCorrectDatatype\", function() {",
																	"        pm.expect(datatypeIndexUnderTest).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"HasValueOfkeysOfDatatypeInstanceUnderTestCorrectDatatype\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.an(\"array\");",
																	"    });",
																	"    pm.test(\"HasValueOfAttributeUnderTestBeenProvided\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"HasValueOfFilteredDepthCorrectDatatype\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"HasValueOfFilteredFieldsCorrectDatatype\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"HasRequestBodyBeenProvided\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    if ( (datatypeUnderTest===undefined) || (datatypeUnderTest===\"\") ) {",
																	"        var NameOfAttributeUnderTest = attributeUnderTest;",
																	"    } else {",
																	"        var NameOfAttributeUnderTest = datatypeUnderTest + \"/\" + attributeUnderTest;",
																	"    }",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus,",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            capability,",
																	"                            configuration,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode,",
																	"                            NameOfAttributeUnderTest",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString) ) {",
																	"        configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        if ( (capability[\"performance-monitoring-is-avail\"] === false)",
																	"                && (resultValueString === \"-1\")",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
																	"        } else {",
																	"            configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
																	"        }",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[NameOfAttributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus,",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            capability,",
																	"                            configuration,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode,",
																	"                            NameOfAttributeUnderTest) {",
																	"    pm.test(\"CouldTheUriBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldThe(MantisInterfaceStatusBeLoaded\", function () {",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"    });",
																	"    pm.test(\"CouldPrintMantisIssuesForTechnologyAndClassBeLoaded\", function () {",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTheCapabilityBeLoaded\", function () {",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"    });",
																	"    pm.test(\"CouldTheConfigurationBeLoaded\", function () {",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"    pm.test(\"CouldTheResponseCodeForOperationNotSupportedBeLoaded\", function () {",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldTheConfigurationValidationResultsBeLoaded\", function () {",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"    });",
																	"    pm.test(\"CouldTheDummyValueStringBeLoaded\", function () {",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTheDummyCodeBeLoaded\", function () {",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldTheResultValueStringBeLoaded\", function () {",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTheResultCodeBeLoaded\", function () {",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldTheNameOfAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(NameOfAttributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(NameOfAttributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
																	"    var datatypeIndexUnderTest = pm.variables.get(\"datatypeIndexUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, ",
																	"                            moduleUnderTest, ",
																	"                            datatypeUnderTest, ",
																	"                            datatypeIndexUnderTest, ",
																	"                            attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    var originalValue;",
																	"    if ( (typeof datatypeUnderTest==\"undefined\") || (datatypeUnderTest===\"\") ) {",
																	"        originalValue = configuration[attributeUnderTest];",
																	"    } else {",
																	"        originalValue = configuration[datatypeUnderTest][datatypeIndexUnderTest][attributeUnderTest];",
																	"    }",
																	"        ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, ",
																	"                            moduleUnderTest, ",
																	"                            datatypeUnderTest, ",
																	"                            datatypeIndexUnderTest, ",
																	"                            attributeUnderTest) {",
																	"    pm.test(\"CouldSettingTheRequestVariablesBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldConfigurationBeLoaded\", function () {",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldDatatypeUnderTestBeLoaded\", function () {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"CouldDatatypeIndexUnderTestBeLoaded\", function () {",
																	"        pm.expect(datatypeIndexUnderTest).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9bcdc8c8-e1df-4f63-b572-ef4ee0c2c468",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ef6e9308-9b2c-49a7-995f-10e4dbafe657",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "g826/alarmClearingThreshold",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n-----------------Checking Configuration of g826/alarm-clearing-threshold------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an attribute with a DummyValue and providing the",
																	"* dummyValueString as a local Variable.",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var status = pm.collectionVariables.get(\"status\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, capability, configuration);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const DATATYPE_UNDER_TEST = \"g-826-threshold-cross-alarm-list\";",
																	"const DATATYPE_INDEX_UNDER_TEST = 0;",
																	"let keysOfDatatypeInstanceUnderTest = [\"\"];",
																	"const ATTRIBUTE_UNDER_TEST = \"alarm-clearing-threshold\";",
																	"",
																	"try {",
																	"    var currentValue;",
																	"    if ( (DATATYPE_UNDER_TEST===\"\") ) {",
																	"        currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
																	"    } else {",
																	"        currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
																	"        keysOfDatatypeInstanceUnderTest[0] = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"g-826-value-kind\"];",
																	"        keysOfDatatypeInstanceUnderTest[1] = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"granularity-period\"];",
																	"    }",
																	"    CouldCurrentConfigurationValuesBeRead(currentValue);",
																	"} catch (error) {",
																	"    CouldCurrentConfigurationValuesBeRead();",
																	"}",
																	"",
																	"try {",
																	"    let alarmRaisingThreshold = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"alarm-raising-threshold\"];",
																	"    var dummyValue = Math.floor(Math.random() * alarmRaisingThreshold);",
																	"    CouldDummyValueBeDefined(alarmRaisingThreshold, dummyValue);",
																	"} catch (error) {",
																	"    CouldDummyValueBeDefined();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, DATATYPE_INDEX_UNDER_TEST,",
																	"                                    keysOfDatatypeInstanceUnderTest, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
																	"                                    FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"datatypeIndexUnderTest\", DATATYPE_INDEX_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", keysOfDatatypeInstanceUnderTest);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddRandomIntString() {",
																	"    return String(Math.floor(Math.random() * 999));",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldCurrentConfigurationValuesBeRead(currentValue) {",
																	"    pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
																	"        pm.expect(currentValue).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeDefined(alarmRaisingThreshold, dummyValue) {",
																	"    pm.test(\"CouldAlarmRaisingThresholdBeRetrieved\", function () {",
																	"        pm.expect(alarmRaisingThreshold).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldDummyValueBeCalculated\", function () {",
																	"        pm.expect(dummyValue).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, datatypeIndexUnderTest, ",
																	"                                            keysOfDatatypeInstanceUnderTest, attributeUnderTest, ",
																	"                                            contentType, filteredDepth, filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"HasValueOfDatatypeUnderTestCorrectDatatype\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"HasValueOfDatatypeIndexUnderTestCorrectDatatype\", function() {",
																	"        pm.expect(datatypeIndexUnderTest).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"HasValueOfkeysOfDatatypeInstanceUnderTestCorrectDatatype\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.an(\"array\");",
																	"    });",
																	"    pm.test(\"HasValueOfAttributeUnderTestBeenProvided\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"HasValueOfFilteredDepthCorrectDatatype\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"HasValueOfFilteredFieldsCorrectDatatype\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"HasRequestBodyBeenProvided\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	" * ",
																	" * Evaluating",
																	" * ",
																	" * This Request compares resultValue with dummyValue.",
																	" * Capability or Status values are not regarded.",
																	" * ",
																	" ****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Required Input Parameters",
																	" ****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"                ",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    if ((datatypeUnderTest === undefined) || (datatypeUnderTest === \"\")) {",
																	"        var NameOfAttributeUnderTest = attributeUnderTest;",
																	"    } else {",
																	"        var NameOfAttributeUnderTest = datatypeUnderTest + \"/\" + attributeUnderTest;",
																	"    }",
																	"",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus,",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            capability,",
																	"                            configuration,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode,",
																	"                            NameOfAttributeUnderTest",
																	"    );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * CASE SPECIFIC Evaluation",
																	" ****************************************************************************************/",
																	"try {",
																	"",
																	"    if ((Math.floor(dummyCode / 100) === 2) && (Math.floor(resultCode / 100) === 2) && (dummyValueString === resultValueString)) {",
																	"        configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        if ((resultValueString === \"-1\") && (dummyCode === responseCodeForOperationNotSupported)) {",
																	"            configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
																	"        } else {",
																	"            configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
																	"        }",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * console.log",
																	" ****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[NameOfAttributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus === \"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Output provided to the Collection Variables",
																	" ****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Setting up Local Variables and Preparing the Request",
																	" ****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({",
																	"        key: \"Accept\",",
																	"        value: \"application/json\"",
																	"    });",
																	"} catch (error) {}",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus,",
																	"                                PrintMantisIssuesForTechnologyAndClass,",
																	"                                capability,",
																	"                                configuration,",
																	"                                responseCodeForOperationNotSupported,",
																	"                                configurationValidationResults,",
																	"                                dummyValueString,",
																	"                                dummyCode,",
																	"                                resultValueString,",
																	"                                resultCode,",
																	"                                NameOfAttributeUnderTest) {",
																	"    pm.test(\"CouldTheUriBeLoaded\", function() {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldThe(MantisInterfaceStatusBeLoaded\", function() {",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"    });",
																	"    pm.test(\"CouldPrintMantisIssuesForTechnologyAndClassBeLoaded\", function() {",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTheCapabilityBeLoaded\", function () {",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"    });",
																	"    pm.test(\"CouldTheConfigurationBeLoaded\", function () {",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"    pm.test(\"CouldTheResponseCodeForOperationNotSupportedBeLoaded\", function () {",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldTheConfigurationValidationResultsBeLoaded\", function () {",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"    });",
																	"    pm.test(\"CouldTheDummyValueStringBeLoaded\", function() {",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTheDummyCodeBeLoaded\", function() {",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldTheResultValueStringBeLoaded\", function() {",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTheResultCodeBeLoaded\", function() {",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldTheNameOfAttributeUnderTestBeLoaded\", function() {",
																	"        pm.expect(NameOfAttributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(NameOfAttributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function() {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function() {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function() {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
																	"    var datatypeIndexUnderTest = pm.variables.get(\"datatypeIndexUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, ",
																	"                            moduleUnderTest, ",
																	"                            datatypeUnderTest, ",
																	"                            datatypeIndexUnderTest, ",
																	"                            attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    var originalValue;",
																	"    if ( (typeof datatypeUnderTest==\"undefined\") || (datatypeUnderTest===\"\") ) {",
																	"        originalValue = configuration[attributeUnderTest];",
																	"    } else {",
																	"        originalValue = configuration[datatypeUnderTest][datatypeIndexUnderTest][attributeUnderTest];",
																	"    }",
																	"        ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, ",
																	"                            moduleUnderTest, ",
																	"                            datatypeUnderTest, ",
																	"                            datatypeIndexUnderTest, ",
																	"                            attributeUnderTest) {",
																	"    pm.test(\"CouldSettingTheRequestVariablesBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldConfigurationBeLoaded\", function () {",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldDatatypeUnderTestBeLoaded\", function () {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"CouldDatatypeIndexUnderTestBeLoaded\", function () {",
																	"        pm.expect(datatypeIndexUnderTest).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e41990c9-c2cb-4548-8c3a-b1caacee78ab",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "59f902bf-3e41-45f8-9cf3-a7e771c95bec",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "xlts/xltsLevel",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n------------------------Checking Configuration of xlts/xlts-level-------------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an attribute with a DummyValue and providing the",
																	"* dummyValueString as a local Variable.",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, capability, configuration);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const DATATYPE_UNDER_TEST = \"xlts-threshold-cross-alarm-list\";",
																	"const DATATYPE_INDEX_UNDER_TEST = 0;",
																	"let keysOfDatatypeInstanceUnderTest = [\"\"];",
																	"const ATTRIBUTE_UNDER_TEST = \"xlts-level\";",
																	"",
																	"try {",
																	"    var currentValue;",
																	"    if ( (DATATYPE_UNDER_TEST===\"\") ) {",
																	"        currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
																	"    } else {",
																	"        currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
																	"        keysOfDatatypeInstanceUnderTest[0] = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"level-threshold-second-kind\"];",
																	"        keysOfDatatypeInstanceUnderTest[1] = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"granularity-period\"];",
																	"        keysOfDatatypeInstanceUnderTest[2] = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"xlts-threshold-cross-alarm-definition-number\"];",
																	"    }",
																	"    CouldCurrentConfigurationValuesBeRead(currentValue);",
																	"} catch (error) {",
																	"    CouldCurrentConfigurationValuesBeRead();",
																	"}",
																	"",
																	"try {",
																	"    dummyValue = Math.floor(Math.random() * -99);",
																	"    CouldDummyValueBeDefined(true);",
																	"} catch (error) {",
																	"    CouldDummyValueBeDefined(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, DATATYPE_INDEX_UNDER_TEST,",
																	"                                    keysOfDatatypeInstanceUnderTest, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
																	"                                    FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"datatypeIndexUnderTest\", DATATYPE_INDEX_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", keysOfDatatypeInstanceUnderTest);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddRandomIntString() {",
																	"    return String(Math.floor(Math.random() * 999));",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldCurrentConfigurationValuesBeRead(currentValue) {",
																	"    pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
																	"        pm.expect(currentValue).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeDefined(success) {",
																	"    pm.test(\"CouldDummyValueBeDefined\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, datatypeIndexUnderTest, ",
																	"                                            keysOfDatatypeInstanceUnderTest, attributeUnderTest, ",
																	"                                            contentType, filteredDepth, filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"HasValueOfDatatypeUnderTestCorrectDatatype\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"HasValueOfDatatypeIndexUnderTestCorrectDatatype\", function() {",
																	"        pm.expect(datatypeIndexUnderTest).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"HasValueOfkeysOfDatatypeInstanceUnderTestCorrectDatatype\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.an(\"array\");",
																	"    });",
																	"    pm.test(\"HasValueOfAttributeUnderTestBeenProvided\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"HasValueOfFilteredDepthCorrectDatatype\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"HasValueOfFilteredFieldsCorrectDatatype\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"HasRequestBodyBeenProvided\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    if ( (datatypeUnderTest===undefined) || (datatypeUnderTest===\"\") ) {",
																	"        var NameOfAttributeUnderTest = attributeUnderTest;",
																	"    } else {",
																	"        var NameOfAttributeUnderTest = datatypeUnderTest + \"/\" + attributeUnderTest;",
																	"    }",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus,",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            capability,",
																	"                            configuration,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode,",
																	"                            NameOfAttributeUnderTest",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString) ) {",
																	"        configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        if ( (capability[\"performance-monitoring-is-avail\"] === false)",
																	"                && (resultValueString === \"-1\")",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
																	"        } else {",
																	"            configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
																	"        }",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[NameOfAttributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus,",
																	"                                PrintMantisIssuesForTechnologyAndClass,",
																	"                                capability,",
																	"                                configuration,",
																	"                                responseCodeForOperationNotSupported,",
																	"                                configurationValidationResults,",
																	"                                dummyValueString,",
																	"                                dummyCode,",
																	"                                resultValueString,",
																	"                                resultCode,",
																	"                                NameOfAttributeUnderTest) {",
																	"    pm.test(\"CouldTheUriBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldThe(MantisInterfaceStatusBeLoaded\", function () {",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"    });",
																	"    pm.test(\"CouldPrintMantisIssuesForTechnologyAndClassBeLoaded\", function () {",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTheCapabilityBeLoaded\", function () {",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"    });",
																	"    pm.test(\"CouldTheConfigurationBeLoaded\", function () {",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"    pm.test(\"CouldTheResponseCodeForOperationNotSupportedBeLoaded\", function () {",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldTheConfigurationValidationResultsBeLoaded\", function () {",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"    });",
																	"    pm.test(\"CouldTheDummyValueStringBeLoaded\", function () {",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTheDummyCodeBeLoaded\", function () {",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldTheResultValueStringBeLoaded\", function () {",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTheResultCodeBeLoaded\", function () {",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldTheNameOfAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(NameOfAttributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(NameOfAttributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
																	"    var datatypeIndexUnderTest = pm.variables.get(\"datatypeIndexUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, ",
																	"                            moduleUnderTest, ",
																	"                            datatypeUnderTest, ",
																	"                            datatypeIndexUnderTest, ",
																	"                            attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    var originalValue;",
																	"    if ( (typeof datatypeUnderTest==\"undefined\") || (datatypeUnderTest===\"\") ) {",
																	"        originalValue = configuration[attributeUnderTest];",
																	"    } else {",
																	"        originalValue = configuration[datatypeUnderTest][datatypeIndexUnderTest][attributeUnderTest];",
																	"    }",
																	"        ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, ",
																	"                            moduleUnderTest, ",
																	"                            datatypeUnderTest, ",
																	"                            datatypeIndexUnderTest, ",
																	"                            attributeUnderTest) {",
																	"    pm.test(\"CouldSettingTheRequestVariablesBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldConfigurationBeLoaded\", function () {",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldDatatypeUnderTestBeLoaded\", function () {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"CouldDatatypeIndexUnderTestBeLoaded\", function () {",
																	"        pm.expect(datatypeIndexUnderTest).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2a153551-a9c7-43e7-b650-e6ee97ca06e6",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "065bee74-e3a3-4aa9-9ebd-25bcfc859f05",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "xlts/amountOfSeconds",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n---------------------Checking Configuration of xlts/amount-of-seconds---------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an attribute with a DummyValue and providing the",
																	"* dummyValueString as a local Variable.",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, capability, configuration);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const DATATYPE_UNDER_TEST = \"xlts-threshold-cross-alarm-list\";",
																	"const DATATYPE_INDEX_UNDER_TEST = 0;",
																	"let keysOfDatatypeInstanceUnderTest = [\"\"];",
																	"const ATTRIBUTE_UNDER_TEST = \"amount-of-seconds\";",
																	"",
																	"try {",
																	"    var currentValue;",
																	"    if ( (DATATYPE_UNDER_TEST===\"\") ) {",
																	"        currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
																	"    } else {",
																	"        currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
																	"        keysOfDatatypeInstanceUnderTest[0] = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"level-threshold-second-kind\"];",
																	"        keysOfDatatypeInstanceUnderTest[1] = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"granularity-period\"];",
																	"        keysOfDatatypeInstanceUnderTest[2] = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"xlts-threshold-cross-alarm-definition-number\"];",
																	"    }",
																	"    CouldCurrentConfigurationValuesBeRead(currentValue);",
																	"} catch (error) {",
																	"    CouldCurrentConfigurationValuesBeRead();",
																	"}",
																	"",
																	"try {",
																	"    dummyValue = Math.floor(Math.random() * 127);",
																	"    CouldDummyValueBeDefined(true);",
																	"} catch (error) {",
																	"    CouldDummyValueBeDefined(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, DATATYPE_INDEX_UNDER_TEST,",
																	"                                    keysOfDatatypeInstanceUnderTest, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
																	"                                    FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"datatypeIndexUnderTest\", DATATYPE_INDEX_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", keysOfDatatypeInstanceUnderTest);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddRandomIntString() {",
																	"    return String(Math.floor(Math.random() * 999));",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldCurrentConfigurationValuesBeRead(currentValue) {",
																	"    pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
																	"        pm.expect(currentValue).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeDefined(success) {",
																	"    pm.test(\"CouldDummyValueBeDefined\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, datatypeIndexUnderTest, ",
																	"                                            keysOfDatatypeInstanceUnderTest, attributeUnderTest, ",
																	"                                            contentType, filteredDepth, filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"HasValueOfDatatypeUnderTestCorrectDatatype\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"HasValueOfDatatypeIndexUnderTestCorrectDatatype\", function() {",
																	"        pm.expect(datatypeIndexUnderTest).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"HasValueOfkeysOfDatatypeInstanceUnderTestCorrectDatatype\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.an(\"array\");",
																	"    });",
																	"    pm.test(\"HasValueOfAttributeUnderTestBeenProvided\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"HasValueOfFilteredDepthCorrectDatatype\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"HasValueOfFilteredFieldsCorrectDatatype\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"HasRequestBodyBeenProvided\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    if ( (datatypeUnderTest===undefined) || (datatypeUnderTest===\"\") ) {",
																	"        var NameOfAttributeUnderTest = attributeUnderTest;",
																	"    } else {",
																	"        var NameOfAttributeUnderTest = datatypeUnderTest + \"/\" + attributeUnderTest;",
																	"    }",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus,",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            capability,",
																	"                            configuration,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode,",
																	"                            NameOfAttributeUnderTest",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString) ) {",
																	"        configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        if ( (capability[\"performance-monitoring-is-avail\"] === false)",
																	"                && (resultValueString === \"-1\")",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
																	"        } else {",
																	"            configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
																	"        }",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[NameOfAttributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus,",
																	"                                PrintMantisIssuesForTechnologyAndClass,",
																	"                                capability,",
																	"                                configuration,",
																	"                                responseCodeForOperationNotSupported,",
																	"                                configurationValidationResults,",
																	"                                dummyValueString,",
																	"                                dummyCode,",
																	"                                resultValueString,",
																	"                                resultCode,",
																	"                                NameOfAttributeUnderTest) {",
																	"    pm.test(\"CouldTheUriBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldThe(MantisInterfaceStatusBeLoaded\", function () {",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"    });",
																	"    pm.test(\"CouldPrintMantisIssuesForTechnologyAndClassBeLoaded\", function () {",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTheCapabilityBeLoaded\", function () {",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"    });",
																	"    pm.test(\"CouldTheConfigurationBeLoaded\", function () {",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"    pm.test(\"CouldTheResponseCodeForOperationNotSupportedBeLoaded\", function () {",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldTheConfigurationValidationResultsBeLoaded\", function () {",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"    });",
																	"    pm.test(\"CouldTheDummyValueStringBeLoaded\", function () {",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTheDummyCodeBeLoaded\", function () {",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldTheResultValueStringBeLoaded\", function () {",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTheResultCodeBeLoaded\", function () {",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldTheNameOfAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(NameOfAttributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(NameOfAttributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
																	"    var datatypeIndexUnderTest = pm.variables.get(\"datatypeIndexUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, ",
																	"                            moduleUnderTest, ",
																	"                            datatypeUnderTest, ",
																	"                            datatypeIndexUnderTest, ",
																	"                            attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    var originalValue;",
																	"    if ( (typeof datatypeUnderTest==\"undefined\") || (datatypeUnderTest===\"\") ) {",
																	"        originalValue = configuration[attributeUnderTest];",
																	"    } else {",
																	"        originalValue = configuration[datatypeUnderTest][datatypeIndexUnderTest][attributeUnderTest];",
																	"    }",
																	"        ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, ",
																	"                            moduleUnderTest, ",
																	"                            datatypeUnderTest, ",
																	"                            datatypeIndexUnderTest, ",
																	"                            attributeUnderTest) {",
																	"    pm.test(\"CouldSettingTheRequestVariablesBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldConfigurationBeLoaded\", function () {",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldDatatypeUnderTestBeLoaded\", function () {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"CouldDatatypeIndexUnderTestBeLoaded\", function () {",
																	"        pm.expect(datatypeIndexUnderTest).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "acm/transmissionMode",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n----------------------Checking Configuration of acm/transmission-mode---------------------\");",
																	"/****************************************************************************************",
																	" * ",
																	" * Writing",
																	" * ",
																	" * This Request is for PUTting an attribute with a DummyValue and providing the",
																	" * dummyValueString as a local Variable.",
																	" *  ",
																	" ****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Required Input Parameters",
																	" ****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var status = pm.collectionVariables.get(\"status\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, capability, configuration, status, moduleUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * CASE SPECIFIC Parameters",
																	" ****************************************************************************************/",
																	"const DATATYPE_UNDER_TEST = \"acm-threshold-cross-alarm-list\";",
																	"const DATATYPE_INDEX_UNDER_TEST = 0;",
																	"let keysOfDatatypeInstanceUnderTest = [\"\"];",
																	"const ATTRIBUTE_UNDER_TEST = \"transmission-mode\";",
																	"",
																	"try {",
																	"    var currentValue;",
																	"    currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
																	"    keysOfDatatypeInstanceUnderTest[0] = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"acm-threshold-cross-alarm-definition-number\"];",
																	"    keysOfDatatypeInstanceUnderTest[1] = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"granularity-period\"];",
																	"    CouldCurrentConfigurationValuesBeRead(currentValue, keysOfDatatypeInstanceUnderTest);",
																	"} catch (error) {",
																	"    CouldCurrentConfigurationValuesBeRead();",
																	"}",
																	"",
																	"try {",
																	"    var currentlyActiveTransmissionModes = [];",
																	"    currentlyActiveTransmissionModes = DeriveCurrentlyActiveTransmissionModes(capability, configuration);",
																	"    CouldCurrentlyActiveTransmissionModesBeDerived(currentlyActiveTransmissionModes);",
																	"} catch (error) {",
																	"    CouldCurrentlyActiveTransmissionModesBeDerived();",
																	"}",
																	"",
																	"try {",
																	"    var currentlyCoveredTransmissionModes = [];",
																	"    currentlyCoveredTransmissionModes = DeriveCurrentlyCoveredTransmissionModes(capability, configuration);",
																	"    CouldCurrentlyCoveredTransmissionModesBeDerived(currentlyCoveredTransmissionModes);",
																	"} catch (error) {",
																	"    CouldCurrentlyCoveredTransmissionModesBeDerived();",
																	"}",
																	"",
																	"try {",
																	"    var allActiveModesAreAlreadyCovered;",
																	"    allActiveModesAreAlreadyCovered = CheckWhetherAllActiveModesAreAlreadyCovered(currentlyActiveTransmissionModes, ",
																	"                                                                                    currentlyCoveredTransmissionModes);",
																	"    CouldActiveAndCoveredTransmissionModesBeCompared(allActiveModesAreAlreadyCovered);",
																	"} catch (error) {",
																	"    CouldActiveAndCoveredTransmissionModesBeCompared();",
																	"}",
																	"",
																	"try {",
																	"    if ( allActiveModesAreAlreadyCovered === true ) {",
																	"        dummyValue = currentValue;",
																	"    } else {",
																	"        let randomTransmissionModeIndex = Math.floor(Math.random() * currentlyActiveTransmissionModes.length);",
																	"        dummyValue = currentlyActiveTransmissionModes[randomTransmissionModeIndex];",
																	"    }",
																	"    CouldDummyValueBeDefined(true);",
																	"} catch (error) {",
																	"    CouldDummyValueBeDefined(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, DATATYPE_INDEX_UNDER_TEST,",
																	"                                    keysOfDatatypeInstanceUnderTest, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
																	"                                    FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"datatypeIndexUnderTest\", DATATYPE_INDEX_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", keysOfDatatypeInstanceUnderTest);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"pm.variables.set(\"allActiveModesAreAlreadyCovered\", allActiveModesAreAlreadyCovered);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Functions",
																	"****************************************************************************************/",
																	"function TransmissionModeIndexOf(currentModeName, capability) {",
																	"    for (let i = 0; i < (capability[\"transmission-mode-list\"].length - 1); i++) {",
																	"        let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
																	"        if (sampleModeName === currentModeName) {",
																	"            return i;",
																	"        }",
																	"    }",
																	"}",
																	"",
																	"function DeriveCurrentlyActiveTransmissionModes(capability, configuration) {",
																	"    let currentlyActiveTransmissionModes = [];",
																	"    let adaptiveModulationIsOn = configuration[\"adaptive-modulation-is-on\"];",
																	"    let transmissionModeMin = configuration[\"transmission-mode-min\"];",
																	"    let transmissionModeMinIndex = TransmissionModeIndexOf(transmissionModeMin, capability);",
																	"    let transmissionModeMinRank = capability[\"transmission-mode-list\"][transmissionModeMinIndex][\"transmission-mode-rank\"];",
																	"    let transmissionModeMax = configuration[\"transmission-mode-max\"];",
																	"    let transmissionModeMaxIndex = TransmissionModeIndexOf(transmissionModeMax, capability);",
																	"    let transmissionModeMaxRank = capability[\"transmission-mode-list\"][transmissionModeMaxIndex][\"transmission-mode-rank\"];",
																	"    let currentlyActiveChannelBandwidth = capability[\"transmission-mode-list\"][transmissionModeMinIndex][\"channel-bandwidth\"];",
																	"    if (adaptiveModulationIsOn === true) {",
																	"        for (let i = 0; i < (capability[\"transmission-mode-list\"].length); i++) {",
																	"            let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
																	"            let sampleModeRank = capability[\"transmission-mode-list\"][i][\"transmission-mode-rank\"];",
																	"            let sampleModeChannelBandwidth = capability[\"transmission-mode-list\"][i][\"channel-bandwidth\"];",
																	"            if ( (sampleModeChannelBandwidth === currentlyActiveChannelBandwidth) ",
																	"                    && (sampleModeRank >= transmissionModeMinRank) ",
																	"                    && (sampleModeRank <= transmissionModeMaxRank)) {",
																	"                currentlyActiveTransmissionModes.push(sampleModeName);",
																	"            }",
																	"        }",
																	"    } else {",
																	"        currentlyActiveTransmissionModes.push(transmissionModeMin);",
																	"    }",
																	"    return currentlyActiveTransmissionModes;",
																	"}",
																	"",
																	"function DeriveCurrentlyCoveredTransmissionModes(capability, configuration) {",
																	"    let currentlyCoveredTransmissionModes = [];",
																	"    for (let i = 0; i < (configuration[\"acm-threshold-cross-alarm-list\"].length); i++) {",
																	"        let coveredModeName = configuration[\"acm-threshold-cross-alarm-list\"][i][\"transmission-mode\"];",
																	"        let coveredGranularityPeriod = configuration[\"acm-threshold-cross-alarm-list\"][i][\"granularity-period\"];",
																	"        if ( coveredGranularityPeriod === \"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\" ) {",
																	"            currentlyCoveredTransmissionModes.push(coveredModeName);",
																	"        }",
																	"    }",
																	"    return currentlyCoveredTransmissionModes;",
																	"}",
																	"",
																	"function CheckWhetherAllActiveModesAreAlreadyCovered(currentlyActiveTransmissionModes, ",
																	"                                                        currentlyCoveredTransmissionModes) {",
																	"    return currentlyActiveTransmissionModes.every(i => currentlyCoveredTransmissionModes.includes(i));",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, capability, ",
																	"                                configuration, ",
																	"                                status,",
																	"                                moduleUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(status).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldCurrentlyActiveTransmissionModesBeDerived(currentlyActiveTransmissionModes) {",
																	"    pm.test(\"CouldCurrentlyActiveTransmissionModesBeDerived\", function() {",
																	"        pm.expect(currentlyActiveTransmissionModes).to.be.an(\"array\");",
																	"        pm.expect(currentlyActiveTransmissionModes.length).to.be.at.least(1);",
																	"    });",
																	"}",
																	"",
																	"function CouldCurrentlyCoveredTransmissionModesBeDerived(currentlyCoveredTransmissionModes) {",
																	"    pm.test(\"CouldCurrentlyCoveredTransmissionModesBeDerived\", function() {",
																	"        pm.expect(currentlyCoveredTransmissionModes).to.be.an(\"array\");",
																	"    });",
																	"}",
																	"",
																	"function CouldActiveAndCoveredTransmissionModesBeCompared(allActiveModesAreAlreadyCovered) {",
																	"    pm.test(\"CouldActiveAndCoveredTransmissionModesBeCompared\", function() {",
																	"        pm.expect(allActiveModesAreAlreadyCovered).to.be.a(\"boolean\");",
																	"    });",
																	"}",
																	"",
																	"function CouldCurrentConfigurationValuesBeRead(currentValue, keysOfDatatypeInstanceUnderTest) {",
																	"    pm.test(\"CouldCurrentConfigurationValuesBeRead\", function() {",
																	"        pm.expect(currentValue).to.be.a(\"string\");",
																	"        pm.expect(currentValue).to.not.have.lengthOf(0);",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest[0]).to.be.a(\"number\");",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest[1]).to.be.a(\"string\");",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest[1]).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeDefined(success) {",
																	"    pm.test(\"CouldDummyValueBeDefined\", function() {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, datatypeIndexUnderTest,",
																	"    keysOfDatatypeInstanceUnderTest, attributeUnderTest,",
																	"    contentType, filteredDepth, filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"            \"current-problems\", \"current-performance\",",
																	"            \"historical-performances\"",
																	"        ]);",
																	"    });",
																	"    pm.test(\"HasValueOfDatatypeUnderTestCorrectDatatype\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"HasValueOfDatatypeIndexUnderTestCorrectDatatype\", function() {",
																	"        pm.expect(datatypeIndexUnderTest).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"HasValueOfkeysOfDatatypeInstanceUnderTestCorrectDatatype\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.an(\"array\");",
																	"    });",
																	"    pm.test(\"HasValueOfAttributeUnderTestBeenProvided\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"HasValueOfFilteredDepthCorrectDatatype\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"HasValueOfFilteredFieldsCorrectDatatype\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"HasRequestBodyBeenProvided\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function() {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var status = pm.collectionVariables.get(\"status\");",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"    var allActiveModesAreAlreadyCovered = pm.variables.get(\"allActiveModesAreAlreadyCovered\");",
																	"        ",
																	"    if ( (datatypeUnderTest===undefined) || (datatypeUnderTest===\"\") ) {",
																	"        var NameOfAttributeUnderTest = attributeUnderTest;",
																	"    } else {",
																	"        var NameOfAttributeUnderTest = datatypeUnderTest + \"/\" + attributeUnderTest;",
																	"    }",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus,",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            capability,",
																	"                            configuration,",
																	"                            status,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode,",
																	"                            NameOfAttributeUnderTest",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"        ",
																	"    var performanceMonitoringIsAvail = capability[\"performance-monitoring-is-avail\"];",
																	"    var transmissionModeMin = JSON.stringify(configuration[\"transmission-mode-min\"]);",
																	"        ",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString) ) {",
																	"        configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
																	"        if ( (resultValueString === JSON.stringify(configuration[\"transmission-mode-min\"] ))",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[NameOfAttributeUnderTest] = \"pre-configured for lowest active transmission mode\";",
																	"        }",
																	"        if ( (allActiveModesAreAlreadyCovered === true)",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[NameOfAttributeUnderTest] = \"pre-configured for all active transmission modes\";",
																	"        }",
																	"        if ( (performanceMonitoringIsAvail === false)",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
																	"        }",
																	"    }",
																	"        ",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[NameOfAttributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus,",
																	"                                PrintMantisIssuesForTechnologyAndClass,",
																	"                                capability,",
																	"                                configuration,",
																	"                                status,",
																	"                                responseCodeForOperationNotSupported,",
																	"                                configurationValidationResults,",
																	"                                dummyValueString,",
																	"                                dummyCode,",
																	"                                resultValueString,",
																	"                                resultCode,",
																	"                                NameOfAttributeUnderTest) {",
																	"    pm.test(\"CouldTheUriBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldThe(MantisInterfaceStatusBeLoaded\", function () {",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"    });",
																	"    pm.test(\"CouldPrintMantisIssuesForTechnologyAndClassBeLoaded\", function () {",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTheCapabilityBeLoaded\", function () {",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"    });",
																	"    pm.test(\"CouldTheConfigurationBeLoaded\", function () {",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"    pm.test(\"CouldTheStatusBeLoaded\", function () {",
																	"        pm.expect(status).to.be.an(\"object\");",
																	"    });",
																	"    pm.test(\"CouldTheResponseCodeForOperationNotSupportedBeLoaded\", function () {",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldTheConfigurationValidationResultsBeLoaded\", function () {",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"    });",
																	"    pm.test(\"CouldTheDummyValueStringBeLoaded\", function () {",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTheDummyCodeBeLoaded\", function () {",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldTheResultValueStringBeLoaded\", function () {",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTheResultCodeBeLoaded\", function () {",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldTheNameOfAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(NameOfAttributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(NameOfAttributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
																	"    var datatypeIndexUnderTest = pm.variables.get(\"datatypeIndexUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, ",
																	"                            moduleUnderTest, ",
																	"                            datatypeUnderTest, ",
																	"                            datatypeIndexUnderTest, ",
																	"                            attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    var originalValue;",
																	"    if ( (typeof datatypeUnderTest==\"undefined\") || (datatypeUnderTest===\"\") ) {",
																	"        originalValue = configuration[attributeUnderTest];",
																	"    } else {",
																	"        originalValue = configuration[datatypeUnderTest][datatypeIndexUnderTest][attributeUnderTest];",
																	"    }",
																	"        ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, ",
																	"                            moduleUnderTest, ",
																	"                            datatypeUnderTest, ",
																	"                            datatypeIndexUnderTest, ",
																	"                            attributeUnderTest) {",
																	"    pm.test(\"CouldSettingTheRequestVariablesBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldConfigurationBeLoaded\", function () {",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldDatatypeUnderTestBeLoaded\", function () {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"CouldDatatypeIndexUnderTestBeLoaded\", function () {",
																	"        pm.expect(datatypeIndexUnderTest).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c930e0af-d749-40fa-bfed-d5875c42aeff",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7dec11ec-4c13-458a-bcee-fd04ce71676e",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "acm/amountOfSeconds",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n----------------------Checking Configuration of acm/amount-of-seconds---------------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an attribute with a DummyValue and providing the",
																	"* dummyValueString as a local Variable.",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var status = pm.collectionVariables.get(\"status\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, capability, configuration);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const DATATYPE_UNDER_TEST = \"acm-threshold-cross-alarm-list\";",
																	"const DATATYPE_INDEX_UNDER_TEST = 0;",
																	"let keysOfDatatypeInstanceUnderTest = [\"\"];",
																	"const ATTRIBUTE_UNDER_TEST = \"amount-of-seconds\";",
																	"",
																	"try {",
																	"    var currentValue;",
																	"    if ( (DATATYPE_UNDER_TEST===\"\") ) {",
																	"        currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
																	"    } else {",
																	"        currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
																	"        keysOfDatatypeInstanceUnderTest[0] = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"acm-threshold-cross-alarm-definition-number\"];",
																	"        keysOfDatatypeInstanceUnderTest[1] = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"granularity-period\"];",
																	"    }",
																	"    CouldCurrentConfigurationValuesBeRead(currentValue);",
																	"} catch (error) {",
																	"    CouldCurrentConfigurationValuesBeRead();",
																	"}",
																	"",
																	"try {",
																	"    var dummyValue =  currentValue - 5 + Math.floor(Math.random() * 10);",
																	"    CouldDummyValueBeDefined(true);",
																	"} catch (error) {",
																	"    CouldDummyValueBeDefined(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, DATATYPE_INDEX_UNDER_TEST,",
																	"                                    keysOfDatatypeInstanceUnderTest, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
																	"                                    FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"datatypeIndexUnderTest\", DATATYPE_INDEX_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", keysOfDatatypeInstanceUnderTest);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddRandomIntString() {",
																	"    return String(Math.floor(Math.random() * 999));",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldCurrentConfigurationValuesBeRead(currentValue) {",
																	"    pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
																	"        pm.expect(currentValue).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeDefined(success) {",
																	"    pm.test(\"CouldDummyValueBeDefined\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, datatypeIndexUnderTest, ",
																	"                                            keysOfDatatypeInstanceUnderTest, attributeUnderTest, ",
																	"                                            contentType, filteredDepth, filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"HasValueOfDatatypeUnderTestCorrectDatatype\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"HasValueOfDatatypeIndexUnderTestCorrectDatatype\", function() {",
																	"        pm.expect(datatypeIndexUnderTest).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"HasValueOfkeysOfDatatypeInstanceUnderTestCorrectDatatype\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.an(\"array\");",
																	"    });",
																	"    pm.test(\"HasValueOfAttributeUnderTestBeenProvided\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"HasValueOfFilteredDepthCorrectDatatype\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"HasValueOfFilteredFieldsCorrectDatatype\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"HasRequestBodyBeenProvided\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    if ( (datatypeUnderTest===undefined) || (datatypeUnderTest===\"\") ) {",
																	"        var NameOfAttributeUnderTest = attributeUnderTest;",
																	"    } else {",
																	"        var NameOfAttributeUnderTest = datatypeUnderTest + \"/\" + attributeUnderTest;",
																	"    }",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus,",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            capability,",
																	"                            configuration,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode,",
																	"                            NameOfAttributeUnderTest",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString) ) {",
																	"        configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        if ( (capability[\"performance-monitoring-is-avail\"] === false)",
																	"                && (resultValueString === \"-1\")",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
																	"        } else {",
																	"            configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
																	"        }",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[NameOfAttributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus,",
																	"                                PrintMantisIssuesForTechnologyAndClass,",
																	"                                capability,",
																	"                                configuration,",
																	"                                responseCodeForOperationNotSupported,",
																	"                                configurationValidationResults,",
																	"                                dummyValueString,",
																	"                                dummyCode,",
																	"                                resultValueString,",
																	"                                resultCode,",
																	"                                NameOfAttributeUnderTest) {",
																	"    pm.test(\"CouldTheUriBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldThe(MantisInterfaceStatusBeLoaded\", function () {",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"    });",
																	"    pm.test(\"CouldPrintMantisIssuesForTechnologyAndClassBeLoaded\", function () {",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTheCapabilityBeLoaded\", function () {",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"    });",
																	"    pm.test(\"CouldTheConfigurationBeLoaded\", function () {",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"    pm.test(\"CouldTheResponseCodeForOperationNotSupportedBeLoaded\", function () {",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldTheConfigurationValidationResultsBeLoaded\", function () {",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"    });",
																	"    pm.test(\"CouldTheDummyValueStringBeLoaded\", function () {",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTheDummyCodeBeLoaded\", function () {",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldTheResultValueStringBeLoaded\", function () {",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTheResultCodeBeLoaded\", function () {",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldTheNameOfAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(NameOfAttributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(NameOfAttributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
																	"    var datatypeIndexUnderTest = pm.variables.get(\"datatypeIndexUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, ",
																	"                            moduleUnderTest, ",
																	"                            datatypeUnderTest, ",
																	"                            datatypeIndexUnderTest, ",
																	"                            attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    var originalValue;",
																	"    if ( (typeof datatypeUnderTest==\"undefined\") || (datatypeUnderTest===\"\") ) {",
																	"        originalValue = configuration[attributeUnderTest];",
																	"    } else {",
																	"        originalValue = configuration[datatypeUnderTest][datatypeIndexUnderTest][attributeUnderTest];",
																	"    }",
																	"        ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, ",
																	"                            moduleUnderTest, ",
																	"                            datatypeUnderTest, ",
																	"                            datatypeIndexUnderTest, ",
																	"                            attributeUnderTest) {",
																	"    pm.test(\"CouldSettingTheRequestVariablesBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldConfigurationBeLoaded\", function () {",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldDatatypeUnderTestBeLoaded\", function () {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"CouldDatatypeIndexUnderTestBeLoaded\", function () {",
																	"        pm.expect(datatypeIndexUnderTest).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "clearingThresholdCrossAlarmsIsOn",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n--------------Checking Configuration of clearing-threshold-cross-alarms-is-on-------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an boolean attribute with the alternate value and",
																	"* providing this value as dummyValueString to the local Variables.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, configuration);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"clearing-threshold-cross-alarms-is-on\";",
																	"",
																	"try {",
																	"    var dummyValue = !configuration[\"clearing-threshold-cross-alarms-is-on\"];",
																	"    CouldDummyValueBeSet(dummyValue);",
																	"} catch (error) {",
																	"    CouldDummyValueBeSet();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddRandomIntString() {",
																	"    return String(Math.floor(Math.random() * 999));",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, configuration) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeSet(dummyValue) {",
																	"    pm.test(\"CouldDummyValueBeSet\", function () {",
																	"        pm.expect(dummyValue).to.be.a(\"boolean\");",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus, ",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            capability,",
																	"                            configuration,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            attributeUnderTest,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ) {",
																	"        configurationValidationResults[attributeUnderTest] = \"ok (testing incomplete)\";",
																	"    } else {",
																	"        if ( (resultValueString === \"false\")",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
																	"        } else {",
																	"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
																	"        }",
																	"    }",
																	"",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[attributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus, ",
																	"                                PrintMantisIssuesForTechnologyAndClass,",
																	"                                capability,",
																	"                                configuration,",
																	"                                responseCodeForOperationNotSupported,",
																	"                                configurationValidationResults,",
																	"                                attributeUnderTest,",
																	"                                dummyValueString,",
																	"                                dummyCode,",
																	"                                resultValueString,",
																	"                                resultCode) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    let originalValue = configuration[attributeUnderTest];",
																	"    ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "performanceMonitoringIsOn",
											"item": [
												{
													"name": "Writing",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"console.log(\"\\n-------------------Checking Configuration of performance-monitoring-is-on-----------------\");",
																	"/****************************************************************************************",
																	"* ",
																	"* Writing",
																	"* ",
																	"* This Request is for PUTting an boolean attribute with the alternate value and",
																	"* providing this value as dummyValueString to the local Variables.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, configuration);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Parameters",
																	"****************************************************************************************/",
																	"const ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
																	"",
																	"try {",
																	"    var dummyValue = !configuration[\"performance-monitoring-is-on\"];",
																	"    CouldDummyValueBeSet(dummyValue);",
																	"} catch (error) {",
																	"    CouldDummyValueBeSet();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
																	"                                            // \"status\", \"current-problems\", \"current-performance\" ",
																	"                                            // or \"historical-performances\"",
																	"const DATATYPE_UNDER_TEST = \"\";",
																	"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
																	"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
																	"const FILTERED_FIELDS = \"\";",
																	"let requestBody = '{ \"'",
																	"                    + moduleUnderTest",
																	"                    + ':'",
																	"                    + ATTRIBUTE_UNDER_TEST",
																	"                    + '\": ';",
																	"if (typeof dummyValue === \"string\") {",
																	"    requestBody = requestBody",
																	"                    + '\"'",
																	"                    + dummyValue",
																	"                    + '\" }';",
																	"} else {",
																	"    requestBody = requestBody",
																	"                    + dummyValue",
																	"                    + ' }'; ",
																	"}",
																	"",
																	"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
																	"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, ",
																	"                                    CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.clear();",
																	"",
																	"let dummyValueString = JSON.stringify(dummyValue);",
																	"console.log(\"DummyValue: \" + dummyValueString);",
																	"",
																	"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
																	"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
																	"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
																	"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
																	"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"pm.variables.set(\"dummyValueString\", dummyValueString);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Functions",
																	" ****************************************************************************************/",
																	"function AddRandomIntString() {",
																	"    return String(Math.floor(Math.random() * 999));",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, moduleUnderTest, configuration) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"    });",
																	"}",
																	"",
																	"function CouldDummyValueBeSet(dummyValue) {",
																	"    pm.test(\"CouldDummyValueBeSet\", function () {",
																	"        pm.expect(dummyValue).to.be.a(\"boolean\");",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
																	"                                                attributeUnderTest, contentType, filteredDepth, ",
																	"                                                filteredFields, requestBody) {",
																	"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
																	"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
																	"                                                \"current-problems\", \"current-performance\",",
																	"                                                \"historical-performances\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
																	"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
																	"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
																	"    });",
																	"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
																	"        pm.expect(filteredDepth).to.be.a(\"number\");",
																	"    });",
																	"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
																	"        pm.expect(filteredFields).to.be.a(\"string\");",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Retrieving DummyCode",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    CouldResponseBeRetrieved(responseCode);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"dummyCode\", responseCode);",
																	"    ",
																	"    ",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldResponseBeRetrieved(responseCode) {",
																	"    pm.test(\"responseCode\", function () {",
																	"        pm.expect(responseCode).to.be.a(\"number\");",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Reading",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Reading",
																	"* ",
																	"* This Request is for GETting the value of the attributeUnderTest and providing it ",
																	"* as ResultValue to the local Variables",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
																	"const REQUEST_BODY = \"\";",
																	"",
																	"AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
																	"",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", REQUEST_BODY);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
																	"    var classUnderTest = pm.variables.get(\"classUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                            technologyUnderTest,",
																	"                                            classUnderTest,",
																	"                                            attributeUnderTest",
																	"                                        );",
																	"} catch (error) {",
																	"    CouldInputForGetResultValueBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Retrieving ResultValue",
																	"****************************************************************************************/",
																	"try {",
																	"    var response = pm.response;",
																	"    var responseCode = parseInt(response.code);",
																	"    var responseBody = JSON.parse(response.stream);",
																	"        ",
																	"    var completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
																	"    var responseValue = responseBody[completeAttributeName];",
																	"        ",
																	"    var responseValueString = JSON.stringify(responseValue);",
																	"    console.log(\"ResultValue: \" + responseValueString);",
																	"        ",
																	"    CouldResponseBeRetrieved(responseValueString);",
																	"} catch (error) {",
																	"    CouldResponseBeRetrieved();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.set(\"resultValueString\", responseValueString);",
																	"pm.variables.set(\"resultCode\", responseCode);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Self Testing Functions",
																	"****************************************************************************************/",
																	"function CouldInputForGetResultValueBeLoaded(moduleUnderTest,",
																	"                                                technologyUnderTest,",
																	"                                                classUnderTest,",
																	"                                                attributeUnderTest) {",
																	"    pm.test(\"CouldModuleUnderTestBeLoaded\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
																	"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
																	"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
																	"        pm.expect(classUnderTest).to.be.a(\"string\");",
																	"        pm.expect(classUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"    pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResponseBeRetrieved(responseValueString) {",
																	"    pm.test(\"responseValueString\", function () {",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Evaluating",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "2fa60e0f-ffa9-4786-a6a0-a857d6c0786a",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Evaluating",
																	"* ",
																	"* This Request compares resultValue with dummyValue.",
																	"* Capability or Status values are not regarded.",
																	"* ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var dummyUri = pm.environment.get(\"dummyUri\");",
																	"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
																	"    var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
																	"        ",
																	"    var capability = pm.collectionVariables.get(\"capability\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var status =  pm.collectionVariables.get(\"capability\");",
																	"    var responseCodeForOperationNotSupported = pm.collectionVariables.get(\"responseCodeForOperationNotSupported\");",
																	"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
																	"        ",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    var dummyValueString = pm.variables.get(\"dummyValueString\");",
																	"    var dummyCode = pm.variables.get(\"dummyCode\");",
																	"    var resultValueString = pm.variables.get(\"resultValueString\");",
																	"    var resultCode = pm.variables.get(\"resultCode\");",
																	"        ",
																	"    CouldTheInputBeLoaded(dummyUri, mantisInterfaceStatus, ",
																	"                            PrintMantisIssuesForTechnologyAndClass,",
																	"                            capability,",
																	"                            configuration,",
																	"                            status,",
																	"                            responseCodeForOperationNotSupported,",
																	"                            configurationValidationResults,",
																	"                            attributeUnderTest,",
																	"                            dummyValueString,",
																	"                            dummyCode,",
																	"                            resultValueString,",
																	"                            resultCode",
																	"                          );",
																	"} catch (error) {",
																	"    CouldTheInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* CASE SPECIFIC Evaluation",
																	"****************************************************************************************/",
																	"try {",
																	"        ",
																	"    if ( (Math.floor(dummyCode/100) === 2)",
																	"            && (Math.floor(resultCode/100) === 2) ",
																	"            && (dummyValueString===resultValueString) ) {",
																	"        configurationValidationResults[attributeUnderTest] = \"ok\";",
																	"    } else {",
																	"        if ( (capability[\"performance-monitoring-is-avail\"] === false)",
																	"                && (resultValueString === \"false\")",
																	"                && (dummyCode === responseCodeForOperationNotSupported) ) {",
																	"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
																	"        } else {",
																	"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
																	"        }",
																	"    }",
																	"        ",
																	"    CouldResultBeEvaluated(true);",
																	"} catch (error) {",
																	"    CouldResultBeEvaluated(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* console.log",
																	"****************************************************************************************/",
																	"console.log(\"EvaluationResult: \" + configurationValidationResults[attributeUnderTest]);",
																	"",
																	"try {",
																	"    if (mantisInterfaceStatus===\"read-only\") {",
																	"        eval(PrintMantisIssuesForTechnologyAndClass)();",
																	"        CouldMantisIssuesBeListed(true);",
																	"    }",
																	"} catch (error) {",
																	"    CouldMantisIssuesBeListed(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Output provided to the Collection Variables",
																	"****************************************************************************************/",
																	"pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting up Local Variables and Preparing the Request",
																	"****************************************************************************************/",
																	"try {",
																	"    pm.variables.set(\"uri\", dummyUri);",
																	"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
																	"} catch (error) { }",
																	"CouldTheRequestBePrepared();",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldTheInputBeLoaded(uri, mantisInterfaceStatus, ",
																	"                                PrintMantisIssuesForTechnologyAndClass,",
																	"                                capability,",
																	"                                configuration,",
																	"                                status,",
																	"                                responseCodeForOperationNotSupported,",
																	"                                configurationValidationResults,",
																	"                                attributeUnderTest,",
																	"                                dummyValueString,",
																	"                                dummyCode,",
																	"                                resultValueString,",
																	"                                resultCode) {",
																	"    pm.test(\"CouldTheInputBeLoaded\", function () {",
																	"        pm.expect(uri).to.be.a(\"string\");",
																	"        pm.expect(uri).to.not.have.lengthOf(0);",
																	"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
																	"        pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
																	"        pm.expect(capability).to.be.an(\"object\");",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(status).to.be.an(\"object\");",
																	"        pm.expect(responseCodeForOperationNotSupported).to.be.a(\"number\");",
																	"        pm.expect(configurationValidationResults).to.be.an(\"object\");",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyValueString).to.be.a(\"string\");",
																	"        pm.expect(dummyValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(dummyCode).to.be.a(\"number\");",
																	"        pm.expect(resultValueString).to.be.a(\"string\");",
																	"        pm.expect(resultValueString).to.not.have.lengthOf(0);",
																	"        pm.expect(resultCode).to.be.a(\"number\");",
																	"    });",
																	"}",
																	"",
																	"function CouldResultBeEvaluated(success) {",
																	"    pm.test(\"CouldResultBeEvaluated\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldMantisIssuesBeListed(success) {",
																	"    pm.test(\"CouldMantisIssuesBeListed\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}",
																	"",
																	"function CouldTheRequestBePrepared() {",
																	"    pm.test(\"CouldTheRequestBePrepared\", function () {",
																	"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
																	"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "Restoring",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "1e81a936-9132-4b0d-ad1c-df268f59e9e1",
																"exec": [
																	"/****************************************************************************************",
																	"* ",
																	"* Restoring",
																	"* ",
																	"* This Request is for Restoring the initial value to the attributeUnderTest",
																	"*  ",
																	"****************************************************************************************/",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Required Input Parameters",
																	"****************************************************************************************/",
																	"try {",
																	"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
																	"    var configuration = pm.collectionVariables.get(\"configuration\");",
																	"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
																	"    var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
																	"    CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest);",
																	"} catch (error) {",
																	"    CouldInputBeLoaded();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Determining the Request Body",
																	"****************************************************************************************/",
																	"try {",
																	"    let originalValue = configuration[attributeUnderTest];",
																	"    ",
																	"    var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
																	"    var requestBody = '{ \"'",
																	"                        + moduleUnderTest",
																	"                        + ':'",
																	"                        + attributeUnderTest",
																	"                        + '\": ';",
																	"    if (typeof originalValue === \"string\") {",
																	"        requestBody = requestBody",
																	"                        + '\"'",
																	"                        + originalValue",
																	"                        + '\" }';",
																	"    } else {",
																	"        requestBody = requestBody",
																	"                        + originalValue",
																	"                        + ' }'; ",
																	"    }",
																	"    AreValuesOfTheRequestBodyCorrect(originalValue, CONTENT_TYPE, requestBody);",
																	"} catch (error) {",
																	"    AreValuesOfTheRequestBodyCorrect();",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	"* Setting Local Variables and Calling for Preparation of the Request",
																	"****************************************************************************************/",
																	"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
																	"pm.variables.set(\"requestBody\", requestBody);",
																	"",
																	"try {",
																	"    eval(SettingTheRequestVariables)();",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
																	"} catch (error) {",
																	"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
																	"}",
																	"",
																	"",
																	"/****************************************************************************************",
																	" * Self Testing Functions",
																	" ****************************************************************************************/",
																	"function CouldInputBeLoaded(SettingTheRequestVariables, configuration, moduleUnderTest, attributeUnderTest) {",
																	"    pm.test(\"CouldInputBeLoaded\", function () {",
																	"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
																	"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
																	"        pm.expect(configuration).to.be.an(\"object\");",
																	"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
																	"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
																	"        pm.expect(attributeUnderTest).to.be.a(\"string\");",
																	"        pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function AreValuesOfTheRequestBodyCorrect(originalValue, contentType, requestBody) {",
																	"    pm.test(\"CouldTheOriginalValueBeRead\", function() {",
																	"        pm.expect(originalValue).to.not.be.undefined;",
																	"    });",
																	"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
																	"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
																	"    });",
																	"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
																	"        pm.expect(requestBody).to.be.a(\"string\");",
																	"        pm.expect(requestBody).to.not.have.lengthOf(0);",
																	"    });",
																	"}",
																	"",
																	"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
																	"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
																	"        pm.expect(success).to.be.true;",
																	"    });",
																	"}"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "523201b4-2716-49d9-930e-7c914896ae7b",
																"exec": [
																	"/****************************************************************************************",
																	"* Setting Local Variables",
																	"****************************************************************************************/   ",
																	"pm.variables.clear();"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{{requestBody}}"
														},
														"url": {
															"raw": "{{uri}}",
															"host": [
																"{{uri}}"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "86a8a8d1-653d-42ab-a676-846a23ba1a88",
														"exec": [
															"console.log(\"\\n-----------------Downloading the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, configuration);",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    configuration = AddHeadlineToDataObject(configuration, \"air-interface-2-0:air-interface-configuration\");",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "50dd0692-fba4-4dc1-bf20-62c26ed7723f",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d723859f-6cd4-49b2-a201-f6ee9d7c9b6f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "652a776c-0b6e-4541-9adf-cdc59191c830",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointAirInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "832f9ce8-d89d-43ab-89af-aeb94e48cdf4",
														"exec": [
															"console.log(\"\\n---------------ReversalPoint of AirInterface Validation of Configuration------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Console.log of Validation Results",
															" ****************************************************************************************/",
															"let allConfigurationValidationResults = { \"allConfigurationValidationResults\" : configurationValidationResults };",
															"console.log(allConfigurationValidationResults);",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointAirInterfaceConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3f4c31f2-dedf-4c60-bbb3-43abc8abdbb9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointAirInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "832f9ce8-d89d-43ab-89af-aeb94e48cdf4",
														"exec": [
															"console.log(\"\\n-------------------------Terminating AirInterfaceConfiguration----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is for clearing the Collection variables and terminating the TestCase",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, controller, indexOfDeviceUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3f4c31f2-dedf-4c60-bbb3-43abc8abdbb9",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "b2610f36-2836-4933-a2a8-9bd58531d3aa",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "76b560c1-b680-4e8e-af1d-9370527c0a1b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "177fc9cb-059d-4a09-b75f-ce44dc064a99",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d0821a19-d424-42ef-a13c-929c1ef42309",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7400f7a9-9e51-4eaa-8519-438427350694",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5f2268fb-536d-4905-9652-6e5cb6ad4616",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "NetworkRestoration",
			"item": [],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d723859f-6cd4-49b2-a201-f6ee9d7c9b6f",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "652a776c-0b6e-4541-9adf-cdc59191c830",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Terminating",
			"item": [
				{
					"name": "ReversalPointInterfaceValidator",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "832f9ce8-d89d-43ab-89af-aeb94e48cdf4",
								"exec": [
									"console.log(\"\\n------------------------ReversalPoint of the Interface Validator--------------------------\");",
									"/****************************************************************************************",
									"* ",
									"* ReversalPoint",
									"* ",
									"* Directs the flow of execution back to the StartPoint",
									"* ",
									"****************************************************************************************/",
									" ",
									" ",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
									"    CouldTheInputBeLoaded(dummyUri, indexOfDeviceUnderTest);",
									"} catch (error) {",
									"    CouldTheInputBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Providing Environment Variables for either Repeating or Terminating the Device Testing",
									" ****************************************************************************************/",
									"var indexOfPotentialNextDeviceUnderTest = indexOfDeviceUnderTest + 1;",
									"pm.environment.set(\"indexOfDeviceUnderTest\", indexOfPotentialNextDeviceUnderTest);",
									"",
									"postman.setNextRequest(\"StartPointDeviceTesting\");",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheRequestBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function CouldTheInputBeLoaded(uri, indexOfDeviceUnderTest) {",
									"    pm.test(\"CouldTheInputBeLoaded\", function () {",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3f4c31f2-dedf-4c60-bbb3-43abc8abdbb9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "EndPointInterfaceValidator",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "832f9ce8-d89d-43ab-89af-aeb94e48cdf4",
								"exec": [
									"console.log(\"\\n--------------------------Terminating the InterfaceValidator------------------------------\");",
									"/****************************************************************************************",
									"* ",
									"* EndPoint of the Interface Validator",
									"* ",
									"* This Request is for clearing the Environment variables and terminating the Program",
									"* ",
									"****************************************************************************************/",
									" ",
									" ",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    CouldTheInputBeLoaded(dummyUri);",
									"} catch (error) {",
									"    CouldTheInputBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Clearing all Environment Variables for Terminating the Program",
									" ****************************************************************************************/",
									"pm.environment.clear();",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheRequestBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function CouldTheInputBeLoaded(uri, controller, indexOfDeviceUnderTest) {",
									"    pm.test(\"CouldTheInputBeLoaded\", function () {",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3f4c31f2-dedf-4c60-bbb3-43abc8abdbb9",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "43f7b5b0-5cdd-40f7-bf3e-5aa6954392a6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b5611b4b-c6a6-4ddf-9c5c-a5f2825bc0e5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f2e32cfc-c312-418b-83d1-7f380b9eb15d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "3e7226c4-b6a6-43ae-9512-31d3a9bf6acd",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}