{
	"info": {
		"_postman_id": "c29991f3-784c-450b-b31d-2832adc4b082",
		"name": "InterfaceValidator.3Dev Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "UserInput",
			"item": [
				{
					"name": "UserInput",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "973e503f-bcc8-4957-80ae-9dfc55b850c8",
								"exec": [
									"console.log(\"\\n\\n\\n==========================================================================================\");\r",
									"console.log(\"================================= InterfaceValidator.3 ===================================\");\r",
									"console.log(\"==========================================================================================\");\r",
									"/*********************************************************************************************************\r",
									" * \r",
									" * Request collection for validating the management interface of microwave devices\r",
									" * as it can be found on https://github.com/openBackhaul\r",
									" *  \r",
									" * This RequestCollection is for perpetual complementation.\r",
									" * \r",
									" *   !   Please, provide the following User Input   !\r",
									" * \r",
									" *********************************************************************************************************/\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									"* Manual Definition of Source of Environmental Parameters\r",
									"****************************************************************************************/\r",
									"SOURCE_OF_INPUT_PARAMETERS = \"network\";          // choose from \"manual\" or \"file\"\r",
									"MULTIPLICITY_OF_DEVICE_ITERATIONS = \"one\";      // \"none\", \"one\" or \"all\" devices to be validated\r",
									"MANTIS_INTERFACE_STATUS = \"off\";          // choose from \"off\", \"read-only\" or \"read-write\"\r",
									"\r",
									"AreMainInputParametersCorrect(SOURCE_OF_INPUT_PARAMETERS,\r",
									"    MULTIPLICITY_OF_DEVICE_ITERATIONS,\r",
									"    MANTIS_INTERFACE_STATUS\r",
									");\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									" * Manual Definition of Controller Information (required for \"manual\" and \"network\" only)\r",
									" ****************************************************************************************/\r",
									"if (SOURCE_OF_INPUT_PARAMETERS === \"manual\" || SOURCE_OF_INPUT_PARAMETERS === \"network\") {\r",
									"    IP_ADDRESS_OF_THE_CONTROLLER = \"172.29.145.220\";\r",
									"    RESTCONF_PORT_AT_THE_CONTROLLER = \"8181\";\r",
									"    AUTHORIZATION_CODE_AT_THE_CONTROLLER = \"c2VudGhpbHZlbC5zOlBSU2UwOA==\";\r",
									"    PATH_TO_DB_AND_MOUNT_POINT = \"/rests/data/network-topology:network-topology/topology=topology-netconf\";\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									" * Manual Definition of Device Information (required for \"manual\" only)\r",
									" ****************************************************************************************/\r",
									"if (SOURCE_OF_INPUT_PARAMETERS === \"manual\") {\r",
									"    NAME_OF_DEVICE_UNDER_TEST = \"siae_alcplus2e_12970\";\r",
									"    AUTHORIZATION_CODE_AT_THE_MANTIS = \"pHCn4WYf74wyUmn0ZCj_BBkkIvIE4CtM\";\r",
									"    UUID_OF_LTP_UNDER_TEST = \"LTP-MWPS-TTP-RADIO-1A\";\r",
									"    LID_OF_LP_UNDER_TEST = \"LP-MWPS-TTP-RADIO-1A\";\r",
									"    PAC_UNDER_TEST = \"air-interface-2-0:air-interface-pac\";\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									" * Checking InputData\r",
									" ****************************************************************************************/\r",
									"if (SOURCE_OF_INPUT_PARAMETERS === \"manual\") {\r",
									"    try {\r",
									"        IsControllerAndDeviceInformationComplete(IP_ADDRESS_OF_THE_CONTROLLER,\r",
									"            RESTCONF_PORT_AT_THE_CONTROLLER,\r",
									"            AUTHORIZATION_CODE_AT_THE_CONTROLLER,\r",
									"            PATH_TO_DB_AND_MOUNT_POINT,\r",
									"            NAME_OF_DEVICE_UNDER_TEST,\r",
									"            AUTHORIZATION_CODE_AT_THE_MANTIS,\r",
									"            UUID_OF_LTP_UNDER_TEST,\r",
									"            LID_OF_LP_UNDER_TEST,\r",
									"            PAC_UNDER_TEST\r",
									"        );\r",
									"    } catch (error) {\r",
									"        IsControllerAndDeviceInformationComplete();\r",
									"    }\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									"* Automated Definition of Controller and Device Information by Loading Static Data File\r",
									"****************************************************************************************/\r",
									"if (SOURCE_OF_INPUT_PARAMETERS === \"file\") {\r",
									"    try {\r",
									"        var controller = data.CONTROLLER;\r",
									"        CouldControllerBeLoadedFromFile(controller);\r",
									"    } catch (error) {\r",
									"        CouldControllerBeLoadedFromFile();\r",
									"    }\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									" * Network case input information\r",
									" ****************************************************************************************/\r",
									"if (SOURCE_OF_INPUT_PARAMETERS === \"network\") {\r",
									"    DEVICE_LIST = [\"siae_alcplus2e_12970\"]; // all, or required devices list\r",
									"    // Supported devices are \r",
									"    // \"siae_alcplus2e_12970\", \"siae_alcplus2e_12969\"\r",
									"    // \"zte_nr8120_14307\", \"zte_nr8120_14308\", \r",
									"    // \"ericsson_trafficnode_13322\", \"ericsson_trafficnode_06251\"\r",
									"    // \"huawei_rtn950_13619\", \"huawei_rtn950_13618\"\r",
									"\r",
									"    INTERFACE_LIST = [\"air-interface\"];  // all, or required interfaces list \r",
									"    // Supported interfaces are \"air-interface\", \"ethernet-container\", \"hybrid-mw-structure\", \r",
									"    // \"pure-ethernet-structure\", \"wire-interface\", \"mac-interface\", \"tdm-container\",  \r",
									"    // \"ip-interface\", \"vlan-interface\"\r",
									"\r",
									"    MULTIPLICITY_OF_INTERFACE_ITERATIONS = \"one\" //\"one\" or \"all\" same type of interfaces fetched from device\r",
									"    NOT_REQUIRED_DEVICE = \"\"; //this useful to remove not required device in case of \"all\" selected. \r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									" * Prepare URI and reset var Device Information for Network\r",
									" ****************************************************************************************/\r",
									"if (SOURCE_OF_INPUT_PARAMETERS === \"network\") {\r",
									"    // Prepartion of the URI\r",
									"    try {\r",
									"        AUTHORIZATION_CODE_AT_THE_MANTIS = \"pHCn4WYf74wyUmn0ZCj_BBkkIvIE4CtM\";\r",
									"        NAME_OF_DEVICE_UNDER_TEST = \"\";\r",
									"        UUID_OF_LTP_UNDER_TEST = \"\";\r",
									"        LID_OF_LP_UNDER_TEST = \"\";\r",
									"\r",
									"        EXTENSION = \"content=nonconfig\";\r",
									"        FILTER = \"fields=node(node-id;netconf-node-topology:connection-status;netconf-node-topology:host;netconf-node-topology:port)\";\r",
									"        var controllConstructLink = \"http://\" + IP_ADDRESS_OF_THE_CONTROLLER + \":\" +\r",
									"            RESTCONF_PORT_AT_THE_CONTROLLER + PATH_TO_DB_AND_MOUNT_POINT;\r",
									"        var uri = controllConstructLink + \"?\" + EXTENSION + \"&\" + FILTER;\r",
									"        CouldTheInputBeLoadedForNetwork(controllConstructLink, uri);\r",
									"    } catch (error) {\r",
									"        CouldTheInputBeLoadedForNetwork();\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									" * Provided Environmental Variables \r",
									" ****************************************************************************************/\r",
									"pm.environment.clear();\r",
									"\r",
									"INITIAL_INDEX_OF_DEVICE_UNDER_TEST = 0;\r",
									"VALIDATION_ERROR_RESULTS = [];\r",
									"// = \"ping.openBackhaul.com\";\r",
									"DUMMY_URI = \"http://172.29.145.220:8181/rests/data/programming:instructions-queue=pcep-topology\";\r",
									"\r",
									"class Interface {\r",
									"    constructor(newLtpUuid, newlpLid) {\r",
									"        this.ltpUuid = newLtpUuid;\r",
									"        this.lpLid = newlpLid;\r",
									"    }\r",
									"}\r",
									"try {\r",
									"    var interfaceUnderTest = new Interface(UUID_OF_LTP_UNDER_TEST, LID_OF_LP_UNDER_TEST);\r",
									"    if (SOURCE_OF_INPUT_PARAMETERS === \"manual\") {\r",
									"        IsInterfaceUnderTestDefined(interfaceUnderTest);\r",
									"    }\r",
									"} catch (error) {\r",
									"    IsInterfaceUnderTestDefined();\r",
									"}\r",
									"\r",
									"class Node {\r",
									"    constructor(newNodeId,\r",
									"        newVendor,\r",
									"        newDeviceType,\r",
									"        newDeviceNumber,\r",
									"        newMantisAuthorizationCode) {\r",
									"        this.nodeId = newNodeId;\r",
									"        this.vendor = newVendor;\r",
									"        this.deviceType = newDeviceType;\r",
									"        this.deviceNumber = newDeviceNumber;\r",
									"        this.mantisAuthorizationCode = newMantisAuthorizationCode;\r",
									"        this.airInterfaceList = [];\r",
									"        this.ethernetContainerList = [];\r",
									"        this.hybridMwStructureList = [];\r",
									"        this.ipInterfaceList = [];\r",
									"        this.macInterfaceList = [];\r",
									"        this.pureEthernetStructureList = [];\r",
									"        this.tdmContainerList = [];\r",
									"        this.vlanInterfaceList = [];\r",
									"        this.wireInterfaceList = [];\r",
									"    }\r",
									"}\r",
									"try {\r",
									"    var nodeUnderTest = new Node(NAME_OF_DEVICE_UNDER_TEST,\r",
									"        VendorOf(NAME_OF_DEVICE_UNDER_TEST),\r",
									"        TypeOf(NAME_OF_DEVICE_UNDER_TEST),\r",
									"        NumberOf(NAME_OF_DEVICE_UNDER_TEST),\r",
									"        AUTHORIZATION_CODE_AT_THE_MANTIS\r",
									"    );\r",
									"    switch (TechnologyOf(PAC_UNDER_TEST)) {\r",
									"        case \"air-interface\":\r",
									"            nodeUnderTest.airInterfaceList.push(interfaceUnderTest);\r",
									"            break;\r",
									"        case \"ethernet-container\":\r",
									"            nodeUnderTest.ethernetContainerList.push(interfaceUnderTest);\r",
									"            break;\r",
									"        case \"hybrid-mw-structure\":\r",
									"            nodeUnderTest.hybridMwStructureList.push(interfaceUnderTest);\r",
									"            break;\r",
									"        case \"ip-interface\":\r",
									"            nodeUnderTest.ipInterfaceList.push(interfaceUnderTest);\r",
									"            break;\r",
									"        case \"mac-interface\":\r",
									"            nodeUnderTest.macInterfaceList.push(interfaceUnderTest);\r",
									"            break;\r",
									"        case \"pure-ethernet-structure\":\r",
									"            nodeUnderTest.pureEthernetStructureList.push(interfaceUnderTest);\r",
									"            break;\r",
									"        case \"tdm-container\":\r",
									"            nodeUnderTest.tdmContainerList.push(interfaceUnderTest);\r",
									"            break;\r",
									"        case \"vlan-interface\":\r",
									"            nodeUnderTest.vlanInterfaceList.push(interfaceUnderTest);\r",
									"            break;\r",
									"        case \"wire-interface\":\r",
									"            nodeUnderTest.wireInterfaceList.push(interfaceUnderTest);\r",
									"            break;\r",
									"    }\r",
									"    if (SOURCE_OF_INPUT_PARAMETERS === \"manual\") {\r",
									"        IsNodeUnderTestDefined(nodeUnderTest);\r",
									"    }\r",
									"} catch (error) {\r",
									"    IsNodeUnderTestDefined();\r",
									"}\r",
									"\r",
									"class Controller {\r",
									"    constructor(newControllerAddress,\r",
									"        newAuthorizationCode,\r",
									"        newPathToDbAndMountPoint) {\r",
									"        this.controllerAddress = newControllerAddress;\r",
									"        this.authorizationCode = newAuthorizationCode;\r",
									"        this.pathToDbAndMountPoint = newPathToDbAndMountPoint;\r",
									"        this.nodeList = [];\r",
									"    }\r",
									"}\r",
									"try {\r",
									"    var controller = new Controller(IP_ADDRESS_OF_THE_CONTROLLER + \":\" + RESTCONF_PORT_AT_THE_CONTROLLER,\r",
									"        AUTHORIZATION_CODE_AT_THE_CONTROLLER,\r",
									"        PATH_TO_DB_AND_MOUNT_POINT\r",
									"    );\r",
									"    if (nodeUnderTest.nodeId) {\r",
									"        controller.nodeList.push(nodeUnderTest);\r",
									"    }\r",
									"    IsControllerUnderTestDefined(controller);\r",
									"} catch (error) {\r",
									"    IsControllerUnderTestDefined();\r",
									"}\r",
									"\r",
									"\r",
									"pm.environment.set(\"multiplicityOfDeviceIterations\", MULTIPLICITY_OF_DEVICE_ITERATIONS);\r",
									"pm.environment.set(\"controller\", controller);\r",
									"pm.environment.set(\"indexOfDeviceUnderTest\", INITIAL_INDEX_OF_DEVICE_UNDER_TEST);\r",
									"pm.environment.set(\"mantisInterfaceStatus\", MANTIS_INTERFACE_STATUS);\r",
									"pm.environment.set(\"dummyUri\", DUMMY_URI);\r",
									"pm.environment.set(\"validationErrorResults\", VALIDATION_ERROR_RESULTS);\r",
									"AreAllEnvironmentVariablesSet();\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									" * Provided Collection Variables \r",
									" ****************************************************************************************/\r",
									"pm.collectionVariables.clear();\r",
									"\r",
									"if (SOURCE_OF_INPUT_PARAMETERS === \"network\") {\r",
									"    pm.collectionVariables.set(\"deviceList\", DEVICE_LIST);\r",
									"    pm.collectionVariables.set(\"interfaceList\", INTERFACE_LIST);\r",
									"    pm.collectionVariables.set(\"multiplicityOfinterfaceIterations\", MULTIPLICITY_OF_INTERFACE_ITERATIONS);\r",
									"    pm.collectionVariables.set(\"controllConstructLink\", controllConstructLink);\r",
									"    pm.collectionVariables.set(\"nodeUnderTest\", nodeUnderTest);\r",
									"    pm.collectionVariables.set(\"interfaceUnderTest\", interfaceUnderTest);\r",
									"    pm.collectionVariables.set(\"sourceOfInputParameters\", SOURCE_OF_INPUT_PARAMETERS);\r",
									"    AreAllCollectionVariablessSet();\r",
									"}\r",
									"/****************************************************************************************\r",
									" * Setting up Local Variables and Preparing the Request\r",
									" ****************************************************************************************/\r",
									"pm.variables.clear();\r",
									"\r",
									"try {\r",
									"    if (SOURCE_OF_INPUT_PARAMETERS === \"network\") {\r",
									"        pm.variables.set(\"uri\", uri);\r",
									"    }\r",
									"    else {\r",
									"        var dummyUri = pm.environment.get(\"dummyUri\");\r",
									"        pm.variables.set(\"uri\", dummyUri);\r",
									"    }\r",
									"    pm.request.headers.upsert({ key: \"Authorization\", value: \"\" });\r",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });\r",
									"} catch (error) { }\r",
									"CouldTheRequestBePrepared();\r",
									"\r",
									"/****************************************************************************************\r",
									" * Functions\r",
									" ****************************************************************************************/\r",
									"function TechnologyOf(pacUnderTest) {\r",
									"    let indexOfColon = pacUnderTest.indexOf(\":\");\r",
									"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");\r",
									"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);\r",
									"}\r",
									"\r",
									"function VendorOf(deviceUnderTest) {\r",
									"    let indexOfFirstUnderscore = deviceUnderTest.indexOf(\"_\");\r",
									"    return deviceUnderTest.slice(0, indexOfFirstUnderscore);\r",
									"}\r",
									"\r",
									"function TypeOf(deviceUnderTest) {\r",
									"    let deviceNameSegements = deviceUnderTest.split(\"_\");\r",
									"    return deviceNameSegements[1];\r",
									"}\r",
									"\r",
									"function NumberOf(deviceUnderTest) {\r",
									"    let indexOfSecondUnderscore = deviceUnderTest.indexOf(\"_\", deviceUnderTest.indexOf(\"_\") + 1);\r",
									"    return deviceUnderTest.slice(indexOfSecondUnderscore + 1);\r",
									"}\r",
									"\r",
									"\r",
									"/****************************************************************************************\r",
									" * Self Testing Functions\r",
									" ****************************************************************************************/\r",
									"function AreMainInputParametersCorrect(sourceOfInputParameters,\r",
									"    multiplicityOfDeviceIterations,\r",
									"    mantisInterfaceStatus) {\r",
									"    pm.test(\"IsValueOfSourceOfInputParametersCorrect\", function () {\r",
									"        pm.expect(sourceOfInputParameters).to.be.oneOf([\"manual\", \"file\", \"network\"]);\r",
									"    });\r",
									"    pm.test(\"IsValueOfMultiplicityOfDeviceIterationsCorrect\", function () {\r",
									"        pm.expect(multiplicityOfDeviceIterations).to.be.oneOf([\"none\", \"one\", \"all\"]);\r",
									"    });\r",
									"    pm.test(\"IsValueOfMantisInterfaceStatusCorrect\", function () {\r",
									"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);\r",
									"    });\r",
									"}\r",
									"\r",
									"function CouldTheInputBeLoadedForNetwork(controllConstructLink, uri) {\r",
									"    pm.test(\"CouldTheInputBeLoadedForNetwork\", function () {\r",
									"        pm.expect(controllConstructLink).to.be.a(\"string\");\r",
									"        pm.expect(controllConstructLink).to.not.have.lengthOf(0);\r",
									"        pm.expect(uri).to.be.a(\"string\");\r",
									"        pm.expect(uri).to.not.have.lengthOf(0);\r",
									"    });\r",
									"}\r",
									"\r",
									"function IsControllerAndDeviceInformationComplete(ipAddressOfTheController,\r",
									"    restconfPortAtTheController,\r",
									"    authorizationCodeAtTheController,\r",
									"    pathToDbAndMountPoint,\r",
									"    nameOfDeviceUnderTest,\r",
									"    authorizationCodeAtTheMantis,\r",
									"    uuidOfLtpUnderTest,\r",
									"    lidOfLpUnderTest,\r",
									"    pacUnderTest) {\r",
									"    pm.test(\"IsControllerAndDeviceInformationComplete\", function () {\r",
									"        pm.expect(ipAddressOfTheController).to.be.a(\"string\");\r",
									"        pm.expect(ipAddressOfTheController).to.not.have.lengthOf(0);\r",
									"        pm.expect(restconfPortAtTheController).to.be.a(\"string\");\r",
									"        pm.expect(restconfPortAtTheController).to.not.have.lengthOf(0);\r",
									"        pm.expect(authorizationCodeAtTheController).to.be.a(\"string\");\r",
									"        pm.expect(authorizationCodeAtTheController).to.not.have.lengthOf(0);\r",
									"        pm.expect(pathToDbAndMountPoint).to.be.a(\"string\");\r",
									"        pm.expect(pathToDbAndMountPoint).to.not.have.lengthOf(0);\r",
									"        pm.expect(nameOfDeviceUnderTest).to.be.a(\"string\");\r",
									"        pm.expect(nameOfDeviceUnderTest).to.not.have.lengthOf(0);\r",
									"        pm.expect(authorizationCodeAtTheMantis).to.be.a(\"string\");\r",
									"        if (MANTIS_INTERFACE_STATUS !== \"off\") {\r",
									"            pm.expect(authorizationCodeAtTheMantis).to.not.have.lengthOf(0);\r",
									"        }\r",
									"        pm.expect(uuidOfLtpUnderTest).to.be.a(\"string\");\r",
									"        pm.expect(uuidOfLtpUnderTest).to.not.have.lengthOf(0);\r",
									"        pm.expect(lidOfLpUnderTest).to.be.a(\"string\");\r",
									"        pm.expect(lidOfLpUnderTest).to.not.have.lengthOf(0);\r",
									"        pm.expect(pacUnderTest).to.be.a(\"string\");\r",
									"        pm.expect(pacUnderTest).to.not.have.lengthOf(0);\r",
									"    });\r",
									"}\r",
									"\r",
									"function IsInterfaceUnderTestDefined(interfaceUnderTest) {\r",
									"    pm.test(\"IsInterfaceUnderTestDefined\", function () {\r",
									"        pm.expect(interfaceUnderTest).to.be.an.instanceof(Interface);\r",
									"        pm.expect(interfaceUnderTest.ltpUuid).to.be.a(\"string\");\r",
									"        pm.expect(interfaceUnderTest.ltpUuid).to.not.have.lengthOf(0);\r",
									"        pm.expect(interfaceUnderTest.lpLid).to.be.a(\"string\");\r",
									"        pm.expect(interfaceUnderTest.lpLid).to.not.have.lengthOf(0);\r",
									"    });\r",
									"}\r",
									"\r",
									"function IsNodeUnderTestDefined(nodeUnderTest) {\r",
									"    pm.test(\"IsNodeUnderTestDefined\", function () {\r",
									"        pm.expect(nodeUnderTest).to.be.an.instanceof(Node);\r",
									"        pm.expect(nodeUnderTest.nodeId).to.be.a(\"string\");\r",
									"        pm.expect(nodeUnderTest.nodeId).to.not.have.lengthOf(0);\r",
									"        pm.expect(nodeUnderTest.vendor).to.be.a(\"string\");\r",
									"        pm.expect(nodeUnderTest.vendor).to.not.have.lengthOf(0);\r",
									"        pm.expect(nodeUnderTest.deviceType).to.be.a(\"string\");\r",
									"        pm.expect(nodeUnderTest.deviceType).to.not.have.lengthOf(0);\r",
									"        pm.expect(nodeUnderTest.deviceNumber).to.be.a(\"string\");\r",
									"        pm.expect(nodeUnderTest.deviceNumber).to.not.have.lengthOf(0);\r",
									"    });\r",
									"}\r",
									"\r",
									"function IsControllerUnderTestDefined(controllerUnderTest) {\r",
									"    pm.test(\"IsControllerUnderTestDefined\", function () {\r",
									"        pm.expect(controllerUnderTest).to.be.an.instanceof(Controller);\r",
									"        pm.expect(controllerUnderTest.controllerAddress).to.be.a(\"string\");\r",
									"        pm.expect(controllerUnderTest.controllerAddress).to.not.have.lengthOf(0);\r",
									"        pm.expect(controllerUnderTest.authorizationCode).to.be.a(\"string\");\r",
									"        pm.expect(controllerUnderTest.authorizationCode).to.not.have.lengthOf(0);\r",
									"        pm.expect(controllerUnderTest.pathToDbAndMountPoint).to.be.a(\"string\");\r",
									"        pm.expect(controllerUnderTest.pathToDbAndMountPoint).to.not.have.lengthOf(0);\r",
									"    });\r",
									"}\r",
									"\r",
									"function AreAllEnvironmentVariablesSet() {\r",
									"    pm.test(\"AreAllEnvironmentVariablesSet\", function () {\r",
									"        pm.expect(pm.environment.get(\"controller\")).to.be.an.instanceof(Controller);\r",
									"        pm.expect(pm.environment.get(\"mantisInterfaceStatus\")).to.be.a(\"string\");\r",
									"        pm.expect(pm.environment.get(\"mantisInterfaceStatus\")).to.not.have.lengthOf(0);\r",
									"        pm.expect(pm.environment.get(\"dummyUri\")).to.be.a(\"string\");\r",
									"        pm.expect(pm.environment.get(\"dummyUri\")).to.not.have.lengthOf(0);\r",
									"    });\r",
									"}\r",
									"\r",
									"function AreAllCollectionVariablessSet() {\r",
									"    pm.test(\"AreAllCollectionVariablessSet\", function () {\r",
									"        pm.expect(pm.collectionVariables.get(\"deviceList\")).to.be.an(\"array\");\r",
									"        pm.expect(pm.collectionVariables.get(\"interfaceList\")).to.be.an(\"array\");\r",
									"        pm.expect(pm.collectionVariables.get(\"multiplicityOfinterfaceIterations\")).to.be.a(\"string\");\r",
									"        pm.expect(pm.collectionVariables.get(\"multiplicityOfinterfaceIterations\")).to.not.have.lengthOf(0);\r",
									"        pm.expect(pm.collectionVariables.get(\"controllConstructLink\")).to.be.a(\"string\");\r",
									"        pm.expect(pm.collectionVariables.get(\"controllConstructLink\")).to.not.have.lengthOf(0);\r",
									"        pm.expect(pm.collectionVariables.get(\"nodeUnderTest\")).to.be.an.instanceof(Node);\r",
									"        pm.expect(pm.collectionVariables.get(\"interfaceUnderTest\")).to.be.an.instanceof(Interface);\r",
									"    });\r",
									"}\r",
									"\r",
									"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {\r",
									"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function () {\r",
									"        pm.expect(moduleUnderTest).to.be.a(\"string\");\r",
									"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);\r",
									"        pm.expect(technologyUnderTest).to.be.a(\"string\");\r",
									"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);\r",
									"    });\r",
									"}\r",
									"\r",
									"function CouldTheRequestBePrepared() {\r",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {\r",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a1b7b366-ef88-4962-a709-2a177853253d",
								"exec": [
									"if (SOURCE_OF_INPUT_PARAMETERS === \"network\") {\r",
									"    var deviceList = pm.collectionVariables.get(\"deviceList\");\r",
									"    CouldTheDeviceListInputBeValid(deviceList);\r",
									"    /****************************************************************************************\r",
									"    * Manual Definition of Source of Parameters\r",
									"    ****************************************************************************************/\r",
									"    EXTENSION = \"/yang-ext:mount/core-model-1-4:control-construct/operational-state?content=nonconfig\";\r",
									"    var nodeList = [];\r",
									"    var faultyNodeList = [];\r",
									"    AreMainInputParametersEmpty(nodeList, faultyNodeList);\r",
									"\r",
									"    /****************************************************************************************\r",
									"    * check if the response is successful and can be processed further\r",
									"    ****************************************************************************************/\r",
									"    var responseCode = pm.response.code;\r",
									"    CouldTheResponseBeProcessed(responseCode);\r",
									"\r",
									"    /****************************************************************************************\r",
									"    * Extract response and fetch node details\r",
									"    ****************************************************************************************/\r",
									"    try {\r",
									"        if (responseCode == 200) {\r",
									"            var response = pm.response.json();\r",
									"            var topology = response[\"network-topology:topology\"][0];\r",
									"\r",
									"            for (let i = 0; i < topology.node.length; i++) {\r",
									"                let node = topology.node[i];\r",
									"                let nodeId = node[\"node-id\"];\r",
									"                let nodeStatus = node[\"netconf-node-topology:connection-status\"];\r",
									"\r",
									"                if (nodeStatus === \"connected\") {\r",
									"                    for (let j = 0; j < deviceList.length; j++) {\r",
									"                        if (deviceList[j] === \"all\") {\r",
									"                            if (NOT_REQUIRED_DEVICE) {\r",
									"                                if (nodeId.includes(NOT_REQUIRED_DEVICE)) {\r",
									"                                    continue;\r",
									"                                }\r",
									"                                nodeList.push(nodeId);\r",
									"                            }\r",
									"                            else {\r",
									"                                nodeList.push(nodeId);\r",
									"                                break;\r",
									"                            }\r",
									"                        } else if (nodeId.includes(deviceList[j])) {\r",
									"                            nodeList.push(nodeId);\r",
									"                        }\r",
									"                    }\r",
									"                } else {\r",
									"                    if (nodeId.includes(deviceList[j])) {\r",
									"                        console.log(\"Devices is not connected: \" + nodeId);\r",
									"                    }\r",
									"                    faultyNodeList.push(nodeId);\r",
									"                }\r",
									"            }\r",
									"        } else {\r",
									"            console.log(\" ERROR: could not be retrieved. Response Code: \" + response.code);\r",
									"        }\r",
									"        CouldTheNodeBeProcessed(nodeList, faultyNodeList);\r",
									"    } catch (error) {\r",
									"        CouldTheNodeBeProcessed();\r",
									"    }\r",
									"\r",
									"    /****************************************************************************************\r",
									"    * Set Output variables\r",
									"    ****************************************************************************************/\r",
									"    console.log(nodeList);\r",
									"    pm.collectionVariables.set(\"nodeList\", nodeList);\r",
									"    var nodeIndex = 0;\r",
									"    pm.collectionVariables.set(\"nodeIndex\", nodeIndex);\r",
									"}\r",
									"/****************************************************************************************\r",
									" * Self Testing Functions\r",
									" ****************************************************************************************/\r",
									"function CouldTheDeviceListInputBeValid(deviceList) {\r",
									"    pm.test(\"CouldTheDeviceListInputBeValid\", function () {\r",
									"        pm.expect(deviceList).to.be.an(\"array\");\r",
									"    });\r",
									"}\r",
									"\r",
									"function AreMainInputParametersEmpty(nodeList, faultyNodeList) {\r",
									"    pm.test(\"AreMainInputParametersEmpty\", function () {\r",
									"        pm.expect(nodeList).to.be.an(\"array\");\r",
									"        pm.expect(faultyNodeList).to.be.an(\"array\");\r",
									"    });\r",
									"}\r",
									"\r",
									"function CouldTheResponseBeProcessed(responseCode) {\r",
									"    pm.test(\"CouldTheResponseBeProcessed\", function () {\r",
									"        pm.expect(responseCode).to.equal(200);\r",
									"    });\r",
									"}\r",
									"\r",
									"function CouldTheNodeBeProcessed(nodeList, faultyNodeList) {\r",
									"    pm.test(\"CouldTheNodeBeProcessed\", function () {\r",
									"        pm.expect(nodeList).to.be.an(\"array\");\r",
									"        pm.expect(faultyNodeList).to.be.an(\"array\");\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "PRSe08",
									"type": "string"
								},
								{
									"key": "username",
									"value": "senthilvel.s",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "FetchFromNetwork",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f7ba716b-1298-443e-99c4-8650ab56f91c",
								"exec": [
									"\r",
									"var sourceOfInputParameters = pm.collectionVariables.get(\"sourceOfInputParameters\");\r",
									"if (sourceOfInputParameters === \"network\") {\r",
									"    EXTENSION = \"/yang-ext:mount/core-model-1-4:control-construct?content=config&fields=logical-termination-point(uuid;layer-protocol(local-id;layer-protocol-name))\";\r",
									"\r",
									"    var controllConstructLink = pm.collectionVariables.get(\"controllConstructLink\");\r",
									"    var nodeList = pm.collectionVariables.get(\"nodeList\");\r",
									"    var nodeIndex = pm.collectionVariables.get(\"nodeIndex\");\r",
									"    var nodeId = nodeList[nodeIndex];\r",
									"\r",
									"    var uri = controllConstructLink + \"/node=\" + nodeId + EXTENSION;\r",
									"\r",
									"    pm.variables.set(\"uri\", uri);\r",
									"}\r",
									"else {\r",
									"    var dummyUri = pm.environment.get(\"dummyUri\");\r",
									"    pm.variables.set(\"uri\", dummyUri);\r",
									"}\r",
									"pm.request.headers.upsert({ key: \"Authorization\", value: \"c2VudGhpbHZlbC5zOlBSU2UwOA==\" });\r",
									"pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "02af5223-e830-44ad-87ab-410138cd1962",
								"exec": [
									"var sourceOfInputParameters = pm.collectionVariables.get(\"sourceOfInputParameters\");\r",
									"if (sourceOfInputParameters === \"network\") {\r",
									"    try {\r",
									"        var controller = pm.environment.get(\"controller\");\r",
									"        var interfaceList = pm.collectionVariables.get(\"interfaceList\");\r",
									"        var multiplicityOfinterfaceIterations = pm.collectionVariables.get(\"multiplicityOfinterfaceIterations\");\r",
									"        var nodeList = pm.collectionVariables.get(\"nodeList\");\r",
									"        var nodeIndex = pm.collectionVariables.get(\"nodeIndex\");\r",
									"        var nodeId = nodeList[nodeIndex];\r",
									"\r",
									"        var nodeUnderTest = pm.collectionVariables.get(\"nodeUnderTest\");\r",
									"        var interfaceUnderTest = pm.collectionVariables.get(\"interfaceUnderTest\");\r",
									"    } catch (error) {\r",
									"        CouldTheNodeBeProcessed();\r",
									"    }\r",
									"\r",
									"    if (pm.response.code === 200) {\r",
									"        response = pm.response.json();\r",
									"        var ltpList = response[\"core-model-1-4:control-construct\"][\"logical-termination-point\"];\r",
									"        ltpListLength = response[\"core-model-1-4:control-construct\"][\"logical-termination-point\"].length;\r",
									"\r",
									"        for (let i = 0; i < ltpListLength; i++) {\r",
									"            try {\r",
									"                var ltpId = ltpList[i].uuid;\r",
									"                var layerProtocol = ltpList[i][\"layer-protocol\"][0];\r",
									"                var lpId = layerProtocol[\"local-id\"];\r",
									"                var ltpName = layerProtocol[\"layer-protocol-name\"];\r",
									"            } catch (error) {\r",
									"                //IsInterfaceUnderTestDefined();\r",
									"            }\r",
									"\r",
									"            try {\r",
									"                for (let j = 0; j < interfaceList.length; j++) {\r",
									"                    var interfaceName = \"\";\r",
									"                    if (interfaceList[j] === \"all\") {\r",
									"                        //console.log(\"all interfaces are allowed\");\r",
									"                        if (ltpName) {\r",
									"                            interfaceName = TechnologyOf(ltpName);\r",
									"                            //console.log(\"interfaceName: \" + interfaceName);\r",
									"                        }\r",
									"                        break;\r",
									"                    } else {\r",
									"                        if (ltpName) {\r",
									"                            var mappedName = TechnologyOf(ltpName);\r",
									"                            if (mappedName === interfaceList[j]) {\r",
									"                                var interfaceName = mappedName;\r",
									"                                //console.log(\"interfaceName: \" + interfaceName);\r",
									"                                break;\r",
									"                            }\r",
									"                            else {\r",
									"                                interfaceName = \"\";\r",
									"                            }\r",
									"                        }\r",
									"                    }\r",
									"                }\r",
									"            } catch (error) {\r",
									"                //IsInterfaceUnderTestDefined();\r",
									"            }\r",
									"\r",
									"            try {\r",
									"                if (interfaceName) {\r",
									"                    interfaceUnderTest.ltpUuid = ltpId;\r",
									"                    interfaceUnderTest.lpLid = lpId;\r",
									"                    IsInterfaceUnderTestDefined(interfaceUnderTest);\r",
									"\r",
									"                    switch (interfaceName) {\r",
									"                        case \"air-interface\":\r",
									"                            if (multiplicityOfinterfaceIterations === \"one\") {\r",
									"                                if (nodeUnderTest.airInterfaceList.length === 0) {\r",
									"                                    nodeUnderTest.airInterfaceList.push(interfaceUnderTest);\r",
									"                                    //console.log(nodeUnderTest);\r",
									"                                }\r",
									"                            } else {\r",
									"                                nodeUnderTest.airInterfaceList.push(interfaceUnderTest);\r",
									"                                console.log(\"All case\");\r",
									"                            }\r",
									"                            break;\r",
									"                        case \"ethernet-container\":\r",
									"                            if (multiplicityOfinterfaceIterations === \"one\") {\r",
									"                                if (nodeUnderTest.ethernetContainerList.length === 0) {\r",
									"                                    nodeUnderTest.ethernetContainerList.push(interfaceUnderTest);\r",
									"                                }\r",
									"                            } else {\r",
									"                                nodeUnderTest.ethernetContainerList.push(interfaceUnderTest);\r",
									"                            }\r",
									"                            break;\r",
									"                        case \"hybrid-mw-structure\":\r",
									"                            if (multiplicityOfinterfaceIterations === \"one\") {\r",
									"                                if (nodeUnderTest.hybridMwStructureList.length === 0) {\r",
									"                                    nodeUnderTest.hybridMwStructureList.push(interfaceUnderTest);\r",
									"                                }\r",
									"                            } else {\r",
									"                                nodeUnderTest.hybridMwStructureList.push(interfaceUnderTest);\r",
									"                            }\r",
									"                            break;\r",
									"                        case \"ip-interface\":\r",
									"                            if (multiplicityOfinterfaceIterations === \"one\") {\r",
									"                                if (nodeUnderTest.ipInterfaceList.length === 0) {\r",
									"                                    nodeUnderTest.ipInterfaceList.push(interfaceUnderTest);\r",
									"                                }\r",
									"                            } else {\r",
									"                                nodeUnderTest.ipInterfaceList.push(interfaceUnderTest);\r",
									"                            }\r",
									"                            break;\r",
									"                        case \"mac-interface\":\r",
									"                            if (multiplicityOfinterfaceIterations === \"one\") {\r",
									"                                if (nodeUnderTest.macInterfaceList.length === 0) {\r",
									"                                    nodeUnderTest.macInterfaceList.push(interfaceUnderTest);\r",
									"                                }\r",
									"                            } else {\r",
									"                                nodeUnderTest.macInterfaceList.push(interfaceUnderTest);\r",
									"                            }\r",
									"                            break;\r",
									"                        case \"pure-ethernet-structure\":\r",
									"                            if (multiplicityOfinterfaceIterations === \"one\") {\r",
									"                                if (nodeUnderTest.pureEthernetStructureList.length === 0) {\r",
									"                                    nodeUnderTest.pureEthernetStructureList.push(interfaceUnderTest);\r",
									"                                }\r",
									"                            } else {\r",
									"                                nodeUnderTest.pureEthernetStructureList.push(interfaceUnderTest);\r",
									"                            }\r",
									"                            break;\r",
									"                        case \"tdm-container\":\r",
									"                            if (multiplicityOfinterfaceIterations === \"one\") {\r",
									"                                if (nodeUnderTest.tdmContainerList.length === 0) {\r",
									"                                    nodeUnderTest.tdmContainerList.push(interfaceUnderTest);\r",
									"                                }\r",
									"                            } else {\r",
									"                                nodeUnderTest.tdmContainerList.push(interfaceUnderTest);\r",
									"                            }\r",
									"                            break;\r",
									"                        case \"vlan-interface\":\r",
									"                            if (multiplicityOfinterfaceIterations === \"one\") {\r",
									"                                if (nodeUnderTest.vlanInterfaceList.length === 0) {\r",
									"                                    nodeUnderTest.vlanInterfaceList.push(interfaceUnderTest);\r",
									"                                }\r",
									"                            } else {\r",
									"                                nodeUnderTest.vlanInterfaceList.push(interfaceUnderTest);\r",
									"                            }\r",
									"                            break;\r",
									"                        case \"wire-interface\":\r",
									"                            if (multiplicityOfinterfaceIterations === \"one\") {\r",
									"                                if (nodeUnderTest.wireInterfaceList.length === 0) {\r",
									"                                    nodeUnderTest.wireInterfaceList.push(interfaceUnderTest);\r",
									"                                }\r",
									"                            } else {\r",
									"                                nodeUnderTest.wireInterfaceList.push(interfaceUnderTest);\r",
									"                            }\r",
									"                            break;\r",
									"                    }\r",
									"                }\r",
									"            } catch (error) {\r",
									"                IsInterfaceUnderTestDefined();\r",
									"            }\r",
									"\r",
									"        }\r",
									"\r",
									"        try {\r",
									"            nodeUnderTest.nodeId = nodeId;\r",
									"            nodeUnderTest.vendor = VendorOf(nodeId);\r",
									"            nodeUnderTest.deviceType = TypeOf(nodeId);\r",
									"            nodeUnderTest.deviceNumber = NumberOf(nodeId);\r",
									"            IsNodeUnderTestDefined(nodeUnderTest);\r",
									"\r",
									"            controller.nodeList.push(nodeUnderTest);\r",
									"            IsControllerUnderTestDefined(controller)\r",
									"\r",
									"            pm.environment.set(\"controller\", controller);\r",
									"            //console.log(\"nodeIndex= \" + nodeIndex);\r",
									"            nodeIndex = nodeIndex + 1;\r",
									"            if (nodeIndex < (nodeList.length)) {\r",
									"                pm.collectionVariables.set(\"nodeIndex\", nodeIndex);\r",
									"                postman.setNextRequest(\"FetchFromNetwork\");\r",
									"            } else {\r",
									"                postman.setNextRequest();\r",
									"            }\r",
									"        } catch (error) {\r",
									"            //IsInterfaceUnderTestDefined();\r",
									"        }\r",
									"    }\r",
									"}\r",
									"console.log(controller);\r",
									"\r",
									"/****************************************************************************************\r",
									" * Functions\r",
									" ****************************************************************************************/\r",
									"function VendorOf(deviceUnderTest) {\r",
									"    let indexOfFirstUnderscore = deviceUnderTest.indexOf(\"_\");\r",
									"    return deviceUnderTest.slice(0, indexOfFirstUnderscore);\r",
									"}\r",
									"\r",
									"function TypeOf(deviceUnderTest) {\r",
									"    let deviceNameSegements = deviceUnderTest.split(\"_\");\r",
									"    return deviceNameSegements[1];\r",
									"}\r",
									"\r",
									"function NumberOf(deviceUnderTest) {\r",
									"    let indexOfSecondUnderscore = deviceUnderTest.indexOf(\"_\", deviceUnderTest.indexOf(\"_\") + 1);\r",
									"    return deviceUnderTest.slice(indexOfSecondUnderscore + 1);\r",
									"}\r",
									"\r",
									"function TechnologyOf(pacUnderTest) {\r",
									"    let indexOfColon = pacUnderTest.indexOf(\":\");\r",
									"    //let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");\r",
									"    return pacUnderTest.slice(0, indexOfColon - 4);\r",
									"}\r",
									"\r",
									"function IsInterfaceUnderTestDefined(interfaceUnderTest) {\r",
									"    pm.test(\"IsInterfaceUnderTestDefined\", function () {\r",
									"        pm.expect(interfaceUnderTest.ltpUuid).to.be.a(\"string\");\r",
									"        pm.expect(interfaceUnderTest.ltpUuid).to.not.have.lengthOf(0);\r",
									"        pm.expect(interfaceUnderTest.lpLid).to.be.a(\"string\");\r",
									"        pm.expect(interfaceUnderTest.lpLid).to.not.have.lengthOf(0);\r",
									"    });\r",
									"}\r",
									"\r",
									"function IsNodeUnderTestDefined(nodeUnderTest) {\r",
									"    pm.test(\"IsNodeUnderTestDefined\", function () {\r",
									"        pm.expect(nodeUnderTest.nodeId).to.be.a(\"string\");\r",
									"        pm.expect(nodeUnderTest.nodeId).to.not.have.lengthOf(0);\r",
									"        pm.expect(nodeUnderTest.vendor).to.be.a(\"string\");\r",
									"        pm.expect(nodeUnderTest.vendor).to.not.have.lengthOf(0);\r",
									"        pm.expect(nodeUnderTest.deviceType).to.be.a(\"string\");\r",
									"        pm.expect(nodeUnderTest.deviceType).to.not.have.lengthOf(0);\r",
									"        pm.expect(nodeUnderTest.deviceNumber).to.be.a(\"string\");\r",
									"        pm.expect(nodeUnderTest.deviceNumber).to.not.have.lengthOf(0);\r",
									"    });\r",
									"}\r",
									"\r",
									"function IsControllerUnderTestDefined(controllerUnderTest) {\r",
									"    pm.test(\"IsControllerUnderTestDefined\", function () {\r",
									"        pm.expect(controllerUnderTest.controllerAddress).to.be.a(\"string\");\r",
									"        pm.expect(controllerUnderTest.controllerAddress).to.not.have.lengthOf(0);\r",
									"        pm.expect(controllerUnderTest.authorizationCode).to.be.a(\"string\");\r",
									"        pm.expect(controllerUnderTest.authorizationCode).to.not.have.lengthOf(0);\r",
									"        pm.expect(controllerUnderTest.pathToDbAndMountPoint).to.be.a(\"string\");\r",
									"        pm.expect(controllerUnderTest.pathToDbAndMountPoint).to.not.have.lengthOf(0);\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "96a9256f-5b11-44a9-ab0a-de7867e7e536",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "071e9819-5b05-4783-a4bc-5b9e93280936",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "functions()",
			"item": [
				{
					"name": "General()",
					"item": [
						{
							"name": "PrintMantisIssuesForTechnologyAndClass()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1e4e26c7-57b4-4447-a709-b589708a3217",
										"exec": [
											"console.log(\"\\n-------------Uploading Function for Filtering and Listing of Mantis Issues----------------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of PrintMantisIssuesForTechnologyAndClass()",
											"* ",
											"* Function for filtering a list of Mantis issues for defined technology and class ",
											"* under test and console.log of the filtered issues.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Environment Variables ",
											"****************************************************************************************/",
											"const PRINT_MANTIS_ISSUES_FOR_TECHNOLOGY_AND_CLASS = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var mantisIssueList = pm.environment.get(\"mantisIssueList\");",
											"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
											"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
											"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
											"        CouldInputForFilteringMantisIssuesBeLoaded(mantisIssueList, technologyUnderTest, ",
											"                                                        classUnderTest,",
											"                                                        attributeUnderTest",
											"                                                   );",
											"    } catch (error) {",
											"        CouldInputForFilteringMantisIssuesBeLoaded();",
											"    }",
											"",
											"    // Filtering the Mantis Issues for Technology and Class",
											"    try {",
											"        let technologyAndClassUnderTest = technologyUnderTest + \"-\" + classUnderTest;",
											"        var filteredIssueList = mantisIssueList;",
											"        for (let i=(filteredIssueList.length-1); i>=0; i--) {",
											"            let summary = filteredIssueList[i].summary;",
											"            let indexOfTwoColons = summary.indexOf(\"::\");",
											"            let technologyAndClass = summary.slice(0, indexOfTwoColons);",
											"            if (technologyAndClass!==technologyAndClassUnderTest){",
											"                filteredIssueList.splice(i,1);",
											"            } else {",
											"                if ( (attributeUnderTest!==undefined) && (attributeUnderTest!==\"\") ) {",
											"                    let indexOfBlank = summary.indexOf(\" \");",
											"                    let attributeName = summary.slice(indexOfTwoColons+2, indexOfBlank);",
											"                    if (attributeName!==attributeUnderTest){",
											"                        filteredIssueList.splice(i,1);",
											"                    }",
											"                }",
											"            }",
											"        }",
											"        CouldMantisIssueListBeFiltered(filteredIssueList);",
											"    } catch (error) {",
											"        CouldMantisIssueListBeFiltered();",
											"    }",
											"    ",
											"    // Printing filtered Issues into the Console",
											"    try {",
											"        if ( filteredIssueList.length>0 ) {",
											"            console.log(\"Issues documented in Mantis:\");",
											"            for (let i=0; i<filteredIssueList.length; i++) {",
											"                let indexOfIssue = filteredIssueList[i].id;",
											"                let summary = filteredIssueList[i].summary;",
											"                let indexOfTwoColons = summary.indexOf(\"::\");",
											"                let attributeAndError = summary.slice(indexOfTwoColons+2);",
											"                let status = filteredIssueList[i].status.name;",
											"                console.log(\"#\" + indexOfIssue + \" : \" + attributeAndError + \" (\" + status + \")\");",
											"            }",
											"        }",
											"        CouldMantisIssueListBePrinted(true);",
											"    } catch (error) {",
											"        CouldMantisIssueListBePrinted(false);",
											"    }",
											"    ",
											"    // Provided Output Parameters",
											"    pm.variables.set(\"filteredIssueList\", filteredIssueList);",
											"    ",
											"    // Self Testing Functions",
											"    function CouldInputForFilteringMantisIssuesBeLoaded(mantisIssueList, technologyUnderTest, ",
											"                                                            classUnderTest,",
											"                                                            attributeUnderTest) {",
											"        pm.test(\"CouldInputForFilteringMantisIssuesBeLoaded\", function () {",
											"            pm.expect(mantisIssueList).to.be.an(\"array\");",
											"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
											"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(classUnderTest).to.be.a(\"string\");",
											"            pm.expect(classUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"        });",
											"    }",
											"    ",
											"    function CouldMantisIssueListBeFiltered(filteredIssueList) {",
											"        pm.test(\"CouldMantisIssueListBeFiltered\", function () {",
											"            pm.expect(filteredIssueList).to.be.an(\"array\");",
											"        });",
											"    }",
											"        ",
											"    function CouldMantisIssueListBePrinted(success) {",
											"        pm.test(\"CouldMantisIssueListBePrinted\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"PrintMantisIssuesForTechnologyAndClass\", ",
											"                            PRINT_MANTIS_ISSUES_FOR_TECHNOLOGY_AND_CLASS.toString() );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											" * Self Testing Functions",
											" ****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SettingTheRequestVariables()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "0fa7b6d3-5d19-4387-be34-f83d602b0177",
										"exec": [
											"console.log(\"\\n------------------Uploading Function for Setting the Request Variables--------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of SettingTheRequestVariables()",
											"* ",
											"* Function for composing and setting of the local variables for GET requests.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const SETTING_THE_REQUEST_VARIABLES = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
											"            ",
											"        var controller = pm.environment.get(\"controller\");",
											"        var dummyUri = pm.environment.get(\"dummyUri\");",
											"        var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
											"            ",
											"        var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
											"        var pacUnderTest = pm.collectionVariables.get(\"pacUnderTest\");",
											"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
											"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
											"            ",
											"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
											"        var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
											"        var keysOfDatatypeInstanceUnderTest = pm.variables.get(\"keysOfDatatypeInstanceUnderTest\");",
											"        var filteredContent = pm.variables.get(\"filteredContent\");",
											"        var filteredDepth = pm.variables.get(\"filteredDepth\");",
											"        var filteredFields = pm.variables.get(\"filteredFields\");",
											"        CouldInputForSettingTheRequestVariablesBeLoaded(attributeUnderTest,",
											"                                                            controller, ",
											"                                                            dummyUri,",
											"                                                            indexOfDeviceUnderTest, ",
											"                                                            indexOfLtpUnderTest,",
											"                                                            pacUnderTest,",
											"                                                            moduleUnderTest,",
											"                                                            technologyUnderTest,",
											"                                                            classUnderTest,",
											"                                                            datatypeUnderTest,",
											"                                                            keysOfDatatypeInstanceUnderTest,",
											"                                                            filteredContent,",
											"                                                            filteredDepth,",
											"                                                            filteredFields",
											"                                                        );",
											"    } catch (error) {",
											"        CouldInputForSettingTheRequestVariablesBeLoaded();",
											"    }",
											"        ",
											"    // Preparing the Request",
											"    try {",
											"        let nodeIds = controller.nodeList[indexOfDeviceUnderTest];",
											"        var idPair;",
											"        switch (technologyUnderTest) {",
											"            case \"air-interface\":",
											"                idPair = nodeIds.airInterfaceList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"ethernet-container\":",
											"                idPair = nodeIds.ethernetContainerList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"hybrid-mw-structure\":",
											"                idPair = nodeIds.hybridMwStructureList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"ip-interface\":",
											"                idPair = nodeIds.ipInterfaceList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"mac-interface\":",
											"                idPair = nodeIds.macInterfaceList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"pure-ethernet-structure\":",
											"                idPair = nodeIds.pureEthernetStructureList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"tdm-container\":",
											"                idPair = nodeIds.tdmContainerList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"vlan-interface\":",
											"                idPair = nodeIds.vlanInterfaceList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"wire-interface\":",
											"                idPair = nodeIds.wireInterfaceList[indexOfLtpUnderTest];",
											"                break;",
											"        }",
											"        CouldIdPairForSettingTheRequestVariablesBeRetrieved(attributeUnderTest, idPair);",
											"    } catch (error) {",
											"        CouldIdPairForSettingTheRequestVariablesBeRetrieved(attributeUnderTest);",
											"    }",
											"        ",
											"    try {",
											"        var objectUnderTest = \"/core-model-1-4:control-construct/logical-termination-point=\" ",
											"                                    + idPair.ltpUuid",
											"                                    + \"/layer-protocol=\" ",
											"                                    + idPair.lpLid",
											"                                    + \"/\"",
											"                                    + pacUnderTest;",
											"        if ( (typeof technologyUnderTest!=\"undefined\") ",
											"                && (technologyUnderTest!==\"\")",
											"                && (classUnderTest!==\"pac\") ) {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"/\"",
											"                                    + technologyUnderTest",
											"                                    + \"-\"",
											"                                    + classUnderTest;",
											"        }",
											"        if ( (typeof datatypeUnderTest!=\"undefined\") && (datatypeUnderTest !== \"\") ) {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"/\"",
											"                                    + datatypeUnderTest;",
											"        }",
											"        if ( (typeof keysOfDatatypeInstanceUnderTest[0].value!=\"undefined\") && (keysOfDatatypeInstanceUnderTest[0].value!==\"\") ) {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"=\"",
											"                                    + ReplaceColonsInside(keysOfDatatypeInstanceUnderTest[0].value);",
											"            for (let i=1; i<keysOfDatatypeInstanceUnderTest.length; i++) {",
											"                objectUnderTest = objectUnderTest",
											"                                    + \",\"",
											"                                    + ReplaceColonsInside(keysOfDatatypeInstanceUnderTest[i].value);",
											"            }",
											"        } ",
											"        if ( (typeof attributeUnderTest!=\"undefined\") && (attributeUnderTest !== \"\") ) {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"/\"",
											"                                    + attributeUnderTest;",
											"        }    ",
											"        let alreadySomeFilterAttached = false;",
											"        if ( (typeof filteredContent!=\"undefined\") ",
											"                && (typeof filteredDepth!=\"undefined\") ",
											"                && (typeof filteredFields!=\"undefined\") ) {",
											"            if (filteredContent !== \"\" || filteredDepth !== 0 || filteredFields !== \"\") {",
											"                objectUnderTest = objectUnderTest",
											"                                        + \"?\";",
											"            }",
											"            if (filteredContent !== \"\") {",
											"                objectUnderTest = objectUnderTest",
											"                                        + \"content=\"",
											"                                        + filteredContent;",
											"                alreadySomeFilterAttached = true;",
											"            }",
											"            if (filteredDepth !== 0) {",
											"                if (alreadySomeFilterAttached) {",
											"                     objectUnderTest = objectUnderTest",
											"                                        + \"&\";",
											"                }",
											"                objectUnderTest = objectUnderTest",
											"                                        + \"depth=\"",
											"                                        + filteredDepth;",
											"                alreadySomeFilterAttached = true;",
											"            }",
											"            if (filteredFields !== \"\") {",
											"                if (alreadySomeFilterAttached) {",
											"                     objectUnderTest = objectUnderTest",
											"                                        + \"&\";",
											"                }",
											"                objectUnderTest = objectUnderTest",
											"                                        + \"fields=\"",
											"                                        + filteredFields;",
											"                alreadySomeFilterAttached = true;",
											"            }",
											"        }",
											"        HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(attributeUnderTest, objectUnderTest);",
											"    } catch (error) {",
											"        HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(attributeUnderTest);",
											"    }",
											"        ",
											"    try {",
											"        var uri = \"http://\" ",
											"                    + controller.controllerAddress ",
											"                    + controller.pathToDbAndMountPoint ",
											"                    + \"/node=\" ",
											"                    + controller.nodeList[indexOfDeviceUnderTest].nodeId ",
											"                    + \"/yang-ext:mount\" ",
											"                    + objectUnderTest;",
											"        HasUriBeenDefinedForSettingTheRequestVariables(attributeUnderTest, uri);",
											"    } catch (error) {",
											"        uri = dummyUri;",
											"        HasUriBeenDefinedForSettingTheRequestVariables(attributeUnderTest);",
											"    }",
											"        ",
											"    pm.variables.set(\"uri\", uri);",
											"    pm.request.headers.upsert({key:\"Authorization\", value:controller.authorizationCode});",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});",
											"    pm.variables.set(\"requestUri\", uri);  //Mantis purpose storing request uri    ",
											"    // Functions",
											"    function ReplaceColonsInside(keyAttributeValue) {",
											"        return encodeURIComponent(keyAttributeValue);",
											"    }",
											"",
											"    // Self Testing Functions",
											"    function CouldInputForSettingTheRequestVariablesBeLoaded(attributeUnderTest,",
											"                                                                controller, ",
											"                                                                uri,",
											"                                                                indexOfDeviceUnderTest, ",
											"                                                                indexOfLtpUnderTest,",
											"                                                                pacUnderTest,",
											"                                                                moduleUnderTest,",
											"                                                                technologyUnderTest,",
											"                                                                classUnderTest,",
											"                                                                datatypeUnderTest,",
											"                                                                keysOfDatatypeInstanceUnderTest,",
											"                                                                filteredContent,",
											"                                                                filteredDepth,",
											"                                                                filteredFields) {",
											"        pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldInputForSettingTheRequestVariablesBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(controller).to.be.an(\"object\");",
											"            pm.expect(uri).to.be.a(\"string\");",
											"            pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
											"            pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
											"            pm.expect(pacUnderTest).to.be.a(\"string\");",
											"            pm.expect(pacUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
											"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
											"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(classUnderTest).to.be.a(\"string\");",
											"            pm.expect(classUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(datatypeUnderTest).to.be.a(\"string\");",
											"            pm.expect(keysOfDatatypeInstanceUnderTest).to.be.an(\"array\");",
											"            pm.expect(filteredContent).to.be.a(\"string\");",
											"            pm.expect(filteredDepth).to.be.a(\"number\");",
											"            pm.expect(filteredFields).to.be.a(\"string\");",
											"        });",
											"    }",
											"        ",
											"    function CouldIdPairForSettingTheRequestVariablesBeRetrieved(location, idPair) {",
											"        pm.test(\"CouldIdPairForSettingTheRequestVariablesBeRetrieved (\" + location + \")\", function () {",
											"            pm.expect(idPair.ltpUuid).to.be.a(\"string\");",
											"            pm.expect(idPair.ltpUuid).to.not.have.lengthOf(0);",
											"            pm.expect(idPair.lpLid).to.be.an(\"string\");",
											"            pm.expect(idPair.lpLid).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"    ",
											"    function HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(location, objectUnderTest) {",
											"        pm.test(\"HasObjectUnderTestBeenDefinedForSettingTheRequestVariables (\" + location + \")\", function () {",
											"            pm.expect(objectUnderTest).to.be.a(\"string\");",
											"            pm.expect(objectUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"    ",
											"    function HasUriBeenDefinedForSettingTheRequestVariables(location, uri) {",
											"        pm.test(\"HasUriBeenDefinedForSettingTheRequestVariables (\" + location + \")\", function () {",
											"            pm.expect(uri).to.be.a(\"string\");",
											"            pm.expect(uri).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"SettingTheRequestVariables\", SETTING_THE_REQUEST_VARIABLES.toString() );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											" ",
											"/****************************************************************************************",
											" * Self Testing Functions",
											" ****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UpdateErrorRersults",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "15aef341-9f87-4d71-b8ed-281e839b90d0",
										"exec": [
											"console.log(\"\\n----------------Function for Updating Error Results--------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of UpdateErrorRersults()",
											"* ",
											"* Function to update error results from the list of test cases",
											"* ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"/****************************************************************************************",
											"* Provided Environment Variables ",
											"****************************************************************************************/",
											"const UPDATE_ERROR_RESULTS = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var validationErrorResults = pm.environment.get(\"validationErrorResults\");",
											"        var controller = pm.environment.get(\"controller\");",
											"        var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
											"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
											"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
											"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
											"        var requestUri = pm.variables.get(\"requestUri\");",
											"        var responseCode = pm.variables.get(\"responseCode\");",
											"        var errorMessage = pm.variables.get(\"errorMessage\");",
											"        var errorDescription = pm.variables.get(\"errorDescription\");",
											"        var requestBody = pm.variables.get(\"requestBody\");",
											"        var response = pm.variables.get(\"response\");",
											"",
											"        if (attributeUnderTest) {",
											"            requestBody = pm.collectionVariables.get(\"requestBodyForMantis\");",
											"            var requestUri = pm.variables.get(\"requestUriForMantis\");",
											"            var response = pm.variables.get(\"responseForMantis\");",
											"        }",
											"",
											"        CouldTheInputValuesBeLoaded(validationErrorResults, controller, indexOfDeviceUnderTest,",
											"            technologyUnderTest, classUnderTest, attributeUnderTest,",
											"            requestUri, responseCode, errorMessage, errorDescription,",
											"            requestBody, response",
											"        );",
											"    } catch (error) {",
											"        CouldTheInputValuesBeLoaded();",
											"    }",
											"",
											"    // Prepare DeviceUnderTest and objectUnderTest",
											"    try {",
											"        var nameOfTheDeviceUnderTest = controller.nodeList[indexOfDeviceUnderTest].nodeId;",
											"        var objectUnderTest = technologyUnderTest + \"-\" + classUnderTest;",
											"        CouldLocalVariablesBeRetrieved(nameOfTheDeviceUnderTest, objectUnderTest);",
											"    } catch (error) {",
											"        CouldLocalVariablesBeRetrieved();",
											"    }",
											"",
											"    //Prepare Error object",
											"    try {",
											"        if (errorMessage) {",
											"            let errorObject = {",
											"                objectUnderTest: objectUnderTest,",
											"                attributeUnderTest: attributeUnderTest,",
											"                nameOfTheDeviceUnderTest: nameOfTheDeviceUnderTest,",
											"                responseCode: responseCode,",
											"                message: errorMessage,",
											"                description: errorDescription,",
											"                requestUri: requestUri,",
											"                requestBody: requestBody,",
											"                response: response",
											"            };",
											"            validationErrorResults.push(errorObject);",
											"            let testCaseErrorResults = { \"testCaseErrorResults\": validationErrorResults };",
											"            console.log(testCaseErrorResults);",
											"            CouldErrorResultBeUpdated(errorObject, validationErrorResults);",
											"        }",
											"    } catch (error) {",
											"        CouldErrorResultBeUpdated();",
											"    }",
											"",
											"    // Provided Output Parameters\t",
											"    pm.environment.set(\"validationErrorResults\", validationErrorResults);",
											"",
											"    // Self Testing Functions",
											"    function CouldTheInputValuesBeLoaded(validationErrorResults, controller, indexOfDeviceUnderTest,",
											"        technologyUnderTest, classUnderTest, attributeUnderTest,",
											"        requestUri, responseCode, errorMessage, errorDescription,",
											"        requestBody, response",
											"    ) {",
											"        pm.test(\"CouldTheInputValuesBeLoaded\", function () {",
											"            pm.expect(validationErrorResults).to.be.an(\"array\");",
											"            pm.expect(controller).to.be.an(\"object\");",
											"            pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
											"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
											"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(classUnderTest).to.be.a(\"string\");",
											"            pm.expect(classUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"            pm.expect(requestUri).to.be.a(\"string\");",
											"            pm.expect(requestUri).to.not.have.lengthOf(0);",
											"            pm.expect(responseCode).to.be.a(\"number\");",
											"            pm.expect(errorMessage).to.be.a(\"string\");",
											"            pm.expect(errorMessage).to.not.have.lengthOf(0);",
											"            pm.expect(errorDescription).to.be.a(\"string\");",
											"            pm.expect(errorDescription).to.not.have.lengthOf(0);",
											"            pm.expect(requestBody).to.be.a(\"string\");",
											"            pm.expect(response).to.be.an(\"object\");",
											"        });",
											"    }",
											"",
											"    function CouldLocalVariablesBeRetrieved(nameOfTheDeviceUnderTest, objectUnderTest) {",
											"        pm.test(\"CouldLocalVariablesBeRetrieved\", function () {",
											"            pm.expect(nameOfTheDeviceUnderTest).to.be.a(\"string\");",
											"            pm.expect(nameOfTheDeviceUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(objectUnderTest).to.be.a(\"string\");",
											"            pm.expect(objectUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"",
											"    function CouldErrorResultBeUpdated(errorObject, validationErrorResults) {",
											"        pm.test(\"CouldErrorResultBeUpdated\", function () {",
											"            pm.expect(errorObject).to.be.an(\"object\");",
											"            pm.expect(validationErrorResults).to.be.an(\"array\");",
											"        });",
											"    }",
											"}",
											"",
											"pm.environment.set(\"UpdateErrorResults\", UPDATE_ERROR_RESULTS.toString());",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											" * Self Testing Functions",
											" ****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CommentingResponse()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "432a8d76-5cca-416d-8880-da3ab0510d19",
										"exec": [
											"console.log(\"\\n--------------------Uploading Function for Commenting GET Responses-----------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of CommentingGetResponse()",
											"* ",
											"* Function for creating a result statement on the console.log based on the Response ",
											"* Code of a GET Request.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const COMMENTING_RESPONSE = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var controller = pm.environment.get(\"controller\");",
											"        var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
											"            ",
											"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
											"        var UpdateErrorResults = pm.environment.get(\"UpdateErrorResults\");",
											"            ",
											"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
											"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
											"        var positiveOutcome = pm.variables.get(\"positiveOutcome\");",
											"        var negativeOutcome = pm.variables.get(\"negativeOutcome\");",
											"        var response = pm.variables.get(\"response\");",
											"        CouldInputForCommentingResponseBeLoaded(controller, indexOfDeviceUnderTest,",
											"                                                            technologyUnderTest,",
											"                                                            classUnderTest,",
											"                                                            attributeUnderTest,",
											"                                                            positiveOutcome,",
											"                                                            negativeOutcome,",
											"                                                            response",
											"                                                );",
											"    } catch (error) {",
											"        CouldInputForCommentingResponseBeLoaded();",
											"    }",
											"        ",
											"    // Typing the comment",
											"    try {",
											"        let nameOfTheDeviceUnderTest = controller.nodeList[indexOfDeviceUnderTest].nodeId;",
											"        let objectUnderTest = technologyUnderTest + \"-\" + classUnderTest;",
											"        let responseCode = parseInt(response.code);",
											"        if (attributeUnderTest!==\"\") {",
											"            objectUnderTest = objectUnderTest",
											"                                + \"::\"",
											"                                + attributeUnderTest;",
											"        }",
											"        ",
											"        if (Math.floor(responseCode/100) === 2) {",
											"            console.log(objectUnderTest + \" at \" + nameOfTheDeviceUnderTest + positiveOutcome);",
											"        } else {",
											"            console.log(\" ERROR: \" + objectUnderTest + \" at \" + nameOfTheDeviceUnderTest ",
											"                                + negativeOutcome + \" Response Code: \" + pm.response.code);",
											"        }",
											"        CouldCommentBeComposedandPrinted(nameOfTheDeviceUnderTest, objectUnderTest);",
											"    } catch (error) {",
											"        CouldCommentBeComposedandPrinted();",
											"    }",
											"        ",
											"    // Self Testing Functions",
											"    function CouldInputForCommentingResponseBeLoaded(controller, indexOfDeviceUnderTest,",
											"                                                            technologyUnderTest,",
											"                                                            classUnderTest,",
											"                                                            attributeUnderTest,",
											"                                                            positiveOutcome,",
											"                                                            negativeOutcome,",
											"                                                            response) {",
											"        pm.test(\"CouldEnvironmentForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(controller).to.be.a(\"object\");",
											"        });",
											"        pm.test(\"CouldIndexOfDeviceForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"CouldTechnologyUnderTestForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
											"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldClassUnderTestForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(classUnderTest).to.be.a(\"string\");",
											"            pm.expect(classUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldAttributeUnderTestForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldPositiveOutcomeForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(positiveOutcome).to.be.a(\"string\");",
											"            pm.expect(positiveOutcome).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldNegativeOutcomeForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(negativeOutcome).to.be.a(\"string\");",
											"            pm.expect(negativeOutcome).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldResponseForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(response).to.be.a(\"object\");",
											"        });",
											"    }",
											"",
											"    function CouldCommentBeComposedandPrinted(nameOfTheDeviceUnderTest, objectUnderTest) {",
											"        pm.test(\"CouldCommentBeComposedandPrinted\", function () {",
											"            pm.expect(nameOfTheDeviceUnderTest).to.be.a(\"string\");",
											"            pm.expect(nameOfTheDeviceUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(objectUnderTest).to.be.a(\"string\");",
											"            pm.expect(objectUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"CommentingResponse\", COMMENTING_RESPONSE.toString() );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											" * Self Testing Functions",
											" ****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Completeness()",
					"item": [
						{
							"name": "RemoveAttributeFromRequired()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d70d56ba-4a27-4579-a947-a9c133ec1436",
										"exec": [
											"console.log(\"\\n----------------Uploading Function for Shortening the Reference Schema--------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of RemoveAttributeFromRequired()",
											"* ",
											"* Function for removing some attribute from the list of required attributes in the ",
											"* reference schema.",
											"* ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const REMOVE_ATTRIBUTE_FROM_REQUIRED = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var schemaToBeShortened = pm.variables.get(\"schemaToBeShortened\");",
											"        var unRequiredAttribute = pm.variables.get(\"unRequiredAttribute\");",
											"        CouldInputForRemoveAttributeFromRequiredBeLoaded(schemaToBeShortened, unRequiredAttribute);",
											"    } catch (error) {",
											"        CouldInputForRemoveAttributeFromRequiredBeLoaded();",
											"    }",
											"        ",
											"    // Removing the Attribute from Required",
											"    try {",
											"        unRequiredAttribute = '\"' + unRequiredAttribute + '\"';",
											"        let schemaString = JSON.stringify(schemaToBeShortened);",
											"        let indexOfStartOfSubStringToBeDeleted = schemaString.lastIndexOf(unRequiredAttribute);",
											"        let precedingSubString = schemaString.slice(0, indexOfStartOfSubStringToBeDeleted);",
											"        const COMMA = 1;",
											"        let indexOfEndOfSubStringToBeDeleted = indexOfStartOfSubStringToBeDeleted + unRequiredAttribute.length + COMMA;",
											"        let subsequentSubString = schemaString.slice(indexOfEndOfSubStringToBeDeleted);",
											"        schemaString = precedingSubString + subsequentSubString;",
											"        var shortenedSchema = JSON.parse(schemaString);",
											"        CouldTheAttributeBeRemovedFromRequired(shortenedSchema);",
											"    } catch (error) {",
											"        CouldTheAttributeBeRemovedFromRequired();",
											"    }    ",
											"        ",
											"    // Provided Output Parameters",
											"    pm.variables.set(\"shortenedSchema\", shortenedSchema);",
											"    ",
											"    // Self Testing Functions",
											"    function CouldInputForRemoveAttributeFromRequiredBeLoaded(schemaToBeShortened, unRequiredAttribute) {",
											"        pm.test(\"CouldInputForRemoveAttributeFromRequiredBeLoaded\", function () {",
											"            pm.expect(schemaToBeShortened).to.be.a(\"object\");",
											"            pm.expect(unRequiredAttribute).to.be.a(\"string\");",
											"            pm.expect(unRequiredAttribute).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"    ",
											"    function CouldTheAttributeBeRemovedFromRequired(shortenedSchema) {",
											"        pm.test(\"CouldTheAttributeBeRemovedFromRequired\", function () {",
											"            pm.expect(shortenedSchema).to.be.an(\"object\");",
											"        });",
											"    }    ",
											"};",
											"pm.environment.set( \"RemoveAttributeFromRequired\", REMOVE_ATTRIBUTE_FROM_REQUIRED.toString() );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											" * Self Testing Functions",
											" ****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ValidatingCompleteness()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "26fd8045-c31a-4294-9d5d-ef12ae5a127d",
										"exec": [
											"console.log(\"\\n---------------------Uploading Function for Validating Completeness-----------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of ValidatingCompleteness()",
											"* ",
											"* Function for Validating the uploaded device response against a reference schema.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const VALIDATING_COMPLETENESS = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var controller = pm.environment.get(\"controller\");",
											"        var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
											"        var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
											"        var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
											"        var UpdateErrorResults = pm.environment.get(\"UpdateErrorResults\");",
											"            ",
											"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
											"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
											"",
											"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
											"        var reference = pm.variables.get(\"schema\");",
											"        var response = pm.variables.get(\"response\");",
											"        CouldInputForValidatingCompletenessBeLoaded(controller, mantisInterfaceStatus, ",
											"                                                        indexOfDeviceUnderTest, ",
											"                                                        moduleUnderTest, ",
											"                                                        technologyUnderTest, ",
											"                                                        PrintMantisIssuesForTechnologyAndClass, ",
											"                                                        classUnderTest, ",
											"                                                        reference,",
											"                                                        response);",
											"    } catch (error) {",
											"        CouldInputForValidatingCompletenessBeLoaded();",
											"    }",
											"",
											"    // Validating Completeness",
											"    try {",
											"        var nameOfTheDeviceUnderTest = controller.nodeList[indexOfDeviceUnderTest].nodeId;",
											"        var objectUnderTest = technologyUnderTest + \"-\" + classUnderTest;",
											"        CouldLocalVariablesBeRetrieved(nameOfTheDeviceUnderTest, objectUnderTest);",
											"    } catch (error) {",
											"        CouldLocalVariablesBeRetrieved();",
											"    }",
											"        ",
											"    try {",
											"        if (response.code == 200) {",
											"            var objectInclHeadline = response.json();",
											"            var object = objectInclHeadline[moduleUnderTest + \":\" + technologyUnderTest + \"-\" + classUnderTest];",
											"            console.log(objectUnderTest + \" at \" + nameOfTheDeviceUnderTest + \" could be retrieved:\");",
											"            console.log(object);",
											"            ",
											"            console.log(objectUnderTest + \" Reference:\");               ",
											"            console.log(reference);                                     ",
											"            ",
											"            console.log(objectUnderTest + \" at \" + nameOfTheDeviceUnderTest + \" Validation Result: \");",
											"            ",
											"            /*======================Update Testcase Error results=========================*/",
											"            let testResult = tv4.validateMultiple(object, reference, true, true);",
											"\t\t\tconsole.log(testResult);",
											"\t\t\t",
											"            if (testResult.valid === false) {",
											"                pm.variables.set(\"responseCode\", response.code);",
											"                pm.variables.set(\"response\", objectInclHeadline);",
											"",
											"\t\t\t\tfor(let eIndex=0; eIndex < testResult.errors.length; eIndex++) {",
											"                    pm.variables.set(\"errorMessage\", testResult.errors[eIndex].message);",
											"                    pm.variables.set(\"errorDescription\", testResult.errors[eIndex].name);",
											"                    eval(UpdateErrorResults)();",
											"\t\t\t\t}",
											"\t\t\t\tCouldUpdateErrorResultsBeSuccessfullyCalled(true);",
											"\t\t\t}",
											"\t\t\t/*==============================End code=====================================*/",
											"            ",
											"        } else {",
											"            console.log(\" ERROR: \" + objectUnderTest + \" at \" + nameOfTheDeviceUnderTest ",
											"                            + \" could not be retrieved. Response Code: \" + response.code);",
											"        }",
											"        CouldValidationBeExecuted(true);",
											"    } catch (error) {",
											"        CouldValidationBeExecuted(false);",
											"    }",
											"        ",
											"    try {",
											"        if (mantisInterfaceStatus===\"read-only\") {",
											"            eval(PrintMantisIssuesForTechnologyAndClass)();",
											"            CouldMantisIssuesBeListed(true);",
											"        }",
											"    } catch (error) {",
											"        CouldMantisIssuesBeListed(false);",
											"    }",
											"    ",
											"    // Self Testing Functions",
											"    function CouldInputForValidatingCompletenessBeLoaded(controller, mantisInterfaceStatus, ",
											"                                                            indexOfDeviceUnderTest, ",
											"                                                            moduleUnderTest, ",
											"                                                            technologyUnderTest, ",
											"                                                            PrintMantisIssuesForTechnologyAndClass, ",
											"                                                            classUnderTest, ",
											"                                                            reference,",
											"                                                            response) {",
											"        pm.test(\"CouldControllerBeLoaded\", function () {",
											"            pm.expect(controller).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldMantisInterfaceStatusBeLoaded\", function () {",
											"            pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
											"        });",
											"        pm.test(\"CouldIndexOfDeviceUnderTestBeLoaded\", function () {            ",
											"            pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"CouldModuleUnderTestBeLoaded\", function () {            ",
											"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
											"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
											"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
											"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldPrintMantisIssuesForTechnologyAndClassBeLoaded\", function () {",
											"            pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
											"            pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
											"            pm.expect(classUnderTest).to.be.a(\"string\");",
											"            pm.expect(classUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldReferenceBeLoaded\", function () {",
											"            pm.expect(reference).to.be.a(\"object\");",
											"            pm.expect(response).to.be.a(\"object\");",
											"        });",
											"    }",
											"        ",
											"    function CouldLocalVariablesBeRetrieved(nameOfTheDeviceUnderTest, objectUnderTest) {",
											"        pm.test(\"CouldLocalVariablesBeRetrieved\", function () {",
											"            pm.expect(nameOfTheDeviceUnderTest).to.be.a(\"string\");",
											"            pm.expect(nameOfTheDeviceUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(objectUnderTest).to.be.a(\"string\");",
											"            pm.expect(objectUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"    ",
											"    function CouldUpdateErrorResultsBeSuccessfullyCalled(success) {",
											"        pm.test(\"CouldUpdateErrorResultsBeSuccessfullyCalled\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"    ",
											"    function CouldValidationBeExecuted(success) {",
											"        pm.test(\"CouldValidationBeExecuted\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"        ",
											"    function CouldMantisIssuesBeListed(success) {",
											"        pm.test(\"CouldMantisIssuesBeListed\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"ValidatingCompleteness\", VALIDATING_COMPLETENESS.toString() );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											" * Self Testing Functions",
											" ****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Configuration()",
					"item": [
						{
							"name": "PreRequestOfWriting()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "763bd852-8464-4ed2-80a2-6aefeb51d3c5",
										"exec": [
											"console.log(\"\\n-----------Defining standard Pre-Request for Writing in Configuration Validation----------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of PreRequestOfWriting()",
											"* ",
											"* Entire Pre-Request Script of the Writing Request in all Configuration Validations.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const PRE_REQUEST_OF_WRITING = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        pm.variables.clear();",
											"",
											"        var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
											"",
											"        var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
											"",
											"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
											"        var capability = pm.collectionVariables.get(\"capability\");",
											"        var configuration = pm.collectionVariables.get(\"configuration\");",
											"        var status = pm.collectionVariables.get(\"status\");",
											"        var attributes = pm.collectionVariables.get(\"attributes\");",
											"",
											"        CouldInputBeLoaded(indexOfAttributeUnderTest,",
											"            SettingTheRequestVariables,",
											"            moduleUnderTest,",
											"            capability,",
											"            configuration,",
											"            status,",
											"            attributes",
											"        );",
											"    } catch (error) {",
											"        CouldInputBeLoaded(indexOfAttributeUnderTest);",
											"    }",
											"",
											"    // CASE SPECIFIC Parameters",
											"    try {",
											"        eval(attributes[indexOfAttributeUnderTest].CreatingDummyValueAsaString);",
											"        CouldCreatingDummyValueBeExecuted(indexOfAttributeUnderTest, true);",
											"    } catch (error) {",
											"        CouldCreatingDummyValueBeExecuted(indexOfAttributeUnderTest, false);",
											"    }",
											"",
											"    // Determining the Request Body",
											"    try {",
											"        var CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
											"        // \"status\", \"current-problems\", \"current-performance\" ",
											"        // or \"historical-performances\"",
											"",
											"        var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
											"        var FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
											"        var FILTERED_FIELDS = \"\";",
											"        var requestBody = '{ \"'",
											"            + moduleUnderTest",
											"            + ':'",
											"            + ATTRIBUTE_UNDER_TEST",
											"            + '\": ';",
											"        if (typeof dummyValue === \"string\") {",
											"            requestBody = requestBody",
											"                + '\"'",
											"                + dummyValue",
											"                + '\" }';",
											"        } else {",
											"            requestBody = requestBody",
											"                + dummyValue",
											"                + ' }';",
											"        }",
											"        AreValuesOfInputParametersCorrect(ATTRIBUTE_UNDER_TEST,",
											"            CLASS_UNDER_TEST,",
											"            DATATYPE_UNDER_TEST,",
											"            KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST,",
											"            CONTENT_TYPE,",
											"            FILTER_DEPTH,",
											"            FILTERED_FIELDS,",
											"            requestBody",
											"        );",
											"    } catch (error) {",
											"        AreValuesOfInputParametersCorrect(ATTRIBUTE_UNDER_TEST);",
											"    }",
											"",
											"    // Setting Local Variables and Calling for Preparation of the Request",
											"    pm.variables.clear();",
											"",
											"    let dummyValueString = JSON.stringify(dummyValue);",
											"    console.log(\"DummyValue: \" + dummyValueString);",
											"",
											"    pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
											"    pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
											"    pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
											"    pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
											"    pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
											"    pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
											"    pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
											"    pm.variables.set(\"requestBody\", requestBody);",
											"    pm.variables.set(\"dummyValueString\", dummyValueString);",
											"",
											"    try {",
											"        eval(SettingTheRequestVariables)();",
											"        CouldFunctionForSettingTheRequestVariablesBeCalled(ATTRIBUTE_UNDER_TEST, true);",
											"    } catch (error) {",
											"        CouldFunctionForSettingTheRequestVariablesBeCalled(ATTRIBUTE_UNDER_TEST, false);",
											"    }",
											"",
											"    pm.collectionVariables.set(\"requestBodyForMantis\", requestBody);  //Storing request body for Mantis",
											"    pm.variables.set(\"requestUriForMantis\", pm.variables.get(\"uri\"));  //Mantis purpose storing request uri",
											"    CouldTheDataBeStoredForMantis();",
											"",
											"    //Self Testing Functions",
											"    function CouldInputBeLoaded(indexOfAttributeUnderTest,",
											"        SettingTheRequestVariables,",
											"        moduleUnderTest,",
											"        capability,",
											"        configuration,",
											"        status,",
											"        attributes) {",
											"        pm.test(\"CouldIndexOfAttributeUnderTestBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"CouldSettingTheRequestVariablesBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
											"            pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldModuleUnderTestBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
											"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldCapabilityBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(capability).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldConfigurationBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(configuration).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldStatusBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(status).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldAttributesBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(attributes).to.be.an(\"array\");",
											"        });",
											"    }",
											"",
											"    function CouldCreatingDummyValueBeExecuted(location, success) {",
											"        pm.test(\"CouldCreatingDummyValueBeExecuted (\" + location + \")\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"",
											"    function AreValuesOfInputParametersCorrect(attributeUnderTest,",
											"        classUnderTest,",
											"        datatypeUnderTest,",
											"        keysOfDatatypeInstanceUnderTest,",
											"        contentType,",
											"        filteredDepth,",
											"        filteredFields,",
											"        requestBody) {",
											"        pm.test(\"IsValueOfAttributeUnderTestCorrect (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"            pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"IsValueOfClassUnderTestCorrect (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
											"                \"current-problems\", \"current-performance\",",
											"                \"historical-performances\"]);",
											"        });",
											"        pm.test(\"IsValueOfDatatypeUnderTestCorrect (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(datatypeUnderTest).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
											"        });",
											"        pm.test(\"IsValueOfContentTypeCorrect (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
											"        });",
											"        pm.test(\"IsValueOfFilteredDepthCorrect (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(filteredDepth).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"IsValueOfFilteredFieldsCorrect (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(filteredFields).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"IsValueOfRequestBodyCorrect (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(requestBody).to.be.a(\"string\");",
											"            pm.expect(requestBody).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"",
											"    function CouldFunctionForSettingTheRequestVariablesBeCalled(location, success) {",
											"        pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled (\" + location + \")\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"};",
											"pm.environment.set(\"PreRequestOfWritingAsaString\", ConvertingThisFunctionToString(PRE_REQUEST_OF_WRITING));",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"function ConvertingThisFunctionToString(functionToBeConverted) {",
											"    let functionAsAString = String(functionToBeConverted);",
											"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
											"    return functionAsAString.slice(indexOfFirstCurly);",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Self Testing Functions",
											"****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheDataBeStoredForMantis() {",
											"    pm.test(\"CouldTheDataBeStoredForMantis\", function () {",
											"        pm.expect(pm.variables.get(\"requestBodyForMantis\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"requestBodyForMantis\")).to.not.have.lengthOf(0);",
											"        pm.expect(pm.variables.get(\"requestUriForMantis\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"requestUriForMantis\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PreRequestOfReading()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "29c7842a-fc57-4830-9c98-16ae182f3755",
										"exec": [
											"console.log(\"\\n-----------Defining standard Pre-Request for Reading in Configuration Validation----------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of PreRequestOfReading()",
											"* ",
											"* Entire Pre-Request Script of the Reading Request in all Configuration Validations.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"        ",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const PRE_REQUEST_OF_READING = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
											"        CouldInputBeLoaded(SettingTheRequestVariables);",
											"    } catch (error) {",
											"        CouldInputBeLoaded();",
											"    }",
											"        ",
											"    // Setting Local Variables and Calling for Preparation of the Request",
											"    const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
											"    const REQUEST_BODY = \"\";",
											"        ",
											"    AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
											"        ",
											"    pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
											"    pm.variables.set(\"requestBody\", REQUEST_BODY);",
											"        ",
											"    try {",
											"        eval(SettingTheRequestVariables)();",
											"        CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
											"    } catch (error) {",
											"        CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
											"    }",
											"        ",
											"    // Self Testing Functions",
											"    function CouldInputBeLoaded(SettingTheRequestVariables) {",
											"        pm.test(\"CouldInputBeLoaded\", function () {",
											"            pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
											"            pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"        ",
											"    function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
											"        pm.test(\"IsValueOfContentTypeCorrect\", function() {",
											"            pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
											"        });",
											"        pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
											"            pm.expect(requestBody).to.be.a(\"string\");",
											"        });",
											"    }",
											"        ",
											"    function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
											"        pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"PreRequestOfReadingAsaString\", ConvertingThisFunctionToString(PRE_REQUEST_OF_READING) );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"function ConvertingThisFunctionToString(functionToBeConverted) {",
											"    let functionAsAString = String(functionToBeConverted);",
											"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
											"    return functionAsAString.slice(indexOfFirstCurly);",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Self Testing Functions",
											"****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PostRequestOfReading()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "65460db5-a58b-40de-8465-9d37b727c20a",
										"exec": [
											"console.log(\"\\n----------Defining standard Post-Request for Reading in Configuration Validation----------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of PostRequestOfReading()",
											"* ",
											"* Entire Post-Request Script of the Reading Request in all Configuration Validations.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"        ",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const POST_REQUEST_OF_READING = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
											"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
											"        CouldInputForGetResultValueBeLoaded(attributeUnderTest, moduleUnderTest);",
											"    } catch (error) {",
											"        CouldInputForGetResultValueBeLoaded();",
											"    }",
											"        ",
											"    // Retrieving ResultValue",
											"    try {",
											"        let response = pm.response;",
											"            ",
											"        var responseCode = parseInt(response.code);",
											"            ",
											"        let responseBody = JSON.parse(response.stream);",
											"        let completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
											"        let responseValue = responseBody[completeAttributeName];",
											"        var responseValueString = JSON.stringify(responseValue);",
											"        console.log(\"ResultValue: \" + responseValueString);",
											"            ",
											"        CouldResponseBeRetrieved(attributeUnderTest, responseValueString, responseCode);",
											"    } catch (error) {",
											"        CouldResponseBeRetrieved(attributeUnderTest, responseValueString, responseCode);",
											"    }",
											"        ",
											"    // Setting Local Variables",
											"    pm.variables.set(\"resultValueString\", responseValueString);",
											"    pm.variables.set(\"resultCode\", responseCode);",
											"        ",
											"    // Self Testing Functions",
											"    function CouldInputForGetResultValueBeLoaded(attributeUnderTest, moduleUnderTest) {",
											"        pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"            pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldModuleUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
											"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"        ",
											"    function CouldResponseBeRetrieved(location, responseValueString, responseCode) {",
											"        pm.test(\"CouldResponseValueStringBeRetrieved (\" + location + \")\", function () {",
											"            pm.expect(responseValueString).to.be.a(\"string\");",
											"            pm.expect(responseValueString).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldResponseCodeBeRetrieved (\" + location + \")\", function () {",
											"            pm.expect(responseCode).to.be.a(\"number\");",
											"        });",
											"    }   ",
											"};",
											"pm.environment.set( \"PostRequestOfReadingAsaString\", ConvertingThisFunctionToString(POST_REQUEST_OF_READING) );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"function ConvertingThisFunctionToString(functionToBeConverted) {",
											"    let functionAsAString = String(functionToBeConverted);",
											"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
											"    return functionAsAString.slice(indexOfFirstCurly);",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Self Testing Functions",
											"****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PreRequestOfEvaluating()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c21a25b9-03df-4873-a2c7-eb0446c31f66",
										"exec": [
											"console.log(\"\\n---------Defining standard Pre-Request for Evaluating in Configuration Validation---------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of PreRequestOfEvaluating()",
											"* ",
											"* Entire Pre-Request Script of the Evaluating Request in all Configuration Validations.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"        ",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const PRE_REQUEST_OF_EVALUATING = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
											"            ",
											"        var dummyUri = pm.environment.get(\"dummyUri\");",
											"        var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
											"        var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
											"        var UpdateErrorResults = pm.environment.get(\"UpdateErrorResults\");",
											"        ",
											"        var responseCodeForOperationFailed = pm.collectionVariables.get(\"responseCodeForOperationFailed\");",
											"        var capability = pm.collectionVariables.get(\"capability\");",
											"        var configuration = pm.collectionVariables.get(\"configuration\");",
											"        var status = pm.collectionVariables.get(\"status\");",
											"        var attributes = pm.collectionVariables.get(\"attributes\");",
											"        var indexOfAttributeUnderTest =  pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
											"        var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
											"            ",
											"        var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
											"        var keysOfDatatypeInstanceUnderTest = pm.variables.get(\"keysOfDatatypeInstanceUnderTest\");",
											"            ",
											"        var dummyValueString = pm.variables.get(\"dummyValueString\");",
											"        var dummyCode = pm.variables.get(\"dummyCode\");",
											"        var dummyErrorMessage = pm.variables.get(\"dummyErrorMessage\"); ",
											"        var resultValueString = pm.variables.get(\"resultValueString\");",
											"        var resultCode = pm.variables.get(\"resultCode\");",
											"            ",
											"        if ( (datatypeUnderTest===undefined) || (datatypeUnderTest===\"\") ) {",
											"            var NameOfAttributeUnderTest = attributeUnderTest;",
											"        } else {",
											"            var NameOfAttributeUnderTest = datatypeUnderTest + \"/\" + attributeUnderTest;",
											"        }",
											"    } catch (error) { }",
											"    CouldTheInputBeLoaded(attributeUnderTest,",
											"                            dummyUri, ",
											"                            mantisInterfaceStatus, ",
											"                            PrintMantisIssuesForTechnologyAndClass,",
											"                            responseCodeForOperationFailed,",
											"                            capability,",
											"                            configuration,",
											"                            status,",
											"                            attributes,",
											"                            indexOfAttributeUnderTest,",
											"                            configurationValidationResults,",
											"                            datatypeUnderTest,",
											"                            keysOfDatatypeInstanceUnderTest,",
											"                            dummyValueString,",
											"                            dummyCode,",
											"                            dummyErrorMessage,",
											"                            resultValueString,",
											"                            resultCode,",
											"                            NameOfAttributeUnderTest",
											"                         );",
											"        ",
											"    // CASE SPECIFIC Parameters",
											"    try {",
											"        var aCaseSpecificEvaluationHasBeenDefined;",
											"        if ( attributes[indexOfAttributeUnderTest].EvaluatingResultAsaString === \"{}\" ) {",
											"            aCaseSpecificEvaluationHasBeenDefined = false;",
											"        } else {",
											"            aCaseSpecificEvaluationHasBeenDefined = true;",
											"        }",
											"        ",
											"        var defaultValueString = \"\";",
											"        try {",
											"            defaultValueString ",
											"                = JSON.stringify(attributes[indexOfAttributeUnderTest].defaultValueForStandardEvaluation);",
											"        } catch (error) { }",
											"        ",
											"        var capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
											"        var capabilitiesAreIndicatingThatFeatureNotSupported = true;",
											"        try {",
											"            capabilityAttributeToBeFalseIfFeatureNotSupported ",
											"                = attributes[indexOfAttributeUnderTest].capabilityAttributeToBeFalseIfFeatureNotSupported;",
											"                ",
											"            console.log(\"capabilityAttributeToBeFalseIfFeatureNotSupported: \" + capabilityAttributeToBeFalseIfFeatureNotSupported);  // for debugging only",
											"            ",
											"            if ( capabilityAttributeToBeFalseIfFeatureNotSupported !== \"\" ) {",
											"                if ( capability[capabilityAttributeToBeFalseIfFeatureNotSupported] === false) {",
											"                    capabilitiesAreIndicatingThatFeatureNotSupported = true;",
											"                } else {",
											"                    capabilitiesAreIndicatingThatFeatureNotSupported = false;",
											"                }",
											"            }",
											"        } catch (error) { }",
											"            ",
											"        if ( aCaseSpecificEvaluationHasBeenDefined === true ) {",
											"            ",
											"            console.log(\"case specific evaluation is available for \" + NameOfAttributeUnderTest);       // for debugging only",
											"            ",
											"            eval(attributes[indexOfAttributeUnderTest].EvaluatingResultAsaString);",
											"            ",
											"        } else {",
											"            ",
											"            console.log(\"standard evaluation will be executed for \" + NameOfAttributeUnderTest);       // for debugging only",
											"            ",
											"            if ( Math.floor(resultCode/100) === 2 ) {",
											"                ",
											"                if ( (Math.floor(dummyCode/100)===2) && (resultValueString===dummyValueString) ) {",
											"                    configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
											"                    ",
											"                } else if ( dummyCode === responseCodeForOperationFailed ) {",
											"console.log(\"ErrorMessageIsIndicatingANotSupported(dummyErrorMessage): \" + ErrorMessageIsIndicatingANotSupported(dummyErrorMessage));       // for debugging only",
											"console.log(\"capabilitiesAreIndicatingThatFeatureNotSupported: \" + capabilitiesAreIndicatingThatFeatureNotSupported);       // for debugging only",
											"console.log(\"resultValueString===defaultValueString: \" + (resultValueString===defaultValueString));       // for debugging only",
											"                    if ( (ErrorMessageIsIndicatingANotSupported(dummyErrorMessage)===true) ",
											"                            && (capabilitiesAreIndicatingThatFeatureNotSupported===true)",
											"                            && (resultValueString===defaultValueString) ) {",
											"                        configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
											"                        ",
											"                    } else if ( ErrorMessageIsIndicatingADummyOutOfRange(dummyErrorMessage) === true ) {",
											"                        configurationValidationResults[NameOfAttributeUnderTest] = \"dummyValue out of hardware range\";",
											"                        ",
											"                    } else if ( ErrorMessageIsIndicatingAContradictingDummy(dummyErrorMessage) === true ) {",
											"                        configurationValidationResults[NameOfAttributeUnderTest] = \"dummyValue contradicts existing configuration\";",
											"                        ",
											"                    } else {",
											"                        configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable on application layer\";",
											"                    }",
											"                    ",
											"                } else {",
											"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable on server layer\";",
											"                }",
											"                ",
											"            } else {",
											"                configurationValidationResults[NameOfAttributeUnderTest] = \"not existing\";",
											"            }",
											"        }",
											"        ",
											"        if(configurationValidationResults[NameOfAttributeUnderTest] !== \"ok\") {",
											"            if(configurationValidationResults[NameOfAttributeUnderTest]) {",
											"                pm.variables.set(\"responseCode\", dummyCode);",
											"                pm.variables.set(\"errorMessage\", configurationValidationResults[NameOfAttributeUnderTest]);",
											"                pm.variables.set(\"errorDescription\", \"Error in Configuration of \" + attributeUnderTest);",
											"                eval(UpdateErrorResults)();",
											"                CouldUpdateErrorResultsBeSuccessfullyCalled(true);",
											"            }",
											"        }",
											"            ",
											"        CouldResultEvaluationBeExecuted(attributeUnderTest, ",
											"                                            resultCode, ",
											"                                            dummyCode, ",
											"                                            resultValueString, ",
											"                                            dummyValueString,",
											"                                            dummyErrorMessage,",
											"                                            defaultValueString, ",
											"                                            configurationValidationResults[NameOfAttributeUnderTest]",
											"                                        );",
											"    } catch (error) {",
											"        CouldResultEvaluationBeExecuted(attributeUnderTest);",
											"    }   ",
											"    ",
											"    function CouldUpdateErrorResultsBeSuccessfullyCalled(success) {",
											"        pm.test(\"CouldUpdateErrorResultsBeSuccessfullyCalled\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"        ",
											"    // console.log",
											"    console.log(\"EvaluationResult: \" + configurationValidationResults[NameOfAttributeUnderTest]);",
											"        ",
											"    try {",
											"        if (mantisInterfaceStatus===\"read-only\") {",
											"            eval(PrintMantisIssuesForTechnologyAndClass)();",
											"            CouldMantisIssuesBeListed(attributeUnderTest, true);",
											"        }",
											"    } catch (error) {",
											"        CouldMantisIssuesBeListed(attributeUnderTest, false);",
											"    }",
											"        ",
											"    // Output provided to the Collection Variables",
											"    pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
											"        ",
											"    // Setting up Local Variables and Preparing the Request",
											"    try {",
											"        pm.variables.set(\"uri\", dummyUri);",
											"        pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"        CouldTheRequestBePrepared(attributeUnderTest, true);",
											"    } catch (error) {",
											"        CouldTheRequestBePrepared(attributeUnderTest, false);",
											"    }",
											"    ",
											"    // Functions",
											"    function DistillingOnfErrorMessageFrom(dummyErrorMessage) {",
											"        let indexOfStartTag = dummyErrorMessage.indexOf(\"#[onf:\");",
											"        let indexOfEndTag = dummyErrorMessage.indexOf(\"]#\");",
											"        return dummyErrorMessage.slice(indexOfStartTag+6, indexOfEndTag);",
											"    }",
											"        ",
											"    function ErrorMessageIsIndicatingANotSupported(dummyErrorMessage) {",
											"        ",
											"        return true;            // to be deleted after 20th of May 2020",
											"        ",
											"        onfErrorMessage = DistillingOnfErrorMessageFrom(dummyErrorMessage);",
											"        if ( onfErrorMessage === \"Attribute/feature not supported by the hardware.\" ) {",
											"            return true;",
											"        } else {",
											"            return false;",
											"        }",
											"    }",
											"        ",
											"    function ErrorMessageIsIndicatingADummyOutOfRange() {",
											"        onfErrorMessage = DistillingOnfErrorMessageFrom(dummyErrorMessage);",
											"        if ( onfErrorMessage === \"Configuration value out of range of hardware capabilities.\" ) {",
											"            return true;",
											"        } else {",
											"            return false;",
											"        }",
											"    }",
											"        ",
											"    function ErrorMessageIsIndicatingAContradictingDummy() {",
											"        onfErrorMessage = DistillingOnfErrorMessageFrom(dummyErrorMessage);",
											"        if ( onfErrorMessage === \"Wished change contradicts existing configuration.\" ) {",
											"            return true;",
											"        } else {",
											"            return false;",
											"        }",
											"    }",
											"        ",
											"    // Self Testing Functions",
											"    function CouldTheInputBeLoaded(attributeUnderTest,",
											"                                        dummyUri, ",
											"                                        mantisInterfaceStatus, ",
											"                                        PrintMantisIssuesForTechnologyAndClass,",
											"                                        responseCodeForOperationFailed,",
											"                                        capability,",
											"                                        configuration,",
											"                                        status,",
											"                                        attributes,",
											"                                        indexOfAttributeUnderTest,",
											"                                        configurationValidationResults,",
											"                                        datatypeUnderTest,",
											"                                        keysOfDatatypeInstanceUnderTest,",
											"                                        dummyValueString,",
											"                                        dummyCode,",
											"                                        dummyErrorMessage,",
											"                                        resultValueString,",
											"                                        resultCode,",
											"                                        NameOfAttributeUnderTest) {",
											"        pm.test(\"CouldTheAttributeUnderTestBeLoaded\", function () {",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"            pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTheDummyUriBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(dummyUri).to.be.a(\"string\");",
											"            pm.expect(dummyUri).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTheMantisInterfaceStatusBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
											"        });",
											"        pm.test(\"CouldPrintMantisIssuesForTechnologyAndClassBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
											"            pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTheResponseCodeForOperationFailedBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(responseCodeForOperationFailed).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"CouldTheCapabilityBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(capability).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldTheConfigurationBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(configuration).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldTheStatusBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(status).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldAttributesBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(attributes).to.be.an(\"array\");",
											"        }); ",
											"        pm.test(\"CouldIndexOfAttributeUnderTestBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
											"        });    ",
											"        pm.test(\"CouldTheConfigurationValidationResultsBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(configurationValidationResults).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldTheDatatypeUnderTestBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(datatypeUnderTest).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldTheKeysOfDatatypeInstanceUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(keysOfDatatypeInstanceUnderTest).to.be.an(\"array\");",
											"        });",
											"        pm.test(\"CouldTheDummyValueStringBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(dummyValueString).to.be.a(\"string\");",
											"            pm.expect(dummyValueString).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTheDummyCodeBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(dummyCode).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"CouldTheDummyErrorMessageBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(dummyErrorMessage).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldTheResultValueStringBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(resultValueString).to.be.a(\"string\");",
											"            pm.expect(resultValueString).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTheResultCodeBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(resultCode).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"CouldTheNameOfAttributeUnderTestBeCombined (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(NameOfAttributeUnderTest).to.be.a(\"string\");",
											"            pm.expect(NameOfAttributeUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"        ",
											"    function CouldResultEvaluationBeExecuted(location,",
											"                                                resultCode, ",
											"                                                dummyCode, ",
											"                                                resultValueString, ",
											"                                                dummyValueString, ",
											"                                                dummyErrorMessage,",
											"                                                defaultValueString, ",
											"                                                configurationValidationResult",
											"                                            ) {",
											"        pm.test(\"WasResultCodeAvailable (\" + location + \")\", function () {",
											"            pm.expect(resultCode).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"WasDummyCodeAvailable (\" + location + \")\", function () {",
											"            pm.expect(dummyCode).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"WasResultValueStringAvailable (\" + location + \")\", function () {",
											"            pm.expect(resultValueString).to.be.a(\"string\");",
											"            pm.expect(resultValueString).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"WasDummyValueStringAvailable (\" + location + \")\", function () {",
											"            pm.expect(dummyValueString).to.be.a(\"string\");",
											"            pm.expect(dummyValueString).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"WasDummyErrorMessageAvailable (\" + location + \")\", function () {            ",
											"            pm.expect(dummyErrorMessage).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"WasDefaultValueStringAvailable (\" + location + \")\", function () {            ",
											"            pm.expect(defaultValueString).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldConfigurationValidationResultBeCalculated (\" + location + \")\", function () {            ",
											"            pm.expect(configurationValidationResult).to.be.a(\"string\");",
											"            pm.expect(configurationValidationResult).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"        ",
											"    function CouldMantisIssuesBeListed(location, success) {",
											"        pm.test(\"CouldMantisIssuesBeListed (\" + location + \")\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"        ",
											"    function CouldTheRequestBePrepared(location, success) {",
											"        pm.test(\"CouldTheRequestBePrepared (\" + location + \")\", function () {",
											"            pm.expect(success).to.be.true;",
											"            pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"            pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"PreRequestOfEvaluatingAsaString\", ConvertingThisFunctionToString(PRE_REQUEST_OF_EVALUATING) );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"function ConvertingThisFunctionToString(functionToBeConverted) {",
											"    let functionAsAString = String(functionToBeConverted);",
											"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
											"    return functionAsAString.slice(indexOfFirstCurly);",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Self Testing Functions",
											"****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PreRequestOfRestoring()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "69678c2d-9eb4-44a2-a292-78dfc9d048e7",
										"exec": [
											"console.log(\"\\n----------Defining standard Pre-Request for Restoring in Configuration Validation---------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of PreRequestOfRestoring()",
											"* ",
											"* Entire Pre-Request Script of the Restoring Request in all Configuration Validations.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"        ",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const PRE_REQUEST_OF_RESTORING = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
											"            ",
											"        var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
											"            ",
											"        var configuration = pm.collectionVariables.get(\"configuration\");",
											"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
											"            ",
											"        var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
											"        var keysOfDatatypeInstanceUnderTest = pm.variables.get(\"keysOfDatatypeInstanceUnderTest\");",
											"            ",
											"        CouldInputBeLoaded(attributeUnderTest,",
											"                                SettingTheRequestVariables, ",
											"                                configuration, ",
											"                                moduleUnderTest,",
											"                                datatypeUnderTest,",
											"                                keysOfDatatypeInstanceUnderTest",
											"                           );",
											"    } catch (error) {",
											"        CouldInputBeLoaded(attributeUnderTest);",
											"    }",
											"        ",
											"    // Determining the Request Body",
											"    try {",
											"        var originalValue;",
											"        if ( (typeof datatypeUnderTest==\"undefined\") || (datatypeUnderTest===\"\") ) {",
											"            originalValue = configuration[attributeUnderTest];",
											"        } else {",
											"            let instanceIndexUnderTest = InstanceIndexOf(keysOfDatatypeInstanceUnderTest[0], datatypeUnderTest, configuration);",
											"            originalValue = configuration[datatypeUnderTest][instanceIndexUnderTest][attributeUnderTest];",
											"        }",
											"            ",
											"        var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
											"        var requestBody = '{ \"'",
											"                            + moduleUnderTest",
											"                            + ':'",
											"                            + attributeUnderTest",
											"                            + '\": ';",
											"        if (typeof originalValue === \"string\") {",
											"            requestBody = requestBody",
											"                            + '\"'",
											"                            + originalValue",
											"                            + '\" }';",
											"        } else {",
											"            requestBody = requestBody",
											"                            + originalValue",
											"                            + ' }'; ",
											"        }",
											"        AreValuesOfTheRequestBodyCorrect(attributeUnderTest, originalValue, CONTENT_TYPE, requestBody);",
											"    } catch (error) {",
											"        AreValuesOfTheRequestBodyCorrect(attributeUnderTest);",
											"    }",
											"        ",
											"    // Setting Local Variables and Calling for Preparation of the Request",
											"    pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
											"    pm.variables.set(\"requestBody\", requestBody);",
											"        ",
											"    try {",
											"        eval(SettingTheRequestVariables)();",
											"        CouldFunctionForSettingTheRequestVariablesBeCalled(attributeUnderTest, true);",
											"    } catch (error) {",
											"        CouldFunctionForSettingTheRequestVariablesBeCalled(attributeUnderTest, false);",
											"    }",
											"        ",
											"    // Functions",
											"    function InstanceIndexOf(keyValueOfInstanceUnderTest, datatypeUnderTest, configuration) {",
											"        for (let i=0; i<(configuration[datatypeUnderTest].length); i++) {",
											"            let sampleName = configuration[datatypeUnderTest][i][keyValueOfInstanceUnderTest.key];",
											"            if ( sampleName === keyValueOfInstanceUnderTest.value ) {",
											"                return i;",
											"            }",
											"        }",
											"    }",
											"        ",
											"    //Self Testing Functions",
											"    function CouldInputBeLoaded(attributeUnderTest,",
											"                                    SettingTheRequestVariables, ",
											"                                    configuration, ",
											"                                    moduleUnderTest,",
											"                                    datatypeUnderTest,",
											"                                    keysOfDatatypeInstanceUnderTest) {",
											"        pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"            pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldSettingTheRequestVariablesBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
											"            pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldConfigurationBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(configuration).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldModuleUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
											"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldDatatypeUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(datatypeUnderTest).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldKeysOfDatatypeInstanceUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(keysOfDatatypeInstanceUnderTest[0]).to.be.an(\"object\");",
											"        });",
											"    }",
											"        ",
											"    function AreValuesOfTheRequestBodyCorrect(location, originalValue, contentType, requestBody) {",
											"        pm.test(\"CouldTheOriginalValueBeRead (\" + location + \")\", function() {",
											"            pm.expect(originalValue).to.not.be.undefined;",
											"        });",
											"        pm.test(\"IsValueOfContentTypeCorrect (\" + location + \")\", function() {",
											"            pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
											"        });",
											"        pm.test(\"IsValueOfRequestBodyCorrect (\" + location + \")\", function() {",
											"            pm.expect(requestBody).to.be.a(\"string\");",
											"            pm.expect(requestBody).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"        ",
											"    function CouldFunctionForSettingTheRequestVariablesBeCalled(location, success) {",
											"        pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled (\" + location + \")\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"PreRequestOfRestoringAsaString\", ConvertingThisFunctionToString(PRE_REQUEST_OF_RESTORING) );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"function ConvertingThisFunctionToString(functionToBeConverted) {",
											"    let functionAsAString = String(functionToBeConverted);",
											"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
											"    return functionAsAString.slice(indexOfFirstCurly);",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Self Testing Functions",
											"****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UploadingInterfaceInformation()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a0b681ea-5d8b-4b29-8256-9a3d48e65134",
										"exec": [
											"console.log(\"\\n-----------------Uploading Function for Uploading Interface Information-------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of UploadingInterfaceInformation()",
											"* ",
											"* Defines code that is shared by UploadingInterfaceCapability and ",
											"* UploadingInterfaceConfiguration in the Tests script.",
											"*",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const UPLOADING_INTERFACE_INFORMATION = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
											"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
											"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
											"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
											"        var response = pm.variables.get(\"response\");",
											"        CouldInputForUploadingInterfaceInformationBeLoaded(moduleUnderTest, ",
											"                                                                technologyUnderTest, ",
											"                                                                CommentingResponse, ",
											"                                                                classUnderTest,",
											"                                                                response",
											"                                                            );",
											"    } catch (error) {",
											"        CouldInputForUploadingInterfaceInformationBeLoaded();",
											"    }",
											"    ",
											"    // Commenting the ResponseCode",
											"    pm.variables.set(\"positiveOutcome\", \" successfully uploaded.\");",
											"    pm.variables.set(\"negativeOutcome\", \" could not be retrieved.\");",
											"    try {",
											"        eval(CommentingResponse)();",
											"        CouldCommentingResponseBeSuccessfullyCalled(true);",
											"    } catch (error) {",
											"        CouldCommentingResponseBeSuccessfullyCalled(false);",
											"    }",
											"    ",
											"    // Extracting Uploaded Information",
											"    try {",
											"        let objectInclHeadline;",
											"        var objectWithoutHeadline;",
											"        if (response.code == 200) {",
											"            objectInclHeadline = response.json();",
											"            objectWithoutHeadline = objectInclHeadline[moduleUnderTest ",
											"                                                            + \":\" ",
											"                                                            + technologyUnderTest ",
											"                                                            + \"-\" ",
											"                                                            + classUnderTest",
											"                                                        ];",
											"        }",
											"        CouldInformationBeSuccessfullyUploaded(response.code, objectWithoutHeadline);",
											"    } catch (error) {",
											"        CouldInformationBeSuccessfullyUploaded();",
											"    }",
											"    ",
											"    // Provided Output Parameters",
											"    pm.collectionVariables.set(classUnderTest, objectWithoutHeadline);",
											"        ",
											"    // Self Testing Functions",
											"    function CouldInputForUploadingInterfaceInformationBeLoaded(moduleUnderTest, ",
											"                                                                technologyUnderTest, ",
											"                                                                CommentingResponse, ",
											"                                                                classUnderTest,",
											"                                                                response) {",
											"        pm.test(\"CouldModuleUnderTestForUploadingInterfaceInformationBeLoaded\", function () {",
											"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
											"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTechnologyUnderTestForUploadingInterfaceInformationBeLoaded\", function () {",
											"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
											"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldCommentingResponseForUploadingInterfaceInformationBeLoaded\", function () {",
											"            pm.expect(CommentingResponse).to.be.a(\"string\");",
											"            pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldClassUnderTestForUploadingInterfaceInformationBeLoaded\", function () {",
											"            pm.expect(classUnderTest).to.be.a(\"string\");",
											"            pm.expect(classUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldResponseForUploadingInterfaceInformationBeLoaded\", function () {",
											"            pm.expect(response).to.be.a(\"object\");",
											"        });",
											"    }",
											"        ",
											"    function CouldCommentingResponseBeSuccessfullyCalled(success) {",
											"        pm.test(\"CouldCommentingResponseBeSuccessfullyCalled\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"    ",
											"    function CouldInformationBeSuccessfullyUploaded(responseCode, response) {",
											"        pm.test(\"CouldInformationBeSuccessfullyUploaded\", function () {",
											"            pm.expect(responseCode).to.equal(200);",
											"            pm.expect(response).to.be.a(\"object\");",
											"        });",
											"    }    ",
											"};",
											"pm.environment.set( \"UploadingInterfaceInformation\", UPLOADING_INTERFACE_INFORMATION.toString() );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											" * Self Testing Functions",
											" ****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f688d735-122f-41f6-8646-f4549e4a4e71",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "6856c1fe-e926-43e0-97d3-b5f91f6a1e02",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "EnvironmentInformationLoading",
			"item": [
				{
					"name": "StartPointDeviceTesting",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6d9dd04d-7111-4bb6-ab46-1334b66a8ce9",
								"exec": [
									"console.log(\"\\n######################## StartingPoint of Validation of a Device #########################\");",
									"/****************************************************************************************",
									"* ",
									"* StartPoint",
									"* ",
									"* Manages the number of iterations over several devices in the environment",
									"* ",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var multiplicityOfDeviceIterations = pm.environment.get(\"multiplicityOfDeviceIterations\");",
									"    var controller = pm.environment.get(\"controller\");",
									"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, multiplicityOfDeviceIterations, dummyUri);",
									"} catch (error) {",
									"    CouldTheInputBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Displaying ",
									"****************************************************************************************/",
									"try {",
									"    var numberOfExistingDevices = controller.nodeList.length;",
									"    var maximumIndexOfDeviceUnderTest;",
									"    switch (multiplicityOfDeviceIterations) {",
									"        case \"none\":",
									"            maximumIndexOfDeviceUnderTest = -1;",
									"            break;",
									"        case \"one\":",
									"            maximumIndexOfDeviceUnderTest = Math.min( 0, (numberOfExistingDevices-1) );",
									"            break;",
									"        case \"all\":",
									"            maximumIndexOfDeviceUnderTest = (numberOfExistingDevices-1);",
									"            break;",
									"    }",
									"    CouldMaximumIndexOfDeviceUnderTestBeDetermined(maximumIndexOfDeviceUnderTest);",
									"} catch (error) {",
									"    CouldMaximumIndexOfDeviceUnderTestBeDetermined();",
									"}    ",
									"try {",
									"    if (indexOfDeviceUnderTest<=maximumIndexOfDeviceUnderTest) {",
									"        postman.setNextRequest();",
									"        console.log(\"Testing of the \" + (indexOfDeviceUnderTest+1) + \". out of \" ",
									"                        + (maximumIndexOfDeviceUnderTest+1) ",
									"                        + \" Devices will be started.\");",
									"    } else {",
									"        postman.setNextRequest(\"EndPointInterfaceValidator\");",
									"        console.log(\"Proceeding with terminating the Interface Validator.\");",
									"    }",
									"    CouldFurtherProceedingBeDetermined(true);",
									"} catch (error) {",
									"    CouldFurtherProceedingBeDetermined(false);",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheRequestBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, ",
									"                                multiplicityOfDeviceIterations, uri) {",
									"    pm.test(\"CouldTheInputBeLoaded\", function () {",
									"        pm.expect(controller).to.be.an(\"object\");",
									"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
									"        pm.expect(multiplicityOfDeviceIterations).to.be.a(\"string\");",
									"        pm.expect(multiplicityOfDeviceIterations).to.not.have.lengthOf(0);",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldMaximumIndexOfDeviceUnderTestBeDetermined(maximumIndexOfDeviceUnderTest) {",
									"    pm.test(\"CouldMaximumIndexOfDeviceUnderTestBeDetermined\", function () {",
									"        pm.expect(maximumIndexOfDeviceUnderTest).to.be.a(\"number\");",
									"    });",
									"}",
									"",
									"function CouldFurtherProceedingBeDetermined(success) {",
									"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
									"        pm.expect(success).to.be.true;",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "LoadingMantisIssues",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a2f03c22-5382-4ff2-8e44-22d61f9d884f",
								"exec": [
									"console.log(\"\\n----------------------------------Loading Mantis Issues-----------------------------------\");",
									"/****************************************************************************************",
									"* ",
									"* Loading Mantis Issues",
									"*  ",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
									"    var controller = pm.environment.get(\"controller\");",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
									"    CouldInputForLoadingMantisIssuesBeLoaded(mantisInterfaceStatus, controller, ",
									"                                            dummyUri, ",
									"                                            indexOfDeviceUnderTest",
									"                                           );",
									"} catch (error) {",
									"    CouldInputForLoadingMantisIssuesBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    if (mantisInterfaceStatus===\"read-only\" || mantisInterfaceStatus===\"read-write\") {",
									"        var vendor = controller.nodeList[indexOfDeviceUnderTest].vendor;",
									"        var mantisAuthorizationCode = controller.nodeList[indexOfDeviceUnderTest].mantisAuthorizationCode;",
									"        var uri = \"https://\" + vendor + \".bugtracker.openBackhaul.com/api/rest/issues\";",
									"        CouldTheMantisUriBeComposed(vendor, mantisAuthorizationCode, uri);",
									"    } else {",
									"        console.log(\"Loading Mantis Issues has been configured to be switched-off.\")",
									"        uri = dummyUri;",
									"    }",
									"} catch (error) {",
									"    CouldTheMantisUriBeComposed();",
									"    uri = dummyUri;",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {   ",
									"    pm.variables.set(\"uri\", uri);",
									"    pm.request.headers.upsert({key:\"Authorization\", value:mantisAuthorizationCode});",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheGetRequestForMantisIssuesBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									"* Self Testing Functions",
									"****************************************************************************************/",
									"function CouldInputForLoadingMantisIssuesBeLoaded(mantisInterfaceStatus, ",
									"                                                    controller, ",
									"                                                    uri, ",
									"                                                    indexOfDeviceUnderTest) {",
									"    pm.test(\"CouldInputForLoadingMantisIssuesBeLoaded\", function () {",
									"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"        pm.expect(controller).to.be.an(\"object\");",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");      ",
									"    });",
									"}",
									"",
									"function CouldTheMantisUriBeComposed(vendor, mantisAuthorizationCode, uri) {",
									"    pm.test(\"CouldTheMantisUriBeComposed\", function () {",
									"        pm.expect(vendor).to.be.a(\"string\");",
									"        pm.expect(vendor).to.not.have.lengthOf(0);  ",
									"        pm.expect(mantisAuthorizationCode).to.be.a(\"string\");",
									"        pm.expect(mantisAuthorizationCode).to.not.have.lengthOf(0);  ",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);  ",
									"    });",
									"}",
									"",
									"function CouldTheGetRequestForMantisIssuesBePrepared() {",
									"    pm.test(\"CouldTheGetRequestForMantisIssuesBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4d8fe3c8-97ea-4356-b973-7e91216c3f7f",
								"exec": [
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
									"    var controller = pm.environment.get(\"controller\");",
									"    ",
									"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
									"",
									"    CouldRequiredInputBeRead(mantisInterfaceStatus, controller, indexOfDeviceUnderTest);",
									"} catch (error) {",
									"    CouldRequiredInputBeRead();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Processing received data to a list of MantisBT issues",
									"****************************************************************************************/",
									"try {",
									"    if (mantisInterfaceStatus===\"read-only\" || mantisInterfaceStatus===\"read-write\") {",
									"        var deviceType = controller.nodeList[indexOfDeviceUnderTest].deviceType;",
									"        CouldDeviceTypeBeRetrieved(deviceType);",
									"",
									"        let responseWithHeadline = pm.response.json();",
									"        var mantisIssueList = responseWithHeadline.issues;",
									"        mantisIssueList = FilterIssuesForDeviceType(mantisIssueList, deviceType);",
									"        CouldMantisIssueListBeRead(pm.response.code);",
									"    }",
									"} catch (error) {",
									"    CouldDeviceTypeBeRetrieved();",
									"    CouldMantisIssueListBeRead();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Commenting the ResponseCode",
									"****************************************************************************************/",
									"try {",
									"    if (mantisInterfaceStatus===\"read-only\" || mantisInterfaceStatus===\"read-write\") {",
									"        let responseCode = parseInt(pm.response.code);",
									"        if (Math.floor(responseCode/100) === 2) {",
									"            console.log(\"Mantis issues for \" + deviceType + \" could successfully be loaded.\");",
									"        } else {",
									"            console.log(\"ERROR: Mantis issues for \" + deviceType + \" could not be \"",
									"                            + \"successfully be loaded.\");",
									"        }",
									"        CouldCommentBeComposedandPrinted(responseCode);",
									"    }",
									"} catch (error) {",
									"    CouldCommentBeComposedandPrinted();",
									"}",
									"",
									"pm.variables.clear();",
									"",
									"",
									"/****************************************************************************************",
									"* Provided Output Parameters",
									"****************************************************************************************/",
									"if (mantisInterfaceStatus===\"read-only\" || mantisInterfaceStatus===\"read-write\") {",
									"    pm.environment.set(\"mantisIssueList\", mantisIssueList);",
									"    AreAllEnvironmentVariablesSet();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Functions",
									" ****************************************************************************************/",
									"function FilterIssuesForDeviceType(issueList, deviceType) {",
									"    for (let i=(issueList.length-1); i>=0; i--) {",
									"        if (issueList[i].project.name!==deviceType){",
									"            issueList.splice(i,1);",
									"        }",
									"    }",
									"    return issueList;",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Test Driven Development",
									" ****************************************************************************************/",
									"function CouldRequiredInputBeRead(mantisInterfaceStatus, controller, indexOfDeviceUnderTest) {",
									"    pm.test(\"CouldRequiredInputBeRead\", function () {",
									"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"        pm.expect(controller).to.be.an(\"object\");",
									"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
									"    });",
									"}",
									"",
									"function CouldDeviceTypeBeRetrieved(deviceType) {",
									"    pm.test(\"CouldDeviceTypeBeRetrieved\", function () {",
									"        pm.expect(deviceType).to.be.a(\"string\");",
									"        pm.expect(deviceType).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldMantisIssueListBeRead(ResponseCode) {",
									"    pm.test(\"CouldMantisIssueListBeRead\", function () {",
									"        pm.expect(ResponseCode).to.equal(200);",
									"    });",
									"}",
									"",
									"function CouldCommentBeComposedandPrinted(ResponseCode) {",
									"    pm.test(\"CouldMantisIssueListBeRead\", function () {",
									"        pm.expect(ResponseCode).to.equal(200);",
									"    });",
									"}",
									"",
									"function AreAllEnvironmentVariablesSet() {",
									"    pm.test(\"AreAllEnvironmentVariablesSet\", function () {",
									"        pm.expect(pm.environment.get(\"mantisIssueList\")).to.be.an(\"array\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DisplayEnvironmentVariables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "78a1b14f-f118-47b3-9035-acf76b638aa6",
								"exec": [
									"console.log(\"\\n-------------------------Displaying all Environment variables-----------------------------\");",
									"/****************************************************************************************",
									"* ",
									"* Console.log of all Environment variables",
									"* ",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    CouldTheInputBeLoaded(dummyUri);",
									"} catch (error) {",
									"    CouldTheInputBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Displaying ",
									"****************************************************************************************/",
									"try {",
									"    console.log(\"Device will be tested with the following set of Environment variables:\");",
									"    let allEnvironmentVariables = { \"allEnvironmentVariables\" : pm.environment.toObject() };",
									"    console.log(allEnvironmentVariables);",
									"    CouldAllEnvironmentalVariablesBeDisplayed(true);",
									"} catch (error) {",
									"    CouldAllEnvironmentalVariablesBeDisplayed(false);",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheRequestBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function CouldTheInputBeLoaded(uri) {",
									"    pm.test(\"CouldTheInputBeLoaded\", function () {",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldAllEnvironmentalVariablesBeDisplayed(success) {",
									"    pm.test(\"CouldAllEnvironmentalVariablesBeDisplayed\", function () {",
									"        pm.expect(success).to.be.true;",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "61157a5f-5455-46c0-ab47-2c3c565dfcc2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ef649fad-5d17-4753-921a-58762d2961a4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "InterfaceValidation",
			"item": [
				{
					"name": "AirInterfaceValidation",
					"item": [
						{
							"name": "AirInterfaceCompleteness",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputAirInterfaceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "cb5b9e68-f000-40f2-9277-28b832ecc14f",
														"exec": [
															"console.log(\"\\n\\n=============================== AirInterfaceCompleteness.3 ===============================\");",
															"/****************************************************************************************",
															" * ",
															" * RequestCollection for validating Completeness of AirInterface Objects against definition ",
															" * ",
															" *                   AirInterface_2.0.0-tsp.191122.1800",
															" * ",
															" * as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															" * ",
															" ****************************************************************************************/",
															" ",
															"",
															"/****************************************************************************************",
															" * Manual Definition of the Mode of Operation of this TestCase",
															" ****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"all\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"air-interface-2-0:air-interface-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function() {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function() {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7fb51ecc-9150-44ac-98c0-b7b41c7155c8",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "PRSe08",
															"type": "string"
														},
														{
															"key": "username",
															"value": "senthilvel.s",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointAirInterfaceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1339b82b-3920-4e08-a1a2-3b4e4b062fe2",
														"exec": [
															"console.log(\"\\n-----------------EntryPoint of AirInterface Validation for Completeness-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the AirInterfaceCompleteness TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].airInterfaceList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.max( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointAirInterfaceCompleteness\");",
															"        console.log(\"Proceeding with terminating AirInterface validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "57a0199c-e72c-4100-b661-24e28eff993c",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ffbb25ce-b8f0-413c-9fab-ecacee42612b",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6b4c23c1-ea56-49f6-95c4-47af9c22e5d5",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "94eed9a9-e2e1-477e-ade7-3006ded09aed",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ddb3b4b6-0639-4289-9189-1fc8d9580988",
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* StartPoint",
															"* ",
															"* Manages the number of iterations of the AirInterfaceCompleteness TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2a88f92b-54b8-4a87-a7f0-864f3ae96ed4",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8ec65826-33cb-4fdd-962a-6b78d6fb1be3",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "NetworkPreparation",
									"item": [
										{
											"name": "SwitchingOnMonitoring",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6debac83-319a-4685-9b09-363aa918d8cf",
														"exec": [
															"console.log(\"\\n---------------------------------Switching Monitoring On----------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Switching Monitoring On",
															"* ",
															"* This Request is for activating collection of performance data on the device under",
															"* test, so the data can be retrieved during validating completeness of the implementation",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration);",
															"} catch (error) {",
															"    CouldInputForSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify({ \"air-interface-2-0:performance-monitoring-is-on\": true });",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration) {",
															"    pm.test(\"CouldInputForSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(configuration).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a27b2ae3-e7e8-4541-9781-f7a703f9772a",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched on.\");",
															"pm.variables.set(\"negativeOutcome\", \"could not be switched on.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "SettingWrongRadioSignalId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d7753498-f74a-4b46-a1c4-3e66baf0d065",
														"exec": [
															"console.log(\"\\n-------------------------------Setting Wrong RadioSignalId--------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting wrong Expected RadioSignalID for provocing entries in CurrentProblemList",
															"* ",
															"* This Request is for provocing an alarm to be able to validate completeness of the ",
															"* representation of currently active alarms.",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, capability, configuration);",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    var faultyNumericValue = Math.floor(Math.random() * capability[\"supported-radio-signal-id-length\"]);",
															"    var faultyAlphaNumericValue = GenerateRandomString(capability[\"supported-radio-signal-id-length\"]);",
															"    CouldFaultyValuesBeGenerated(faultyNumericValue, faultyAlphaNumericValue);",
															"} catch (error) {",
															"    CouldFaultyValuesBeGenerated();",
															"}",
															"",
															"try {",
															"    if ( capability[\"supported-radio-signal-id-datatype\"] === \"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_INTEGER\" ) {",
															"        configuration[\"expected-radio-signal-id\"][\"numeric-radio-signal-id\"] = faultyNumericValue;",
															"        if ( capability[\"expected-equals-transmitted-radio-signal-id\"] === true ) {",
															"            configuration[\"transmitted-radio-signal-id\"][\"numeric-radio-signal-id\"] = faultyNumericValue;",
															"        }",
															"    } else {",
															"        configuration[\"expected-radio-signal-id\"][\"alphanumeric-radio-signal-id\"] = faultyAlphaNumericValue;",
															"        if ( capability[\"expected-equals-transmitted-radio-signal-id\"] === true ) {",
															"            configuration[\"transmitted-radio-signal-id\"][\"alphanumeric-radio-signal-id\"] = faultyAlphaNumericValue;",
															"        }",
															"    }",
															"    configuration = AddHeadlineToDataObject(configuration, \"air-interface-2-0:air-interface-configuration\");",
															"    CouldRequestBodyOfSettingWrongRadioSignalIdBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingWrongRadioSignalIdBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const requestBody = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", requestBody);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function GenerateRandomString(length) {",
															"    let randomString = \"\";",
															"    let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
															"    let charactersLength = characters.length;",
															"    for ( let i=0; i<length; i++ ) {",
															"        randomString += characters.charAt(Math.floor(Math.random() * charactersLength));",
															"    }",
															"    return randomString;",
															"}",
															"",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, capability, configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldFaultyValuesBeGenerated(faultyNumericValue, faultyAlphaNumericValue) {",
															"    pm.test(\"CouldFaultyValuesBeGenerated\", function () {",
															"        pm.expect(faultyNumericValue).to.be.an(\"number\");",
															"        pm.expect(faultyAlphaNumericValue).to.be.a(\"string\");",
															"        pm.expect(faultyAlphaNumericValue).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingWrongRadioSignalIdBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingWrongRadioSignalIdBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0dee93fa-716d-4606-9096-54dfa5de282e",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSettingWrongRadioSignalIdBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully misconfigured for provoking an alarm.\");",
															"pm.variables.set(\"negativeOutcome\", \"could not be changed.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSettingWrongRadioSignalIdBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "eef96e5d-0b84-4065-896f-75b6385dfbc9",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9fc35f4b-addc-429c-9bd8-9ac0ca251dd3",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ValidationRequests",
									"item": [
										{
											"name": "PacCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4aed6063-3a62-4e6f-8bcd-341fec7984fd",
														"exec": [
															"console.log(\"\\n-----------------------Checking AirInterface_Pac for Completeness-------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* PacCompleteness",
															"* ",
															"* This Request is for validating AirInterface Pac Objects against definition ",
															"* AirInterface_2.0.0-tsp.191122.1800",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the *_Pac class",
															"*  - availability of all attributes in this particular class",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"pac\";             // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 3;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let AIR_INTERFACE_PAC_SCHEMA = {",
															"    \"type\": \"object\",",
															"\t\"properties\": {",
															"        \"air-interface-capability\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"type-of-equipment\": \t\t\t\t\t\t\t{ \"type\": \"string\"  },",
															"                \"tx-frequency-min\": \t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"tx-frequency-max\": \t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"rx-frequency-min\": \t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"rx-frequency-max\": \t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"transmission-mode-list\":                       { \"type\": \"array\"   },",
															"                \"duplex-distance-is-freely-configurable\": \t\t{ \"type\": \"boolean\" },",
															"                \"duplex-distance-list\":                         { \"type\": \"array\"   },",
															"                \"auto-freq-select-is-avail\": \t\t\t\t\t{ \"type\": \"boolean\" },\t",
															"                \"adaptive-modulation-is-avail\": \t\t\t\t{ \"type\": \"boolean\" },\t",
															"                \"atpc-is-avail\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"atpc-range\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"supported-radio-signal-id-datatype\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_INTEGER\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_STRING\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t]",
															"                },",
															"                \"supported-radio-signal-id-length\": \t\t\t{ \"type\": \"number\"  },",
															"                \"expected-equals-transmitted-radio-signal-id\":\t{ \"type\": \"boolean\" },",
															"                \"encryption-is-avail\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"supported-loop-back-kind-list\":                { \"type\": \"array\"   },",
															"                \"maintenance-timer-range\": \t\t\t\t\t\t{ \"type\": \"string\"  },",
															"                \"supported-alarm-list\":                         { \"type\": \"array\"   },",
															"                \"performance-monitoring-is-avail\": \t\t\t\t{ \"type\": \"boolean\" },",
															"                \"direction-of-acm-performance-values\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:DIRECTION_TYPE_TX\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:DIRECTION_TYPE_RX\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:DIRECTION_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t]",
															"                },",
															"            },",
															"        },",
															"        \"air-interface-configuration\":{",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"air-interface-name\": \t\t\t\t\t{ \"type\": \"string\"  },",
															"                \"remote-air-interface-name\": \t\t\t{ \"type\": \"string\"  },",
															"                \"transmitted-radio-signal-id\":          { \"type\": \"object\"  },",
															"                \"expected-radio-signal-id\":             { \"type\": \"object\"  },",
															"                \"tx-frequency\": \t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"rx-frequency\": \t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"transmission-mode-min\": \t\t\t\t{ \"type\": \"string\"  },",
															"                \"transmission-mode-max\": \t\t\t\t{ \"type\": \"string\"  },",
															"                \"power-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"transmitter-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"receiver-is-on\": \t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"tx-power\": \t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"adaptive-modulation-is-on\": \t\t\t{ \"type\": \"boolean\" },",
															"                \"xpic-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"mimo-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"alic-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"atpc-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"atpc-thresh-upper\": \t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"atpc-thresh-lower\": \t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"atpc-tx-power-min\": \t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"auto-freq-select-is-on\": \t\t\t\t{ \"type\": \"boolean\" },",
															"                \"auto-freq-select-range\": \t\t\t\t{ \"type\": \"number\"  },",
															"                \"modulation-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"encryption-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"cryptographic-key\": \t\t\t\t\t{ \"type\": \"string\"  },",
															"                \"loop-back-kind-on\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_NONE\",\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t   ]",
															"                },",
															"                \"maintenance-timer\": \t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"problem-kind-severity-list\":           { \"type\": \"array\"   },",
															"                \"g-826-threshold-cross-alarm-list\":     { \"type\": \"array\"   },",
															"                \"xlts-threshold-cross-alarm-list\":      { \"type\": \"array\"   },",
															"                \"acm-threshold-cross-alarm-list\":       { \"type\": \"array\"   },",
															"                \"clearing-threshold-cross-alarms-is-on\":{ \"type\": \"boolean\" },",
															"                \"performance-monitoring-is-on\": \t\t{ \"type\": \"boolean\" },",
															"\t        },",
															"        },",
															"        \"air-interface-status\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"interface-status\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_UP\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_DOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_TESTING\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_DORMANT\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t]",
															"                },",
															"                \"tx-frequency-cur\": \t\t\t\t    { \"type\": \"number\"  },",
															"                \"rx-frequency-cur\": \t\t\t\t    { \"type\": \"number\"  },",
															"                \"transmission-mode-cur\":                { \"type\": \"string\"  },",
															"                \"received-radio-signal-id\":             { \"type\": \"object\"  },",
															"                \"radio-power-is-up\": \t\t\t\t    { \"type\": \"boolean\" },",
															"                \"link-is-up\": \t\t\t\t\t\t    { \"type\": \"boolean\" },",
															"                \"xpic-is-up\": \t\t\t\t\t\t    { \"type\": \"boolean\" },",
															"                \"mimo-is-up\": \t\t\t\t\t\t    { \"type\": \"boolean\" },",
															"                \"alic-is-up\": \t\t\t\t\t\t    { \"type\": \"boolean\" },",
															"                \"atpc-is-up\": \t\t\t\t\t\t    { \"type\": \"boolean\" },",
															"                \"auto-freq-select-is-up\": \t\t\t    { \"type\": \"boolean\" },",
															"                \"local-end-point-id\": \t\t\t\t    { \"type\": \"string\"  },",
															"                \"remote-end-point-id\":\t \t\t\t    { \"type\": \"string\"  },",
															"                \"loop-back-kind-up\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_NONE\",",
															"                                ]",
															"                },",
															"                \"performance-monitoring-is-up\":     \t{ \"type\": \"boolean\" },",
															"                \"rx-level-cur\": \t\t\t\t\t    { \"type\": \"number\"  },",
															"                \"tx-level-cur\": \t\t\t\t\t    { \"type\": \"number\"  },",
															"                \"snir-cur\": \t\t\t\t\t\t    { \"type\": \"number\"  },",
															"                \"xpd-cur\": \t\t\t\t\t\t\t    { \"type\": \"number\"  },",
															"                \"rf-temp-cur\": \t\t\t\t\t\t    { \"type\": \"number\"  },",
															"            },",
															"        },",
															"        \"air-interface-current-problems\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"current-problem-list\":                 { \"type\": \"array\"   },",
															"                \"number-of-current-problems\":  \t\t\t{ \"type\": \"number\"  },",
															"                \"time-of-latest-change\":                { \"type\": \"string\"  },",
															"            },",
															"        },",
															"        \"air-interface-current-performance\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"current-performance-data-list\":        { \"type\": \"array\"   },",
															"                \"number-of-current-performance-sets\":   { \"type\": \"number\"  },",
															"            },",
															"\t    },",
															"        \"air-interface-historical-performances\":{",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"historical-performance-data-list\":     { \"type\": \"array\"   },",
															"                \"number-of-historical-performance-sets\":{ \"type\": \"number\"  },",
															"                \"time-of-latest-change\": \t\t\t    { \"type\": \"string\"  },",
															"            },",
															"        },",
															"\t},    ",
															"\t\"required\": [\"air-interface-capability\",",
															"                    \"air-interface-configuration\",",
															"                    \"air-interface-status\",",
															"                    \"air-interface-current-problems\",",
															"                    \"air-interface-current-performance\",",
															"                    \"air-interface-historical-performances\",",
															"    ]",
															"};",
															"pm.variables.set(\"schema\", AIR_INTERFACE_PAC_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "303f96ce-47c1-4213-8117-d1f354cdb5d9",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CapabilityCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "11ac4e66-812b-49c4-a31f-1f0b2e0fe6c8",
														"exec": [
															"console.log(\"\\n--------------------Checking AirInterfaceCapability for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* CapabilityCompleteness",
															"* ",
															"* This Request is for validating AirInterface Capability Objects against definition ",
															"* AirInterface_2.0.0-tsp.191122.1800",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Capability class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let AIR_INTERFACE_CAPABILITY_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"type-of-equipment\": \t\t\t\t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"tx-frequency-min\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"tx-frequency-max\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"rx-frequency-min\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"rx-frequency-max\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"transmission-mode-list\": {",
															"    \t\t\"type\": \"array\",",
															"    \t\t\"items\": { ",
															"        \t\t\"type\": \"object\",",
															"        \t\t\"properties\": {",
															"                    \"transmission-mode-name\":     \t\t\t\t{ \"type\": \"string\" },",
															"                    \"transmission-mode-rank\":     \t\t\t\t{ \"type\": \"number\" },",
															"                    \"channel-bandwidth\":      \t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"modulation-scheme\":     \t\t\t\t    { \"type\": \"number\" },",
															"                    \"code-rate\":        \t\t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"symbol-rate-reduction-factor\":   \t\t\t{ \"type\": \"number\" },",
															"                    \"tx-power-min\":      \t\t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"tx-power-max\":       \t\t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"rx-threshold\":       \t\t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"am-upshift-level\":      \t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"am-downshift-level\":      \t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"xpic-is-avail\":       \t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                    \"supported-as-fixed-configuration\":  \t\t{ \"type\": \"boolean\" }",
															"        \t\t},",
															"                \"required\": [\"transmission-mode-name\", ",
															"                                \"transmission-mode-rank\",",
															"\t\t\t\t\t\t\t\t\"channel-bandwidth\",",
															"\t\t\t\t\t\t\t\t\"modulation-scheme\",",
															"\t\t\t\t\t\t\t\t\"code-rate\",",
															"\t\t\t\t\t\t\t\t\"symbol-rate-reduction-factor\",",
															"\t\t\t\t\t\t\t\t\"tx-power-min\",",
															"\t\t\t\t\t\t\t\t\"tx-power-max\",",
															"\t\t\t\t\t\t\t\t\"rx-threshold\",",
															"\t\t\t\t\t\t\t\t\"am-upshift-level\",",
															"\t\t\t\t\t\t\t\t\"am-downshift-level\",",
															"\t\t\t\t\t\t\t\t\"xpic-is-avail\",",
															"\t\t\t\t\t\t\t\t\"supported-as-fixed-configuration\"",
															"                ]",
															"    \t\t}",
															"\t\t},",
															"\t\t\"duplex-distance-is-freely-configurable\": \t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"duplex-distance-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\":                                    { \"type\": \"number\" }",
															"\t\t},",
															"\t\t\"auto-freq-select-is-avail\": \t\t\t\t\t{ \"type\": \"boolean\" }, \t\t",
															"\t\t\"adaptive-modulation-is-avail\": \t\t\t\t{ \"type\": \"boolean\" }, \t\t",
															"\t\t\"atpc-is-avail\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"atpc-range\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\"supported-radio-signal-id-datatype\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_INTEGER\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_STRING\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t\t]",
															"\t\t},",
															"\t\t\"supported-radio-signal-id-length\": \t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"expected-equals-transmitted-radio-signal-id\":\t{ \"type\": \"boolean\" }, ",
															"\t\t\"encryption-is-avail\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },\t",
															"\t\t\"supported-loop-back-kind-list\": { ",
															"\t\t    \"type\": \"array\",",
															"\t\t\t\"items\": { \"enum\": [",
															"\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_REMOTE\",",
															"\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_LOCAL\",",
															"\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_REMOTE\",",
															"\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_LOCAL\",",
															"\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_NONE\"\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t   ]",
															"\t\t\t}",
															"\t\t}, \t\t ",
															"\t\t\"maintenance-timer-range\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\"supported-alarm-list\": {",
															"            \"type\": \"array\",",
															"            \"item\":                                     { \"type\": \"string\" }",
															"\t\t},",
															"\t\t\"performance-monitoring-is-avail\": \t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"direction-of-acm-performance-values\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:DIRECTION_TYPE_TX\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:DIRECTION_TYPE_RX\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:DIRECTION_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t ]",
															"\t\t},",
															"\t},",
															"\t\"required\": [\"type-of-equipment\", ",
															"\t\t\t\t\t\"tx-frequency-min\",",
															"\t\t\t\t\t\"tx-frequency-max\",",
															"\t\t\t\t\t\"rx-frequency-min\",",
															"\t\t\t\t\t\"rx-frequency-max\",",
															"\t\t\t\t\t\"duplex-distance-is-freely-configurable\",",
															"\t\t\t\t\t\"duplex-distance-list\",",
															"\t\t\t\t\t\"auto-freq-select-is-avail\",",
															"\t\t\t\t\t\"adaptive-modulation-is-avail\",",
															"\t\t\t\t\t\"atpc-is-avail\",",
															"\t\t\t\t\t\"atpc-range\",",
															"\t\t\t\t\t\"supported-radio-signal-id-datatype\",",
															"\t\t\t\t\t\"expected-equals-transmitted-radio-signal-id\",",
															"\t\t\t\t\t\"encryption-is-avail\",",
															"\t\t\t\t\t\"supported-loop-back-kind-list\",",
															"\t\t\t\t\t\"maintenance-timer-range\",",
															"\t\t\t\t\t\"supported-alarm-list\",",
															"\t\t\t\t\t\"performance-monitoring-is-avail\",",
															"\t\t\t\t\t\"direction-of-acm-performance-values\",",
															"\t]",
															"};",
															"pm.variables.set(\"schema\", AIR_INTERFACE_CAPABILITY_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "268e88f8-6704-4ec4-9052-704ceb0f029c",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ConfigurationCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "703aba94-f3c7-49b1-84f8-646f18b63956",
														"exec": [
															"console.log(\"\\n-------------------Checking AirInterfaceConfiguration for Completeness--------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ConfigurationCompleteness",
															"* ",
															"* This Request is for validating AirInterface Configuration Objects against definition ",
															"* AirInterface_2.0.0-tsp.191122.1800",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Configuration class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let AIR_INTERFACE_CONFIGURATION_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"air-interface-name\": \t\t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"remote-air-interface-name\": \t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"transmitted-radio-signal-id\": { ",
															"\t\t\t\"type\": \"object\", ",
															"\t\t\t\"properties\": {",
															"\t\t\t\t\"numeric-radio-signal-id\": \t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\"alphanumeric-radio-signal-id\": \t{ \"type\": \"string\" }",
															"\t\t\t}",
															"\t\t}, ",
															"\t\t\"expected-radio-signal-id\": {",
															"\t\t\t\"type\": \"object\", ",
															"\t\t\t\"properties\": {",
															"\t\t\t\t\"numeric-radio-signal-id\": \t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\"alphanumeric-radio-signal-id\": \t{ \"type\": \"string\" }",
															"\t\t\t}",
															"\t\t}, ",
															"\t\t\"tx-frequency\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"rx-frequency\": \t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"transmission-mode-min\": \t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"transmission-mode-max\": \t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"power-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"transmitter-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"receiver-is-on\": \t\t\t\t\t\t{ \"type\": \"boolean\" }, \t",
															"\t\t\"tx-power\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"adaptive-modulation-is-on\": \t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"xpic-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"mimo-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"alic-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"atpc-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" }, \t",
															"\t\t\"atpc-thresh-upper\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"atpc-thresh-lower\": \t\t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\"atpc-tx-power-min\": \t\t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\"auto-freq-select-is-on\": \t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"auto-freq-select-range\": \t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\"modulation-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" }, \t",
															"\t\t\"encryption-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" }, \t",
															"\t\t\"cryptographic-key\": \t\t\t\t\t{ \"type\": \"string\" }, \t",
															"\t\t\"loop-back-kind-on\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_NONE\"\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t   ]",
															"\t\t}, \t",
															"\t\t\"maintenance-timer\": \t\t\t\t\t{ \"type\": \"number\" }, \t",
															" \t\t\"problem-kind-severity-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"    \t\t\t\t\"problem-kind-name\": \t\t\t\t{ \"type\": \"string\" },",
															"    \t\t\t\t\"problem-kind-severity\": { \"enum\": [",
															"    \t\t\t\t\t\t\t\t\t\t\t    \"air-interface-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_WARNING\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_MINOR\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_MAJOR\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_CRITICAL\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"",
															"    \t\t\t\t\t\t\t\t\t\t   ]",
															"    \t\t\t\t}",
															"\t\t\t    },",
															"\t\t\t    \"required\": [\"problem-kind-name\",",
															"\t\t\t                    \"problem-kind-severity\"",
															"\t\t\t    ]",
															"\t\t\t}    ",
															"\t\t}, \t\t\t",
															" \t\t\"g-826-threshold-cross-alarm-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"    \t\t\t\t\"g-826-value-kind\": { \"enum\": [",
															"    \t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:G_826_TYPE_ES\",",
															"    \t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:G_826_TYPE_SES\",",
															"    \t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:G_826_TYPE_CSES\",",
															"    \t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:G_826_TYPE_UAS\",",
															"    \t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:G_826_TYPE_NOT_SPECIFIED\"",
															"    \t\t\t\t\t\t\t\t\t  ]",
															"    \t\t\t\t},\t\t\t",
															"    \t\t\t\t\"alarm-raising-threshold\": \t\t\t{ \"type\": \"number\" },",
															"    \t\t\t\t\"alarm-clearing-threshold\": \t\t{ \"type\": \"number\" },",
															"    \t\t\t\t\"granularity-period\": { \"enum\": [",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"    \t\t\t\t\t\t\t\t\t    ]",
															"    \t\t\t\t}",
															"\t\t\t    },",
															"\t\t\t    \"required\": [\"g-826-value-kind\",",
															"\t\t\t                    \"alarm-raising-threshold\",",
															"\t\t\t                    \"alarm-clearing-threshold\",",
															"\t\t\t                    \"granularity-period\"",
															"\t\t\t    ]",
															"\t\t\t}",
															"\t\t}, \t\t\t",
															" \t\t\"xlts-threshold-cross-alarm-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"    \t\t\t\t\"level-threshold-second-kind\": { \"enum\": [",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_RLTS\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_TLTS\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_NOT_YET_DEFINED\"",
															"    \t\t\t\t\t\t\t\t\t\t\t\t ]",
															"    \t\t\t\t},\t\t\t\t\t",
															"    \t\t\t\t\"xlts-level\": \t\t\t\t\t    { \"type\": \"number\" },",
															"    \t\t\t\t\"amount-of-seconds\":\t\t\t    { \"type\": \"number\" },",
															"    \t\t\t\t\"granularity-period\": { \"enum\": [",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"    \t\t\t\t\t\t\t\t\t\t]",
															"    \t\t\t\t},",
															"    \t\t\t\t\"xlts-threshold-cross-alarm-definition-number\": { \"type\": \"number\" },",
															"\t\t\t    },",
															"\t\t\t    \"required\": [\"level-threshold-second-kind\",",
															"\t\t\t                    \"xlts-level\",",
															"\t\t\t                    \"amount-of-seconds\",",
															"\t\t\t                    \"granularity-period\",",
															"\t\t\t                    \"xlts-threshold-cross-alarm-definition-number\"",
															"\t\t\t    ]\t",
															"\t\t\t}",
															"\t\t}, \t\t\t\t\t\t",
															" \t\t\"acm-threshold-cross-alarm-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"    \t\t\t\t\"acm-threshold-cross-alarm-definition-number\": \t{ \"type\": \"number\" },",
															"    \t\t\t\t\"amount-of-seconds\": \t\t\t\t{ \"type\": \"number\" },\t",
															"    \t\t\t\t\"granularity-period\": { \"enum\": [",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"    \t\t\t\t\t\t\t\t\t\t]",
															"    \t\t\t\t},",
															"    \t\t\t\t\"transmission-mode\":                { \"type\": \"string\" }",
															"\t\t\t    },",
															"\t\t\t    \"required\": [\"acm-threshold-cross-alarm-definition-number\",",
															"\t\t\t                    \"amount-of-seconds\",",
															"\t\t\t                    \"granularity-period\",",
															"\t\t\t                    \"transmission-mode\"",
															"\t\t\t    ]",
															"\t\t\t}",
															"\t\t}, \t\t\t\t\t\t",
															"\t\t\"clearing-threshold-cross-alarms-is-on\":{ \"type\": \"boolean\" },\t",
															"\t\t\"performance-monitoring-is-on\": \t\t{ \"type\": \"boolean\" }",
															"\t},",
															" \t\"required\": [ \"air-interface-name\", ",
															"\t\t\t\t\t\"remote-air-interface-name\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"transmitted-radio-signal-id\",",
															"\t\t\t\t\t\"expected-radio-signal-id\",\t",
															"\t\t\t\t\t\"tx-frequency\",",
															"\t\t\t\t\t\"rx-frequency\",",
															"\t\t\t\t\t\"transmission-mode-min\",",
															"\t\t\t\t\t\"transmission-mode-max\",",
															"\t\t\t\t\t\"power-is-on\",",
															"\t\t\t\t\t\"transmitter-is-on\",\t",
															"\t\t\t\t\t\"receiver-is-on\",\t\t\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"tx-power\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"adaptive-modulation-is-on\",",
															"\t\t\t\t\t\"xpic-is-on\",\t",
															"\t\t\t\t\t\"mimo-is-on\",",
															"\t\t\t\t\t\"alic-is-on\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"atpc-is-on\",",
															"\t\t\t\t\t\"atpc-thresh-upper\",\t",
															"\t\t\t\t\t\"atpc-thresh-lower\",",
															"\t\t\t\t\t\"atpc-tx-power-min\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"auto-freq-select-is-on\",",
															"\t\t\t\t\t\"auto-freq-select-range\",\t",
															"\t\t\t\t\t\"modulation-is-on\",",
															"\t\t\t\t\t\"encryption-is-on\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"cryptographic-key\",",
															"\t\t\t\t\t\"loop-back-kind-on\",\t",
															"\t\t\t\t\t\"maintenance-timer\",\t\t",
															"\t\t\t\t\t\"problem-kind-severity-list\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"g-826-threshold-cross-alarm-list\",",
															"\t\t\t\t\t\"xlts-threshold-cross-alarm-list\",\t",
															"\t\t\t\t\t\"acm-threshold-cross-alarm-list\",",
															"\t\t\t\t\t\"clearing-threshold-cross-alarms-is-on\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"performance-monitoring-is-on\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t ]",
															"};",
															"pm.variables.set(\"schema\", AIR_INTERFACE_CONFIGURATION_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "71a6c072-ec12-441a-826f-e8c48f6bfab3",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "StatusCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1dde80fe-b5e5-42ed-948c-7340ecd86579",
														"exec": [
															"console.log(\"\\n----------------------Checking AirInterfaceStatus for Completeness------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* StatusCompleteness",
															"* ",
															"* This Request is for validating AirInterface Status Objects against definition ",
															"* AirInterface_2.0.0-tsp.191122.1800",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Status class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let AIR_INTERFACE_STATUS_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"interface-status\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_UP\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_DOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_TESTING\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_DORMANT\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\"\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t]",
															"\t\t}, \t\t  ",
															"\t\t\"tx-frequency-cur\": \t\t\t\t{ \"type\": \"number\"  }, ",
															"\t\t\"rx-frequency-cur\": \t\t\t\t{ \"type\": \"number\"  }, ",
															"\t\t\"transmission-mode-cur\":            { \"type\": \"string\" },",
															"\t\t\"received-radio-signal-id\": {",
															"\t\t\t\"type\": \"object\", ",
															"\t\t\t\"properties\": {",
															"\t\t\t\t\"numeric-radio-signal-id\": \t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\"alphanumeric-radio-signal-id\": { \"type\": \"string\" }",
															"\t\t\t},",
															"\t\t\t\"required\": [\"numeric-radio-signal-id\", ",
															"\t\t\t\t\t\t    \"alphanumeric-radio-signal-id\"",
															"\t\t\t]\t\t\t\t\t\t\t\t\t\t",
															"\t\t}, ",
															"\t\t\"radio-power-is-up\": \t\t\t\t{ \"type\": \"boolean\" }, \t ",
															"\t\t\"link-is-up\": \t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"xpic-is-up\": \t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"mimo-is-up\": \t\t\t\t\t\t{ \"type\": \"boolean\" }, \t ",
															"\t\t\"alic-is-up\": \t\t\t\t\t\t{ \"type\": \"boolean\" },\t ",
															"\t\t\"atpc-is-up\": \t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"auto-freq-select-is-up\": \t\t\t{ \"type\": \"boolean\" }, \t ",
															"\t\t\"local-end-point-id\": \t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"remote-end-point-id\":\t \t\t\t{ \"type\": \"string\" },",
															"\t\t\"loop-back-kind-up\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_NONE\"\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t]",
															"\t\t}, \t\t ",
															"\t\t\"performance-monitoring-is-up\": \t{ \"type\": \"boolean\" }, ",
															"\t\t\"rx-level-cur\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"tx-level-cur\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"snir-cur\": \t\t\t\t\t\t{ \"type\": \"number\" }, \t ",
															"\t\t\"xpd-cur\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"rf-temp-cur\": \t\t\t\t\t\t{ \"type\": \"number\" }",
															"\t},",
															"\t\"required\": [\"interface-status\", ",
															"\t\t\t\t\"tx-frequency-cur\",\t",
															"\t\t\t\t\"rx-frequency-cur\",\t",
															"\t\t\t\t\"transmission-mode-cur\",",
															"\t\t\t\t\"received-radio-signal-id\",\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\"radio-power-is-up\",\t",
															"\t\t\t\t\"link-is-up\",",
															"\t\t\t\t\"xpic-is-up\",",
															"\t\t\t\t\"mimo-is-up\",",
															"\t\t\t\t\"alic-is-up\",",
															"\t\t\t\t\"atpc-is-up\",",
															"\t\t\t\t\"auto-freq-select-is-up\",",
															"\t\t\t\t\"local-end-point-id\",\t",
															"\t\t\t\t\"remote-end-point-id\",\t",
															"\t\t\t\t\"loop-back-kind-up\",\t",
															"\t\t\t\t\"performance-monitoring-is-up\",",
															"\t\t\t\t\"rx-level-cur\",",
															"\t\t\t\t\"tx-level-cur\",",
															"\t\t\t\t\"snir-cur\",",
															"\t\t\t\t\"xpd-cur\",",
															"\t\t\t\t\"rf-temp-cur\"",
															"\t]\t",
															"};",
															"pm.variables.set(\"schema\", AIR_INTERFACE_STATUS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1c4e3fd9-46c1-42f4-9ccc-43f484b0d22b",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentProblemsCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "11f79b56-04e9-4e97-bf81-c42c077eb451",
														"exec": [
															"console.log(\"\\n------------------Checking AirInterfaceCurrentProblems for Completeness-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentProblemsCompleteness",
															"* ",
															"* This Request is for validating AirInterface CurrentProblems Objects against definition ",
															"* AirInterface_2.0.0-tsp.191122.1800",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentProblems class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-problems\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let AIR_INTERFACE_CURRENT_PROBLEMS_SCHEMA = {\t",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"\t\t\"current-problem-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"problem-name\": \t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"sequence-number\": \t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\"timestamp\": \t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"problem-severity\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_WARNING\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_MINOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_MAJOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_CRITICAL\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t}\t\t\t\t\t",
															"\t\t\t\t},",
															"\t\t\t\t\"required\": [ \"problem-name\", ",
															"\t\t\t\t    \t\t\t\"sequence-number\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t    \t\t\"timestamp\",",
															"\t\t\t\t\t\t    \t\"problem-severity\"\t",
															"\t\t\t\t]\t\t\t",
															"\t\t\t}\t\t\t\t\t\t\t",
															"\t\t},",
															"\t\t\"number-of-current-problems\":  \t\t\t{ \"type\": \"number\" },",
															"\t\t\"time-of-latest-change\":                { \"type\": \"string\" },",
															"\t},",
															"\t\"required\": [ \"current-problem-list\",",
															"                    \"number-of-current-problems\",",
															"                    \"time-of-latest-change\",",
															"\t] ",
															"};",
															"pm.variables.set(\"schema\", AIR_INTERFACE_CURRENT_PROBLEMS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "53bce562-3472-4c4a-897f-96c076aa0e28",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentPerformanceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f0ea537b-0528-4946-beea-56acc4b01af1",
														"exec": [
															"console.log(\"\\n----------------Checking AirInterfaceCurrentPerformance for Completeness------------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentPerformanceCompleteness",
															"* ",
															"* This Request is for validating AirInterface CurrentPerformance Objects against definition ",
															"* AirInterface_2.0.0-tsp.191122.1800",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentPerformance class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-performance\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let AIR_INTERFACE_CURRENT_PERFORMANCE_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"current-performance-data-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\"es\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"ses\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, \t\t",
															"\t\t\t\t\t\t\t\"cses\": \t\t\t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"unavailability\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"tx-level-min\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"tx-level-max\":\t\t\t\t    { \"type\": \"number\" }, \t\t\t",
															"\t\t\t\t\t\t\t\"tx-level-avg\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rx-level-min\": \t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"rx-level-max\": \t\t\t\t{ \"type\": \"number\" },\t\t",
															"\t\t\t\t\t\t\t\"rx-level-avg\": \t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"time-xstates-list\": {    ",
															"\t\t\t\t\t\t\t\t\"type\": \"array\",",
															"\t\t\t\t\t\t\t\t\"items\": {\t\t",
															"\t\t\t\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\t\t\t\"properties\": {\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t\"time-xstate-sequence-number\":\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\t\t\t\"transmission-mode\":            { \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\t\t\t\"time\": \t\t            \t{ \"type\": \"number\" }\t\t\t",
															"\t\t\t\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\t\t\t\"required\": [ \"time-xstate-sequence-number\",",
															"\t\t\t\t\t\t\t\t\t\t\t    \t\"transmission-mode\",\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t\t    \t\"time\"\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\t\t\t\t]\t\t",
															"\t\t\t\t\t\t\t\t}",
															"\t\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\t\"snir-min\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"snir-max\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"snir-avg\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"xpd-min\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"xpd-max\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"xpd-avg\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rf-temp-min\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rf-temp-max\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rf-temp-avg\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"defect-blocks-sum\": \t\t\t{ \"type\": \"number\" }, \t\t\t",
															"\t\t\t\t\t\t\t\"time-period\": \t\t\t\t\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\"required\": [ \"es\", ",
															"                            \t\t\t\"ses\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"                            \t\t\t\"cses\",",
															"                            \t\t\t\"unavailability\",\t",
															"                            \t\t\t\"tx-level-min\",",
															"                            \t\t\t\"tx-level-max\",",
															"                            \t\t\t\"tx-level-avg\",",
															"                            \t\t\t\"rx-level-min\",",
															"                            \t\t\t\"rx-level-max\",",
															"                            \t\t\t\"rx-level-avg\",",
															"                            \t\t\t\"time-xstates-list\",",
															"                            \t\t\t\"snir-min\",",
															"                            \t\t\t\"snir-max\",",
															"                            \t\t\t\"snir-avg\",",
															"                            \t\t\t\"xpd-min\",",
															"                            \t\t\t\"xpd-max\",",
															"                            \t\t\t\"xpd-avg\",",
															"                            \t\t\t\"rf-temp-min\",",
															"                            \t\t\t\"rf-temp-max\",",
															"                            \t\t\t\"rf-temp-avg\",",
															"                            \t\t\t\"defect-blocks-sum\",",
															"                            \t\t\t\"time-period\"",
															"\t\t\t\t\t\t]\t\t\t\t\t",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"timestamp\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"suspect-interval-flag\": \t\t\t{ \"type\": \"boolean\" },\t\t\t",
															"\t\t\t\t\t\"elapsed-time\": \t\t\t\t\t{ \"type\": \"integer\" },\t\t",
															"\t\t\t\t\t\"scanner-id\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"granularity-period\": \t{ \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t  ]",
															"\t\t\t\t\t},\t ",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"performance-data\",",
															"    \t\t\t\t\t\t\t\"timestamp\",",
															"    \t\t\t\t\t\t\t\"suspect-interval-flag\",",
															"    \t\t\t\t\t\t\t\"elapsed-time\",",
															"    \t\t\t\t\t\t\t\"scanner-id\",",
															"    \t\t\t\t\t\t\t\"granularity-period\",",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-current-performance-sets\":  \t\t\t{ \"type\": \"number\" },",
															"\t},\t\t",
															"\t\"required\":\t[ \"current-performance-data-list\",",
															"\t               \"number-of-current-performance-sets\",",
															"\t]",
															"};",
															"try {",
															"    if (capability[\"performance-monitoring-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", AIR_INTERFACE_CURRENT_PERFORMANCE_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"current-performance-data-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        AIR_INTERFACE_CURRENT_PERFORMANCE_SCHEMA = pm.collectionVariables.get(\"shortenedSchema\");",
															"        CouldAirInterfaceCurrentPerformanceBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldAirInterfaceCurrentPerformanceBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", AIR_INTERFACE_CURRENT_PERFORMANCE_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldAirInterfaceCurrentPerformanceBeShortened(success) {",
															"    pm.test(\"CouldAirInterfaceCurrentPerformanceBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a80fd6b3-b1af-4df6-873b-2a2f424cdfba",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "HistoricalPerformancesCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "cd07ac3d-5e86-4990-bb1a-1cac8f423f14",
														"exec": [
															"console.log(\"\\n---------------Checking AirInterfaceHistoricalPerformances for Completeness---------------\");",
															"/*******************************************************************************",
															"* ",
															"* HistoricalPerformancesCompleteness",
															"* ",
															"* This Request is for validating AirInterface HistoricalPerformances Objects against definition ",
															"* AirInterface_2.0.0-tsp.191122.1800",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the HistoricalPerformances class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"*******************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"historical-performances\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let AIR_INTERFACE_HISTORICAL_PERFORMANCES_SCHEMA = {\t",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"\t\t\"historical-performance-data-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\"es\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"ses\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, \t\t",
															"\t\t\t\t\t\t\t\"cses\": \t\t\t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"unavailability\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"tx-level-min\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"tx-level-max\":\t\t\t\t    { \"type\": \"number\" }, \t\t\t",
															"\t\t\t\t\t\t\t\"tx-level-avg\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rx-level-min\": \t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"rx-level-max\": \t\t\t\t{ \"type\": \"number\" },\t\t",
															"\t\t\t\t\t\t\t\"rx-level-avg\": \t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"time-xstates-list\": {    ",
															"\t\t\t\t\t\t\t\t\"type\": \"array\",",
															"\t\t\t\t\t\t\t\t\"items\": {\t\t",
															"\t\t\t\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\t\t\t\"properties\": {\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t\"time-xstate-sequence-number\":\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\t\t\t\"transmission-mode\":            { \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\t\t\t\"time\": \t\t            \t{ \"type\": \"number\" }\t\t\t",
															"\t\t\t\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\t\t\t\"required\": [ \"time-xstate-sequence-number\",",
															"\t\t\t\t\t\t\t\t\t\t\t    \t\"transmission-mode\",\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t\t    \t\"time\"\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\t\t\t\t]\t\t",
															"\t\t\t\t\t\t\t\t}",
															"\t\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\t\"snir-min\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"snir-max\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"snir-avg\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"xpd-min\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"xpd-max\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"xpd-avg\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rf-temp-min\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rf-temp-max\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rf-temp-avg\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"defect-blocks-sum\": \t\t\t{ \"type\": \"number\" }, \t\t\t",
															"\t\t\t\t\t\t\t\"time-period\": \t\t\t\t\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\"required\": [ \"es\", ",
															"                            \t\t\t\"ses\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"                            \t\t\t\"cses\",",
															"                            \t\t\t\"unavailability\",\t",
															"                            \t\t\t\"tx-level-min\",",
															"                            \t\t\t\"tx-level-max\",",
															"                            \t\t\t\"tx-level-avg\",",
															"                            \t\t\t\"rx-level-min\",",
															"                            \t\t\t\"rx-level-max\",",
															"                            \t\t\t\"rx-level-avg\",",
															"                            \t\t\t\"time-xstates-list\",",
															"                            \t\t\t\"snir-min\",",
															"                            \t\t\t\"snir-max\",",
															"                            \t\t\t\"snir-avg\",",
															"                            \t\t\t\"xpd-min\",",
															"                            \t\t\t\"xpd-max\",",
															"                            \t\t\t\"xpd-avg\",",
															"                            \t\t\t\"rf-temp-min\",",
															"                            \t\t\t\"rf-temp-max\",",
															"                            \t\t\t\"rf-temp-avg\",",
															"                            \t\t\t\"defect-blocks-sum\",",
															"                            \t\t\t\"time-period\"",
															"\t\t\t\t\t\t]\t\t\t\t\t",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"suspect-interval-flag\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\t\"history-data-id\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"period-end-time\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"granularity-period\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t]\t\t\t\t",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"object-class\": \t\t\t\t\t{ \"type\": \"string\" },   // Attribute to be removed with February-Release of Mediators",
															"\t\t\t\t\t\"name-binding\": \t\t\t\t\t{ \"type\": \"string\" },   // Attribute to be removed with February-Release of Mediators",
															"\t\t\t\t\t\"packages\": \t\t\t\t\t\t{ \"type\": \"string\" },   // Attribute to be removed with February-Release of Mediators",
															"\t\t\t\t\t\"allomorphs\": \t\t\t\t\t\t{ \"type\": \"string\" },   // Attribute to be removed with February-Release of Mediators",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"performance-data\",",
															"    \t\t\t\t\t\t\t\"suspect-interval-flag\",",
															"    \t\t\t\t\t\t\t\"history-data-id\",",
															"    \t\t\t\t\t\t\t\"period-end-time\",",
															"    \t\t\t\t\t\t\t\"granularity-period\",",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-historical-performance-sets\":  \t\t{ \"type\": \"number\" },",
															"\t\t\"time-of-latest-change\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t},",
															"\t\"required\":\t[ \"historical-performance-data-list\",",
															"//                    \"number-of-historical-performance-sets\",              // Commenting to be removed with February-Release of Mediators",
															"//                    \"time-of-latest-change\",                              // Commenting to be removed with February-Release of Mediators",
															"\t]",
															"};",
															"try {",
															"    if (capability[\"performance-monitoring-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", AIR_INTERFACE_HISTORICAL_PERFORMANCES_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"historical-performance-data-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        AIR_INTERFACE_HISTORICAL_PERFORMANCES_SCHEMA = pm.collectionVariables.get(\"shortenedSchema\");",
															"        CouldAirInterfaceHistoricalPerformancesBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldAirInterfaceHistoricalPerformancesBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", AIR_INTERFACE_HISTORICAL_PERFORMANCES_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldAirInterfaceHistoricalPerformancesBeShortened(success) {",
															"    pm.test(\"CouldAirInterfaceHistoricalPerformancesBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b5e45c39-91b0-436d-b254-94b9ef7768e0",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b0038671-a741-499f-b1d8-960fe631fe4f",
														"exec": [
															"console.log(\"\\n------------------Restoring the Original Interface Configuration Again--------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, configuration);",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    configuration = AddHeadlineToDataObject(configuration, \"air-interface-2-0:air-interface-configuration\");",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f5d6016d-82d8-45b5-af15-5a816f4ca899",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \"could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "34c9162f-6434-4e3d-988b-3e5ba757b939",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4c96a85d-b1d5-42db-81d8-7e566346562e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointAirInterfaceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5d475991-b4ed-4f01-bea3-9b146a530c4e",
														"exec": [
															"console.log(\"\\n---------------ReversalPoint of AirInterface Validation for Completeness------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointAirInterfaceCompleteness\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ab763251-a714-497f-b22b-743d9489feec",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointAirInterfaceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "cc56e0eb-f9dd-4cf9-b0e0-5c0a29da466a",
														"exec": [
															"console.log(\"\\n-------------------------Terminating AirInterfaceCompleteness-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is for clearing the Collection variables and terminating the TestCase",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, controller, indexOfDeviceUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7fde27df-5d1b-47f3-a07d-df2a2ff5e550",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "95d1c111-429f-47a1-ab89-7ae9a1ecead1",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9acf73b0-2fe8-4b30-b254-773a700f23a3",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ced4f428-0ef2-41e1-b70f-e60ad7395e24",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "035c03db-0681-47b0-9dca-a679a92860ac",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "AirInterfaceConfiguration",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c6bc0207-5f21-41f8-96ae-3228a236e14c",
														"exec": [
															"console.log(\"\\n\\n============================ AirInterfaceConfiguration.1 =============================\");",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Configuration of AirInterface Objects against definition ",
															"* ",
															"*                   AirInterface_2.0.0-tsp.191122.1800",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"* ",
															"****************************************************************************************/",
															" ",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"* ",
															"* It is recommended to apply this TestCase on devices on the local (not remote) site",
															"* of the microwave connection, otherwise the management connection might break and ",
															"* configurations, which are done during the validation, cannot be reversed.",
															"* ",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"one\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"air-interface-2-0:air-interface-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"RESPONSE_CODE_FOR_OPERATION_FAILED = 501;       // 500: Expected translation of aggreed <error-tag> operation failed",
															"CONFIGURATION_VALIDATION_RESULTS = {};",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"pm.collectionVariables.set(\"responseCodeForOperationFailed\", RESPONSE_CODE_FOR_OPERATION_FAILED);",
															"pm.collectionVariables.set(\"configurationValidationResults\", CONFIGURATION_VALIDATION_RESULTS);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function() {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function() {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e71dbb64-f880-4a17-8233-0d9b92baeb21",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DefiningDummyValuesAndEvaluations()",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0bd0629f-b460-4cfb-8dd5-117400573c49",
														"exec": [
															"console.log(\"\\n----------Defining DummyValues and Evaluation Criteria in Configuration Validation--------\");",
															"/****************************************************************************************",
															"* ",
															"* Definition of DefiningDummyValuesAndEvaluations()",
															"*  ",
															"* Functions for Defining DummyValues and Evaluation Criteria in all Configuration Validations.",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"        ",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"class Attribute {",
															"    constructor (CreatingDummyValueAsaString, ",
															"                    EvaluatingResultAsaString, ",
															"                    defaultValueForStandardEvaluation,",
															"                    capabilityAttributeToBeFalseIfFeatureNotSupported) {",
															"        this.CreatingDummyValueAsaString = CreatingDummyValueAsaString;",
															"        this.EvaluatingResultAsaString = EvaluatingResultAsaString;",
															"        this.defaultValueForStandardEvaluation = defaultValueForStandardEvaluation;",
															"        this.capabilityAttributeToBeFalseIfFeatureNotSupported = capabilityAttributeToBeFalseIfFeatureNotSupported;",
															"    }",
															"}",
															"var attributes = [];",
															"",
															"var CreatingDummyValueAsaString;",
															"var EvaluatingResultAsaString;",
															"var defaultValueForStandardEvaluation;",
															"var capabilityAttributeToBeFalseIfFeatureNotSupported;",
															"var newAttribute;",
															"",
															"// air-interface-name",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of air-interface-name--------------------------\");",
															"        // Individual Values Definition ",
															"        var dummyValue = \"Dummy \" + String(Math.floor(Math.random() * 999));",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"air-interface-name\";",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    EvaluatingResult = () => {",
															"        try ",
															"        {",
															"         if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString))",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } else ",
															"        {",
															"             if ( (resultValueString === JSON.stringify(\"Air interface ID not yet defined.\")) )",
															"                {",
															"                configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"                } ",
															"            else ",
															"                {",
															"                configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"                }",
															"         }",
															"",
															"            CouldResultBeEvaluated(true);",
															"        } ",
															"        catch (error) ",
															"        {",
															"        CouldResultBeEvaluated(false);",
															"        }",
															"    ",
															"        //Self Testing Function",
															"        function CouldResultBeEvaluated(success)",
															"        {",
															"            pm.test(\"CouldResultBeEvaluated\", function () ",
															"             {",
															"                pm.expect(success).to.be.true;",
															"             });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    defaultValueForStandardEvaluation = \"Interface name not yet defined.\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// remote-air-interface-name",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of remote-air-interface-name--------------------------\");",
															"        // Individual Values Definition ",
															"        var dummyValue = \"Dummy \" + String(Math.floor(Math.random() * 999));",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"remote-air-interface-name\";",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    EvaluatingResult = () => {",
															"        try ",
															"        {",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"ok\";",
															"            } ",
															"        else ",
															"            {",
															"                if ( (resultValueString === JSON.stringify(\"remote air interface name not yet defined.\")) ) ",
															"                {",
															"                    configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"                } ",
															"                else ",
															"                {",
															"                    configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"                }",
															"            }",
															"         CouldResultBeEvaluated(true);",
															"    } ",
															"    catch (error) {",
															"    CouldResultBeEvaluated(false);",
															"    }",
															"    ",
															"    // Self Testing Functions",
															"    function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    defaultValueForStandardEvaluation = \"remote air interface name not yet defined.\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"//    transmitted-radio-signal-id",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------Checking Configuration of transmitted-radio-signal-id-------------------\");",
															"          var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"transmitted-radio-signal-id\";   ",
															"        try {",
															"            var dummyValueOfTypeInteger = Math.floor(Math.random() * capability[\"supported-radio-signal-id-length\"]);",
															"\t\t\tvar dummyValueOfTypeString = GenerateRandomString(capability[\"supported-radio-signal-id-length\"]);",
															"\t\t\tCouldDummyValuesBeGenerated(dummyValueOfTypeInteger, dummyValueOfTypeString);",
															"\t\t\t} ",
															"\t\tcatch (error) ",
															"\t\t    {",
															"\t\t\tCouldDummyValuesBeGenerated();",
															"\t\t\t}",
															"",
															"\t\ttry {",
															"\t\t\tif ( capability[\"supported-radio-signal-id-datatype\"] === \"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_INTEGER\" ) ",
															"\t\t\t{",
															"\t\t\t\tconfiguration[\"transmitted-radio-signal-id\"][\"numeric-radio-signal-id\"] = dummyValueOfTypeInteger;",
															"\t\t\t\tvar dummyValue = dummyValueOfTypeInteger;",
															"\t\t\t\tif ( capability[\"expected-equals-transmitted-radio-signal-id\"] === true ) ",
															"\t\t\t\t{",
															"\t\t\t\t\tconfiguration[\"expected-radio-signal-id\"][\"numeric-radio-signal-id\"] = dummyValueOfTypeInteger;",
															"\t\t\t\t}",
															"\t\t\t} ",
															"\t\t\telse ",
															"\t\t\t{",
															"\t\t\t\tconfiguration[\"transmitted-radio-signal-id\"][\"alphanumeric-radio-signal-id\"] = dummyValueOfTypeString;",
															"\t\t\t\tvar dummyValue = dummyValueOfTypeString;",
															"\t\t\t\tif ( capability[\"expected-equals-transmitted-radio-signal-id\"] === true ) ",
															"\t\t\t\t{",
															"\t\t\t\t\tconfiguration[\"expected-radio-signal-id\"][\"alphanumeric-radio-signal-id\"] = dummyValueOfTypeString;",
															"\t\t\t\t}",
															"\t\t\t}",
															"\t\t\tconfiguration = AddHeadlineToDataObject(configuration, \"air-interface-2-0:air-interface-configuration\");",
															"\t\t\tCouldRequestBodyBeDefined(true);",
															"\t\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"        CouldRequestBodyBeDefined(false);",
															"        }",
															"    ",
															"\t    // Functions",
															"    \tfunction GenerateRandomString(length) ",
															"\t    {",
															"            let randomString = \"\";",
															"            let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
															"            let charactersLength = characters.length;",
															"            for ( let i=0; i<length; i++ )",
															"            {",
															"                randomString += characters.charAt(Math.floor(Math.random() * charactersLength));",
															"            }",
															"            return randomString;",
															"        }",
															"    ",
															"\t    function AddHeadlineToDataObject(objectWithoutHeadline, headline) ",
															"\t    {",
															"            let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"            let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"            let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"            return objectInclHeadline;",
															"\t    }",
															"",
															"\t    // Self Testing Functions",
															"\t    function CouldDummyValuesBeGenerated(dummyValueOfTypeInteger, dummyValueOfTypeString) ",
															"    \t{",
															"            pm.test(\"CouldDummyValuesBeGenerated\", function () ",
															"            {",
															"                pm.expect(dummyValueOfTypeInteger).to.be.an(\"number\");",
															"                pm.expect(dummyValueOfTypeString).to.be.a(\"string\");",
															"                pm.expect(dummyValueOfTypeString).to.not.have.lengthOf(0);",
															"            });",
															"\t    }",
															"\t    ",
															"    \tfunction CouldRequestBodyBeDefined(success) ",
															"    \t{",
															"            pm.test(\"CouldRequestBodyBeDefined\", function () ",
															"            {",
															"            pm.expect(success).to.be.true;",
															"            });",
															"\t    }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    EvaluatingResult = () => { ",
															"        try ",
															"        {",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString))",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"ok\";",
															"            } ",
															"            else ",
															"            {",
															"                if ( (resultValueString === JSON.stringify(\"transmitted radio signal id not yet defined.\")) ) ",
															"                {",
															"                    configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"                } ",
															"                else ",
															"                {",
															"                    configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(true);",
															"        } ",
															"        catch (error) ",
															"        {",
															"            CouldResultBeEvaluated(false);",
															"        }",
															"    ",
															"    // Functions",
															"    function CouldResultBeEvaluated(success) ",
															"    {",
															"        pm.test(\"CouldResultBeEvaluated\", function () ",
															"        {",
															"            pm.expect(success).to.be.true;",
															"        });",
															"    }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    defaultValueForStandardEvaluation = \" \";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"//    expected-radio-signal-id",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------Checking Configuration of expected-radio-signal-id-------------------\");",
															"          var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"expected-radio-signal-id\"; ",
															"\t\ttry {",
															"\t\t\tvar dummyValueOfTypeInteger = Math.floor(Math.random() * capability[\"supported-radio-signal-id-length\"]);",
															"\t\t\tvar dummyValueOfTypeString = GenerateRandomString(capability[\"supported-radio-signal-id-length\"]);",
															"\t\t\tCouldDummyValuesBeGenerated(dummyValueOfTypeInteger, dummyValueOfTypeString);",
															"\t\t\t} ",
															"\t\tcatch (error) ",
															"\t\t\t{",
															"\t\t\tCouldDummyValuesBeGenerated();",
															"\t\t\t}",
															"\t\t",
															"\t\ttry {",
															"\t\t\tif ( capability[\"supported-radio-signal-id-datatype\"] === \"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_INTEGER\" ) ",
															"\t\t\t{",
															"\t\t\t    configuration[\"expected-radio-signal-id\"][\"numeric-radio-signal-id\"] = dummyValueOfTypeInteger;",
															"\t\t\t\tvar dummyValue = dummyValueOfTypeInteger;",
															"\t\t\t\tif ( capability[\"expected-equals-transmitted-radio-signal-id\"] === true ) ",
															"\t\t\t\t{",
															"\t\t\t\t\tconfiguration[\"transmitted-radio-signal-id\"][\"numeric-radio-signal-id\"] = dummyValueOfTypeInteger;",
															"\t\t\t\t}",
															"\t\t\t} ",
															"\t\t\telse ",
															"\t\t\t{",
															"\t\t\t\tconfiguration[\"expected-radio-signal-id\"][\"alphanumeric-radio-signal-id\"] = dummyValueOfTypeString;",
															"\t\t\t\tvar dummyValue = dummyValueOfTypeString;",
															"\t\t\t\tif ( capability[\"expected-equals-transmitted-radio-signal-id\"] === true ) ",
															"\t\t\t\t{",
															"\t\t\t\t\tconfiguration[\"transmitted-radio-signal-id\"][\"alphanumeric-radio-signal-id\"] = dummyValueOfTypeString;",
															"\t\t\t\t}",
															"\t\t\t}",
															"\t\t\tconfiguration = AddHeadlineToDataObject(configuration, \"air-interface-2-0:air-interface-configuration\");",
															"\t\t\tCouldRequestBodyOfSettingWrongRadioSignalIdBeDefined(true);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t\tCouldRequestBodyOfSettingWrongRadioSignalIdBeDefined(false);",
															"\t\t} ",
															"   ",
															"        // Functions",
															"\t    function GenerateRandomString(length) ",
															"\t    {",
															"            let randomString = \"\";",
															"            let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
															"            let charactersLength = characters.length;",
															"            for ( let i=0; i<length; i++ ) ",
															"            {",
															"                randomString += characters.charAt(Math.floor(Math.random() * charactersLength));",
															"            }",
															"            return randomString;",
															"        }",
															"    ",
															"\t    function AddHeadlineToDataObject(objectWithoutHeadline, headline) ",
															"\t    {",
															"            let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"            let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"            let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"            return objectInclHeadline;",
															"\t    }",
															"",
															"\t    // Self Testing Functions",
															"\t    function CouldRequestBodyOfSettingWrongRadioSignalIdBeDefined(success) ",
															"\t    {",
															"            pm.test(\"CouldRequestBodyOfSettingWrongRadioSignalIdBeDefined\", function () ",
															"            {",
															"            pm.expect(success).to.be.true;",
															"            });",
															"\t    }",
															"\t    function CouldDummyValuesBeGenerated(dummyValueOfTypeInteger, dummyValueOfTypeString) ",
															"\t    {",
															"            pm.test(\"CouldDummyValuesBeGenerated\", function ()",
															"            {",
															"                pm.expect(dummyValueOfTypeInteger).to.be.an(\"number\");",
															"                pm.expect(dummyValueOfTypeString).to.be.a(\"string\");",
															"                pm.expect(dummyValueOfTypeString).to.not.have.lengthOf(0);",
															"            });",
															"    \t}",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    EvaluatingResult = () => { ",
															"    try",
															"    {",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            if ( (resultValueString === JSON.stringify(\"expected radio signal id not yet defined.\")) ) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"            } ",
															"            else ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"            }",
															"        }",
															"        CouldResultBeEvaluated(true);",
															"    } ",
															"    catch (error) ",
															"    {",
															"        CouldResultBeEvaluated(false);",
															"    }",
															"    ",
															"    // Functions",
															"    function CouldResultBeEvaluated(success) ",
															"    {",
															"        pm.test(\"CouldResultBeEvaluated\", function () ",
															"        {",
															"            pm.expect(success).to.be.true;",
															"        });",
															"    }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    defaultValueForStandardEvaluation = \" \";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"//    tx-frequency",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------Checking Configuration of tx-frequency-------------------\");",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"tx-frequency\";       ",
															"\t\ttry ",
															"\t\t{",
															"\t\t\tvar configuredTxFrequency = configuration[\"tx-frequency\"];",
															"\t\t\tvar configuredTransmissionModeName = configuration[\"transmission-mode-min\"];",
															"\t\t\tvar configuredModeIndex = TransmissionModeIndexOf(configuredTransmissionModeName, capability);",
															"\t\t\tvar configuredChannelBandwidth = capability[\"transmission-mode-list\"][configuredModeIndex][\"channel-bandwidth\"];",
															"\t\t\t\t",
															"\t\t\tvar minimumTxFrequency = capability[\"tx-frequency-min\"];",
															"\t\t\tvar maximumTxFrequency = capability[\"tx-frequency-max\"];",
															"\t\t\t\t",
															"\t\t\tif ( (configuredTxFrequency + (3/2)*configuredChannelBandwidth) < maximumTxFrequency) ",
															"\t\t\t{",
															"\t\t\t\tvar dummyValue = configuredTxFrequency + configuredChannelBandwidth;",
															"\t\t\t} ",
															"\t\t\telse ",
															"\t\t\t{",
															"\t\t\t\tvar dummyValue = configuredTxFrequency - configuredChannelBandwidth;",
															"\t\t\t}",
															"\t\t\tCouldDummyValueBeSet(configuredTxFrequency, configuredTransmissionModeName,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tconfiguredModeIndex,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tconfiguredChannelBandwidth,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tminimumTxFrequency,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tmaximumTxFrequency,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tdummyValue);\t",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t\tCouldDummyValueBeSet(configuredTxFrequency, configuredTransmissionModeName,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tconfiguredModeIndex,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tconfiguredChannelBandwidth,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tminimumTxFrequency,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tmaximumTxFrequency,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tdummyValue);",
															"\t\t}",
															"\t\t",
															"\t// Functions",
															"\tfunction TransmissionModeIndexOf(currentModeName, capability) ",
															"\t{",
															"        for (let i=0; i<(capability[\"transmission-mode-list\"].length-1); i++) ",
															"        {",
															"            let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
															"            if ( sampleModeName === currentModeName ) ",
															"            {",
															"                return i;",
															"            }",
															"        }",
															"        console.log(\"ERROR: Name of transmission mode could not be found in air-interface-capability::transmission-mode-list.\");",
															"\t}",
															"",
															"\t// Self Testing Functions",
															"\tfunction CouldDummyValueBeSet(configuredTxFrequency, configuredTransmissionModeName,",
															"                                            configuredModeIndex,",
															"                                            configuredChannelBandwidth,",
															"                                            minimumTxFrequency,",
															"                                            maximumTxFrequency,",
															"                                            dummyValue)",
															"    {",
															"        pm.test(\"CouldConfigurationInformationBeRetrieved\", function () ",
															"        {",
															"            pm.expect(configuredTxFrequency).to.be.a(\"number\");",
															"            pm.expect(configuredTransmissionModeName).to.be.a(\"string\");",
															"            pm.expect(configuredTransmissionModeName).to.not.have.lengthOf(0);",
															"        });",
															"        pm.test(\"CouldConfiguredModeIndexBeEvaluated\", function () ",
															"        {",
															"            pm.expect(configuredModeIndex).to.be.a(\"number\");",
															"        });",
															"        pm.test(\"CouldConfiguredChannelBandwidthBeEvaluated\", function () ",
															"        {",
															"            pm.expect(configuredChannelBandwidth).to.be.a(\"number\");",
															"        });",
															"        pm.test(\"CouldAvailableFrequenciesBeRetrieved\", function () ",
															"        {",
															"            pm.expect(minimumTxFrequency).to.be.a(\"number\");",
															"            pm.expect(maximumTxFrequency).to.be.a(\"number\");",
															"        });",
															"        pm.test(\"CouldDummyValueBeSet\", function () ",
															"        {",
															"            pm.expect(dummyValue).to.be.a(\"number\");",
															"        });",
															"\t}",
															"\t",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    EvaluatingResult = () => { ",
															"    try ",
															"    {",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"        }",
															"        CouldResultBeEvaluated(true);",
															"    } ",
															"    catch (error) ",
															"    {",
															"        CouldResultBeEvaluated(false);",
															"    }",
															"    ",
															"    // Functions",
															"    function CouldResultBeEvaluated(success)",
															"    {",
															"        pm.test(\"CouldResultBeEvaluated\", function () ",
															"        {",
															"            pm.expect(success).to.be.true;",
															"        });",
															"    }",
															"};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    defaultValueForStandardEvaluation = \" \";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}  attributes.push(newAttribute);",
															"",
															"//    rx-frequency",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------Checking Configuration of rx-frequency-------------------\");",
															"         var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"rx-frequency\";    ",
															"\t\ttry ",
															"\t\t{",
															"\t\t\tvar configuredRxFrequency = configuration[\"rx-frequency\"];",
															"\t\t\tvar configuredTransmissionModeName = configuration[\"transmission-mode-min\"];",
															"\t\t\tvar configuredModeIndex = TransmissionModeIndexOf(configuredTransmissionModeName, capability);",
															"\t\t\tvar configuredChannelBandwidth = capability[\"transmission-mode-list\"][configuredModeIndex][\"channel-bandwidth\"];",
															"\t\t\tvar minimumRxFrequency = capability[\"rx-frequency-min\"];",
															"\t\t\tvar maximumRxFrequency = capability[\"rx-frequency-max\"];",
															"\t\t\t\t",
															"\t\t\tif ( (configuredRxFrequency + (3/2)*configuredChannelBandwidth) < maximumRxFrequency) ",
															"\t\t\t{",
															"\t\t\t\tvar dummyValue = configuredRxFrequency + configuredChannelBandwidth;",
															"\t\t\t}",
															"\t\t\telse ",
															"\t\t\t{",
															"\t\t\t\tvar dummyValue = configuredRxFrequency - configuredChannelBandwidth;",
															"\t\t\t}",
															"\t\t\tCouldDummyValueBeSet(configuredRxFrequency, configuredTransmissionModeName,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tconfiguredModeIndex,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tconfiguredChannelBandwidth,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tminimumRxFrequency,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tmaximumRxFrequency,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tdummyValue);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t\tCouldDummyValueBeSet(configuredRxFrequency, configuredTransmissionModeName,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tconfiguredModeIndex,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tconfiguredChannelBandwidth,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tminimumRxFrequency,",
															"                                            maximumRxFrequency,",
															"                                            dummyValue);",
															"\t\t}",
															"\t\t",
															"\t// Functions",
															"\tfunction TransmissionModeIndexOf(currentModeName, capability)",
															"\t{",
															"        for (let i=0; i<(capability[\"transmission-mode-list\"].length-1); i++) ",
															"        {",
															"            let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
															"            if ( sampleModeName === currentModeName ) {",
															"            return i;",
															"        }",
															"        }",
															"        console.log(\"ERROR: Name of transmission mode could not be found in air-interface-capability::transmission-mode-list.\");",
															"\t}",
															"",
															"\t// Self Testing Functions",
															"\t",
															"\tfunction CouldDummyValueBeSet(configuredRxFrequency, configuredTransmissionModeName,",
															"                                            configuredModeIndex,",
															"                                            configuredChannelBandwidth,",
															"                                            minimumRxFrequency,",
															"                                            maximumRxFrequency,",
															"                                            dummyValue) ",
															"    {",
															"        pm.test(\"CouldConfigurationInformationBeRetrieved\", function () ",
															"        {",
															"            pm.expect(configuredRxFrequency).to.be.a(\"number\");",
															"            pm.expect(configuredTransmissionModeName).to.be.a(\"string\");",
															"            pm.expect(configuredTransmissionModeName).to.not.have.lengthOf(0);",
															"        });",
															"        pm.test(\"CouldConfiguredModeIndexBeEvaluated\", function () ",
															"        {",
															"            pm.expect(configuredModeIndex).to.be.a(\"number\");",
															"        });",
															"        pm.test(\"CouldConfiguredChannelBandwidthBeEvaluated\", function () ",
															"        {",
															"            pm.expect(configuredChannelBandwidth).to.be.a(\"number\");",
															"        });",
															"        pm.test(\"CouldAvailableFrequenciesBeRetrieved\", function () ",
															"        {",
															"            pm.expect(minimumRxFrequency).to.be.a(\"number\");",
															"            pm.expect(maximumRxFrequency).to.be.a(\"number\");",
															"        });",
															"        pm.test(\"CouldDummyValueBeSet\", function () ",
															"        {",
															"            pm.expect(dummyValue).to.be.a(\"number\");",
															"        });",
															"\t}",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    EvaluatingResult = () => { ",
															"    try ",
															"    {",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"        }",
															"        CouldResultBeEvaluated(true);",
															"    } ",
															"    catch (error) ",
															"    {",
															"        CouldResultBeEvaluated(false);",
															"    }",
															"    ",
															"    // Functions",
															"    function CouldResultBeEvaluated(success) ",
															"    {",
															"        pm.test(\"CouldResultBeEvaluated\", function () ",
															"        {",
															"            pm.expect(success).to.be.true;",
															"        });",
															"    }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    defaultValueForStandardEvaluation = \" \";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// transmission-mode-min",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of transmission-mode-min--------------------------\");",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"transmission-mode-min\";     ",
															"        try ",
															"        {",
															"\t\t    let currentModeName = configuration[\"transmission-mode-min\"];",
															"\t\t    let currentModeIndex = TransmissionModeIndexOf(currentModeName, capability);",
															"\t\t    let currentChannelBandwidth = capability[\"transmission-mode-list\"][currentModeIndex][\"channel-bandwidth\"];",
															"\t\t    let currentXpicAvailability = capability[\"transmission-mode-list\"][currentModeIndex][\"xpic-is-avail\"];",
															"\t\t    let minimumRankedModeName = \"\";",
															"\t\t    let minimumRank = Number.MAX_VALUE;",
															"\t\t    for (let i=0; i<(capability[\"transmission-mode-list\"].length-1); i++) ",
															"\t\t    {",
															"\t\t\t    let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
															"\t\t\t    let sampleModeRank = capability[\"transmission-mode-list\"][i][\"transmission-mode-rank\"];",
															"\t\t\t    let sampleModeChannelBandwidth = capability[\"transmission-mode-list\"][i][\"channel-bandwidth\"];",
															"\t\t\t    let sampleModeXpicAvailability = capability[\"transmission-mode-list\"][i][\"xpic-is-avail\"];",
															"\t\t\t    if ( (sampleModeName !== currentModeName) ",
															"\t\t\t\t\t&& (sampleModeRank < minimumRank)",
															"\t\t\t\t\t&& (sampleModeChannelBandwidth === currentChannelBandwidth)",
															"\t\t\t\t\t&& (sampleModeXpicAvailability === currentXpicAvailability) ) ",
															"\t\t\t\t{",
															"\t\t\t\t    minimumRankedModeName = sampleModeName;",
															"\t\t\t\t    minimumRank = sampleModeRank;",
															"\t\t        }",
															"\t\t    }",
															"\t\t    var dummyValue = minimumRankedModeName;",
															"\t\t    CouldDummyValueBeSet(currentModeIndex, currentChannelBandwidth, dummyValue);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t    CouldDummyValueBeSet();",
															"\t\t}",
															"\t\t",
															"\t\t// Functions",
															"\t\tfunction TransmissionModeIndexOf (currentModeName, capability) ",
															"\t\t{",
															"\t\t\tfor (let i=0; i<(capability[\"transmission-mode-list\"].length-1); i++) ",
															"\t\t\t{",
															"\t\t\t\tlet sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
															"\t\t\t\tif ( sampleModeName === currentModeName ) ",
															"\t\t\t\t{",
															"\t\t\t\t    return i;",
															"\t\t    \t}",
															"\t\t    }",
															"\t\t}",
															"",
															"\t\t// Self Testing Functions",
															"\t\tfunction CouldDummyValueBeSet(currentModeIndex, currentChannelBandwidth, dummyValue) ",
															"\t\t{",
															"\t\t    pm.test(\"CouldDummyValueBeSet\", function () ",
															"\t\t    {",
															"            pm.expect(currentModeIndex).to.be.a(\"number\");",
															"            pm.expect(currentChannelBandwidth).to.be.a(\"number\");",
															"            pm.expect(dummyValue).to.be.a(\"string\");",
															"            pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"\t\t    });",
															"\t\t}",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    EvaluatingResult = () => {",
															"        try ",
															"        {",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"ok\";",
															"\t\t    } ",
															"\t\t    else ",
															"\t\t    {",
															"                configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"\t\t    }",
															"\t\t    CouldResultBeEvaluated(true);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t    CouldResultBeEvaluated(false);",
															"\t\t}",
															"\t\t",
															"\t\t// Self Testing Functions",
															"\t\tfunction CouldResultBeEvaluated(success) ",
															"\t\t{",
															"\t\t    pm.test(\"CouldResultBeEvaluated\", function () ",
															"\t\t    {",
															"            pm.expect(success).to.be.true;",
															"\t\t    });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// transmission-mode-max",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of transmission-mode-max--------------------------\");",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"transmission-mode-max\";    ",
															"        try",
															"        {",
															"\t\t\tlet currentModeName = configuration[\"transmission-mode-max\"];",
															"\t\t\tlet currentModeIndex = TransmissionModeIndexOf(currentModeName, capability);",
															"\t\t\tlet currentChannelBandwidth = capability[\"transmission-mode-list\"][currentModeIndex][\"channel-bandwidth\"];",
															"\t\t\tlet currentXpicAvailability = capability[\"transmission-mode-list\"][currentModeIndex][\"xpic-is-avail\"];",
															"\t\t\tlet maximumRankedModeName = \"\";",
															"\t\t\tlet maximumRank = 0;",
															"\t\t\t\t",
															"\t\t\tfor (let i=0; i<(capability[\"transmission-mode-list\"].length-1); i++) ",
															"\t\t\t{",
															"\t\t\t\tlet sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
															"\t\t\t\tlet sampleModeRank = capability[\"transmission-mode-list\"][i][\"transmission-mode-rank\"];",
															"\t\t\t\tlet sampleModeChannelBandwidth = capability[\"transmission-mode-list\"][i][\"channel-bandwidth\"];",
															"\t\t\t\tlet sampleModeXpicAvailability = capability[\"transmission-mode-list\"][i][\"xpic-is-avail\"];",
															"\t\t\t\tif ( (sampleModeName !== currentModeName) ",
															"\t\t\t\t\t\t&& (sampleModeRank > maximumRank)",
															"\t\t\t\t\t\t&& (sampleModeChannelBandwidth === currentChannelBandwidth)",
															"\t\t\t\t\t\t&& (sampleModeXpicAvailability === currentXpicAvailability) ) ",
															"\t\t\t\t{",
															"\t\t\t\t\tmaximumRankedModeName = sampleModeName;",
															"\t\t\t\t\tmaximumRank = sampleModeRank;",
															"\t\t\t\t}",
															"\t\t\t}",
															"\t\t\tvar dummyValue = maximumRankedModeName;",
															"\t\t\tCouldDummyValueBeSet(currentModeIndex, currentChannelBandwidth, dummyValue);",
															"\t\t} ",
															"\t    catch (error) ",
															"\t    {",
															"\t\t    CouldDummyValueBeSet();",
															"\t    }",
															"     ",
															"\t\t// Functions",
															"\t\tfunction TransmissionModeIndexOf (currentModeName, capability) ",
															"\t\t{",
															"\t\t\tfor (let i=0; i<(capability[\"transmission-mode-list\"].length-1); i++) ",
															"\t\t\t{",
															"\t\t\t\tlet sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
															"\t\t\t\tif ( sampleModeName === currentModeName )",
															"\t\t\t\t{",
															"\t\t\t\treturn i;",
															"\t\t\t    }",
															"\t\t\t}",
															"\t\t}",
															"",
															"\t\t// Self Testing Functions",
															"\t\tfunction CouldDummyValueBeSet(currentModeIndex, currentChannelBandwidth, dummyValue) ",
															"\t\t{",
															"\t\t    pm.test(\"CouldDummyValueBeSet\", function () ",
															"\t\t    {",
															"                pm.expect(currentModeIndex).to.be.a(\"number\");",
															"                pm.expect(currentChannelBandwidth).to.be.a(\"number\");",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"\t\t    });",
															"\t\t}",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    EvaluatingResult = () => {",
															"        try {",
															"\t\t\tif ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"ok\";",
															"\t\t    } ",
															"\t\t    else ",
															"\t\t    {",
															"                configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"\t\t    }",
															"\t\t    CouldResultBeEvaluated(true);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t    CouldResultBeEvaluated(false);",
															"\t\t}",
															"\t\t",
															"\t\t// Self Testing Functions",
															"\t\tfunction CouldResultBeEvaluated(success) ",
															"\t\t{",
															"\t\t    pm.test(\"CouldResultBeEvaluated\", function () ",
															"\t\t    {",
															"            pm.expect(success).to.be.true;",
															"\t\t    });",
															"\t\t}",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// power-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of power-is-on-----------------------\");",
															"        // Individual Values Definition ",
															"        ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"power-is-on\";",
															"        ",
															"        try ",
															"        {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } ",
															"        catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) ",
															"        {",
															"            pm.test(\"CouldDummyValueBeSet\", function () ",
															"            {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"            ",
															"    EvaluatingResult = () => {",
															"\ttry ",
															"\t{",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) {",
															"                configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            if ( (resultValueString === \"true\") ) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"            } ",
															"            else ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"            }",
															"        }",
															"        CouldResultBeEvaluated(true);",
															"\t} ",
															"\tcatch (error) ",
															"\t{",
															"        CouldResultBeEvaluated(false);",
															"\t}",
															"\t",
															"\t// Self Testing Functions",
															"\t\tfunction CouldResultBeEvaluated(success) ",
															"\t\t{",
															"\t\t    pm.test(\"CouldResultBeEvaluated\", function () ",
															"\t\t    {",
															"            pm.expect(success).to.be.true;",
															"\t\t    });",
															"\t\t}",
															"\t};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// transmitter-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of transmitter-is-on-----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"transmitter-is-on\";",
															"            ",
															"        // Individual Values Definition ",
															"        try ",
															"        {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } ",
															"        catch (error) ",
															"        {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) ",
															"        {",
															"            pm.test(\"CouldDummyValueBeSet\", function () ",
															"            {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"            ",
															"    EvaluatingResult = () => {",
															"\ttry ",
															"\t{",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            if ( (resultValueString === \"true\") ) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"            }",
															"            else ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"            }",
															"        }",
															"        CouldResultBeEvaluated(true);",
															"\t} ",
															"\tcatch (error) ",
															"\t{",
															"        CouldResultBeEvaluated(false);",
															"\t}",
															"\t",
															"\t// Self Testing Functions",
															"\t\tfunction CouldResultBeEvaluated(success) ",
															"\t\t{",
															"\t\t    pm.test(\"CouldResultBeEvaluated\", function () ",
															"\t\t    {",
															"            pm.expect(success).to.be.true;",
															"\t\t    });",
															"\t\t}",
															"\t};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// receiver-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of receiver-is-on-----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"receiver-is-on\";",
															"            ",
															"        // Individual Values Definition ",
															"        try ",
															"        {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) ",
															"        {",
															"            pm.test(\"CouldDummyValueBeSet\", function () ",
															"            {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"            ",
															"    EvaluatingResult = () => {",
															"\ttry {",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            if ( (resultValueString === \"true\") ) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"            } ",
															"            else ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"            }",
															"        }",
															"",
															"        CouldResultBeEvaluated(true);",
															"\t} ",
															"\tcatch (error) ",
															"\t{",
															"        CouldResultBeEvaluated(false);",
															"\t}",
															"\t",
															"\t// Self Testing Functions",
															"\tfunction CouldResultBeEvaluated(success) ",
															"\t{",
															"\t\tpm.test(\"CouldResultBeEvaluated\", function () ",
															"\t\t{",
															"            pm.expect(success).to.be.true;",
															"\t\t});",
															"\t}",
															"\t};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"} attributes.push(newAttribute);",
															"",
															"// tx-power",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of tx-power--------------------------\");",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"tx-power\";    ",
															"        try ",
															"        {",
															"\t\t    var currentValue = configuration[\"tx-power\"];     ",
															"\t    \tvar currentModeName = status[\"transmission-mode-cur\"];",
															"\t\t    var currentModeIndex = TransmissionModeIndexOf(currentModeName, capability);",
															"\t\t    var minimumValue = capability[\"transmission-mode-list\"][currentModeIndex][\"tx-power-min\"];",
															"\t\t    var maximumValue = capability[\"transmission-mode-list\"][currentModeIndex][\"tx-power-max\"];",
															"\t\t    var valueRange = maximumValue - minimumValue; ",
															"            var dummyValue = minimumValue + Math.floor(Math.random() * valueRange);",
															"\t\t    CouldDummyValueBeSet(currentValue, currentModeName, currentModeIndex, minimumValue, ",
															"                            maximumValue, ",
															"                            valueRange, ",
															"                            dummyValue",
															"                        );",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t    CouldDummyValueBeSet(currentValue, currentModeName, currentModeIndex, minimumValue, ",
															"                            maximumValue, ",
															"                            valueRange, ",
															"                            dummyValue",
															"                        );",
															"\t\t}",
															"\t\t",
															"\t\t// Functions",
															"\t\tfunction TransmissionModeIndexOf(currentModeName, capability) ",
															"\t\t{",
															"\t\t    for (let i=0; i<(capability[\"transmission-mode-list\"].length-1); i++) ",
															"\t\t    {",
															"                let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
															"                if ( sampleModeName === currentModeName ) ",
															"                {",
															"                    return i;",
															"                }",
															"\t\t    }",
															"\t\t    console.log(\"ERROR: Name of transmission mode could not be found in air-interface-capability::transmission-mode-list.\");",
															"\t\t}",
															"",
															"\t\t// Self Testing Functions",
															"\t\tfunction CouldDummyValueBeSet(currentValue, currentModeName, currentModeIndex, minimumValue, ",
															"                                maximumValue, ",
															"                                valueRange, ",
															"                                dummyValue) ",
															"        {",
															"\t\t\tpm.test(\"CouldCurrentValueBeReadFromConfiguration\", function () ",
															"\t\t\t{",
															"\t\t\t\tpm.expect(currentValue).to.be.a(\"number\");",
															"\t\t\t});",
															"\t\t\tpm.test(\"CouldCurrentModeNameBeReadFromStatus\", function () ",
															"\t\t\t{",
															"\t\t\t\tpm.expect(currentModeName).to.be.a(\"string\");",
															"\t\t\t\tpm.expect(currentModeName).to.not.have.lengthOf(0);",
															"\t\t\t});",
															"\t\t\tpm.test(\"CouldCurrentModeIndexBeDerivedFromCapabilities\", function () ",
															"\t\t\t{",
															"\t\t\t\tpm.expect(currentModeIndex).to.be.a(\"number\");",
															"\t\t\t});",
															"\t\t\tpm.test(\"CouldMinimumValueBeReadFromCapabilities\", function () ",
															"\t\t\t{",
															"\t\t\t\tpm.expect(minimumValue).to.be.a(\"number\");",
															"\t\t\t});",
															"\t\t\tpm.test(\"CouldMaximumValueBeReadFromCapabilities\", function () ",
															"\t\t\t{",
															"\t\t\t\tpm.expect(maximumValue).to.be.a(\"number\");",
															"\t\t\t});",
															"\t\t\tpm.test(\"CouldValueRangeBeCalculated\", function () ",
															"\t\t\t{",
															"\t\t\t\tpm.expect(valueRange).to.be.a(\"number\");",
															"\t\t\t\tpm.expect(valueRange).to.be.above(0);",
															"\t\t\t});",
															"\t\t\tpm.test(\"CouldDummyValueBeDefined\", function () ",
															"\t\t\t{",
															"\t\t\t\tpm.expect(dummyValue).to.be.a(\"number\");",
															"\t\t\t\tpm.expect(dummyValue).to.be.at.least(minimumValue);",
															"\t\t\t\tpm.expect(dummyValue).to.be.at.most(maximumValue);",
															"\t\t\t});",
															"\t\t}",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"    try ",
															"    {",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"        }",
															"        CouldResultBeEvaluated(true);",
															"\t} ",
															"\tcatch (error) ",
															"\t{",
															"        CouldResultBeEvaluated(false);",
															"\t}",
															"    ",
															"    // Functions",
															"    function CouldResultBeEvaluated(success) ",
															"    {",
															"        pm.test(\"CouldResultBeEvaluated\", function () ",
															"        {",
															"            pm.expect(success).to.be.true;",
															"        });",
															"    }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"} attributes.push(newAttribute);",
															"",
															"// adaptive-modulation-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of adaptive-modulation-is-on-----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"adaptive-modulation-is-on\";",
															"            ",
															"        // Individual Values Definition ",
															"        try ",
															"        {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } ",
															"        catch (error) ",
															"        {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) ",
															"        {",
															"            pm.test(\"CouldDummyValueBeSet\", function () ",
															"            {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"            ",
															"    EvaluatingResult = () => {",
															"\ttry ",
															"\t{",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            if ( (resultValueString === \"true\") ) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"            } ",
															"            else ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"            }",
															"        }",
															"        CouldResultBeEvaluated(true);",
															"\t} ",
															"\tcatch (error) ",
															"\t{",
															"    CouldResultBeEvaluated(false);",
															"\t}",
															"\t",
															"\t// Self Testing Functions",
															"\tfunction CouldResultBeEvaluated(success) ",
															"\t{",
															"\t\tpm.test(\"CouldResultBeEvaluated\", function () ",
															"\t\t{",
															"            pm.expect(success).to.be.true;",
															"\t\t});",
															"\t}",
															"\t};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"} attributes.push(newAttribute);",
															"",
															"// mimo-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of mimo-is-on-----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"mimo-is-on\";",
															"            ",
															"        // Individual Values Definition ",
															"        try ",
															"        {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } ",
															"        catch (error) ",
															"        {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) ",
															"        {",
															"            pm.test(\"CouldDummyValueBeSet\", function () ",
															"            {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"            ",
															"    EvaluatingResult = () => {",
															"\ttry ",
															"\t{",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            if ( (resultValueString === \"true\") ) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"            } ",
															"            else ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"            }",
															"        }",
															"        CouldResultBeEvaluated(true);",
															"\t} ",
															"\tcatch (error) ",
															"\t{",
															"        CouldResultBeEvaluated(false);",
															"\t}",
															"\t",
															"\t// Self Testing Functions",
															"\tfunction CouldResultBeEvaluated(success) ",
															"\t{",
															"\t\tpm.test(\"CouldResultBeEvaluated\", function () ",
															"\t\t{",
															"            pm.expect(success).to.be.true;",
															"\t\t});",
															"\t}",
															"\t};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"} attributes.push(newAttribute);",
															"",
															"// alic-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of alic-is-on-----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"alic-is-on\";",
															"            ",
															"        // Individual Values Definition ",
															"        try ",
															"        {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } ",
															"        catch (error) ",
															"        {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) ",
															"        {",
															"            pm.test(\"CouldDummyValueBeSet\", function () ",
															"            {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"            ",
															"    EvaluatingResult = () => {",
															"\ttry ",
															"\t{",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"        if ( (resultValueString === \"true\") ) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"        } ",
															"        else ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"        }",
															"        }",
															"        CouldResultBeEvaluated(true);",
															"\t} ",
															"\tcatch (error) ",
															"\t{",
															"        CouldResultBeEvaluated(false);",
															"\t}",
															"\t",
															"\t// Self Testing Functions",
															"\tfunction CouldResultBeEvaluated(success) ",
															"\t{",
															"\t\tpm.test(\"CouldResultBeEvaluated\", function () ",
															"\t\t{",
															"            pm.expect(success).to.be.true;",
															"\t\t});",
															"\t}",
															"\t};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"} attributes.push(newAttribute);",
															"",
															"// atpc-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of atpc-is-on-----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"atpc-is-on\";",
															"            ",
															"        // Individual Values Definition ",
															"        try ",
															"        {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } ",
															"        catch (error) ",
															"        {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) ",
															"        {",
															"            pm.test(\"CouldDummyValueBeSet\", function () ",
															"            {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"            ",
															"    EvaluatingResult = () => {",
															"\ttry ",
															"\t{",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            if ( (resultValueString === \"true\") ) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"            } ",
															"            else ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"            }",
															"        }",
															"        CouldResultBeEvaluated(true);",
															"\t} ",
															"\tcatch (error) ",
															"\t{",
															"    CouldResultBeEvaluated(false);",
															"\t}",
															"\t",
															"\t// Self Testing Functions",
															"\tfunction CouldResultBeEvaluated(success) ",
															"\t{",
															"\t\tpm.test(\"CouldResultBeEvaluated\", function () ",
															"\t\t{",
															"            pm.expect(success).to.be.true;",
															"\t\t});",
															"\t}",
															"\t};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// atpc-thresh-upper",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of atpc-thresh-upper--------------------------\");",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"atpc-thresh-upper\";    ",
															"        try ",
															"        {",
															"\t\t    var currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"\t\t    var minimumValue = configuration[\"atpc-thresh-lower\"];",
															"\t\t    CouldCurrentConfigurationValuesBeRead(currentValue, minimumValue);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t    CouldCurrentConfigurationValuesBeRead();",
															"\t\t}",
															"\t\ttry ",
															"\t\t{",
															"\t\t    if ( (currentValue - 1) > minimumValue) ",
															"\t\t    {",
															"                var dummyValue = currentValue - 1;",
															"\t\t    } ",
															"\t\t    else ",
															"\t\t    {",
															"                var dummyValue = currentValue + 1;",
															"\t\t    }",
															"\t\t    CouldDummyValueBeDefined(true);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t    CouldDummyValueBeDefined(false);",
															"\t\t}",
															"\t\t",
															"\t\t// Self Testing Functions",
															"\t\tfunction CouldCurrentConfigurationValuesBeRead(currentValue, minimumValue) ",
															"\t\t{",
															"\t\t    pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () ",
															"\t\t    {",
															"                pm.expect(currentValue).to.be.a(\"number\");",
															"                pm.expect(minimumValue).to.be.a(\"number\");",
															"\t\t    });",
															"\t\t}",
															"",
															"\t\tfunction CouldDummyValueBeDefined(success) ",
															"\t\t{",
															"\t\t    pm.test(\"CouldDummyValueBeDefined\", function () ",
															"\t\t    {",
															"                pm.expect(success).to.be.true;",
															"\t\t    });",
															"\t\t}",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"    try",
															"    {",
															"\t\tif ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString) ) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"\t\t} ",
															"\t\telse ",
															"\t\t{",
															"            if ( (resultValueString === \"99\") ) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"            }",
															"            else ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"            }",
															"\t\t}",
															"\t\tCouldResultBeEvaluated(true);",
															"\t} ",
															"\tcatch (error) ",
															"\t{",
															"        CouldResultBeEvaluated(false);",
															"\t}",
															"    ",
															"    // Functions",
															"    function CouldResultBeEvaluated(success) ",
															"    {",
															"        pm.test(\"CouldResultBeEvaluated\", function () ",
															"        {",
															"            pm.expect(success).to.be.true;",
															"        });",
															"    }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"",
															"",
															"// atpc-thresh-lower",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of atpc-thresh-lower--------------------------\");",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"atpc-thresh-lower\";    ",
															"       try ",
															"        {",
															"\t\t    var currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"\t\t    var maximumValue = configuration[\"atpc-thresh-upper\"];",
															"\t\t    CouldCurrentConfigurationValuesBeRead(currentValue, maximumValue);",
															"\t    } ",
															"\t    catch (error) ",
															"\t    {",
															"\t\t    CouldCurrentConfigurationValuesBeRead();",
															"\t\t}",
															"",
															"\t\ttry ",
															"\t\t{",
															"\t\t    if ( (currentValue + 1) < maximumValue) ",
															"\t\t    {",
															"                var dummyValue = currentValue + 1;",
															"\t\t    } ",
															"\t\t    else ",
															"\t\t    {",
															"                var dummyValue = currentValue - 1;",
															"\t\t    }",
															"\t\t    CouldDummyValueBeDefined(true);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t    CouldDummyValueBeDefined(false);",
															"\t\t}",
															"\t\t",
															"\t\t// Self Testing Functions",
															"\t\tfunction CouldCurrentConfigurationValuesBeRead(currentValue, maximumValue) ",
															"\t\t{",
															"\t\t    pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () ",
															"\t\t    {",
															"                pm.expect(currentValue).to.be.a(\"number\");",
															"                pm.expect(maximumValue).to.be.a(\"number\");",
															"\t\t    });",
															"\t\t}",
															"",
															"\t\tfunction CouldDummyValueBeDefined(success) ",
															"\t\t{",
															"\t\t    pm.test(\"CouldDummyValueBeDefined\", function () ",
															"\t\t    {",
															"                pm.expect(success).to.be.true;",
															"\t\t    });",
															"\t\t}",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"       try ",
															"       {",
															"\t        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"ok\";",
															"\t\t    } ",
															"\t\t    else ",
															"\t\t    {",
															"                if ( (resultValueString === \"99\") ) ",
															"                {",
															"                    configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"                } ",
															"                else ",
															"                {",
															"                    configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"                }",
															"\t\t    }",
															"\t\t    CouldResultBeEvaluated(true);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t    CouldResultBeEvaluated(false);",
															"\t\t}",
															"    ",
															"    // Functions",
															"    function CouldResultBeEvaluated(success) ",
															"    {",
															"        pm.test(\"CouldResultBeEvaluated\", function () ",
															"            {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// atpc-tx-power-min",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of atpc-tx-power-min--------------------------\");",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"atpc-tx-power-min\";    ",
															"        try ",
															"        {",
															"\t\t    var currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"\t\t    CouldCurrentConfigurationValuesBeRead(currentValue);",
															"\t\t} catch (error) {",
															"\t\t    CouldCurrentConfigurationValuesBeRead();",
															"\t\t}",
															"",
															"\t\ttry ",
															"\t\t{",
															"\t\t    let currentModeName = configuration[\"transmission-mode-min\"];",
															"\t\t    for (let i=0; i<(capability[\"transmission-mode-list\"].length-1); i++) ",
															"\t\t    {",
															"                let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];            ",
															"                if ( sampleModeName === currentModeName ) ",
															"                {",
															"                    var minimumValue = capability[\"transmission-mode-list\"][i][\"tx-power-min\"];",
															"                }",
															"\t\t    }",
															"\t\t    CouldMinimumValueBeRetrieved(minimumValue);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t    CouldMinimumValueBeRetrieved();",
															"\t\t}",
															"\t\ttry ",
															"\t\t{",
															"\t\t    var dummyValue = minimumValue + Math.floor(Math.random() * 3);",
															"\t\t    if ( dummyValue === currentValue ) ",
															"\t\t    {",
															"                dummyValue = dummyValue + 1;",
															"\t\t    }    ",
															"\t\t    CouldDummyValueBeDefined(true);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t    CouldDummyValueBeDefined(false);",
															"\t\t}",
															"\t\t\t\t",
															"\t\t// Self Testing Functions",
															"\t\tfunction CouldCurrentConfigurationValuesBeRead(currentValue) ",
															"\t\t{",
															"\t\t\tpm.test(\"CouldCurrentConfigurationValuesBeRead\", function () ",
															"\t\t\t{",
															"\t\t\t    pm.expect(currentValue).to.be.a(\"number\");",
															"\t\t\t});",
															"\t\t}",
															"",
															"\t\tfunction CouldMinimumValueBeRetrieved(minimumValue) ",
															"\t\t{",
															"\t\t\tpm.test(\"CouldMinimumValueBeRetrieved\", function () ",
															"\t\t\t{",
															"\t\t\t    pm.expect(minimumValue).to.be.a(\"number\");",
															"\t\t\t});",
															"\t\t}",
															"",
															"\t\tfunction CouldDummyValueBeDefined(success) ",
															"\t\t{",
															"\t\t\tpm.test(\"CouldDummyValueBeDefined\", function () ",
															"\t\t\t{",
															"\t\t\t    pm.expect(success).to.be.true;",
															"\t\t\t});",
															"\t\t}",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try ",
															"\t\t{",
															"\t\t\tif ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"            {",
															"\t\t\t    configurationValidationResults[attributeUnderTest] = \"ok\";",
															"\t\t\t} ",
															"\t\t\telse ",
															"\t\t\t{",
															"\t\t\t    if ( resultValueString === \"-99\" ) ",
															"\t\t\t    {",
															"                    configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"\t\t\t    } ",
															"\t\t\t    else ",
															"\t\t\t    {",
															"                    configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"\t\t\t    }",
															"\t\t    }",
															"\t\t    CouldResultBeEvaluated(true);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t    CouldResultBeEvaluated(false);",
															"\t\t}",
															"    ",
															"    // Functions",
															"    ",
															"    function CouldResultBeEvaluated(success) ",
															"    {",
															"        pm.test(\"CouldResultBeEvaluated\", function () ",
															"        {",
															"            pm.expect(success).to.be.true;",
															"        });",
															"    }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// auto-freq-select-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of auto-freq-select-is-on-----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"auto-freq-select-is-on\";",
															"            ",
															"        // Individual Values Definition ",
															"        try ",
															"        {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } ",
															"        catch (error) ",
															"        {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) ",
															"        {",
															"            pm.test(\"CouldDummyValueBeSet\", function () ",
															"            {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"            ",
															"    EvaluatingResult = () => {",
															"\ttry ",
															"\t{",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            if ( (resultValueString === \"true\") ) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"            } ",
															"            else ",
															"            {",
															"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"            }",
															"        }",
															"        CouldResultBeEvaluated(true);",
															"\t} ",
															"\tcatch (error) ",
															"\t{",
															"        CouldResultBeEvaluated(false);",
															"\t}",
															"\t",
															"\t// Self Testing Functions",
															"\tfunction CouldResultBeEvaluated(success)",
															"\t{",
															"\t\tpm.test(\"CouldResultBeEvaluated\", function () ",
															"\t\t{",
															"            pm.expect(success).to.be.true;",
															"\t\t});",
															"\t\t}",
															"\t};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}  attributes.push(newAttribute);",
															"",
															"// auto-freq-select-range",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of auto-freq-select-range--------------------------\");",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"auto-freq-select-range\";    ",
															"        try ",
															"\t\t{",
															"\t\t    var dummyValue = Math.floor(Math.random() * 5);",
															"\t\t    CouldDummyValueBeDefined(true);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t    CouldDummyValueBeDefined(false);",
															"\t\t}",
															"\t\t\t\t",
															"\t\t// Self Testing Functions",
															"\t\tfunction CouldDummyValueBeDefined(success) ",
															"\t\t{",
															"\t\t    pm.test(\"CouldDummyValueBeDefined\", function () ",
															"\t\t    {",
															"                pm.expect(success).to.be.true;",
															"\t\t    });",
															"\t\t}",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try ",
															"\t\t{",
															"\t\t    if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString))",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"ok\";",
															"\t\t    } ",
															"\t\t    else ",
															"\t\t    {",
															"                if ( (capability[\"auto-freq-select-is-avail\"] === false)",
															"                && (resultValueString === \"-1\") ) ",
															"                {",
															"                    configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"                } ",
															"                else ",
															"                {",
															"                    configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"                }",
															"\t\t    }",
															"\t\t    CouldResultBeEvaluated(true);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t    CouldResultBeEvaluated(false);",
															"\t\t}",
															"    ",
															"    // Functions",
															"\tfunction CouldResultBeEvaluated(success) ",
															"\t{",
															"        pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// modulation-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of modulation-is-on-----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"modulation-is-on\";",
															"            ",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) ",
															"        {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) ",
															"        {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"            ",
															"    EvaluatingResult = () => {",
															"\ttry {",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            if ( (resultValueString === \"true\") ) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"            } else {",
															"                configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"            }",
															"        }",
															"        CouldResultBeEvaluated(true);",
															"\t} catch (error) {",
															"        CouldResultBeEvaluated(false);",
															"\t}",
															"\t",
															"\t// Self Testing Functions",
															"\tfunction CouldResultBeEvaluated(success) ",
															"\t{",
															"\t\tpm.test(\"CouldResultBeEvaluated\", function () {",
															"        pm.expect(success).to.be.true;",
															"\t\t});",
															"\t}",
															"\t};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}  attributes.push(newAttribute);",
															"",
															"// encryption-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of encryption-is-on-----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"encryption-is-on\";",
															"            ",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) ",
															"        {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"            ",
															"    EvaluatingResult = () => {",
															"\ttry ",
															"\t{",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            if ( (resultValueString === \"true\") ) {",
															"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"            } else {",
															"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"            }",
															"        }",
															"    CouldResultBeEvaluated(true);",
															"\t} catch (error) {",
															"        CouldResultBeEvaluated(false);",
															"\t}",
															"\t",
															"\t// Self Testing Functions",
															"\tfunction CouldResultBeEvaluated(success) {",
															"\t\tpm.test(\"CouldResultBeEvaluated\", function () {",
															"        pm.expect(success).to.be.true;",
															"\t\t});",
															"\t}",
															"\t};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// cryptographic-key",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of cryptographic-key-------------------------\");",
															"            ",
															"        var dummyValue = GenerateRandomString(16);",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"cryptographic-key\";",
															"            ",
															"        // Functions",
															"        function GenerateRandomString(length) ",
															"        {",
															"            let randomString = \"\";",
															"            let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
															"            let charactersLength = characters.length;",
															"            for ( let i=0; i<length; i++ ) {",
															"                randomString += characters.charAt(Math.floor(Math.random() * charactersLength));",
															"            }",
															"            return randomString;",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"Cryptographic key not yet defined.\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// loop-back-kind-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of loop-back-kind-on-----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"loop-back-kind-on\";",
															"            ",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"            ",
															"    EvaluatingResult = () => {",
															"\ttry ",
															"\t{",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            if ( (resultValueString === \"true\") ) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"            } else {",
															"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"            }",
															"        }",
															"        CouldResultBeEvaluated(true);",
															"\t} catch (error) {",
															"        CouldResultBeEvaluated(false);",
															"\t}",
															"\t",
															"\t// Self Testing Functions",
															"\tfunction CouldResultBeEvaluated(success) ",
															"\t\t{",
															"\t\tpm.test(\"CouldResultBeEvaluated\", function () {",
															"        pm.expect(success).to.be.true;",
															"\t\t});",
															"\t\t}",
															"\t};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// maintenance-timer",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of maintenance-timer--------------------------\");",
															"            ",
															"        var ATTRIBUTE_UNDER_TEST = \"maintenance-timer\";",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"\t\ttry {",
															"\t\t\tvar currentValue;",
															"\t\t\tcurrentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"\t\t\tCouldCurrentConfigurationValuesBeRead(currentValue);",
															"\t\t} catch (error) {",
															"\t\t\tCouldCurrentConfigurationValuesBeRead();",
															"\t\t}",
															"\t\ttry {",
															"\t\t\tvar maintenanceTimerRange = capability[\"maintenance-timer-range\"]",
															"\t\t\tvar randomValue = getRandomValues(maintenanceTimerRange,currentValue);",
															"\t\t\tCouldAnAvailableConfigurationValueBeRead(maintenanceTimerRange, randomValue);",
															"\t\t} catch (error) {",
															"\t\t\tCouldAnAvailableConfigurationValueBeRead();",
															"\t\t}",
															"\t\ttry {",
															"\t\t\tvar dummyValue = randomValue;",
															"\t\t\tCouldDummyValueBeDefined(true);",
															"\t\t} catch (error) {",
															"\t\t\tCouldDummyValueBeDefined(false);",
															"\t\t}",
															"\t\t",
															"\t\t// Functions",
															"\t\tfunction AddRandomIntString() {",
															"            return String(Math.floor(Math.random() * 999));",
															"        }",
															"",
															"        function getRandomValues(availableValues,currentValue) {",
															"            var randomValue=0;",
															"\t        if(availableValues.includes(\"-\"))",
															"\t        {",
															"\t\t        var rangeValues = availableValues.split(\"-\");",
															"\t\t        do ",
															"\t\t        {",
															"\t\t            randomValue = getRandomValueFromAvailableValues(rangeValues[0],rangeValues[1]);",
															"\t\t        }while(randomValue == currentValue);",
															"\t        }",
															"\t        else if(availableValues.includes(\",\"))",
															"\t        {",
															"\t\t        var concreteValues = availableValues.split(\",\");",
															"\t\t        do ",
															"\t\t        {",
															"\t\t\t        var randomIndex = getRandomValueFromAvailableValues(0,concreteValues.length);",
															"\t\t\t        randomValue = Math.floor(concreteValues[randomIndex]);",
															"\t\t        }while(randomValue == currentValue);",
															"\t        }",
															"\t        else",
															"\t        {",
															"\t\t        randomValue = Math.floor(availableValues);",
															"\t        }",
															"\t        return randomValue;",
															"        }",
															"",
															"        function getRandomValueFromAvailableValues(min, max) {  ",
															"            return Math.floor(Math.random() * (max - min) + min);  ",
															"        } ",
															"\t\t",
															"\t\t// Self Testing Functions",
															"\t\tfunction CouldAnAvailableConfigurationValueBeRead(maintenanceTimerRange, randomValue) {",
															"            pm.test(\"CouldAnAvailableConfigurationValueBeRead\", function () {",
															"                pm.expect(maintenanceTimerRange).to.be.a(\"string\");",
															"                pm.expect(maintenanceTimerRange).to.not.have.lengthOf(0);",
															"                pm.expect(randomValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"",
															"        function CouldCurrentConfigurationValuesBeRead(currentValue) {",
															"            pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
															"                pm.expect(currentValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"",
															"        function CouldDummyValueBeDefined(success) {",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try ",
															"        {",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (parseInt(resultValueString) >= 0)",
															"            && (parseInt(resultValueString) <= parseInt(dummyValueString)) ) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"ok\";",
															"            } else {",
															"                if ( resultValueString === \"-1\" ) {",
															"                    configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"                } else {",
															"                    if (resultValueString === capability[\"maintenance-timer-range\"]) {",
															"                        configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"                    } else {",
															"                        configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"                    }",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(true);",
															"\t    } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"\t\t}",
															"    ",
															"    // Functions",
															"    function CouldResultBeEvaluated(success) ",
															"    {",
															"        pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}  attributes.push(newAttribute);",
															"",
															"// problem-kind-severity",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of problem-kind-severity--------------------------\");",
															"        var DATATYPE_UNDER_TEST = \"problem-kind-severity-list\";",
															"        const DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var ATTRIBUTE_UNDER_TEST = \"problem-kind-severity\";",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"problem-kind-name\";",
															"\t\ttry",
															"\t\t{",
															"\t\t    var currentValue;",
															"\t\t\tcurrentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"\t\t\tkeysOfDatatypeInstanceUnderTest[0].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"\t\t    CouldCurrentConfigurationValuesBeRead(currentValue);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t    CouldCurrentConfigurationValuesBeRead();",
															"\t\t}",
															"\t\ttry {",
															"\t\t\tif ( currentValue !== \"air-interface-2-0:SEVERITY_TYPE_MINOR\" ) {",
															"\t\t\t\tvar dummyValue = \"air-interface-2-0:SEVERITY_TYPE_MINOR\";",
															"\t\t\t} else {",
															"\t\t\t\tvar dummyValue = \"air-interface-2-0:SEVERITY_TYPE_MAJOR\";",
															"\t\t\t}",
															"\t\t\tCouldDummyValueBeDefined(true);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t\tCouldDummyValueBeDefined(false);",
															"\t\t}",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"        ",
															"\t\t// Self Testing Functions",
															"\t\tfunction CouldCurrentConfigurationValuesBeRead(currentValue) ",
															"\t\t{",
															"\t\t    pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () ",
															"\t\t    {",
															"            pm.expect(currentValue).to.be.a(\"string\");",
															"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"            });",
															"\t    }",
															"",
															"\t    function CouldDummyValueBeDefined(success) ",
															"\t    {",
															"            pm.test(\"CouldDummyValueBeDefined\", function () ",
															"            {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"\t    }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try ",
															"        {",
															"\t\t    if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString) ) ",
															"            {",
															"             configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"\t\t    }",
															"\t\t    else ",
															"\t\t    {",
															"                if ( (resultValueString === JSON.stringify(\"air-interface-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\")) ) ",
															"                {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } ",
															"                else ",
															"                {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"                }",
															"\t\t    }",
															"\t\tCouldResultBeEvaluated(true);",
															"\t    } catch (error) ",
															"\t    {",
															"            CouldResultBeEvaluated(false);",
															"\t    }",
															"    ",
															"    // Functions",
															"    ",
															"    function CouldResultBeEvaluated(success) ",
															"    {",
															"        pm.test(\"CouldResultBeEvaluated\", function () ",
															"        {",
															"            pm.expect(success).to.be.true;",
															"        });",
															"    }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// alarm-raising-threshold",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of alarm-raising-threshold--------------------------\");",
															"        ",
															"        var keysOfDatatypeInstanceUnderTest = [{},{}];    ",
															"        var DATATYPE_UNDER_TEST = \"g-826-threshold-cross-alarm-list\";",
															"        var ATTRIBUTE_UNDER_TEST = \"alarm-raising-threshold\";",
															"\t\tconst DATATYPE_INDEX_UNDER_TEST = 0;",
															"\t\tkeysOfDatatypeInstanceUnderTest[0].key=\"g-826-value-kind\";",
															"\t\tkeysOfDatatypeInstanceUnderTest[1].value=\"granularity-period\";",
															"\t\ttry ",
															"\t\t{",
															"\t\t    var currentValue;",
															"\t\t    if ( (DATATYPE_UNDER_TEST===\"\") ) ",
															"\t\t    {",
															"                currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"\t\t    } ",
															"\t\t    else ",
															"\t\t    {",
															"                currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"                keysOfDatatypeInstanceUnderTest[0].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"g-826-value-kind\"];",
															"                keysOfDatatypeInstanceUnderTest[1].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"granularity-period\"];",
															"\t\t    }",
															"\t\tCouldCurrentConfigurationValuesBeRead(currentValue);",
															"\t    } catch (error) ",
															"\t    {",
															"\t\t    CouldCurrentConfigurationValuesBeRead();",
															"\t    }",
															"\t    try ",
															"\t    {",
															"            let alarmClearingThreshold = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"alarm-clearing-threshold\"];",
															"            var dummyValue =  alarmClearingThreshold + Math.floor(Math.random() * 9);",
															"            CouldDummyValueBeDefined(true);",
															"\t    } ",
															"\t    catch (error) ",
															"\t    {",
															"            CouldDummyValueBeDefined(false);",
															"\t    }",
															"\t    var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"\t\t",
															"\t\t// Self Testing Functions",
															"    \tfunction CouldCurrentConfigurationValuesBeRead(currentValue) ",
															"    \t{",
															"\t\t    pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () ",
															"\t\t    {",
															"            pm.expect(currentValue).to.be.a(\"number\");",
															"\t\t    });",
															"\t    }",
															"\t    function CouldDummyValueBeDefined(success) ",
															"\t    {",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"            pm.expect(success).to.be.true;",
															"        });",
															"\t}",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try ",
															"        {",
															"\t\t    if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString) ) ",
															"            {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"\t\t    } ",
															"\t\t    else ",
															"\t\t    {",
															"                if ( (capability[\"performance-monitoring-is-avail\"] === false)",
															"                && (resultValueString === \"-1\") ) ",
															"                {",
															"                     configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } ",
															"                else ",
															"                {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"                }",
															"\t\t    }",
															"            CouldResultBeEvaluated(true);",
															"\t    } ",
															"\t    catch (error) ",
															"\t    {",
															"            CouldResultBeEvaluated(false);",
															"\t    }",
															"    ",
															"        // Functions",
															"    ",
															"        function CouldResultBeEvaluated(success) ",
															"        {",
															"            pm.test(\"CouldResultBeEvaluated\", function () ",
															"            {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"",
															"// alarm-clearing-threshold",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of alarm-clearing-threshold--------------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"g-826-threshold-cross-alarm-list\";",
															"        var keysOfDatatypeInstanceUnderTest = [{},{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"alarm-clearing-threshold\";",
															"\t\tconst DATATYPE_INDEX_UNDER_TEST = 0;",
															"\t\tkeysOfDatatypeInstanceUnderTest[0].key = \"g-826-value-kind\";",
															"        keysOfDatatypeInstanceUnderTest[1].key = \"granularity-period\";",
															"\t\ttry ",
															"\t    {",
															"\t\t    var currentValue;",
															"\t\t    if ( (DATATYPE_UNDER_TEST===\"\") ) {",
															"                currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"\t\t    } ",
															"\t\t    else ",
															"\t\t    {",
															"                currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"                keysOfDatatypeInstanceUnderTest[0].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"g-826-value-kind\"];",
															"                keysOfDatatypeInstanceUnderTest[1].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"granularity-period\"];",
															"\t\t    }",
															"\t\t    CouldCurrentConfigurationValuesBeRead(currentValue);",
															"\t    } catch (error) {",
															"            CouldCurrentConfigurationValuesBeRead();",
															"\t    }",
															"        try ",
															"        {",
															"            let alarmRaisingThreshold = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"alarm-raising-threshold\"];",
															"            var dummyValue = Math.floor(Math.random() * alarmRaisingThreshold);",
															"            CouldDummyValueBeDefined(alarmRaisingThreshold, dummyValue);",
															"\t    } catch (error) {",
															"            CouldDummyValueBeDefined();",
															"\t    }   ",
															"\t    var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"\t    ",
															"        // Self Testing Functions",
															"\t    function CouldCurrentConfigurationValuesBeRead(currentValue) {",
															"\t        pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
															"                pm.expect(currentValue).to.be.a(\"number\");",
															"\t        });",
															"    \t}",
															"",
															"\t    function CouldDummyValueBeDefined(alarmRaisingThreshold, dummyValue) {",
															"            pm.test(\"CouldAlarmRaisingThresholdBeRetrieved\", function () {",
															"                pm.expect(alarmRaisingThreshold).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCalculated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"\t    }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"    try ",
															"    {",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString) ) ",
															"        {",
															"            configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            if ( (capability[\"performance-monitoring-is-avail\"] === false)",
															"                && (resultValueString === \"-1\") ) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"            } else {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"            }",
															"        }",
															"        CouldResultBeEvaluated(true);",
															"\t} catch (error) ",
															"\t{",
															"        CouldResultBeEvaluated(false);",
															"\t}",
															"    ",
															"    // Functions",
															"    function CouldResultBeEvaluated(success) ",
															"    {",
															"        pm.test(\"CouldResultBeEvaluated\", function () {",
															"            pm.expect(success).to.be.true;",
															"            });",
															"    }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// xlts-level",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of xlts-level--------------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"xlts-threshold-cross-alarm-list\";",
															"        var keysOfDatatypeInstanceUnderTest = [{},{},{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"xlts-level\";",
															"        const DATATYPE_INDEX_UNDER_TEST = 0;",
															"        keysOfDatatypeInstanceUnderTest[0].key=\"level-threshold-second-kind\";",
															"        keysOfDatatypeInstanceUnderTest[1].key=\"granularity-period\";",
															"        keysOfDatatypeInstanceUnderTest[2].key=\"xlts-threshold-cross-alarm-definition-number\";",
															"\t\ttry {",
															"\t\t    var currentValue;",
															"\t\t    if ( (DATATYPE_UNDER_TEST===\"\") ) {",
															"                currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"\t\t    } else {",
															"                currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"                keysOfDatatypeInstanceUnderTest[0].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"level-threshold-second-kind\"];",
															"                keysOfDatatypeInstanceUnderTest[1].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"granularity-period\"];",
															"                keysOfDatatypeInstanceUnderTest[2].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"xlts-threshold-cross-alarm-definition-number\"];",
															"\t\t    }",
															"\t\t    CouldCurrentConfigurationValuesBeRead(currentValue);",
															"\t\t} catch (error) {",
															"\t\t    CouldCurrentConfigurationValuesBeRead();",
															"\t\t}",
															"",
															"\t\ttry {",
															"\t\t    dummyValue = Math.floor(Math.random() * -99);",
															"\t\t    CouldDummyValueBeDefined(true);",
															"\t\t} catch (error) {",
															"\t\t    CouldDummyValueBeDefined(false);",
															"\t\t}",
															"\t\t",
															"\t\tvar KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"\t\t",
															"\t\t// Self Testing Functions",
															"\t\tfunction CouldCurrentConfigurationValuesBeRead(currentValue) {",
															"\t\t    pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
															"                pm.expect(currentValue).to.be.a(\"number\");",
															"\t\t    });",
															"\t\t}",
															"",
															"\t\tfunction CouldDummyValueBeDefined(success) {",
															"\t\t    pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(success).to.be.true;",
															"\t\t    });",
															"\t\t}",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    EvaluatingResult = () => {",
															"        try {",
															"\t\t    if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString) ) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"\t\t\t} else {",
															"\t\t\t    if ( (capability[\"performance-monitoring-is-avail\"] === false)",
															"                && (resultValueString === \"-1\") ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"\t\t\t    } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"\t\t\t    }",
															"\t\t    }",
															"\t\t    CouldResultBeEvaluated(true);",
															"\t\t} catch (error) {",
															"\t\t    CouldResultBeEvaluated(false);",
															"\t\t}",
															"    ",
															"    // Functions",
															"    function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// xlts-threshold-cross-alarm-list/amount-of-seconds",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of xlts-threshold-cross-alarm-list/amount-of-seconds--------------------------\");",
															"             ",
															"        var DATATYPE_UNDER_TEST = \"xlts-threshold-cross-alarm-list\";",
															"        var keysOfDatatypeInstanceUnderTest = [{},{},{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"amount-of-seconds\";",
															"        const DATATYPE_INDEX_UNDER_TEST = 0;",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"level-threshold-second-kind\";",
															"        keysOfDatatypeInstanceUnderTest[1].key = \"granularity-period\";",
															"        keysOfDatatypeInstanceUnderTest[2].key = \"xlts-threshold-cross-alarm-definition-number\";",
															"\t\ttry {",
															"\t\t    var currentValue;",
															"\t\t    if ( (DATATYPE_UNDER_TEST===\"\") ) {",
															"                currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"\t\t    } else {",
															"                currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"                keysOfDatatypeInstanceUnderTest[0].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"level-threshold-second-kind\"];",
															"                keysOfDatatypeInstanceUnderTest[1].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"granularity-period\"];",
															"                keysOfDatatypeInstanceUnderTest[2].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"xlts-threshold-cross-alarm-definition-number\"];",
															"\t\t    }",
															"\t\t    CouldCurrentConfigurationValuesBeRead(currentValue);",
															"\t    } catch (error) {",
															"\t\t    CouldCurrentConfigurationValuesBeRead();",
															"\t    }",
															"",
															"\ttry {",
															"        dummyValue = Math.floor(Math.random() * 127);",
															"        CouldDummyValueBeDefined(true);",
															"\t} catch (error) {",
															"        CouldDummyValueBeDefined(false);",
															"\t}",
															"\tvar KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"\t",
															"\t// Self Testing Functions",
															"\tfunction CouldCurrentConfigurationValuesBeRead(currentValue) {",
															"        pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
															"            pm.expect(currentValue).to.be.a(\"number\");",
															"        });",
															"\t}",
															"",
															"\tfunction CouldDummyValueBeDefined(success) {",
															"        pm.test(\"CouldDummyValueBeDefined\", function () {",
															"            pm.expect(success).to.be.true;",
															"    });",
															"\t}",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try {",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString) ) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"            } else {",
															"                if ( (capability[\"performance-monitoring-is-avail\"] === false)",
															"                && (resultValueString === \"-1\") ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(true);",
															"\t    } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"\t    }",
															"    ",
															"    // Functions",
															"    function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// acm-threshold-cross-alarm-list/transmission-mode",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of acm-threshold-cross-alarm-list/transmission-mode--------------------------\");",
															"           ",
															"        var DATATYPE_UNDER_TEST = \"acm-threshold-cross-alarm-list\";",
															"        var keysOfDatatypeInstanceUnderTest = [{},{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"transmission-mode\";",
															"\t\tconst DATATYPE_INDEX_UNDER_TEST = 0;",
															"\t\tkeysOfDatatypeInstanceUnderTest[0].key = \"acm-threshold-cross-alarm-definition-number\";",
															"        keysOfDatatypeInstanceUnderTest[1].key = \"granularity-period\";",
															"\t\ttry {",
															"            var currentValue;",
															"            if ( (DATATYPE_UNDER_TEST===\"\") ) {",
															"                currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"            } else {",
															"                currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"                keysOfDatatypeInstanceUnderTest[0].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"acm-threshold-cross-alarm-definition-number\"];",
															"                keysOfDatatypeInstanceUnderTest[1].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"granularity-period\"];",
															"            }",
															"            CouldCurrentConfigurationValuesBeRead(currentValue);",
															"\t    } catch (error) {",
															"            CouldCurrentConfigurationValuesBeRead();",
															"\t    }",
															"",
															"\t    try {",
															"            let randomTransmissionModeIndex = Math.floor(Math.random() * capability[\"transmission-mode-list\"].length);",
															"            dummyValue = capability[\"transmission-mode-list\"][randomTransmissionModeIndex][\"transmission-mode-name\"];",
															"            CouldDummyValueBeDefined(true);",
															"\t    } catch (error) {",
															"            CouldDummyValueBeDefined(false);",
															"\t    }",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"\t    ",
															"\t    // Self Testing Functions",
															"        function CouldCurrentConfigurationValuesBeRead(currentValue) {",
															"\t\t    pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
															"                pm.expect(currentValue).to.be.a(\"string\");",
															"                pm.expect(currentValue).to.not.have.lengthOf(0);",
															"\t\t    });",
															"\t    }",
															"",
															"\t    function CouldDummyValueBeDefined(success) {",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"\t    }",
															"    };",
															"\t",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"       try {",
															"            var performanceMonitoringIsAvail = capability[\"performance-monitoring-is-avail\"];",
															"            var transmissionModeMin = JSON.stringify(configuration[\"transmission-mode-min\"]);",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString) ) ",
															"            {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"            } else {",
															"                if ( (performanceMonitoringIsAvail===false)",
															"                || (resultValueString===transmissionModeMin) ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(true);",
															"\t    } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"\t    }",
															"    ",
															"    // Functions",
															"    function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// acm-threshold-cross-alarm-list/amount-of-seconds",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of acm-threshold-cross-alarm-list/amount-of-seconds--------------------------\");",
															"           ",
															"        var DATATYPE_UNDER_TEST = \"acm-threshold-cross-alarm-list\";",
															"        var keysOfDatatypeInstanceUnderTest = [{},{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"amount-of-seconds\";",
															"\t\tconst DATATYPE_INDEX_UNDER_TEST = 0;",
															"\t\tkeysOfDatatypeInstanceUnderTest[0].key = \"acm-threshold-cross-alarm-definition-number\";",
															"        keysOfDatatypeInstanceUnderTest[1].key = \"granularity-period\";",
															"\t\ttry {",
															"\t\t    var currentValue;",
															"            if ( (DATATYPE_UNDER_TEST===\"\") ) {",
															"                currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"            } else {",
															"                currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"                keysOfDatatypeInstanceUnderTest[0].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"acm-threshold-cross-alarm-definition-number\"];",
															"                keysOfDatatypeInstanceUnderTest[1].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"granularity-period\"];",
															"            }",
															"            CouldCurrentConfigurationValuesBeRead(currentValue);",
															"\t    } catch (error) {",
															"            CouldCurrentConfigurationValuesBeRead();",
															"\t    }",
															"",
															"\t    try {",
															"            var dummyValue =  currentValue - 5 + Math.floor(Math.random() * 10);",
															"            CouldDummyValueBeDefined(true);",
															"\t    } catch (error) {",
															"            CouldDummyValueBeDefined(false);",
															"\t    }",
															"\t    var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"\t\t// Self Testing Functions",
															"\t    function CouldCurrentConfigurationValuesBeRead(currentValue) {",
															"            pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
															"                pm.expect(currentValue).to.be.a(\"number\");",
															"            });",
															"\t    }",
															"",
															"\t    function CouldDummyValueBeDefined(success) {",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"\t    }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try {",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString) ) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"            } else {",
															"                if ( (capability[\"performance-monitoring-is-avail\"] === false)",
															"                && (resultValueString === \"-1\") ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(true);",
															"\t    } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"\t    }",
															"    ",
															"    // Functions",
															"    function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}  attributes.push(newAttribute);",
															"",
															"// clearing-threshold-cross-alarms-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of clearing-threshold-cross-alarms-is-on-----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"clearing-threshold-cross-alarms-is-on\";",
															"            ",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"            ",
															"    EvaluatingResult = () => {",
															"\ttry {",
															"",
															"    if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) {",
															"        configurationValidationResults[attributeUnderTest] = \"ok\";",
															"    } else {",
															"        if ( (resultValueString === \"true\") ) {",
															"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"        } else {",
															"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"        }",
															"    }",
															"",
															"    CouldResultBeEvaluated(true);",
															"\t} catch (error) {",
															"    CouldResultBeEvaluated(false);",
															"\t}",
															"\t",
															"\t// Self Testing Functions",
															"\t\tfunction CouldResultBeEvaluated(success) {",
															"\t\tpm.test(\"CouldResultBeEvaluated\", function () {",
															"        pm.expect(success).to.be.true;",
															"\t\t});",
															"\t\t}",
															"\t};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// performance-monitoring-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of performance-monitoring-is-on-----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"            ",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"            ",
															"    EvaluatingResult = () => {",
															"\ttry {",
															"",
															"    if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) {",
															"        configurationValidationResults[attributeUnderTest] = \"ok\";",
															"    } else {",
															"        if ( (resultValueString === \"true\") ) {",
															"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"        } else {",
															"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"        }",
															"    }",
															"",
															"    CouldResultBeEvaluated(true);",
															"\t} catch (error) {",
															"    CouldResultBeEvaluated(false);",
															"\t}",
															"\t",
															"\t// Self Testing Functions",
															"\t\tfunction CouldResultBeEvaluated(success) {",
															"\t\tpm.test(\"CouldResultBeEvaluated\", function () {",
															"        pm.expect(success).to.be.true;",
															"\t\t});",
															"\t\t}",
															"\t};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"",
															"/*//    another attribute's YANG name",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------Checking Configuration of performance-monitoring-is-on-----------------\");",
															"            ",
															"        try {",
															"            ",
															"            ",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"?\");",
															"            });",
															"        }    ",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try {",
															"        ",
															"        ",
															"            CouldResultBeEvaluated(true);",
															"        } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"        }",
															"            ",
															"        // Self Testing Function",
															"        function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, EvaluatingResultAsaString);",
															"}   //attributes.push(newAttribute);",
															"*/",
															"",
															"pm.collectionVariables.set( \"attributes\", attributes);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function ConvertingThisFunctionToString(functionToBeConverted) {",
															"    let functionAsAString = String(functionToBeConverted);",
															"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
															"    return functionAsAString.slice(indexOfFirstCurly);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointAirInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7d7914a1-3afe-4727-b654-054a0a0feacc",
														"exec": [
															"console.log(\"\\n--------------EntryPoint of AirInterface Validation of Configuration-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the AirInterfaceConfiguration TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"numberOfExistingInterfaces :\");",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].airInterfaceList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    console.log(\"numberOfExistingInterfaces :\" + numberOfExistingInterfaces);",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointAirInterfaceConfiguration\");",
															"        console.log(\"Proceeding with terminating AirInterface validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST = 0;",
															"",
															"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "39699f0e-2f34-4b98-8aa1-9672c25767f1",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c6b0afa8-02d9-4a7f-9758-3136cf25278d",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "CollectionInformationLoading",
									"item": [
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "851a5bb2-f0a0-4a99-83b8-995a0f1c0fdf",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "32ff56d8-cb59-40fc-9ec9-2342dd404d24",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "cf790d11-23e1-4a00-9b87-c46f20d1a750",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b84d2cb-6c8d-446e-b385-e9dbe1e8903a",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceStatus",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1719616b-da5e-4eb0-ab26-85b9c654ae95",
														"exec": [
															"console.log(\"\\n------------------------------Uploading Interface Status----------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Status",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9b8dfa58-fc0f-4a9d-8310-7d90a233aed3",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5eee2182-3696-480c-bfa0-4270336ce36c",
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "AttributeConfiguration",
									"item": [
										{
											"name": "EntryPointAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "57ae97c8-0742-4a79-9b74-cded5f905f46",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the AttributeConfiguration Tests ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var attributes = pm.collectionVariables.get(\"attributes\");",
															"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
															"    ",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    ",
															"    CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"        ",
															"    if ( indexOfAttributeUnderTest < attributes.length ) {",
															"        postman.setNextRequest();",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointAttributeConfiguration\");",
															"    }",
															"        ",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri) {",
															"    pm.test(\"CouldTheAttributesBeLoaded\", function () {",
															"        pm.expect(attributes).to.be.an(\"array\");",
															"    });",
															"    pm.test(\"CouldIndexOfAttributeUnderTestBeLoaded\", function () {",
															"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"CouldTheDummyUriBeLoaded\", function () {",
															"        pm.expect(dummyUri).to.be.a(\"string\");",
															"        pm.expect(dummyUri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Writing",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7a688efa-bbed-473d-8f42-89962cc23eeb",
														"exec": [
															"/****************************************************************************************",
															"* Retrieving DummyCode",
															"****************************************************************************************/",
															"try {",
															"    var dummyCode = JSON.parse(pm.response.code);",
															"    var dummyErrorMessage = \"\";",
															"    if (Math.floor(dummyCode / 100) !== 2) {",
															"        if (pm.response) {",
															"            var dummyErrorMessage = JSON.parse(pm.response.stream).errors.error[0][\"error-message\"];",
															"            pm.variables.set(\"responseForMantis\", pm.response.json());  //Mantis purpose storing request uri            ",
															"        } else {",
															"            var emptyResponse = {};",
															"            pm.variables.set(\"responseForMantis\", emptyResponse);",
															"        }",
															"        CouldTheResponseBeStoredForMntis();",
															"    }",
															"    CouldResponseBeRetrieved(dummyCode, dummyErrorMessage);",
															"} catch (error) {",
															"    CouldResponseBeRetrieved();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting Local Variables",
															"****************************************************************************************/",
															"pm.variables.set(\"dummyCode\", dummyCode);",
															"pm.variables.set(\"dummyErrorMessage\", dummyErrorMessage);",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldResponseBeRetrieved(responseCode, responseErrorMessage) {",
															"    pm.test(\"CouldTheDummyCodeOfPuttingBeReceived\", function () {",
															"        pm.expect(responseCode).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"CouldTheErrorMessagePuttingBeComposed\", function () {",
															"        pm.expect(responseErrorMessage).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldTheResponseBeStoredForMntis() {",
															"    pm.test(\"CouldTheResponseBeStoredForMntis\", function () {",
															"        pm.expect(pm.variables.get(\"responseForMantis\")).to.be.an(\"object\");;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "17aa283f-83a9-43e6-b1ab-222f835a11bb",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Writing",
															"* ",
															"* This Request is for PUTting an boolean attribute with the alternate value and",
															"* providing this value as dummyValueString to the local Variables.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfWritingAsaString = pm.environment.get(\"PreRequestOfWritingAsaString\");",
															"    eval(PreRequestOfWritingAsaString);",
															"    CouldPreRequestOfWritingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfWritingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfWritingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfWritingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Reading",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c0787918-239e-4998-a5a8-c4ce7dd324cc",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Reading",
															"* ",
															"* This Request is for GETting the value of the attributeUnderTest and providing it ",
															"* as ResultValue to the local Variables",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfReadingAsaString = pm.environment.get(\"PreRequestOfReadingAsaString\");",
															"    eval(PreRequestOfReadingAsaString);",
															"    CouldPreRequestOfReadingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfReadingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfReadingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfReadingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "69c0254b-6a8a-4622-81ed-b8e3cb550d1a",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PostRequestOfReadingAsaString = pm.environment.get(\"PostRequestOfReadingAsaString\");",
															"    eval(PostRequestOfReadingAsaString);",
															"    CouldPostRequestOfReadingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPostRequestOfReadingBeExecuted();",
															"}",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPostRequestOfReadingBeExecuted(success) {",
															"    pm.test(\"CouldPostRequestOfReadingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Evaluating",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c03bc8f7-73fa-4e51-b74e-2069eb81a5d3",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Evaluating",
															"* ",
															"* This Request compares resultValue with dummyValue.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfEvaluatingAsaString = pm.environment.get(\"PreRequestOfEvaluatingAsaString\");",
															"    eval(PreRequestOfEvaluatingAsaString);",
															"    CouldPreRequestOfEvaluatingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfEvaluatingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfEvaluatingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfEvaluatingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Restoring",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4bf35822-3a03-4b04-bf92-cb960e155735",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Restoring",
															"* ",
															"* This Request is for Restoring the initial value to the attributeUnderTest",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfRestoringAsaString = pm.environment.get(\"PreRequestOfRestoringAsaString\");",
															"    eval(PreRequestOfRestoringAsaString);",
															"    CouldPreRequestOfRestoringBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfRestoringBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfRestoringBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfRestoringBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "60c6fc48-f563-48a8-a249-38733558eeb8",
														"exec": [
															"/****************************************************************************************",
															"* Setting Local Variables",
															"****************************************************************************************/   ",
															"pm.variables.clear();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ReversalPointAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "00bfbe45-9f23-4d31-ad3d-85b90394965f",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"        ",
															"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
															"        ",
															"    CouldTheInputBeLoaded(dummyUri, indexOfAttributeUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextAttributeUnderTest = indexOfAttributeUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", indexOfPotentialNextAttributeUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointAttributeConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfAttributeUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "569e199a-57e8-4f11-9145-4118c8e8af60",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1f1785fb-bc15-46bf-afca-1bcf5ebef32d",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is terminating the Test",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "fae7b31c-3ca8-41d2-a9f7-494f25082223",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5af7931e-0614-4b76-a559-ba9191ff1a8c",
														"exec": [
															"console.log(\"\\n-------------------Restoring the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"        ",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration",
															"                                                   );",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    completeClassName = moduleUnderTest + \":\" + technologyUnderTest + \"-configuration\";",
															"    configuration = AddHeadlineToDataObject(configuration, completeClassName);",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6bdba0e0-1a3b-4895-a70f-5a8133022d9f",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "90f43e66-d8d9-42fc-85d1-8a3cf127789d",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "46643a24-6bf7-438d-87c3-d5cc3e785f3c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointAirInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "486d7781-d1f3-41dd-a2b7-7df157a9a422",
														"exec": [
															"console.log(\"\\n-------------ReversalPoint of AirInterface Validation of Configuration---------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Console.log of Validation Results",
															" ****************************************************************************************/",
															"let allConfigurationValidationResults = { \"allConfigurationValidationResults\" : configurationValidationResults };",
															"console.log(allConfigurationValidationResults);",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointAirInterfaceConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "75ba4360-a699-4900-bdea-1ebd1c540f77",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointAirInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d4b70ce3-7789-47d9-aa10-83ab653a6425",
														"exec": [
															"console.log(\"\\n----------------------Terminating AirInterfaceConfiguration--------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is for clearing the Collection variables and terminating the TestCase",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b951519c-1a28-4c53-94cd-b893d492e857",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9322287f-5392-43d1-838b-957265f261d5",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ff7f75db-baf2-47f6-85b6-5657ed0fc03b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "31a481ad-d37c-47a1-8c52-bb37327e23ae",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d685d9b8-18ed-4263-b239-d631ad5af36d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "EthernetContainerValidation",
					"item": [
						{
							"name": "EthernetContainerCompleteness",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "8f677c59-5c2e-4ad4-ada9-2ddbd94fb7e0",
														"exec": [
															"console.log(\"\\n\\n============================ EthernetContainerCompleteness.3 =============================\");",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Completeness of EthernetContainer Objects against definition ",
															"* ",
															"*                   EthernetContainer_2.0.0-tsp.191123.1240",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"* ",
															"****************************************************************************************/",
															" ",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"all\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"ethernet-container-2-0:ethernet-container-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function() {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function() {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "be49e52f-2f33-49e1-8cd8-6406b38eca47",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointEthernetContainerCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "268132d1-e3b3-412a-8150-b0c9a67a525e",
														"exec": [
															"console.log(\"\\n--------------EntryPoint of EthernetContainer Validation for Completeness-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the EthernetContainerCompleteness TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].ethernetContainerList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointEthernetContainerCompleteness\");",
															"        console.log(\"Proceeding with terminating EthernetContainer validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4751df59-f2ac-4b02-bfb0-dbd8caf3dece",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "eaf37c7f-7b63-4871-92f5-7d4629d00f91",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "55ad3655-10e2-4ba4-b471-54041a3e8ba1",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4835c4c1-b1e4-4f30-acfa-459673954b27",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "8319493e-622f-494d-9c11-5b7b148a9793",
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f8869e9c-7295-4153-9f33-5635b129ca1a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bce76e80-be6e-4dd1-ad21-cc695554dabe",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "NetworkPreparation",
									"item": [
										{
											"name": "SwitchingOnMonitoring",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "debbe656-fc80-48fc-8487-9b4a023a3770",
														"exec": [
															"console.log(\"\\n---------------------------------Switching Monitoring On----------------------------------\");",
															"/****************************************************************************************",
															" * ",
															" * Switching Monitoring On",
															" * ",
															" * This Request is for activating collection of performance data on the device under",
															" * test, so the data can be retrieved during validating completeness of the implementation",
															" *  ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration);",
															"} catch (error) {",
															"    CouldInputForSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Forming the Body",
															" ****************************************************************************************/",
															"try {",
															"    let requestBodyString = ('{ \"' + moduleUnderTest + ':performance-monitoring-is-on\": true }');",
															"    var requestBody = JSON.parse(requestBodyString);",
															"    CouldRequestBodyBeFormed(requestBody);",
															"} catch (error) {",
															"    CouldRequestBodyBeFormed();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Calling for Preparation of the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(requestBody);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration) {",
															"    pm.test(\"CouldInputForSwitchingMonitoringOnBeLoaded\", function() {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(configuration).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyBeFormed(requestBody) {",
															"    pm.test(\"CouldRequestBodyBeFormed\", function() {",
															"        pm.expect(requestBody).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, ",
															"                                                keysOfDatatypeInstanceUnderTest,",
															"                                                attributeUnterTest, ",
															"                                                contentType,",
															"                                                filteredDepth, ",
															"                                                filteredFields, ",
															"                                                requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"            \"current-problems\", \"current-performance\",",
															"            \"historical-performances\"",
															"        ]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function() {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4c9e96fc-6d40-4551-a252-ca51725593af",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched on.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched on.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c5454bf7-dd61-40f4-86c7-b14a60120ca3",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "03d28eb2-222a-4088-b814-bed920df30b2",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ValidationRequests",
									"item": [
										{
											"name": "PacCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "27378a44-ff6c-4e91-9e66-1e3a788a3360",
														"exec": [
															"console.log(\"\\n---------------------Checking EthernetContainer_Pac for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* PacCompleteness",
															"* ",
															"* This Request is for validating EthernetContainer Pac Objects against definition ",
															"* EthernetContainer_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the *_Pac class",
															"*  - availability of all attributes in this particular class",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"pac\";             // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 3;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_PAC_SCHEMA = {\t",
															"    \"type\": \"object\",",
															"\t\"properties\": {",
															"        \"ethernet-container-capability\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"available-queue-list\":                                     { \"type\": \"array\"   },",
															"                \"explicit-congestion-notification-is-avail\": \t\t\t\t{ \"type\": \"boolean\" },",
															"                \"ingress-policing-is-avail\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"supported-header-compression-kind-list\":                   { \"type\": \"array\"   },",
															"                \"egress-shaping-is-avail\": \t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"information-rate-min\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"information-rate-max\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"burst-size-min\": \t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"burst-size-max\": \t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"bundling-is-avail\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"bundling-group-size-max\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"support-of-management-frames-without-preamble-is-avail\": \t{ \"type\": \"boolean\" },",
															"                \"fec-is-avail\": \t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"fec-word-size-max\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"supported-fec-redundancy-size-list\":                       { \"type\": \"array\"   },",
															"                \"supported-fec-interleaver-kind-list\":                      { \"type\": \"array\"   },",
															"                \"supported-fec-interleaver-depth-list\":                     { \"type\": \"array\"   },",
															"                \"encryption-is-avail\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"admin-shut-down-is-avail\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"supported-loop-back-kind-list\":                            { \"type\": \"array\"   },",
															"                \"maintenance-timer-range\": \t\t\t\t\t\t\t\t\t{ \"type\": \"string\"  },",
															"                \"statistics-is-avail\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"supported-alarm-list\":                                     { \"type\": \"array\"   },",
															"                \"performance-monitoring-is-avail\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"            },",
															"        },",
															"        \"ethernet-container-configuration\":{",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"interface-name\": \t\t\t\t\t\t\t                { \"type\": \"string\"  },",
															"                \"interface-is-on\": \t\t\t\t\t\t\t                { \"type\": \"boolean\" },",
															"                \"queue-behavior-list\":                                      { \"type\": \"array\"   },",
															"                \"explicit-congestion-notification-is-on\": \t                { \"type\": \"boolean\" },",
															"                \"ingress-policing-profile\":                                 { \"type\": \"string\"  },",
															"                \"egress-shaping-is-on\":                  \t\t\t\t\t{ \"type\": \"boolean\" },\t",
															"                \"maximum-information-rate\": \t\t\t\t                { \"type\": \"number\"  },",
															"                \"maximum-burst-size\": \t\t\t\t\t\t                { \"type\": \"number\"  },\t",
															"                \"bundling-is-on\": \t\t\t\t\t\t\t                { \"type\": \"boolean\" },",
															"                \"header-compression-kind\":                                  { \"type\": \"string\"  },",
															"                \"fec-is-on\": \t\t\t\t\t\t\t\t                { \"type\": \"boolean\" },",
															"                \"fec-word-size\": \t\t\t\t\t\t\t                { \"type\": \"number\"  },\t\t",
															"                \"fec-redundancy-size\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_2\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_4\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_8\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_16\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_20\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t\t ]",
															"                },",
															"                \"fec-interleaver-kind\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_BLOCK\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_CONVOLUTION\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t\t  ]",
															"                },",
															"                \"fec-interleaver-depth\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_1\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_2\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_3\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_4\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_6\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_8\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_12\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_16\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_24\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_32\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_48\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_96\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t\t   ]",
															"                },",
															"                \"encryption-is-on\": \t\t\t\t\t\t                { \"type\": \"boolean\" },\t",
															"                \"cryptographic-key\": \t\t\t\t\t\t                { \"type\": \"string\"  },\t\t",
															"                \"loop-back-kind-on\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t   ]",
															"                },",
															"                \"maintenance-timer\": \t\t\t\t\t\t                { \"type\": \"number\"  },",
															"                \"statistics-is-on\": \t\t\t\t\t\t                { \"type\": \"boolean\" },",
															"                \"problem-kind-severity-list\":                               { \"type\": \"array\"   },",
															"                \"performance-monitoring-is-on\": \t\t\t                { \"type\": \"boolean\" },",
															"            },",
															"        },",
															"        \"ethernet-container-status\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"interface-status\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_UP\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_DOWN\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_TESTING\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_DORMANT\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t  ]",
															"                },",
															"                \"bundling-is-up\":                                           { \"type\": \"boolean\" },",
															"                \"remote-site-is-faulty\":                                    { \"type\": \"boolean\" },                ",
															"                \"loop-back-kind-up\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t\t]",
															"                },",
															"                \"statistics-is-up\":                                         { \"type\": \"boolean\" },",
															"                \"performance-monitoring-is-up\":                             { \"type\": \"boolean\" },",
															"                \"timestamp\":                                                { \"type\": \"string\"  },",
															"                \"last-10-sec-data-input-rate\":                              { \"type\": \"integer\" },",
															"                \"last-10-sec-data-output-rate\":                             { \"type\": \"integer\" },",
															"                \"total-bytes-input\":                                        { \"type\": \"string\" },",
															"                \"total-bytes-output\":                                       { \"type\": \"string\" },",
															"                \"forwarded-bytes-input\":                                    { \"type\": \"string\" },",
															"                \"forwarded-bytes-output\":                                   { \"type\": \"string\" },",
															"            },",
															"        },",
															"        \"ethernet-container-current-problems\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"current-problem-list\":                                     { \"type\": \"array\"   },",
															"                \"number-of-current-problems\":  \t\t\t                    { \"type\": \"number\"  },",
															"                \"time-of-latest-change\":                                    { \"type\": \"string\"  },",
															"            },",
															"        },",
															"        \"ethernet-container-current-performance\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"current-performance-data-list\":                            { \"type\": \"array\"   },",
															"                \"number-of-current-performance-sets\":                       { \"type\": \"number\"  },",
															"            },",
															"\t    },",
															"        \"ethernet-container-historical-performances\":{",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"historical-performance-data-list\":                         { \"type\": \"array\"   },",
															"                \"number-of-historical-performance-sets\":                    { \"type\": \"number\"  },",
															"                \"time-of-latest-change\": \t\t\t                        { \"type\": \"string\"  },",
															"            },",
															"        },",
															"\t},",
															"\t\"required\": [\"ethernet-container-capability\",",
															"                    \"ethernet-container-configuration\",",
															"                    \"ethernet-container-status\",",
															"                    \"ethernet-container-current-problems\",",
															"                    \"ethernet-container-current-performance\",",
															"                    \"ethernet-container-historical-performances\",",
															"    ]",
															"};",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_PAC_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "d504c353-c13d-461b-b452-a61595b543a9",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CapabilityCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "13f993b8-0010-4900-a4cf-8bb4eca7e55f",
														"exec": [
															"console.log(\"\\n--------------------Checking EthernetContainerCapability for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* CapabilityCompleteness",
															"* ",
															"* This Request is for validating EthernetContainer Capability Objects against definition ",
															"* EthernetContainer_2.0.0-tsp.191123.1240",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Capability class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_CAPABILITY_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"available-queue-list\": {",
															"\t\t\t\"type\": \"array\",",
															"            \"items\": {",
															"            \t\"type\": \"object\",",
															"            \t\"properties\": {",
															"\t\t\t\t\t\"queue-name\": { \"enum\": [",
															"                                        \"ethernet-container-2-0:QUEUE_NAME_TYPE_BEST_EFFORT_QUEUE\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE1\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE2\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE3\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE4\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_EXPEDITED_FORWARDING_QUEUE\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_CLASS_SELECTOR_QUEUE6\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_CLASS_SELECTOR_QUEUE7\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_QUEUENAME_NOT_YET_DEFINED\"",
															"        \t\t\t\t\t\t\t]",
															"        \t\t\t}, \t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"max-queue-depth\": \t\t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\"queue-depth-configuration-is-avail\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\t\"available-dropping-behavior-kind-list\":{  ",
															"    \t\t\t\t\t\"type\": \"array\",",
															"    \t\t\t\t\t\"items\": { \"enum\": [\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_DROP_TAIL\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_RED\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_WRED\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_NOT_YET_DEFINED\"\t\t\t",
															"\t\t\t\t\t\t\t       ]",
															"        \t\t\t    }",
															"        \t\t\t},\t\t\t\t\t",
															"\t\t\t\t\t\"available-drop-precedence-kind-list\": {  ",
															"    \t\t\t\t\t\"type\": \"array\",",
															"    \t\t\t\t\t\"items\": { \"enum\": [\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_ALL\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_LOW\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_MEDIUM\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_HIGH\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_NOT_YET_DEFINED\"\t",
															"\t\t\t\t\t\t\t\t\t]",
															"        \t\t\t    }\t\t\t\t\t\t\t\t\t",
															"            \t\t},",
															"\t\t\t\t\t\"wred-profile-per-drop-precedence-is-available\":{ \"type\": \"boolean\" },",
															"\t\t\t\t\t\"available-scheduling-kind-list\": {  ",
															"    \t\t\t\t\t\"type\": \"array\",",
															"    \t\t\t\t\t\"items\": { \"enum\": [\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_STRICT\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_WFQ\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_WRR\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_DWRR\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_NOT_YET_DEFINED\"",
															"                                   ]",
															"                        }",
															"\t\t\t\t\t}",
															"\t\t\t\t},\t\t\t\t\t",
															"\t\t\t\t\"required\": [\"queue-name\",",
															"\t\t\t\t\t\t\t\t\"max-queue-depth\",",
															"\t\t\t\t\t\t\t\t\"queue-depth-configuration-is-avail\",",
															"\t\t\t\t\t\t\t\t\"available-dropping-behavior-kind-list\",",
															"\t\t\t\t\t\t\t\t\"available-drop-precedence-kind-list\",",
															"\t\t\t\t\t\t\t\t\"wred-profile-per-drop-precedence-is-available\",",
															"\t\t\t\t\t\t\t\t\"available-scheduling-kind-list\"",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"explicit-congestion-notification-is-avail\": \t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"ingress-policing-is-avail\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"supported-header-compression-kind-list\": {    ",
															"\t\t\t\"type\": \"array\",",
															"            \"items\": {\t\t",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"header-compression-name\": { \"type\": \"string\" },",
															"\t\t\t\t\t\"header-compression-mode\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:HEADER_COMPRESSION_MODE_TYPE_AUTO\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:HEADER_COMPRESSION_MODE_TYPE_PROTOCOL_BASED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:HEADER_COMPRESSION_MODE_TYPE_LENGTH_BASED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:HEADER_COMPRESSION_MODE_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t\t ]",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"compressed-protocol-layer-list\": {",
															"\t\t\t\t\t\t\"type\": \"array\",",
															"\t\t\t\t\t\t\"items\": { \"enum\": [\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_ETHERNET_MAC\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_VLAN\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_Q_IN_Q\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_MPLS\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_IPV4\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_IPV6\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_TCP\",\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_UDP\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_RTP\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_GTP_U\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_OTHERS\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t},\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"mpls-payload-kind-list\": { \t\t\t\t\t\t",
															"\t\t\t\t\t    \"type\": \"array\",",
															"\t\t\t\t\t\t\"items\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:MPLS_PAYLOAD_KIND_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:MPLS_PAYLOAD_KIND_TYPE_AUTO\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:MPLS_PAYLOAD_KIND_TYPE_ETH_O_MPLS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:MPLS_PAYLOAD_KIND_TYPE_IP_O_MPLS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:MPLS_PAYLOAD_KIND_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t   ]",
															"\t\t\t\t\t\t}",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"compressed-header-length\": { \"type\": \"integer\" }",
															"\t\t\t\t},",
															"\t\t\t\t\"required\": [\"header-compression-name\",",
															"\t\t\t\t\t\t\t\t\"header-compression-mode\",",
															"\t\t\t\t\t\t\t\t\"compressed-protocol-layer-list\",",
															"\t\t\t\t\t\t\t\t\"mpls-payload-kind-list\",",
															"\t\t\t\t\t\t\t\t\"compressed-header-length\"",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"egress-shaping-is-avail\": \t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"information-rate-min\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"information-rate-max\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"burst-size-min\": \t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"burst-size-max\": \t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"bundling-is-avail\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"bundling-group-size-max\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"support-of-management-frames-without-preamble-is-avail\": \t{ \"type\": \"boolean\" },",
															"\t\t\"fec-is-avail\": \t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"fec-word-size-max\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"supported-fec-redundancy-size-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": \t\t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"string\" }",
															"\t\t},",
															"\t\t\"supported-fec-interleaver-kind-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": \t\t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"string\"\t}",
															"\t\t},",
															"\t\t\"supported-fec-interleaver-depth-list\": {\t",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": \t\t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"string\" }",
															"\t\t},",
															"\t\t\"encryption-is-avail\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"admin-shut-down-is-avail\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"supported-loop-back-kind-list\": {  ",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": { \"enum\": [\t\t\t\t\t",
															"\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\",",
															"\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",",
															"\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",",
															"\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t   ]",
															"\t\t\t}\t",
															"\t\t},",
															"\t\t\"maintenance-timer-range\": \t\t\t\t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\"statistics-is-avail\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"supported-alarm-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": \t\t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"string\" }",
															"\t\t},",
															"\t\t\"performance-monitoring-is-avail\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" } \t\t",
															"\t},",
															"\t\"required\": [\"available-queue-list\",",
															"\t\t\t\t\t\"explicit-congestion-notification-is-avail\",",
															"\t\t\t\t\t\"ingress-policing-is-avail\",",
															"\t\t\t\t\t\"supported-header-compression-kind-list\",",
															"\t\t\t\t\t\"egress-shaping-is-avail\", \t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"information-rate-min\",\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"information-rate-max\",\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"burst-size-min\", \t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"burst-size-max\", \t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"bundling-is-avail\", \t\t\t\t\t\t\t\t\t\t ",
															"\t\t\t\t\t\"bundling-group-size-max\", \t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"support-of-management-frames-without-preamble-is-avail\", \t",
															"\t\t\t\t\t\"fec-is-avail\", \t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"fec-word-size-max\",\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"supported-fec-redundancy-size-list\",",
															"\t\t\t\t\t\"supported-fec-interleaver-kind-list\",",
															"\t\t\t\t\t\"supported-fec-interleaver-depth-list\",",
															"\t\t\t\t\t\"encryption-is-avail\",",
															"\t\t\t\t\t\"admin-shut-down-is-avail\",",
															"\t\t\t\t\t\"supported-loop-back-kind-list\",",
															"\t\t\t\t\t\"maintenance-timer-range\",",
															"\t\t\t\t\t\"statistics-is-avail\",",
															"\t\t\t\t\t\"supported-alarm-list\",",
															"\t\t\t\t\t\"performance-monitoring-is-avail\"",
															"\t]",
															"};",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_CAPABILITY_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3bfab7b4-23f9-4ee6-bb0b-0b8d4ea41a42",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ConfigurationCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2ea205c4-bd37-4acc-9d3a-f26a9448c23e",
														"exec": [
															"console.log(\"\\n----------------Checking EthernetContainerConfiguration for Completeness------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ConfigurationCompleteness",
															"* ",
															"* This Request is for validating EthernetContainer Configuration Objects against definition ",
															"* EthernetContainer_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Configuration class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_CONFIGURATION_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"        \"interface-name\": \t\t\t\t\t\t\t{ \"type\": \"string\" }, ",
															"        \"interface-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"queue-behavior-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"                    \"queue-name\": { \"enum\": [",
															"                                        \"ethernet-container-2-0:QUEUE_NAME_TYPE_BEST_EFFORT_QUEUE\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE1\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE2\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE3\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE4\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_EXPEDITED_FORWARDING_QUEUE\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_CLASS_SELECTOR_QUEUE6\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_CLASS_SELECTOR_QUEUE7\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_QUEUENAME_NOT_YET_DEFINED\"",
															"        \t\t\t\t\t\t\t]",
															"        \t\t\t},",
															"        \t\t\t\"queue-depth\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"dropping-behavior-kind\": { \"enum\": [",
															"        \t\t\t\t\t\t\t\t\t\t    \"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_DROP_TAIL\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_RED\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_WRED\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_NOT_YET_DEFINED\"\t\t\t",
															"        \t\t\t\t\t\t\t\t\t\t]",
															"        \t\t\t},",
															"        \t\t\t\"wred-behavior-list\": {",
															"            \t\t\t\"type\": \"array\",",
															"            \t\t\t\"items\": {",
															"            \t\t\t    \"type\": \"object\",",
															"            \t\t\t    \"properties\": {",
															"            \t\t\t\t    \"affected-drop-precedence\": { \"enum\": [",
															"                        \t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_ALL\",",
															"                        \t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_LOW\",",
															"                        \t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_MEDIUM\",",
															"                        \t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_HIGH\",",
															"                        \t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_NOT_YET_DEFINED\"\t",
															"                \t\t\t\t\t\t\t\t\t\t\t  ]",
															"            \t\t\t\t    },",
															"            \t\t\t\t    \"affected-protocol\": { \"enum\": [",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_NONE\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_ETHERNET_MAC\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_VLAN\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_Q_IN_Q\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_MPLS\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_IPV4\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_IPV6\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_TCP\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_UDP\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_RTP\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_GTP_U\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_OTHERS\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_NOT_YET_DEFINED\"",
															"            \t\t\t\t\t\t\t\t\t       ]",
															"            \t\t\t\t    },",
															"            \t\t\t\t    \"wred-profile\":   \t\t\t\t    { \"type\": \"string\" }",
															"            \t\t\t\t},",
															"            \t\t\t    \"required\": [\"affected-drop-precedence\",",
															"            \t\t\t\t    \t\t    \"affected-protocol\",",
															"            \t\t\t\t    \t\t    \"wred-profile\"",
															"            \t\t\t    ]",
															"            \t\t\t}",
															"    \t\t\t    },",
															"    \t\t\t    \"scheduler-kind\": { \"enum\": [",
															"                                            \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_STRICT\",",
															"                                            \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_WFQ\",",
															"                                            \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_WRR\",",
															"                                            \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_DWRR\",",
															"                                            \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_NOT_YET_DEFINED\"",
															"                                        ]",
															"                    },",
															"                    \"weighting\": \t\t\t\t\t\t\t{ \"type\": \"number\" }",
															"    \t\t    },",
															"    \t\t    \"required\": [\"queue-name\",",
															"                                \"queue-depth\",",
															"                                \"dropping-behavior-kind\",",
															"                                \"wred-behavior-list\",",
															"                                \"scheduler-kind\",",
															"                                \"weighting\"",
															"                ]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"explicit-congestion-notification-is-on\": \t{ \"type\": \"boolean\" }, ",
															"        \"ingress-policing-profile\":                 { \"type\": \"string\" },",
															"        \"egress-shaping-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" },\t\t\t",
															"        \"maximum-information-rate\": \t\t\t\t{ \"type\": \"number\" },  ",
															"\t\t\"maximum-burst-size\": \t\t\t\t\t\t{ \"type\": \"number\" }, \t\t\t",
															"        \"bundling-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"        \"header-compression-kind\":                  { \"type\": \"string\" },",
															"        \"fec-is-on\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"        \"fec-word-size\": \t\t\t\t\t\t\t{ \"type\": \"number\" },\t\t\t\t",
															"        \"fec-redundancy-size\": { \"enum\": [ ",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_2\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_4\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_8\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_16\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_20\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_NOT_YET_DEFINED\"\t",
															"\t\t\t\t\t\t\t\t ]",
															"\t\t},",
															"        \"fec-interleaver-kind\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_BLOCK\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_CONVOLUTION\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t  ]",
															"\t\t}, ",
															"        \"fec-interleaver-depth\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_1\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_2\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_3\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_4\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_6\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_8\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_12\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_16\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_24\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_32\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_48\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_96\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t\t   ]",
															"\t\t},\t\t\t\t\t\t\t\t\t\t\t",
															"        \"encryption-is-on\": \t\t\t\t\t\t{ \"type\": \"boolean\" }, \t\t\t",
															"        \"cryptographic-key\": \t\t\t\t\t\t{ \"type\": \"string\" }, \t\t\t",
															"        \"loop-back-kind-on\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t   ]",
															"\t\t},\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
															"        \"maintenance-timer\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"        \"statistics-is-on\": \t\t\t\t\t\t{ \"type\": \"boolean\" }, \t\t\t",
															" \t\t\"problem-kind-severity-list\": { ",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"        \t\t\t\"problem-kind-name\": \t\t\t\t\t{ \"type\": \"string\" },",
															"        \t\t\t\"problem-kind-severity\": { \"enum\": [",
															"                                                \"ethernet-container-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"                                                \"ethernet-container-2-0:SEVERITY_TYPE_WARNING\",",
															"                                                \"ethernet-container-2-0:SEVERITY_TYPE_MINOR\",",
															"                                                \"ethernet-container-2-0:SEVERITY_TYPE_MAJOR\",",
															"                                                \"ethernet-container-2-0:SEVERITY_TYPE_CRITICAL\",",
															"                                                \"ethernet-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"",
															"                                               ]",
															"                    }",
															"\t\t\t    },",
															"\t\t\t    \"required\": [\"problem-kind-name\",",
															"\t\t\t\t\t\t\t    \"problem-kind-severity\"",
															"\t\t\t\t]",
															"\t\t    }",
															"\t\t}, \t\t\t            \t\t\t",
															"        \"performance-monitoring-is-on\": \t\t\t{ \"type\": \"boolean\" }",
															"    },",
															"\t\"required\": [\"interface-name\",",
															"\t\t\t\t\t\"interface-is-on\",",
															"\t\t\t\t\t\"queue-behavior-list\",",
															"\t\t\t\t\t\"explicit-congestion-notification-is-on\",",
															"\t\t\t\t\t\"egress-shaping-is-on\",",
															"\t\t\t\t\t\"maximum-information-rate\",",
															"\t\t\t\t\t\"maximum-burst-size\",",
															"\t\t\t\t\t\"bundling-is-on\",",
															"\t\t\t\t\t\"fec-is-on\",",
															"\t\t\t\t\t\"fec-word-size\",",
															"\t\t\t\t\t\"fec-redundancy-size\",",
															"\t\t\t\t\t\"fec-interleaver-kind\",",
															"\t\t\t\t\t\"fec-interleaver-depth\",",
															"\t\t\t\t\t\"encryption-is-on\",",
															"\t\t\t\t\t\"cryptographic-key\",",
															"\t\t\t\t\t\"loop-back-kind-on\",",
															"\t\t\t\t\t\"maintenance-timer\",",
															"\t\t\t\t\t\"statistics-is-on\",",
															"\t\t\t\t\t\"problem-kind-severity-list\",",
															"\t\t\t\t\t\"performance-monitoring-is-on\"",
															"\t]",
															"};",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_CONFIGURATION_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b9ff0f0a-3b8a-4175-8afe-b3c79d584f63",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "StatusCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "40eba123-1a10-48d4-b62c-8b08fcc896e6",
														"exec": [
															"console.log(\"\\n-------------------Checking EthernetContainerStatus for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* StatusCompleteness",
															"* ",
															"* This Request is for validating EthernetContainer Status Objects against definition ",
															"* EthernetContainer_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Status class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_STATUS_SCHEMA = {",
															"\t\"type\": \"object\",",
															"\t\"properties\": {",
															"\t\t\"interface-status\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_UP\", ",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_DOWN\", ",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_TESTING\", ",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_UNKNOWN\", ",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_DORMANT\", ",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\", ",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\", ",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t  ]",
															"\t\t},",
															"\t\t\"bundling-is-up\":               { \"type\": \"boolean\" },   ",
															"\t\t\"remote-site-is-faulty\":        { \"type\": \"boolean\" },                   ",
															"\t\t\"loop-back-kind-up\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\",\t\t",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\", ",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\", ",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t   ]",
															"\t\t},",
															"\t\t\"statistics-is-up\":             { \"type\": \"boolean\" },",
															"\t\t\"performance-monitoring-is-up\": { \"type\": \"boolean\" },",
															"\t\t\"timestamp\":                    { \"type\": \"string\" },",
															"\t\t\"last-10-sec-data-input-rate\":  { \"type\": \"integer\" },",
															"\t\t\"last-10-sec-data-output-rate\": { \"type\": \"integer\" },",
															"\t\t\"total-bytes-input\":            { \"type\": \"string\" },",
															"\t\t\"total-bytes-output\":           { \"type\": \"string\" },",
															"\t\t\"forwarded-bytes-input\":        { \"type\": \"string\" },",
															"\t\t\"forwarded-bytes-output\":       { \"type\": \"string\" }",
															"\t},",
															"\t\"required\": [\"interface-status\", ",
															"\t\t\t\t    \"bundling-is-up\", ",
															"\t\t\t\t    \"remote-site-is-faulty\", ",
															"\t\t\t\t    \"loop-back-kind-up\", ",
															"\t\t\t\t    \"statistics-is-up\", ",
															"\t\t\t\t    \"performance-monitoring-is-up\", ",
															"\t\t\t\t    \"timestamp\", ",
															"\t\t\t\t    \"last-10-sec-data-input-rate\", ",
															"\t\t\t\t    \"last-10-sec-data-output-rate\", ",
															"\t\t\t\t    \"total-bytes-input\", ",
															"\t\t\t\t    \"total-bytes-output\", ",
															"\t\t\t\t    \"forwarded-bytes-input\", ",
															"\t\t\t\t    \"forwarded-bytes-output\"",
															"\t]",
															"};",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_STATUS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "891b170a-b796-4ac9-906c-221b780106ac",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentProblemsCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b7e5fb35-d5d6-4849-b58e-3e4a98bbf6fd",
														"exec": [
															"console.log(\"\\n---------------Checking EthernetContainerCurrentProblems for Completeness-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentProblemsCompleteness",
															"* ",
															"* This Request is for validating EthernetContainer CurrentProblems Objects against definition ",
															"* EthernetContainer_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentProblems class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-problems\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_CURRENT_PROBLEMS_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"current-problem-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"problem-name\": \t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"sequence-number\": \t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\"timestamp\": \t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"problem-severity\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SEVERITY_TYPE_WARNING\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SEVERITY_TYPE_MINOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SEVERITY_TYPE_MAJOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SEVERITY_TYPE_CRITICAL\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t  ]",
															"\t\t\t\t\t}",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"problem-name\", ",
															"\t\t\t\t\t\t    \t\"sequence-number\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\t\t    \"timestamp\",",
															"\t\t\t\t\t\t\t    \"problem-severity\"\t",
															"\t\t\t\t]\t\t\t\t\t\t",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-current-problems\": \t\t\t{ \"type\": \"number\" },",
															"\t\t\"time-of-latest-change\": \t\t\t\t{ \"type\": \"string\" },",
															"\t},",
															"\t\"required\": [ \"current-problem-list\",",
															"\t                \"number-of-current-problems\",",
															"\t                \"time-of-latest-change\"",
															"\t] ",
															"};",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_CURRENT_PROBLEMS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "75e632f8-1ba9-4ed6-a801-15e6826100fc",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentPerformanceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "fbeae575-2be2-4f4f-b59c-c2afb7f6e7a2",
														"exec": [
															"console.log(\"\\n-------------Checking EthernetContainerCurrentPerformance for Completeness----------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentPerformanceCompleteness",
															"* ",
															"* This Request is for validating EthernetContainer CurrentPerformance Objects against definition ",
															"* EthernetContainer_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentPerformance class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-performance\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_CURRENT_PERFORMANCE_SCHEMA = {\t",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"\t\t\"current-performance-data-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\"tx-ethernet-bytes-max-s\": \t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"tx-ethernet-bytes-max-m\":\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\"tx-ethernet-bytes-sum\":\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\"queue-utilization-list\": {",
															"\t\t\t\t\t\t\t\t\"type\": \"array\",",
															"\t\t\t\t\t\t\t\t\"items\": {",
															"\t\t\t\t\t\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\t\t\t\"queue-name\": \t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\t\t\t\"max-queue-length\":\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\t\t\t\"avg-queue-length\":\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\t\t\t\"required\": [ \"queue-name\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t    \"max-queue-length\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t    \"avg-queue-length\"",
															"\t\t\t\t\t\t\t\t\t]\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t}",
															"\t\t\t\t\t\t\t},\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\"fec-corrected-blocks\":\t\t\t{ \"type\": \"number\" },\t",
															"\t\t\t\t\t\t\t\"fec-uncorrectable-blocks\":\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"time-period\": \t\t\t\t\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t},\t\t\t\t",
															"\t\t\t\t\t\t\"required\": [ \"tx-ethernet-bytes-max-s\",",
															"\t\t\t\t\t\t\t\t\t\t\"tx-ethernet-bytes-max-m\",",
															"\t\t\t\t\t\t\t\t\t\t\"tx-ethernet-bytes-sum\",",
															"\t\t\t\t\t\t\t\t\t\t\"queue-utilization-list\",",
															"\t\t\t\t\t\t\t\t\t\t\"fec-corrected-blocks\",",
															"\t\t\t\t\t\t\t\t\t\t\"fec-uncorrectable-blocks\",",
															"\t\t\t\t\t\t\t\t\t\t\"time-period\"",
															"\t\t\t\t\t\t]\t\t\t\t\t",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"timestamp\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"suspect-interval-flag\": \t\t\t{ \"type\": \"boolean\" },\t\t\t",
															"\t\t\t\t\t\"elapsed-time\": \t\t\t\t\t{ \"type\": \"string\" },\t\t",
															"\t\t\t\t\t\"scanner-id\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"granularity-period\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t},\t ",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"performance-data\",",
															"                                \"timestamp\",",
															"                                \"suspect-interval-flag\",",
															"                                \"elapsed-time\",",
															"                                \"scanner-id\",",
															"                                \"granularity-period\",",
															"    \t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-current-performance-sets\":\t\t    { \"type\": \"number\" },\t\t\t",
															"\t},",
															"\t\"required\":\t[ \"current-performance-data-list\",",
															"\t                \"number-of-current-performance-sets\"",
															"\t]",
															"};",
															"try {",
															"    if (capability[\"performance-monitoring-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", ETHERNET_CONTAINER_CURRENT_PERFORMANCE_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"current-performance-data-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        ETHERNET_CONTAINER_CURRENT_PERFORMANCE_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldEthernetContainerCurrentPerformanceBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldEthernetContainerCurrentPerformanceBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_CURRENT_PERFORMANCE_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldEthernetContainerCurrentPerformanceBeShortened(success) {",
															"    pm.test(\"CouldEthernetContainerCurrentPerformanceBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b09bd82e-2120-4c60-8691-d9f7b60a8054",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "HistoricalPerformancesCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c15f4428-f3d5-42ee-9d4d-990aadc43804",
														"exec": [
															"console.log(\"\\n------------Checking EthernetContainerHistoricalPerformances for Completeness-------------\");",
															"/*******************************************************************************",
															"* ",
															"* HistoricalPerformancesCompleteness",
															"* ",
															"* This Request is for validating EthernetContainer HistoricalPerformances Objects against definition ",
															"* EthernetContainer_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the HistoricalPerformances class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"*******************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"historical-performances\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_HISTORICAL_PERFORMANCES_SCHEMA = {\t",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"\t\t\"historical-performance-data-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\"tx-ethernet-bytes-max-s\": \t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"tx-ethernet-bytes-max-m\":\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\"tx-ethernet-bytes-sum\":\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\"queue-utilization-list\": {",
															"\t\t\t\t\t\t\t\t\"type\": \"array\",",
															"\t\t\t\t\t\t\t\t\"items\": {",
															"\t\t\t\t\t\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\t\t\t\"queue-name\": \t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\t\t\t\"max-queue-length\":\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\t\t\t\"avg-queue-length\":\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\t\t\t\"required\": [ \"queue-name\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t    \"max-queue-length\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t    \"avg-queue-length\"",
															"\t\t\t\t\t\t\t\t\t]\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t}",
															"\t\t\t\t\t\t\t},\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\"fec-corrected-blocks\":\t\t\t{ \"type\": \"number\" },\t",
															"\t\t\t\t\t\t\t\"fec-uncorrectable-blocks\":\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"time-period\": \t\t\t\t\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t},\t\t\t\t",
															"\t\t\t\t\t\t\"required\": [ \"tx-ethernet-bytes-max-s\",",
															"\t\t\t\t\t\t\t\t\t\t\"tx-ethernet-bytes-max-m\",",
															"\t\t\t\t\t\t\t\t\t\t\"tx-ethernet-bytes-sum\",",
															"\t\t\t\t\t\t\t\t\t\t\"queue-utilization-list\",",
															"\t\t\t\t\t\t\t\t\t\t\"fec-corrected-blocks\",",
															"\t\t\t\t\t\t\t\t\t\t\"fec-uncorrectable-blocks\",",
															"\t\t\t\t\t\t\t\t\t\t\"time-period\"",
															"\t\t\t\t\t\t]\t\t\t\t\t",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"suspect-interval-flag\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\t\"history-data-id\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"period-end-time\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"granularity-period\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t]\t\t\t\t",
															"\t\t\t\t\t},\t \t ",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"performance-data\",",
															"    \t\t\t\t\t\t\t\"suspect-interval-flag\",",
															"    \t\t\t\t\t\t\t\"history-data-id\",",
															"    \t\t\t\t\t\t\t\"period-end-time\",",
															"    \t\t\t\t\t\t\t\"granularity-period\",",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-historical-performance-sets\":\t\t{ \"type\": \"number\" },",
															"\t\t\"time-of-latest-change\": \t\t\t\t        { \"type\": \"string\" },\t\t",
															"\t},",
															"\t\"required\":\t[ \"historical-performance-data-list\",",
															"\t                \"number-of-historical-performance-sets\",",
															"\t                \"time-of-latest-change\"",
															"\t]",
															"};",
															"try {",
															"    if (capability[\"performance-monitoring-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", ETHERNET_CONTAINER_HISTORICAL_PERFORMANCES_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"historical-performance-data-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        ETHERNET_CONTAINER_HISTORICAL_PERFORMANCES_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldEthernetContainerHistoricalPerformancesBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldEthernetContainerHistoricalPerformancesBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_HISTORICAL_PERFORMANCES_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldEthernetContainerHistoricalPerformancesBeShortened(success) {",
															"    pm.test(\"CouldEthernetContainerHistoricalPerformancesBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "723c670e-67af-44a8-be76-455d53b26622",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e8a929e5-b650-400b-aae0-722db536ad77",
														"exec": [
															"console.log(\"\\n-------------------Restoring the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"        ",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration",
															"                                                   );",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    completeClassName = moduleUnderTest + \":\" + technologyUnderTest + \"-configuration\";",
															"    configuration = AddHeadlineToDataObject(configuration, completeClassName);",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ec1f741d-c3cd-4b0f-9ddf-69a8694130c9",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a68e17ed-f0eb-4abc-ac63-4379ba4b0986",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b2b7c8e6-822e-457a-8fbf-80485aeaf300",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointEthernetContainerCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "53b73320-c0b0-49c1-bf32-a93aa69deaf3",
														"exec": [
															"console.log(\"\\n-------------ReversalPoint of EthernetContainer Validation for Completeness---------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointEthernetContainerCompleteness\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1f7b903f-4536-48be-8bcf-0afb2bcc65ad",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointEthernetContainerCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ca63e5cd-18f7-46d9-ba7d-f6fa77ba44cc",
														"exec": [
															"console.log(\"\\n-----------------------Terminating EthernetContainerCompleteness--------------------------\");",
															"/****************************************************************************************",
															" * ",
															" * ExitPoint",
															" * ",
															" * This Request is for clearing the Collection variables and terminating the TestCase",
															" * ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Preparing the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({",
															"        key: \"Accept\",",
															"        value: \"application/json\"",
															"    });",
															"} catch (error) {}",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, controller, indexOfDeviceUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function() {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function() {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4e1bf5b8-e191-476e-be7a-5bb605112516",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "79a64da7-26b7-4da9-9822-a8c9d62af8d2",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "62a8890f-6574-495a-be4c-8bd61347a5f1",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "EthernetContainerConfiguration",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6a9856aa-b531-48a0-825c-6736204d76c4",
														"exec": [
															"console.log(\"\\n\\n============================ EthernetContainerConfiguration.1 =============================\");",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Configuration of EthernetContainer Objects against definition ",
															"* ",
															"*                   EthernetContainer_2.0.0-tsp.191123.1240",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"* ",
															"****************************************************************************************/",
															" ",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"* ",
															"* It is recommended to apply this TestCase on devices on the local (not remote) site",
															"* of the microwave connection, otherwise the management connection might break and ",
															"* configurations, which are done during the validation, cannot be reversed.",
															"* ",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"one\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"ethernet-container-2-0:ethernet-container-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"RESPONSE_CODE_FOR_OPERATION_FAILED = 501;       // 500: Expected translation of aggreed <error-tag> operation failed",
															"CONFIGURATION_VALIDATION_RESULTS = {};",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"pm.collectionVariables.set(\"responseCodeForOperationFailed\", RESPONSE_CODE_FOR_OPERATION_FAILED);",
															"pm.collectionVariables.set(\"configurationValidationResults\", CONFIGURATION_VALIDATION_RESULTS);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function() {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function() {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "17b8c623-5ff0-4f37-afe7-787330903be7",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DefiningDummyValuesAndEvaluations()",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9220a9ec-062c-45ee-978f-31f5c229ae43",
														"exec": [
															"console.log(\"\\n----------Defining DummyValues and Evaluation Criteria in Configuration Validation--------\");",
															"/****************************************************************************************",
															"* ",
															"* Definition of DefiningDummyValuesAndEvaluations()",
															"*  ",
															"* Functions for Defining DummyValues and Evaluation Criteria in all Configuration Validations.",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"        ",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"class Attribute {",
															"    constructor (CreatingDummyValueAsaString, ",
															"                    EvaluatingResultAsaString, ",
															"                    defaultValueForStandardEvaluation,",
															"                    capabilityAttributeToBeFalseIfFeatureNotSupported) {",
															"        this.CreatingDummyValueAsaString = CreatingDummyValueAsaString;",
															"        this.EvaluatingResultAsaString = EvaluatingResultAsaString;",
															"        this.defaultValueForStandardEvaluation = defaultValueForStandardEvaluation;",
															"        this.capabilityAttributeToBeFalseIfFeatureNotSupported = capabilityAttributeToBeFalseIfFeatureNotSupported;",
															"    }",
															"}",
															"var attributes = [];",
															"",
															"var CreatingDummyValueAsaString;",
															"var EvaluatingResultAsaString;",
															"var defaultValueForStandardEvaluation;",
															"var capabilityAttributeToBeFalseIfFeatureNotSupported;",
															"var newAttribute;",
															"",
															"// interface-name",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of interface-name--------------------------\");",
															"            ",
															"        // Individual Values Definition ",
															"        var dummyValue = \"Dummy \" + String(Math.floor(Math.random() * 999));",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"interface-name\";",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"Interface name not yet defined.\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// interface-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of interface-is-on-----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"interface-is-on\";",
															"            ",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"            ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// queue-behavior-list/queue-depth",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------Checking Configuration of queue-behavior-list/queue-depth-----------------\");",
															"            ",
															"        // Individual Values Definition",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"queue-name\";",
															"        try {",
															"            keysOfDatatypeInstanceUnderTest[0].value = capability[\"available-queue-list\"][0][keysOfDatatypeInstanceUnderTest[0].key];",
															"            var dummyQueueMaxQueueDepth = 0;",
															"            for (let i=0; i<(capability[\"available-queue-list\"].length); i++) {",
															"                let sampleQueueDepthIsConfigurable = capability[\"available-queue-list\"][i][\"queue-depth-configuration-is-avail\"];",
															"                if ( sampleQueueDepthIsConfigurable === true ) {",
															"                    keysOfDatatypeInstanceUnderTest[0].value = capability[\"available-queue-list\"][i][keysOfDatatypeInstanceUnderTest[0].key];",
															"                    dummyQueueMaxQueueDepth = capability[\"available-queue-list\"][i][\"max-queue-depth\"];",
															"                    break;",
															"                }",
															"            }",
															"            var dummyValue = Math.abs( Math.floor(Math.random() * dummyQueueMaxQueueDepth) );",
															"            CouldDummyValueBeCreated(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeCreated();",
															"        }",
															"        var DATATYPE_UNDER_TEST = \"queue-behavior-list\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"        var ATTRIBUTE_UNDER_TEST = \"queue-depth\";",
															"            ",
															"        // Self Testing Function",
															"        function CouldDummyValueBeCreated(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try {",
															"            let dummyQueueName = keysOfDatatypeInstanceUnderTest[0].value;",
															"            let dummyQueueCapabilityIndex = QueueIndexOf(dummyQueueName, capability);",
															"            let dummyQueueDepthIsConfigurable = capability[\"available-queue-list\"][dummyQueueCapabilityIndex][\"queue-depth-configuration-is-avail\"];",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"                    && (Math.floor(resultCode/100) === 2) ",
															"                    && (dummyValueString===resultValueString) ) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"            } else {",
															"                if ( (dummyQueueDepthIsConfigurable === false)",
															"                        && (resultValueString === JSON.stringify(\"-1\"))",
															"                         && (dummyCode === responseCodeForOperationFailed) ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(true);",
															"        } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"        }",
															"            ",
															"        // Functions",
															"        function QueueIndexOf (queueName, capability) {",
															"            for (let i=0; i<(capability[\"available-queue-list\"].length); i++) {",
															"                let sampleQueueName = capability[\"available-queue-list\"][i][\"queue-name\"];",
															"                if ( sampleQueueName === queueName ) {",
															"                    return i;",
															"                }",
															"            }",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = -1;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"queue-depth-configuration-is-avail\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// queue-behavior-list/dropping-behavior-kind",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------Checking Configuration of queue-behavior-list/dropping-behavior-kind-----------\");",
															"            ",
															"        // Individual Values Definition ",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"queue-name\";",
															"        try {",
															"            let availableDroppingBehaviorKinds = capability[\"available-queue-list\"][0][\"available-dropping-behavior-kind-list\"];",
															"            keysOfDatatypeInstanceUnderTest[0].value = capability[\"available-queue-list\"][0][keysOfDatatypeInstanceUnderTest[0].key];",
															"            let dummyQueueConfigurationIndex = QueueConfigurationIndexOf(keysOfDatatypeInstanceUnderTest[0].value,configuration);",
															"                ",
															"            let configuredDroppingBehaviorKindName = configuration[\"queue-behavior-list\"][dummyQueueConfigurationIndex][\"dropping-behavior-kind\"];",
															"            let configuredDroppingBehaviorKindIndex = availableDroppingBehaviorKinds.indexOf(configuredDroppingBehaviorKindName);",
															"                ",
															"            let potentialDummyValues = availableDroppingBehaviorKinds;",
															"            if ( configuredDroppingBehaviorKindIndex >= 0 ) {",
															"                potentialDummyValues.splice(configuredDroppingBehaviorKindIndex, 1);",
															"            }",
															"            if ( potentialDummyValues.length === 0 ) {",
															"                potentialDummyValues = [\"No alternatives available\"];",
															"            }",
															"                ",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"                ",
															"            CouldDummyBeCreated(availableDroppingBehaviorKinds, keysOfDatatypeInstanceUnderTest[0].value,",
															"                                    dummyQueueConfigurationIndex,",
															"                                    configuredDroppingBehaviorKindName,",
															"                                    configuredDroppingBehaviorKindIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue);",
															"                ",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"queue-behavior-list\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"        var ATTRIBUTE_UNDER_TEST = \"dropping-behavior-kind\";",
															"            ",
															"        // Functions",
															"        function QueueConfigurationIndexOf (queueName, configuration) {",
															"            for (let i=0; i<(configuration[\"queue-behavior-list\"].length); i++) {",
															"                let sampleQueueName = configuration[\"queue-behavior-list\"][i][\"queue-name\"];",
															"                if ( sampleQueueName === queueName ) {",
															"                    return i;",
															"                }",
															"            }",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(availableDroppingBehaviorKinds, dummyQueueName,",
															"                                    dummyQueueConfigurationIndex,",
															"                                    configuredDroppingBehaviorKindName,",
															"                                    configuredDroppingBehaviorKindIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue) {",
															"            pm.test(\"CouldAvailableDroppingBehaviorKindsBeRetrieved\", function () {",
															"                pm.expect(availableDroppingBehaviorKinds).to.be.an(\"array\");",
															"                pm.expect(availableDroppingBehaviorKinds.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyQueueNameBeRetrieved\", function () {",
															"                pm.expect(dummyQueueName).to.be.a(\"string\");",
															"                pm.expect(dummyQueueName).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldDummyQueueConfigurationIndexBeEvaluated\", function () {",
															"                pm.expect(dummyQueueConfigurationIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldConfiguredDroppingBehaviorKindNameBeRetrieved\", function () {",
															"                pm.expect(configuredDroppingBehaviorKindName).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldConfiguredDroppingBehaviorKindIndexBeEvaluated\", function () {",
															"                pm.expect(configuredDroppingBehaviorKindIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        } ",
															"        ",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try {",
															"            keysOfDatatypeInstanceUnderTest[0].value = capability[\"available-queue-list\"][0][keysOfDatatypeInstanceUnderTest[0].key];",
															"            let dummyQueueConfigurationIndex = QueueConfigurationIndexOf(keysOfDatatypeInstanceUnderTest[0].value,configuration);",
															"            let initialDroppingBehaviorKindName = configuration[\"queue-behavior-list\"][dummyQueueConfigurationIndex][\"dropping-behavior-kind\"];",
															"                ",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"                    && (Math.floor(resultCode/100) === 2) ",
															"                    && (dummyValueString===resultValueString) ) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"            } else {",
															"                if ( (dummyValueString === JSON.stringify(\"No alternatives available\"))",
															"                        && (resultValueString === JSON.stringify(initialDroppingBehaviorKindName))",
															"                         && (dummyCode === responseCodeForOperationFailed) ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(true);",
															"        } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"        }",
															"        ",
															"        // Functions",
															"        function QueueConfigurationIndexOf (queueName, configuration) {",
															"            for (let i=0; i<(configuration[\"queue-behavior-list\"].length); i++) {",
															"                let sampleQueueName = configuration[\"queue-behavior-list\"][i][\"queue-name\"];",
															"                if ( sampleQueueName === queueName ) {",
															"                    return i;",
															"                }",
															"            }",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"            ",
															"    defaultValueForStandardEvaluation = \"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_NOT_YET_DEFINED\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// queue-behavior-list/wred-behavior-list/wred-profile",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------Checking Configuration of queue-behavior-list/wred-behavior-list/wred-profile-------\");",
															"        console.log(\"Testing queue-behavior-list/wred-behavior-list/wred-profile is not yet implemented.\")",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    ",
															"    EvaluatingResult = () => {",
															"        ",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"    // attributes.push(newAttribute);",
															"}  ",
															"",
															"// queue-behavior-list/scheduler-kind",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------------Checking Configuration of queue-behavior-list/scheduler-kind---------------\");",
															"            ",
															"        // Individual Values Definition",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"queue-name\";",
															"        try {",
															"            let availableSchedulerKinds = capability[\"available-queue-list\"][0][\"available-scheduling-kind-list\"];",
															"            keysOfDatatypeInstanceUnderTest[0].value = capability[\"available-queue-list\"][0][keysOfDatatypeInstanceUnderTest[0].key];",
															"            let dummyQueueConfigurationIndex = QueueConfigurationIndexOf(keysOfDatatypeInstanceUnderTest[0].value,configuration);",
															"                ",
															"            let configuredSchedulerKindName = configuration[\"queue-behavior-list\"][dummyQueueConfigurationIndex][\"scheduler-kind\"];",
															"            let configuredSchedulerKindIndex = availableSchedulerKinds.indexOf(configuredSchedulerKindName);",
															"                ",
															"            let potentialDummyValues = availableSchedulerKinds;",
															"            if ( configuredSchedulerKindIndex >= 0 ) {",
															"                potentialDummyValues.splice(configuredSchedulerKindIndex, 1);",
															"            }",
															"            if ( potentialDummyValues.length === 0 ) {",
															"                potentialDummyValues = [\"No alternatives available\"];",
															"            }",
															"                ",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"                ",
															"            CouldDummyBeCreated(availableSchedulerKinds, keysOfDatatypeInstanceUnderTest[0].value,",
															"                                    dummyQueueConfigurationIndex,",
															"                                    configuredSchedulerKindName,",
															"                                    configuredSchedulerKindIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue);",
															"                ",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"queue-behavior-list\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"        var ATTRIBUTE_UNDER_TEST = \"scheduler-kind\";",
															"            ",
															"        // Functions",
															"        function QueueConfigurationIndexOf (queueName, configuration) {",
															"            for (let i=0; i<(configuration[\"queue-behavior-list\"].length); i++) {",
															"                let sampleQueueName = configuration[\"queue-behavior-list\"][i][\"queue-name\"];",
															"                if ( sampleQueueName === queueName ) {",
															"                    return i;",
															"                }",
															"            }",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(availableSchedulerKinds, dummyQueueName,",
															"                                    dummyQueueConfigurationIndex,",
															"                                    configuredSchedulerKindName,",
															"                                    configuredSchedulerKindIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue) {",
															"            pm.test(\"CouldAvailableSchedulerKindsBeRetrieved\", function () {",
															"                pm.expect(availableSchedulerKinds).to.be.an(\"array\");",
															"                pm.expect(availableSchedulerKinds.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyQueueNameBeRetrieved\", function () {",
															"                pm.expect(dummyQueueName).to.be.a(\"string\");",
															"                pm.expect(dummyQueueName).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldDummyQueueConfigurationIndexBeEvaluated\", function () {",
															"                pm.expect(dummyQueueConfigurationIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldConfiguredSchedulerKindNameBeRetrieved\", function () {",
															"                pm.expect(configuredSchedulerKindName).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldConfiguredSchedulerKindIndexBeEvaluated\", function () {",
															"                pm.expect(configuredSchedulerKindIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try {",
															"                ",
															"            keysOfDatatypeInstanceUnderTest[0].value = capability[\"available-queue-list\"][0][keysOfDatatypeInstanceUnderTest[0].key];",
															"            let dummyQueueConfigurationIndex = QueueConfigurationIndexOf(keysOfDatatypeInstanceUnderTest[0].value,configuration);",
															"            let initialSchedulerKindName = configuration[\"queue-behavior-list\"][dummyQueueConfigurationIndex][\"scheduler-kind\"];",
															"                ",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"                    && (Math.floor(resultCode/100) === 2) ",
															"                    && (dummyValueString===resultValueString) ) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"            } else {",
															"                if ( (dummyValueString === JSON.stringify(\"No alternatives available\"))",
															"                        && (resultValueString === JSON.stringify(initialSchedulerKindName))",
															"                         && (dummyCode === responseCodeForOperationFailed) ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(true);",
															"        } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"        }",
															"            ",
															"        // Functions",
															"        function QueueConfigurationIndexOf (queueName, configuration) {",
															"            for (let i=0; i<(configuration[\"queue-behavior-list\"].length); i++) {",
															"                let sampleQueueName = configuration[\"queue-behavior-list\"][i][\"queue-name\"];",
															"                if ( sampleQueueName === queueName ) {",
															"                    return i;",
															"                }",
															"            }",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_NOT_YET_DEFINED\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// queue-behavior-list/weighting",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------Checking Configuration of queue-behavior-list/weighting------------------\");",
															"            ",
															"        // Individual Values Definition",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"queue-name\";",
															"        try {",
															"            var dummyQueueIndex = 0;",
															"            keysOfDatatypeInstanceUnderTest[0].value = configuration[\"queue-behavior-list\"][dummyQueueIndex][keysOfDatatypeInstanceUnderTest[0].key];",
															"            var dummyValue = Math.floor(Math.random() * 100);",
															"                ",
															"            var weightableSchedulerKinds = [\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_WFQ\",",
															"                                                \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_WRR\",",
															"                                                \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_DWRR\"",
															"                                           ];",
															"                ",
															"            for (let i=0; i<(configuration[\"queue-behavior-list\"].length); i++) {",
															"                let sampleSchedulerKind = configuration[\"queue-behavior-list\"][i][\"scheduler-kind\"];",
															"                if ( weightableSchedulerKinds.includes(sampleSchedulerKind) ) {",
															"                    dummyQueueIndex = i;",
															"                    keysOfDatatypeInstanceUnderTest[0].value = configuration[\"queue-behavior-list\"][i][keysOfDatatypeInstanceUnderTest[0].key];",
															"                    break;",
															"                }",
															"            }",
															"                ",
															"            CouldDummyNameAndValueBeCreated(keysOfDatatypeInstanceUnderTest[0].value, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyNameAndValueBeCreated();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"queue-behavior-list\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"        var ATTRIBUTE_UNDER_TEST = \"weighting\";",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyNameAndValueBeCreated(dummyQueueName, dummyValue) {",
															"            pm.test(\"CouldDummyNameBeCreated\", function () {",
															"                pm.expect(dummyQueueName).to.be.a(\"string\");",
															"                pm.expect(dummyQueueName).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        // Individual Evaluation Definition",
															"        try {",
															"                ",
															"            let dummyQueueCapabilityIndex = QueueCapabilityIndexOf(keysOfDatatypeInstanceUnderTest[0].value, capability);",
															"            let availableSchedulingKindList = capability[\"available-queue-list\"][dummyQueueCapabilityIndex][\"available-scheduling-kind-list\"];",
															"                ",
															"            let wfqIsAvailable = availableSchedulingKindList.includes(\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_WFQ\");",
															"            let dwrrIsAvailable = availableSchedulingKindList.includes(\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_DWRR\");",
															"            let weightingIsObsolete = (wfqIsAvailable===false) && (dwrrIsAvailable===false);",
															"                ",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"                    && (Math.floor(resultCode/100) === 2) ",
															"                    && (dummyValueString===resultValueString) ) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"            } else {",
															"                if ( (weightingIsObsolete === true)",
															"                        && (resultValueString === JSON.stringify(\"false\"))",
															"                        && (dummyCode === responseCodeForOperationFailed) ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(keysOfDatatypeInstanceUnderTest[0].value, dummyQueueCapabilityIndex, ",
															"                                        availableSchedulingKindList, ",
															"                                        wfqIsAvailable, ",
															"                                        dwrrIsAvailable, ",
															"                                        weightingIsObsolete, ",
															"                                        configurationValidationResults[NameOfAttributeUnderTest]",
															"                                  );",
															"        } catch (error) {",
															"            CouldResultBeEvaluated();",
															"        }",
															"            ",
															"        // Functions",
															"        function QueueCapabilityIndexOf(queueName, capability) {",
															"            for (let i=0; i<(capability[\"available-queue-list\"].length); i++) {",
															"                let sampleQueueName = capability[\"available-queue-list\"][i][\"queue-name\"];",
															"                if ( sampleQueueName === queueName ) {",
															"                    return i;",
															"                }",
															"            }",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldResultBeEvaluated(dummyQueueName, dummyQueueCapabilityIndex, ",
															"                                        availableSchedulingKindList, ",
															"                                        wfqIsAvailable, ",
															"                                        dwrrIsAvailable, ",
															"                                        weightingIsObsolete, ",
															"                                        configurationValidationResults) {",
															"            pm.test(\"CouldDummyQueueNameBeRetrieved\", function () {",
															"                pm.expect(dummyQueueName).to.be.a(\"string\");",
															"                pm.expect(dummyQueueName).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldDummyQueueCapabilityIndexBeCalculated\", function () {",
															"                pm.expect(dummyQueueCapabilityIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldTheAvailableSchedulingKindListBeRetrieved\", function () {",
															"                pm.expect(availableSchedulingKindList).to.be.an(\"array\");",
															"            });",
															"            pm.test(\"CouldWfqIsAvailableBeCalculated\", function () {",
															"                pm.expect(wfqIsAvailable).to.be.a(\"boolean\");",
															"            });",
															"            pm.test(\"CouldDwrrIsAvailableBeCalculated\", function () {",
															"                pm.expect(dwrrIsAvailable).to.be.a(\"boolean\");",
															"            });",
															"            pm.test(\"CouldWeightingIsObsoleteBeCalculated\", function () {",
															"                pm.expect(weightingIsObsolete).to.be.a(\"boolean\");",
															"            });",
															"            pm.test(\"CouldConfigurationValidationResultsBeCalculated\", function () {",
															"                pm.expect(configurationValidationResults).to.be.a(\"string\");",
															"                pm.expect(configurationValidationResults).to.not.have.lengthOf(0);  ",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = -1;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// explicit-congestion-notification-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------Checking Configuration of explicit-congestion-notification-is-on-------------\");",
															"            ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        var ATTRIBUTE_UNDER_TEST = \"explicit-congestion-notification-is-on\";",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"explicit-congestion-notification-is-avail\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// ingress-policing-profile",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------------------Checking Configuration of ingress-policing-profile---------------------\");",
															"            ",
															"        // Individual Values Definition ",
															"        var dummyValue = \"Not yet tested\";",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"ingress-policing-profile\";",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try {",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"                    && (Math.floor(resultCode/100) === 2) ",
															"                    && (dummyValueString===resultValueString)) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"Not yet tested\";",
															"            } else {",
															"                if ( dummyCode === responseCodeForOperationFailed ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"Not yet tested\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(true);",
															"        } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"            ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"ingress-policing-is-avail\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// egress-shaping-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------------Checking Configuration of egress-shaping-is-on----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"egress-shaping-is-on\";",
															"            ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"egress-shaping-is-avail\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// maximum-information-rate",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------------------Checking Configuration of maximum-information-rate--------------------\");",
															"        ",
															"        try {",
															"            var minimumValue = capability[\"information-rate-min\"];",
															"            var maximumValue = capability[\"information-rate-max\"];",
															"            var valueRange = maximumValue - minimumValue; ",
															"            var dummyValue = Math.abs( minimumValue + Math.floor(Math.random() * valueRange) );",
															"            CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue);",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"maximum-information-rate\";",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue) {",
															"            pm.test(\"CouldMinimumValueBeReadFromCapabilities\", function () {",
															"                pm.expect(minimumValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldMaximumValueBeReadFromCapabilities\", function () {",
															"                pm.expect(maximumValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldValueRangeBeCalculated\", function () {",
															"                pm.expect(valueRange).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = -1;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// maximum-burst-size",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of maximum-burst-size-----------------------\");",
															"            ",
															"        try {",
															"            var minimumValue = capability[\"burst-size-min\"];",
															"            var maximumValue = capability[\"burst-size-max\"];",
															"            var valueRange = maximumValue - minimumValue; ",
															"            var dummyValue = Math.abs( minimumValue + Math.floor(Math.random() * valueRange) );",
															"            CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue);",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"maximum-burst-size\";",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue) {",
															"            pm.test(\"CouldMinimumValueBeReadFromCapabilities\", function () {",
															"                pm.expect(minimumValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldMaximumValueBeReadFromCapabilities\", function () {",
															"                pm.expect(maximumValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldValueRangeBeCalculated\", function () {",
															"                pm.expect(valueRange).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"            ",
															"    defaultValueForStandardEvaluation = -1;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}  attributes.push(newAttribute);",
															"",
															"// bundling-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of bundling-is-on-------------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"bundling-is-on\";",
															"            ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"bundling-is-avail\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// header-compression-kind",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------------------Checking Configuration of header-compression-kind--------------------\");",
															"            ",
															"        try {",
															"            let supportedHeaderCompressionKindNames = [];",
															"            for ( let i=0; i<capability[\"supported-header-compression-kind-list\"].length; i++ ) {",
															"                let sampleName = capability[\"supported-header-compression-kind-list\"][i][\"header-compression-name\"];",
															"                supportedHeaderCompressionKindNames.push(sampleName);",
															"            }",
															"            let configuredHeaderCompressionKind = configuration[\"header-compression-kind\"];",
															"            let configuredHeaderCompressionKindIndex = supportedHeaderCompressionKindNames.indexOf(configuredHeaderCompressionKind);",
															"            let potentialDummyValues = supportedHeaderCompressionKindNames;",
															"            if ( configuredHeaderCompressionKindIndex >= 0 ) {",
															"                potentialDummyValues.splice(configuredHeaderCompressionKindIndex, 1);",
															"            }    ",
															"            if ( potentialDummyValues.length === 0 ) {",
															"                potentialDummyValues = [\"No alternatives available\"];",
															"            }",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(supportedHeaderCompressionKindNames, configuredHeaderCompressionKind,",
															"                                    configuredHeaderCompressionKindIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue);",
															"                ",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"header-compression-kind\";",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(supportedHeaderCompressionKindNames, configuredHeaderCompressionKind,",
															"                                        configuredHeaderCompressionKindIndex,",
															"                                        potentialDummyValues,",
															"                                        dummyValueIndex,",
															"                                        dummyValue) {",
															"            pm.test(\"CouldSupportedHeaderCompressionKindNamesBeRetrieved\", function () {",
															"                pm.expect(supportedHeaderCompressionKindNames).to.be.an(\"array\");",
															"            });",
															"            pm.test(\"CouldConfiguredHeaderCompressionKindNameBeRetrieved\", function () {",
															"                pm.expect(configuredHeaderCompressionKind).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldConfiguredHeaderCompressionKindIndexBeEvaluated\", function () {",
															"                pm.expect(configuredHeaderCompressionKindIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try {",
															"                ",
															"            let initialHeaderCompressionKindName = configuration[\"header-compression-kind\"];",
															"                ",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"                    && (Math.floor(resultCode/100) === 2) ",
															"                    && (dummyValueString===resultValueString) ) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"            } else {",
															"                if ( (dummyValueString === JSON.stringify(\"No alternatives available\"))",
															"                        && (resultValueString === JSON.stringify(initialHeaderCompressionKindName))",
															"                         && (dummyCode === responseCodeForOperationFailed) ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(true);",
															"        } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// fec-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------------------Checking Configuration of fec-is-on---------------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"fec-is-on\";",
															"            ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"fec-is-avail\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// fec-word-size",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------------------------Checking Configuration of fec-word-size-------------------------\");",
															"            ",
															"        try {",
															"            var minimumValue = 20;",
															"            var maximumValue = capability[\"fec-word-size-max\"];",
															"            var valueRange = maximumValue - minimumValue; ",
															"            var dummyValue = minimumValue + Math.floor(Math.random() * valueRange);",
															"            CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue);",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"fec-word-size\";",
															"            ",
															"        // Self Testing Function",
															"        function CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue) {",
															"            pm.test(\"CouldMinimumValueBeReadFromCapabilities\", function () {",
															"                pm.expect(minimumValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldMaximumValueBeReadFromCapabilities\", function () {",
															"                pm.expect(maximumValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldValueRangeBeCalculated\", function () {",
															"                pm.expect(valueRange).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = -1;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// fec-redundancy-size",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------------Checking Configuration of fec-redundancy-size------------------------\");",
															"            ",
															"        try {",
															"            let fecRedundancySizes = [\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_2\",",
															"                                        \"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_4\", ",
															"                                        \"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_8\",",
															"                                        \"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_16\",",
															"                                        \"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_20\",",
															"                                        \"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_NOT_YET_DEFINED\"",
															"                                  ];",
															"            let configuredFecRedundancySize = configuration[\"fec-redundancy-size\"];",
															"            let configuredFecRedundancySizeIndex = fecRedundancySizes.indexOf(configuredFecRedundancySize);",
															"            let potentialDummyValues = fecRedundancySizes;",
															"            if ( configuredFecRedundancySizeIndex >= 0 ) {",
															"                potentialDummyValues.splice(configuredFecRedundancySizeIndex, 1);",
															"            }",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(fecRedundancySizes, configuredFecRedundancySize,",
															"                                    configuredFecRedundancySizeIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue);",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"fec-redundancy-size\";",
															"    ",
															"        // Self Testing Function",
															"        function CouldDummyBeCreated(fecRedundancySizes, configuredFecRedundancySize,",
															"                                    configuredFecRedundancySizeIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue) {",
															"            pm.test(\"CouldFecRedundancySizesBeCreated\", function () {",
															"                pm.expect(fecRedundancySizes).to.be.an(\"array\");",
															"                pm.expect(fecRedundancySizes.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldConfiguredFecRedundancySizeBeRetrieved\", function () {",
															"                pm.expect(configuredFecRedundancySize).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldConfiguredFecRedundancySizeIndexBeEvaluated\", function () {",
															"                pm.expect(configuredFecRedundancySizeIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        } ",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_NOT_YET_DEFINED\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// fec-interleaver-kind",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------------Checking Configuration of fec-interleaver-kind-----------------------\");",
															"            ",
															"        try {",
															"            let fecInterleaverKinds = [\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NONE\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_BLOCK\", ",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_CONVOLUTION\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NOT_YET_DEFINED\"",
															"                                      ];",
															"            let configuredFecInterleaverKind = configuration[\"fec-interleaver-kind\"];",
															"            let configuredFecInterleaverKindIndex = fecInterleaverKinds.indexOf(configuredFecInterleaverKind);",
															"            let potentialDummyValues = fecInterleaverKinds;",
															"            if ( configuredFecInterleaverKindIndex >= 0 ) {",
															"                potentialDummyValues.splice(configuredFecInterleaverKindIndex, 1);",
															"            }",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(fecInterleaverKinds, configuredFecInterleaverKind,",
															"                                    configuredFecInterleaverKindIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue);",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"fec-interleaver-kind\";",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(fecInterleaverKinds, configuredFecInterleaverKind,",
															"                                    configuredFecInterleaverKindIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue) {",
															"            pm.test(\"CouldFecInterleaverKindsBeCreated\", function () {",
															"                pm.expect(fecInterleaverKinds).to.be.an(\"array\");",
															"                pm.expect(fecInterleaverKinds.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldConfiguredFecInterleaverKindBeRetrieved\", function () {",
															"                pm.expect(configuredFecInterleaverKind).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldConfiguredFecInterleaverKindIndexBeEvaluated\", function () {",
															"                pm.expect(configuredFecInterleaverKindIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NOT_YET_DEFINED\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// fec-interleaver-depth",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------------Checking Configuration of fec-interleaver-depth----------------------\");",
															"            ",
															"        try {",
															"            let fecInterleaverDepths = [\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_1\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_2\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_3\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_4\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_6\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_8\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_12\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_16\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_24\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_32\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_48\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_96\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NOT_YET_DEFINED\"",
															"                                      ];",
															"            let configuredfecInterleaverDepth = configuration[\"fec-interleaver-depth\"];",
															"            let configuredfecInterleaverDepthIndex = fecInterleaverDepths.indexOf(configuredfecInterleaverDepth);",
															"            let potentialDummyValues = fecInterleaverDepths;",
															"            if ( configuredfecInterleaverDepthIndex >= 0 ) {",
															"                potentialDummyValues.splice(configuredfecInterleaverDepthIndex, 1);",
															"            }",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(fecInterleaverDepths, configuredfecInterleaverDepth,",
															"                                    configuredfecInterleaverDepthIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue);",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"fec-interleaver-depth\";",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(fecInterleaverDepths, configuredfecInterleaverDepth,",
															"                                        configuredfecInterleaverDepthIndex,",
															"                                        potentialDummyValues,",
															"                                        dummyValueIndex,",
															"                                        dummyValue) {",
															"            pm.test(\"CouldFecInterleaverDepthsBeCreated\", function () {",
															"                pm.expect(fecInterleaverDepths).to.be.an(\"array\");",
															"                pm.expect(fecInterleaverDepths.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldConfiguredFecInterleaverDepthBeRetrieved\", function () {",
															"                pm.expect(configuredfecInterleaverDepth).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldConfiguredFecInterleaverDepthIndexBeEvaluated\", function () {",
															"                pm.expect(configuredfecInterleaverDepthIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_NOT_YET_DEFINED\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// encryption-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of encryption-is-on-------------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"encryption-is-on\";",
															"            ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"encryption-is-avail\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// cryptographic-key",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of cryptographic-key-------------------------\");",
															"            ",
															"        var dummyValue = GenerateRandomString(16);",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"cryptographic-key\";",
															"            ",
															"        // Functions",
															"        function GenerateRandomString(length) {",
															"            let randomString = \"\";",
															"            let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
															"            let charactersLength = characters.length;",
															"            for ( let i=0; i<length; i++ ) {",
															"                randomString += characters.charAt(Math.floor(Math.random() * charactersLength));",
															"            }",
															"            return randomString;",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"Cryptographic key not yet defined.\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// loop-back-kind-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of loop-back-kind-on------------------------\");",
															"            ",
															"        try {",
															"            var supportedLoopBackKindList = capability[\"supported-loop-back-kind-list\"];",
															"            var loopBackKindOn = configuration[\"loop-back-kind-on\"];",
															"            for (let i=0; i<supportedLoopBackKindList.length; i++) {",
															"                if ( (supportedLoopBackKindList[i]===\"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\")",
															"                        || (supportedLoopBackKindList[i]===loopBackKindOn) ) {",
															"                    supportedLoopBackKindList.splice(i, 1);",
															"                }",
															"            }",
															"            var dummyValue;",
															"            if ( supportedLoopBackKindList.length === 0 ) {",
															"                dummyValue = \"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\";",
															"            } else {",
															"                let dummyValueIndex = Math.floor( Math.random() * supportedLoopBackKindList.length );",
															"                dummyValue = supportedLoopBackKindList[dummyValueIndex];",
															"            }",
															"            CouldDummyBeCreated(supportedLoopBackKindList, loopBackKindOn, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"loop-back-kind-on\";",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(supportedLoopBackKindList, loopBackKindOn, dummyValue) {",
															"            pm.test(\"CouldDummyBeCreated\", function () {",
															"                pm.expect(supportedLoopBackKindList).to.be.an(\"array\");",
															"                pm.expect(loopBackKindOn).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try {",
															"            var supportedLoopBackKindList = capability[\"supported-loop-back-kind-list\"];",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"                    && (Math.floor(resultCode/100) === 2)",
															"                    && (dummyValueString === resultValueString) ) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"            } else {",
															"                if ( (resultValueString === JSON.stringify(\"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"))",
															"                        && (supportedLoopBackKindList.length===1)",
															"                        && (supportedLoopBackKindList[0]===\"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\")",
															"                        && (dummyCode === responseCodeForOperationFailed) ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(supportedLoopBackKindList, configurationValidationResults[attributeUnderTest]);",
															"        } catch (error) {",
															"            CouldResultBeEvaluated();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldResultBeEvaluated(supportedLoopBackKindList, configurationValidationResult) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(supportedLoopBackKindList).to.be.an(\"array\");",
															"                pm.expect(configurationValidationResult).to.be.a(\"string\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// maintenance-timer",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of maintenance-timer------------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"maintenance-timer\";",
															"            ",
															"        try {",
															"            var currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"            var maintenanceTimerRange = capability[\"maintenance-timer-range\"];",
															"            var dummyValue = getRandomValues(maintenanceTimerRange, currentValue);",
															"            CouldDummyValueBeDefined(maintenanceTimerRange, currentValue, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeDefined();",
															"        }",
															"            ",
															"        // Functions",
															"        function getRandomValues(availableValues, currentValue) {",
															"            var randomValue=0;",
															"        \tif(availableValues.includes(\"-\")) {",
															"        \t\tvar rangeValues = availableValues.split(\"-\");",
															"        \t\tdo {",
															"        \t\t    randomValue = getRandomValueFromAvailableValues(rangeValues[0], rangeValues[1]);",
															"        \t\t} while(randomValue===currentValue);",
															"        \t} else if(availableValues.includes(\",\")) {",
															"        \t    var concreteValues = availableValues.split(\",\");",
															"        \t    do {",
															"        \t        var randomIndex = getRandomValueFromAvailableValues(0,concreteValues.length);",
															"        \t        randomValue = concreteValues[randomIndex];",
															"        \t    } while(randomValue===currentValue);",
															"        \t}",
															"        \telse {",
															"        \t\trandomValue = availableValues;",
															"        \t}",
															"        \treturn randomValue;",
															"        }",
															"            ",
															"        function getRandomValueFromAvailableValues(min, max) {  ",
															"           return Math.floor(Math.random() * (max - min) + min);  ",
															"        } ",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeDefined(maintenanceTimerRange, currentValue, dummyValue) {",
															"            pm.test(\"CouldAnAvailableConfigurationValueBeRead\", function () {",
															"                pm.expect(maintenanceTimerRange).to.be.a(\"string\");",
															"                pm.expect(maintenanceTimerRange).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldDCurrentValueBeRead\", function () {",
															"                pm.expect(currentValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(dummyValue).to.not.be.undefined;",
															"            });",
															"        }",
															"     };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = -1;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// statistics-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of statistics-is-on------------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"statistics-is-on\";",
															"            ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"statistics-is-avail\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// problem-kind-severity-list/problem-kind-severity",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------Checking Configuration of problem-kind-severity-list/problem-kind-severity--------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"problem-kind-severity-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"problem-kind-name\";",
															"        var ATTRIBUTE_UNDER_TEST = \"problem-kind-severity\";",
															"            ",
															"        try {",
															"            var currentValue;",
															"            currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"            keysOfDatatypeInstanceUnderTest[0].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"            CouldCurrentConfigurationValuesBeRead(currentValue);",
															"        } catch (error) {",
															"            CouldCurrentConfigurationValuesBeRead();",
															"        }",
															"            ",
															"        try {",
															"            if ( currentValue !== \"ethernet-container-2-0:SEVERITY_TYPE_MINOR\" ) {",
															"                var dummyValue = \"ethernet-container-2-0:SEVERITY_TYPE_MINOR\";",
															"            } else {",
															"                var dummyValue = \"ethernet-container-2-0:SEVERITY_TYPE_MAJOR\";",
															"            }",
															"            CouldDummyValueBeDefined(true);",
															"        } catch (error) {",
															"            CouldDummyValueBeDefined(false);",
															"        }",
															"            ",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"            ",
															"        // Self Testing Function",
															"        function CouldCurrentConfigurationValuesBeRead(currentValue) {",
															"            pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
															"                pm.expect(currentValue).to.be.a(\"string\");",
															"                pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"            ",
															"        function CouldDummyValueBeDefined(success) {",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"ethernet-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// performance-monitoring-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------Checking Configuration of performance-monitoring-is-on-----------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"            ",
															"        try {",
															"            var dummyValue = !configuration[\"performance-monitoring-is-on\"];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"performance-monitoring-is-avail\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"/*//    another attribute's YANG name",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------Checking Configuration of performance-monitoring-is-on-----------------\");",
															"            ",
															"        try {",
															"            ",
															"            ",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"?\");",
															"            });",
															"        }    ",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try {",
															"        ",
															"        ",
															"            CouldResultBeEvaluated(true);",
															"        } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"        }",
															"            ",
															"        // Self Testing Function",
															"        function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, EvaluatingResultAsaString);",
															"}   //attributes.push(newAttribute);",
															"*/",
															"",
															"pm.collectionVariables.set( \"attributes\", attributes);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function ConvertingThisFunctionToString(functionToBeConverted) {",
															"    let functionAsAString = String(functionToBeConverted);",
															"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
															"    return functionAsAString.slice(indexOfFirstCurly);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointEthernetContainerConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "47577828-2aa2-4fa0-a6fd-037a46daa0fd",
														"exec": [
															"console.log(\"\\n--------------EntryPoint of EthernetContainer Validation of Configuration-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the EthernetContainerConfiguration TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].ethernetContainerList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointEthernetContainerConfiguration\");",
															"        console.log(\"Proceeding with terminating EthernetContainer validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST = 0;",
															"",
															"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1ee29144-fd21-470d-b91d-57d08ae1f442",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "33ecb22d-1ead-439b-8f3d-7475a1e53394",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "CollectionInformationLoading",
									"item": [
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "afe81c53-5cde-4c67-8d69-2c8750e38e22",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ccdb4096-ecfd-4648-a243-c20906884544",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "476a5536-0f8b-4df8-ae9d-7b0bcb5b259c",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "71dfabc5-800f-4fbb-8421-4b05bbcd8ea3",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceStatus",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "25240215-a53c-476c-9802-c28635756d89",
														"exec": [
															"console.log(\"\\n------------------------------Uploading Interface Status----------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Status",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c4b3ee96-06fe-4e51-8e1f-a957d542a30f",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "818bb3c2-145f-4620-a410-af0db7c81d9c",
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "AttributeConfiguration",
									"item": [
										{
											"name": "EntryPointAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6dcfa2a6-e6a5-4467-bb9a-a5cf19ed03dc",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the AttributeConfiguration Tests ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var attributes = pm.collectionVariables.get(\"attributes\");",
															"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
															"    ",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    ",
															"    CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"        ",
															"    if ( indexOfAttributeUnderTest < attributes.length ) {",
															"        postman.setNextRequest();",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointAttributeConfiguration\");",
															"    }",
															"        ",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri) {",
															"    pm.test(\"CouldTheAttributesBeLoaded\", function () {",
															"        pm.expect(attributes).to.be.an(\"array\");",
															"    });",
															"    pm.test(\"CouldIndexOfAttributeUnderTestBeLoaded\", function () {",
															"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"CouldTheDummyUriBeLoaded\", function () {",
															"        pm.expect(dummyUri).to.be.a(\"string\");",
															"        pm.expect(dummyUri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Writing",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d3046feb-6f2c-49e3-aa6d-bffa8d9b26a9",
														"exec": [
															"/****************************************************************************************",
															"* Retrieving DummyCode",
															"****************************************************************************************/",
															"try {",
															"    var dummyCode = JSON.parse(pm.response.code);",
															"    var dummyErrorMessage = \"\";",
															"    if (Math.floor(dummyCode / 100) !== 2) {        ",
															"        if (pm.response) {",
															"            var dummyErrorMessage = JSON.parse(pm.response.stream).errors.error[0][\"error-message\"];",
															"            pm.variables.set(\"responseForMantis\", pm.response.json());  //Mantis purpose storing request uri            ",
															"        } else {",
															"            var emptyResponse = {};",
															"            pm.variables.set(\"responseForMantis\", emptyResponse);",
															"        }",
															"        CouldTheResponseBeStoredForMntis();",
															"    }",
															"    CouldResponseBeRetrieved(dummyCode, dummyErrorMessage);",
															"} catch (error) {",
															"    CouldResponseBeRetrieved();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting Local Variables",
															"****************************************************************************************/",
															"pm.variables.set(\"dummyCode\", dummyCode);",
															"pm.variables.set(\"dummyErrorMessage\", dummyErrorMessage);",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldResponseBeRetrieved(responseCode, responseErrorMessage) {",
															"    pm.test(\"CouldTheDummyCodeOfPuttingBeReceived\", function () {",
															"        pm.expect(responseCode).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"CouldTheErrorMessagePuttingBeComposed\", function () {",
															"        pm.expect(responseErrorMessage).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldTheResponseBeStoredForMntis() {",
															"    pm.test(\"CouldTheResponseBeStoredForMntis\", function () {",
															"        pm.expect(pm.variables.get(\"responseForMantis\")).to.be.an(\"object\");;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5e225cec-8061-4183-8c28-1a58d97f8ef1",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Writing",
															"* ",
															"* This Request is for PUTting an boolean attribute with the alternate value and",
															"* providing this value as dummyValueString to the local Variables.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfWritingAsaString = pm.environment.get(\"PreRequestOfWritingAsaString\");",
															"    eval(PreRequestOfWritingAsaString);",
															"    CouldPreRequestOfWritingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfWritingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfWritingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfWritingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Reading",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "504e9a56-baf8-43c1-bf0f-2bc62478e1dd",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Reading",
															"* ",
															"* This Request is for GETting the value of the attributeUnderTest and providing it ",
															"* as ResultValue to the local Variables",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfReadingAsaString = pm.environment.get(\"PreRequestOfReadingAsaString\");",
															"    eval(PreRequestOfReadingAsaString);",
															"    CouldPreRequestOfReadingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfReadingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfReadingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfReadingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0402e8de-26c9-4dbc-a2fb-0f0d64658eb7",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PostRequestOfReadingAsaString = pm.environment.get(\"PostRequestOfReadingAsaString\");",
															"    eval(PostRequestOfReadingAsaString);",
															"    CouldPostRequestOfReadingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPostRequestOfReadingBeExecuted();",
															"}",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPostRequestOfReadingBeExecuted(success) {",
															"    pm.test(\"CouldPostRequestOfReadingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Evaluating",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e1a54654-0143-46ce-b334-40240063f8b1",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Evaluating",
															"* ",
															"* This Request compares resultValue with dummyValue.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfEvaluatingAsaString = pm.environment.get(\"PreRequestOfEvaluatingAsaString\");",
															"    eval(PreRequestOfEvaluatingAsaString);",
															"    CouldPreRequestOfEvaluatingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfEvaluatingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfEvaluatingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfEvaluatingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Restoring",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3ae26f9f-c8bc-4fe7-917e-8f256b1604c1",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Restoring",
															"* ",
															"* This Request is for Restoring the initial value to the attributeUnderTest",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfRestoringAsaString = pm.environment.get(\"PreRequestOfRestoringAsaString\");",
															"    eval(PreRequestOfRestoringAsaString);",
															"    CouldPreRequestOfRestoringBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfRestoringBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfRestoringBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfRestoringBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "81c91f35-8f79-4fc1-87ff-46fa4acc8405",
														"exec": [
															"/****************************************************************************************",
															"* Setting Local Variables",
															"****************************************************************************************/   ",
															"pm.variables.clear();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ReversalPointAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2d058a8e-7536-4bee-aa94-978cdc20421e",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"        ",
															"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
															"        ",
															"    CouldTheInputBeLoaded(dummyUri, indexOfAttributeUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextAttributeUnderTest = indexOfAttributeUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", indexOfPotentialNextAttributeUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointAttributeConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfAttributeUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "66f89440-3fa2-4175-86c3-13468400be50",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7b831c11-7f0f-48bf-a553-2d5444f3de3d",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is terminating the Test",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "67dbfa30-9ed1-481f-931a-2e1e44b53110",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "000d5af0-32ba-44f7-9698-4e971122bd0b",
														"exec": [
															"console.log(\"\\n-------------------Restoring the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"        ",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration",
															"                                                   );",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    completeClassName = moduleUnderTest + \":\" + technologyUnderTest + \"-configuration\";",
															"    configuration = AddHeadlineToDataObject(configuration, completeClassName);",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ddd70539-be2e-4bed-867b-7782f96084ee",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c02896ac-291f-4088-9030-95c1649d09a7",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a678f42e-cdd4-4ea1-b618-4d099e3b3a50",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointEthernetContainerConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5164b438-a23c-4ccd-8806-903110a6a2b2",
														"exec": [
															"console.log(\"\\n-------------ReversalPoint of EthernetContainer Validation of Configuration---------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Console.log of Validation Results",
															" ****************************************************************************************/",
															"let allConfigurationValidationResults = { \"allConfigurationValidationResults\" : configurationValidationResults };",
															"console.log(allConfigurationValidationResults);",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointEthernetContainerConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "55503d71-1928-4978-a314-8cc533a57ac4",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointEthernetContainerConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "987aff29-5958-42a1-a375-8ecf5b460c7c",
														"exec": [
															"console.log(\"\\n----------------------Terminating EthernetContainerConfiguration--------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is for clearing the Collection variables and terminating the TestCase",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "96b6985f-d73a-4128-990c-58a302a60128",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0cc8db11-98a0-4196-851e-4224b68fca32",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "61f6e4de-d3b0-469f-a03f-1c4a987b6367",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b73df595-ae84-4229-abb1-b8712187d9ca",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7efeea7e-39d4-4d43-b6b4-a144f84e4818",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "HybridMwStructureValidation",
					"item": [
						{
							"name": "HybridMwStructureCompleteness",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d7115ad1-24d8-48eb-9780-3698f7265197",
														"exec": [
															"console.log(\"\\n\\n============================ HybridMwStructureCompleteness.3 =============================\");",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Completeness of HybridMwStructure Objects against definition ",
															"* ",
															"*                   HybridMwStructure_2.0.0-tsp.191123.1240",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/HybridMwStructure/tree/tsp",
															"* ",
															"****************************************************************************************/",
															" ",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"all\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"hybrid-mw-structure-2-0:hybrid-mw-structure-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function() {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function() {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "77d74034-efaf-4768-9cea-e585748205f6",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointHybridMwStructureCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0d96e4cc-7c73-4ebd-97de-c727a08f437d",
														"exec": [
															"console.log(\"\\n--------------EntryPoint of HybridMwStructure Validation for Completeness-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the HybridMwStructureCompleteness TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].hybridMwStructureList.length;",
															"    ",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointHybridMwStructureCompleteness\");",
															"        console.log(\"Proceeding with terminating HybridMwStructure validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7cf63cfe-7495-429e-8b13-4314b6fd4097",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "04402484-bf7b-4141-9da3-b5eeea59892b",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "PRSe08",
															"type": "string"
														},
														{
															"key": "username",
															"value": "senthilvel.s",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "55ba273a-5b8f-4d5c-8229-6c989fc6cce6",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "cfbcf276-91f5-4adf-820f-461b7909b644",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d50a0e02-2c5f-494e-b4e1-1628359b2085",
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1a17be76-6b10-42d6-ad38-1ed78d5713b0",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ccaa543a-c23e-4555-9b2c-107504d1ca0b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "NetworkPreparation",
									"item": [
										{
											"name": "SwitchingOnMonitoring",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b034c441-4f17-4a06-936c-c5a6d34411cb",
														"exec": [
															"console.log(\"\\n---------------------------------Switching Monitoring On----------------------------------\");",
															"/****************************************************************************************",
															" * ",
															" * Switching Monitoring On",
															" * ",
															" * This Request is for activating collection of performance data on the device under",
															" * test, so the data can be retrieved during validating completeness of the implementation",
															" *  ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration);",
															"} catch (error) {",
															"    CouldInputForSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Forming the Body",
															" ****************************************************************************************/",
															"try {",
															"    let requestBodyString = ('{ \"' + moduleUnderTest + ':performance-monitoring-is-on\": true }');",
															"    var requestBody = JSON.parse(requestBodyString);",
															"    CouldRequestBodyBeFormed(requestBody);",
															"} catch (error) {",
															"    CouldRequestBodyBeFormed();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Calling for Preparation of the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(requestBody);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration) {",
															"    pm.test(\"CouldInputForSwitchingMonitoringOnBeLoaded\", function() {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(configuration).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyBeFormed(requestBody) {",
															"    pm.test(\"CouldRequestBodyBeFormed\", function() {",
															"        pm.expect(requestBody).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, ",
															"                                                keysOfDatatypeInstanceUnderTest,",
															"                                                attributeUnterTest, ",
															"                                                contentType,",
															"                                                filteredDepth, ",
															"                                                filteredFields, ",
															"                                                requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"            \"current-problems\", \"current-performance\",",
															"            \"historical-performances\"",
															"        ]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function() {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "18b706ca-a256-47db-9d6c-5ef47f135436",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched on.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched on.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d6873d6b-c874-420a-9b92-5a18fb91aad0",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "6e093008-c24e-4199-bf33-db728c2f78b7",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ValidationRequests",
									"item": [
										{
											"name": "PacCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "12371c95-ad6d-4724-a07f-c9720e2b028e",
														"exec": [
															"console.log(\"\\n---------------------Checking HybridMwStructure_Pac for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* PacCompleteness",
															"* ",
															"* This Request is for validating HybridMwStructure Pac Objects against definition ",
															"* HybridMwStructure_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/hybridMwStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the *_Pac class",
															"*  - availability of all attributes in this particular class",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"pac\";             // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 3;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let HYBRID_MW_STRUCTURE_PAC_SCHEMA = {\t",
															"    \"type\": \"object\",",
															"\t\"properties\": {",
															"        \"hybrid-mw-structure-capability\": {",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": {",
															"\t\t\t\t\"supported-alarm-list\": \t\t\t\t\t{ \"type\": \"array\"   },",
															"\t\t\t\t\"supported-tdm-structure-kind-list\":\t\t{ \"type\": \"array\"   },",
															"\t\t\t\t\"performance-monitoring-is-avail\":\t\t\t{ \"type\": \"boolean\" }",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"hybrid-mw-structure-configuration\":{",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": {",
															"\t\t\t\t\"number-of-tdm-segments-to-be-reserved\":    { \"type\": \"number\" },",
															"\t\t\t\t\"problem-kind-severity-list\": \t\t\t\t{ \"type\": \"array\"   }, ",
															"\t\t\t\t\"g-826-threshold-cross-alarm-list\": \t\t{ \"type\": \"array\"   },",
															"\t\t\t\t\"clearing-threshold-cross-alarms-is-on\":\t{ \"type\": \"boolean\" },  ",
															"\t\t\t\t\"performance-monitoring-is-on\": \t\t\t{ \"type\": \"boolean\" }",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"hybrid-mw-structure-status\": {",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": {",
															"\t\t\t\t\"segment-status-list\": \t\t\t\t\t\t{ \"type\": \"array\"   },",
															"\t\t\t\t\"performance-monitoring-is-up\": \t\t\t{ \"type\": \"boolean\" }",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"hybrid-mw-structure-current-problems\": {",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": {",
															"\t\t\t\t\"current-problem-list\": \t\t\t\t\t{ \"type\": \"array\"  }",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"hybrid-mw-structure-current-performance\": {",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": {",
															"\t\t\t\t\"current-performance-data-list\":\t\t\t{ \"type\": \"array\"  }",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"hybrid-mw-structure-historical-performances\": {",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": {",
															"\t\t\t\t\"historical-performance-data-list\": \t\t{ \"type\": \"array\"  }",
															"\t\t\t}",
															"\t\t}",
															"\t},",
															"\t\"required\": [\"hybrid-mw-structure-capability\",",
															"\t\t\t\t\"hybrid-mw-structure-configuration\",",
															"\t\t\t\t\"hybrid-mw-structure-status\",",
															"\t\t\t\t\"hybrid-mw-structure-current-problems\",",
															"\t\t\t\t\"hybrid-mw-structure-current-performance\",",
															"\t\t\t\t\"hybrid-mw-structure-historical-performances\"",
															"    ]",
															"};",
															"pm.variables.set(\"schema\", HYBRID_MW_STRUCTURE_PAC_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "76072f57-5ed9-4ccd-95bf-d74876f8eb20",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CapabilityCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4e01d589-d4c2-4b22-96e3-37f16b794aa0",
														"exec": [
															"console.log(\"\\n--------------------Checking hybridMwStructureCapability for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* CapabilityCompleteness",
															"* ",
															"* This Request is for validating HybridMwStructure Capability Objects against definition ",
															"* HybridMwStructure_2.0.0-tsp.191123.1240",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/hybridMwStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Capability class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let HYBRID_MW_STRUCTURE_CAPABILITY_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"supported-alarm-list\": {",
															"            \"type\": \"array\",",
															"            \"item\":                                     { \"type\": \"string\" }",
															"\t\t},\t",
															"\t\t\"supported-tdm-structure-kind-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": { ",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"tdm-structure-name\":     \t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"tdm-segment-size\":     \t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\"max-number-of-segments-reservable\":{ \"type\": \"number\" }",
															"\t\t},",
															"\t\t\"required\": [\"tdm-structure-name\", ",
															"\t\t\t\t\t\"tdm-segment-size\",",
															"\t\t\t\t\t\"max-number-of-segments-reservable\"",
															"\t\t\t\t\t]\t",
															"\t\t}\t",
															"\t\t},\t\t",
															"\t\t\"performance-monitoring-is-avail\":\t \t\t\t{ \"type\": \"boolean\" }",
															"\t},",
															"\t\"required\": [ \"supported-alarm-list\", ",
															"\t\t\t\t\"supported-tdm-structure-kind-list\",",
															"\t\t\t\t\"performance-monitoring-is-avail\"\t\t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t]",
															"};",
															"",
															"pm.variables.set(\"schema\", HYBRID_MW_STRUCTURE_CAPABILITY_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "bf11fccd-805a-4f35-8bdb-305e27ee8862",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ConfigurationCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ebc9eec8-acdc-4920-8b94-4e96b2c6b697",
														"exec": [
															"console.log(\"\\n----------------Checking HybridMwStructureConfiguration for Completeness------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ConfigurationCompleteness",
															"* ",
															"* This Request is for validating HybridMwStructure Configuration Objects against definition ",
															"* HybridMwStructure_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/hybridMwStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Configuration class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let HYBRID_MW_STRUCTURE_CONFIGURATION_SCHEMA = {\t",
															"\t\"$schema\": \"\",",
															"    \"$id\": \"\",",
															"    \"title\": \"\",",
															"    \"description\": \"\",",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"\t\t\"hybrid-mw-structure-2-0:hybrid-mw-structure-configuration\": {",
															"\t\t\"type\": \"object\", ",
															"\t\t\"properties\": {",
															"\t\t\t\"number-of-tdm-segments-to-be-reserved\": \t{ \"type\": \"number\" },",
															" \t\t\t\"problem-kind-severity-list\": { ",
															"\t\t\t\"type\": \"object\", ",
															"\t\t\t\"properties\": {",
															"\t\t\t\t\"problem-kind-name\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\"problem-kind-severity\": \t\t\t\t{ \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:SEVERITY_TYPE_WARNING\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:SEVERITY_TYPE_MINOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:SEVERITY_TYPE_MAJOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:SEVERITY_TYPE_CRITICAL\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t},",
															"\t\t\t\t\"required\": \t\t\t\t\t\t\t[\"problem-kind-name\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"problem-kind-severity\"",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t}",
															"\t\t\t}, \t\t",
															" \t\t\t\"g-826-threshold-cross-alarm-list\": {",
															"\t\t\t\"type\": \"object\", ",
															"\t\t\t\"properties\": {",
															"\t\t\t\t\"g-826-value-kind\": \t\t\t\t\t{ \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:G826_TYPE_ES\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:G826_TYPE_SES\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:G826_TYPE_CSES\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:G826_TYPE_UAS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:G826_TYPE_NOT_SPECIFIED\"",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t},",
															"\t\t\t\t\"alarm-raising-threshold\": \t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\"alarm-clearing-threshold\": \t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\"granularity-period\": \t\t\t\t\t{ \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t},",
															"\t\t\t\t\"required\": \t\t\t\t\t\t\t[\"g-826-value-kind\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"alarm-raising-threshold\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"alarm-clearing-threshold\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"granularity-period\"",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t}",
															"\t\t\t}, \t\t\t            \t\t\t \t\t\t\t\t",
															"\t\t\t\"clearing-threshold-cross-alarms-is-on\": \t{ \"type\": \"boolean\" }, \t\t",
															"\t\t\t\"performance-monitoring-is-on\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\"required\": \t\t\t\t\t\t\t\t[ \"number-of-tdm-segments-to-be-reserved\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"problem-kind-severity-list\", ",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"g-826-threshold-cross-alarm-list\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"clearing-threshold-cross-alarms-is-on\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"performance-monitoring-is-on\"\t",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\t]\t\t",
															" \t\t}",
															"\t\t},",
															"\t\t\"required\": [\"hybrid-mw-structure-2-0:hybrid-mw-structure-configuration\"]",
															"\t}",
															"};",
															"",
															"pm.variables.set(\"schema\", HYBRID_MW_STRUCTURE_CONFIGURATION_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "bcc915f8-d701-40b4-91a5-5e1ce518ac2c",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "StatusCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3a8b39c2-05f4-4058-bbb0-be6ddacc6d4d",
														"exec": [
															"console.log(\"\\n-------------------Checking HybridMwStructureStatus for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* StatusCompleteness",
															"* ",
															"* This Request is for validating HybridMwStructure Status Objects against definition ",
															"* HybridMwStructure_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/hybridMwStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Status class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let HYBRID_MW_STRUCTURE_STATUS_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"segment-status-list\": { ",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": { ",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"segment-status-type-id\": \t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\"segment-is-reserved-for-tdm\":\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\t\"operational-status\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:OPERATIONAL_STATE_TYPE_ENABLED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:OPERATIONAL_STATE_TYPE_DISABLED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:OPERATIONAL_STATE_TYPE_NOT_YET_DEFINED\"\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t}",
															"\t\t\t\t},",
															"\t\t\t\t\"required\": [ \"segment-status-type-id\", ",
															"\t\t\t\t\t\t\t\"segment-is-reserved-for-tdm\",",
															"\t\t\t\t\t\t\t\"operational-status\"\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\t\t]\t",
															"\t\t\t}",
															"\t\t},\t\t",
															"\t\t\"performance-monitoring-is-up\": { \"type\": \"boolean\" }\t\t\t\t",
															"\t},",
															"\t\"required\": [ \"segment-status-list\", ",
															"\t\t\t\t\"performance-monitoring-is-up\"\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t]\t",
															"};",
															"",
															"pm.variables.set(\"schema\", HYBRID_MW_STRUCTURE_STATUS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1dcddbd2-6352-49ab-87e1-ddfb988487c0",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentProblemsCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "8e1d1626-ba14-492d-8db5-29b8813d1616",
														"exec": [
															"console.log(\"\\n---------------Checking HybridMwStructureCurrentProblems for Completeness-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentProblemsCompleteness",
															"* ",
															"* This Request is for validating HybridMwStructure CurrentProblems Objects against definition ",
															"* HybridMwStructure_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/eybridMwStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentProblems class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-problems\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let HYBRID_MW_STRUCTURE_CURRENT_PROBLEMS_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"current-problem-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"problem-name\": \t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"sequence-number\": \t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\"timestamp\": \t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"problem-severity\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:SEVERITY_TYPE_WARNING\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:SEVERITY_TYPE_MINOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:SEVERITY_TYPE_MAJOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:SEVERITY_TYPE_CRITICAL\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t}",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"problem-name\", ",
															"\t\t\t\t\t\t\t\"sequence-number\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\t\t\"timestamp\",",
															"\t\t\t\t\t\t\t\"problem-severity\"\t",
															"\t\t\t\t\t\t\t]\t\t\t\t\t\t",
															"\t\t\t}",
															"\t\t}",
															"\t},",
															"\t\"required\": [ \"current-problem-list\"] ",
															"};",
															"pm.variables.set(\"schema\", HYBRID_MW_STRUCTURE_CURRENT_PROBLEMS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ef3aed04-bba3-4dfb-81b2-1805b82feff8",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentPerformanceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7b68ef62-0aed-4d6a-bbaa-b15db7c656c5",
														"exec": [
															"console.log(\"\\n-------------Checking HybridMwStructureCurrentPerformance for Completeness----------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentPerformanceCompleteness",
															"* ",
															"* This Request is for validating HybridMwStructure CurrentPerformance Objects against definition ",
															"* HybridMwStructure_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/hybridMwStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentPerformance class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-performance\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let HYBRID_MW_STRUCTURE_CURRENT_PERFORMANCE_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"current-performance-data-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\"time-period\": \t\t\t\t\t{ \"type\": \"number\" }, \t\t\t\t",
															"\t\t\t\t\t\t\t\"es\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"ses\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, \t\t",
															"\t\t\t\t\t\t\t\"cses\": \t\t\t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"unavailability\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rx-level-min\": \t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"rx-level-max\": \t\t\t\t{ \"type\": \"number\" },\t\t",
															"\t\t\t\t\t\t\t\"rx-level-avg\": \t\t\t\t{ \"type\": \"number\" } \t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\"required\": [ \"time-period\",",
															"\t\t\t\t\t\t\t\t\t\"es\", ",
															"\t\t\t\t\t\t\t\t\t\"ses\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\t\t\t\t\"cses\",",
															"\t\t\t\t\t\t\t\t\t\"unavailability\",\t",
															"\t\t\t\t\t\t\t\t\t\"rx-level-min\",",
															"\t\t\t\t\t\t\t\t\t\"rx-level-max\",",
															"\t\t\t\t\t\t\t\t\t\"rx-level-avg\"",
															"\t\t\t\t\t\t\t\t\t]\t\t\t\t",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"timestamp\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"suspect-interval-flag\": \t\t\t{ \"type\": \"boolean\" },\t\t\t",
															"\t\t\t\t\t\"elapsed-time\": \t\t\t\t\t{ \"type\": \"integer\" },\t\t",
															"\t\t\t\t\t\"scanner-id\": \t\t\t\t\t\t{ \"type\": \"string\" },\t ",
															"\t\t\t\t\t\"granularity-period\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t},\t ",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"performance-data\",",
															"\t\t\t\t\t\t\t\"timestamp\",",
															"\t\t\t\t\t\t\t\"suspect-interval-flag\",",
															"\t\t\t\t\t\t\t\"elapsed-time\",",
															"\t\t\t\t\t\t\t\"scanner-id\",",
															"\t\t\t\t\t\t\t\"granularity-period\",",
															"\t\t\t\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-current-performance-sets\": { \"type\": \"number\" },",
															"\t},",
															"\t\"required\":\t[ \"current-performance-data-list\",",
															"        \t\t  \"number-of-current-performance-sets\" ]",
															"};",
															"",
															"try {",
															"    if (capability[\"performance-monitoring-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", HYBRID_MW_STRUCTURE_CURRENT_PERFORMANCE_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"current-performance-data-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        HYBRID_MW_STRUCTURE_CURRENT_PERFORMANCE_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldHybridMwStructureCurrentPerformanceBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldHybridMwStructureCurrentPerformanceBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", HYBRID_MW_STRUCTURE_CURRENT_PERFORMANCE_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldHybridMwStructureCurrentPerformanceBeShortened(success) {",
															"    pm.test(\"CouldHybridMwStructureCurrentPerformanceBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "03c02a45-50f0-492e-a4f7-de5ef4176135",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "HistoricalPerformancesCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f28a8605-c8de-4695-8310-01bf8b8ba720",
														"exec": [
															"console.log(\"\\n------------Checking HybridMwStructureHistoricalPerformances for Completeness-------------\");",
															"/*******************************************************************************",
															"* ",
															"* HistoricalPerformancesCompleteness",
															"* ",
															"* This Request is for validating HybridMwStructure HistoricalPerformances Objects against definition ",
															"* HybridMwStructure_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/hybridMwStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the HistoricalPerformances class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"*******************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"historical-performances\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let HYBRID_MW_STRUCTURE_HISTORICAL_PERFORMANCES_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"historical-performance-data-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\"time-period\": \t\t\t\t\t{ \"type\": \"number\" }, \t\t\t\t",
															"\t\t\t\t\t\t\t\"es\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"ses\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, \t\t",
															"\t\t\t\t\t\t\t\"cses\": \t\t\t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"unavailability\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rx-level-min\": \t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"rx-level-max\": \t\t\t\t{ \"type\": \"number\" },\t\t",
															"\t\t\t\t\t\t\t\"rx-level-avg\": \t\t\t\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t},\t\t\t\t\t\t",
															"\t\t\t\t\t\t\"required\": [ \"time-period\",",
															"\t\t\t\t\t\t\t\t\t\"es\", ",
															"\t\t\t\t\t\t\t\t\t\"ses\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\t\t\t\t\"cses\",",
															"\t\t\t\t\t\t\t\t\t\"unavailability\",\t",
															"\t\t\t\t\t\t\t\t\t\"rx-level-min\",",
															"\t\t\t\t\t\t\t\t\t\"rx-level-max\",",
															"\t\t\t\t\t\t\t\t\t\"rx-level-avg\"",
															"\t\t\t\t\t\t\t\t\t]\t\t\t\t\t",
															"\t\t\t\t\t},\t\t",
															"\t\t\t\t\t\"suspect-interval-flag\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\t\"history-data-id\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"period-end-time\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"granularity-period\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"hybrid-mw-structure-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t]\t\t\t\t",
															"\t\t\t\t\t},",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"performance-data\",",
															"\t\t\t\t\t\t\t\"suspect-interval-flag\",",
															"\t\t\t\t\t\t\t\"history-data-id\",",
															"\t\t\t\t\t\t\t\"period-end-time\",",
															"\t\t\t\t\t\t\t\"granularity-period\",",
															"\t\t\t\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"        \"number-of-historical-performance-sets\": { \"type\": \"number\" },",
															"\t\t\"time-of-latest-change\": { \"type\": \"string\" },",
															"\t},",
															"\t\"required\":\t[ \"historical-performance-data-list\", ",
															"                  \"number-of-historical-performance-sets\",",
															"\t\t          \"time-of-latest-change\"",
															"                ]",
															"};",
															"",
															"try {",
															"    if (capability[\"performance-monitoring-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", HYBRID_MW_STRUCTURE_HISTORICAL_PERFORMANCES_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"historical-performance-data-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        HYBRID_MW_STRUCTURE_HISTORICAL_PERFORMANCES_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldHybridMwStructureHistoricalPerformancesBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldHybridMwStructureHistoricalPerformancesBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", HYBRID_MW_STRUCTURE_HISTORICAL_PERFORMANCES_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldHybridMwStructureHistoricalPerformancesBeShortened(success) {",
															"    pm.test(\"CouldHybridMwStructureHistoricalPerformancesBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f83bc1d2-594a-4434-8b51-f774c1c3530f",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c7efb84b-c709-405c-9ee0-da360640095e",
														"exec": [
															"console.log(\"\\n-------------------Restoring the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"        ",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration",
															"                                                   );",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    completeClassName = moduleUnderTest + \":\" + technologyUnderTest + \"-configuration\";",
															"    configuration = AddHeadlineToDataObject(configuration, completeClassName);",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "79b78c5d-4d51-4e85-98d7-da7f13a2e3d0",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "0a9a5305-8835-4085-b759-b3f973e21a8b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a718bcbe-b4b3-44f1-ba29-6ac21545a8b2",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointHybridMwStructureCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "78bd9321-03f5-4a5b-85c4-f6a7ba64e597",
														"exec": [
															"console.log(\"\\n-------------ReversalPoint of HybridMwStructure Validation for Completeness---------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointHybridMwStructureCompleteness\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1fc8774e-5f40-4885-807f-cb936869c7b6",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointHybridMwStructureCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ad87739e-738a-4c76-ac47-05e6fa14a50e",
														"exec": [
															"console.log(\"\\n-----------------------Terminating HybridMwStructureCompleteness--------------------------\");",
															"/****************************************************************************************",
															" * ",
															" * ExitPoint",
															" * ",
															" * This Request is for clearing the Collection variables and terminating the TestCase",
															" * ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Preparing the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({",
															"        key: \"Accept\",",
															"        value: \"application/json\"",
															"    });",
															"} catch (error) {}",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, controller, indexOfDeviceUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function() {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function() {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7c345c36-d224-4e55-a3ac-128ed2c909f3",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "bcea350e-e2f6-4c54-bc45-6fd0b82d5d48",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a17d63d1-cf60-4c84-a360-e3d2acd5332b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "157fd671-5ead-485a-b7b4-d7bfb8741b24",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e819a7ce-e0b4-433b-9b6f-c84bba88d050",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "HybridMwStructureConfiguration",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4ea4a084-c629-401c-94f2-fd315713cc52",
														"exec": [
															"console.log(\"\\n\\n============================ hybridMwStructureConfiguration.1 prathiba=============================\");",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Configuration of hybridMwStructure Objects against definition ",
															"* ",
															"*                   hybridMWStructure_2.0.0-tsp.191122.1800",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/hybridMwStructure/tree/tsp",
															"* ",
															"****************************************************************************************/",
															" ",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"* ",
															"* It is recommended to apply this TestCase on devices on the local (not remote) site",
															"* of the microwave connection, otherwise the management connection might break and ",
															"* configurations, which are done during the validation, cannot be reversed.",
															"* ",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"one\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"hybrid-mw-structure-2-0:hybrid-mw-structure-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"RESPONSE_CODE_FOR_OPERATION_FAILED = 501;       // 500: Expected translation of aggreed <error-tag> operation failed",
															"CONFIGURATION_VALIDATION_RESULTS = {};",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"console.log(\"Prathiba technologyUnderTest:\" + technologyUnderTest);",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"pm.collectionVariables.set(\"responseCodeForOperationFailed\", RESPONSE_CODE_FOR_OPERATION_FAILED);",
															"pm.collectionVariables.set(\"configurationValidationResults\", CONFIGURATION_VALIDATION_RESULTS);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function() {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function() {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "66a26364-49c3-4584-a102-1983dffee3d5",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DefiningDummyValuesAndEvaluations()",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1d98c705-7499-4f23-b8d5-34261b68aba2",
														"exec": [
															"console.log(\"\\n----------Defining DummyValues and Evaluation Criteria in Configuration Validation--------\");\r",
															"/****************************************************************************************\r",
															"* \r",
															"* Definition of DefiningDummyValuesAndEvaluations()\r",
															"*  \r",
															"* Functions for Defining DummyValues and Evaluation Criteria in all Configuration Validations.\r",
															"*  \r",
															"****************************************************************************************/\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Required Input Parameters\r",
															"****************************************************************************************/\r",
															"try {\r",
															"    var dummyUri = pm.environment.get(\"dummyUri\");\r",
															"        \r",
															"    CouldTheInputBeLoaded(dummyUri);\r",
															"} catch (error) {\r",
															"    CouldTheInputBeLoaded();\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Provided Collection Variables \r",
															"****************************************************************************************/\r",
															"class Attribute {\r",
															"    constructor (CreatingDummyValueAsaString, \r",
															"                    EvaluatingResultAsaString, \r",
															"                    defaultValueForStandardEvaluation,\r",
															"                    capabilityAttributeToBeFalseIfFeatureNotSupported) {\r",
															"        this.CreatingDummyValueAsaString = CreatingDummyValueAsaString;\r",
															"        this.EvaluatingResultAsaString = EvaluatingResultAsaString;\r",
															"        this.defaultValueForStandardEvaluation = defaultValueForStandardEvaluation;\r",
															"        this.capabilityAttributeToBeFalseIfFeatureNotSupported = capabilityAttributeToBeFalseIfFeatureNotSupported;\r",
															"    }\r",
															"}\r",
															"var attributes = [];\r",
															"\r",
															"var CreatingDummyValueAsaString;\r",
															"var EvaluatingResultAsaString;\r",
															"var defaultValueForStandardEvaluation;\r",
															"var capabilityAttributeToBeFalseIfFeatureNotSupported;\r",
															"var newAttribute;\r",
															"\r",
															"console.log(\"adding attributes here\");\r",
															"\r",
															"// problem-kind-severity\r",
															"{\r",
															"    CreatingDummyValue = () => {\r",
															"        console.log(\"\\n-------------------------Checking Configuration of problem-kind-severity--------------------------\");\r",
															"        var DATATYPE_UNDER_TEST = \"problem-kind-severity-list\";\r",
															"        const DATATYPE_INDEX_UNDER_TEST = 0;\r",
															"        var ATTRIBUTE_UNDER_TEST = \"problem-kind-severity\";\r",
															"        var keysOfDatatypeInstanceUnderTest = [{}];\r",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"problem-kind-name\";\r",
															"\t\ttry\r",
															"\t\t{\r",
															"\t\t    var currentValue;\r",
															"\t\t\tcurrentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];\r",
															"\t\t\tkeysOfDatatypeInstanceUnderTest[0].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];\r",
															"\t\t    CouldCurrentConfigurationValuesBeRead(currentValue);\r",
															"\t\t} \r",
															"\t\tcatch (error) \r",
															"\t\t{\r",
															"\t\t    CouldCurrentConfigurationValuesBeRead();\r",
															"\t\t}\r",
															"\t\ttry {\r",
															"\t\t\tif ( currentValue !== \"hybrid-mw-structure-2-0:SEVERITY_TYPE_MINOR\" ) {\r",
															"\t\t\t\tvar dummyValue = \"hybrid-mw-structure-2-0:SEVERITY_TYPE_MINOR\";\r",
															"\t\t\t} else {\r",
															"\t\t\t\tvar dummyValue = \"hybrid-mw-structure-2-0:SEVERITY_TYPE_MAJOR\";\r",
															"\t\t\t}\r",
															"\t\t\tCouldDummyValueBeDefined(true);\r",
															"\t\t} \r",
															"\t\tcatch (error) \r",
															"\t\t{\r",
															"\t\t\tCouldDummyValueBeDefined(false);\r",
															"\t\t}\r",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;\r",
															"        \r",
															"\t\t// Self Testing Functions\r",
															"\t\tfunction CouldCurrentConfigurationValuesBeRead(currentValue) \r",
															"\t\t{\r",
															"\t\t    pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () \r",
															"\t\t    {\r",
															"            pm.expect(currentValue).to.be.a(\"string\");\r",
															"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);\r",
															"            });\r",
															"\t    }\r",
															"\r",
															"\t    function CouldDummyValueBeDefined(success) \r",
															"\t    {\r",
															"            pm.test(\"CouldDummyValueBeDefined\", function () \r",
															"            {\r",
															"                pm.expect(success).to.be.true;\r",
															"            });\r",
															"\t    }\r",
															"    };\r",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);\r",
															"        \r",
															"    EvaluatingResult = () => {\r",
															"        try \r",
															"        {\r",
															"\t\t    if ( (Math.floor(dummyCode/100) === 2)\r",
															"            && (Math.floor(resultCode/100) === 2) \r",
															"            && (dummyValueString===resultValueString) ) \r",
															"            {\r",
															"             configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";\r",
															"\t\t    }\r",
															"\t\t    else \r",
															"\t\t    {\r",
															"                if ( (resultValueString === JSON.stringify(\"hybrid-mw-structure-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\")) ) \r",
															"                {\r",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";\r",
															"                } \r",
															"                else \r",
															"                {\r",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";\r",
															"                }\r",
															"\t\t    }\r",
															"\t\tCouldResultBeEvaluated(true);\r",
															"\t    } catch (error) \r",
															"\t    {\r",
															"            CouldResultBeEvaluated(false);\r",
															"\t    }\r",
															"    \r",
															"    // Functions\r",
															"    \r",
															"    function CouldResultBeEvaluated(success) \r",
															"    {\r",
															"        pm.test(\"CouldResultBeEvaluated\", function () \r",
															"        {\r",
															"            pm.expect(success).to.be.true;\r",
															"        });\r",
															"    }\r",
															"    };\r",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);\r",
															"        \r",
															"    defaultValueForStandardEvaluation = \"\";\r",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";\r",
															"        \r",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, \r",
															"                                    EvaluatingResultAsaString, \r",
															"                                    defaultValueForStandardEvaluation,\r",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported\r",
															"                                 ); \r",
															"}   //attributes.push(newAttribute);\r",
															"\r",
															"// alarm-raising-threshold\r",
															"{\r",
															"    CreatingDummyValue = () => {\r",
															"        console.log(\"\\n-------------------------Checking Configuration of alarm-raising-threshold--------------------------\");\r",
															"        \r",
															"        var keysOfDatatypeInstanceUnderTest = [{},{}];    \r",
															"        var DATATYPE_UNDER_TEST = \"g-826-threshold-cross-alarm-list\";\r",
															"        var ATTRIBUTE_UNDER_TEST = \"alarm-raising-threshold\";\r",
															"\t\tconst DATATYPE_INDEX_UNDER_TEST = 0;\r",
															"\t\tkeysOfDatatypeInstanceUnderTest[0].key=\"g-826-value-kind\";\r",
															"\t\tkeysOfDatatypeInstanceUnderTest[1].value=\"granularity-period\";\r",
															"\t\ttry \r",
															"\t\t{\r",
															"\t\t    var currentValue;\r",
															"\t\t    if ( (DATATYPE_UNDER_TEST===\"\") ) \r",
															"\t\t    {\r",
															"                currentValue = configuration[ATTRIBUTE_UNDER_TEST];\r",
															"\t\t    } \r",
															"\t\t    else \r",
															"\t\t    {\r",
															"                currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];\r",
															"                console.log(\"current value :\" + currentValue);\r",
															"                keysOfDatatypeInstanceUnderTest[0].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"g-826-value-kind\"];\r",
															"                keysOfDatatypeInstanceUnderTest[1].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"granularity-period\"];\r",
															"\t\t    }\r",
															"\t\tCouldCurrentConfigurationValuesBeRead(currentValue);\r",
															"\t    } catch (error) \r",
															"\t    {\r",
															"\t\t    CouldCurrentConfigurationValuesBeRead();\r",
															"\t    }\r",
															"\t    try \r",
															"\t    {\r",
															"            let alarmClearingThreshold = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"alarm-clearing-threshold\"];\r",
															"            var dummyValue =  alarmClearingThreshold + Math.floor(Math.random() * 9);\r",
															"            CouldDummyValueBeDefined(true);\r",
															"\t    } \r",
															"\t    catch (error) \r",
															"\t    {\r",
															"            CouldDummyValueBeDefined(false);\r",
															"\t    }\r",
															"\t    var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;\r",
															"\t\t\r",
															"\t\t// Self Testing Functions\r",
															"    \tfunction CouldCurrentConfigurationValuesBeRead(currentValue) \r",
															"    \t{\r",
															"\t\t    pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () \r",
															"\t\t    {\r",
															"            pm.expect(currentValue).to.be.a(\"number\");\r",
															"\t\t    });\r",
															"\t    }\r",
															"\t    function CouldDummyValueBeDefined(success) \r",
															"\t    {\r",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {\r",
															"            pm.expect(success).to.be.true;\r",
															"        });\r",
															"\t}\r",
															"    };\r",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);\r",
															"        \r",
															"    EvaluatingResult = () => {\r",
															"        try \r",
															"        {\r",
															"\t\t    if ( (Math.floor(dummyCode/100) === 2)\r",
															"            && (Math.floor(resultCode/100) === 2) \r",
															"            && (dummyValueString===resultValueString) ) \r",
															"            {\r",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";\r",
															"\t\t    } \r",
															"\t\t    else \r",
															"\t\t    {\r",
															"                if ( (capability[\"performance-monitoring-is-avail\"] === false)\r",
															"                && (resultValueString === \"-1\") ) \r",
															"                {\r",
															"                     configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";\r",
															"                } \r",
															"                else \r",
															"                {\r",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";\r",
															"                }\r",
															"\t\t    }\r",
															"            CouldResultBeEvaluated(true);\r",
															"\t    } \r",
															"\t    catch (error) \r",
															"\t    {\r",
															"            CouldResultBeEvaluated(false);\r",
															"\t    }\r",
															"    \r",
															"        // Functions\r",
															"    \r",
															"        function CouldResultBeEvaluated(success) \r",
															"        {\r",
															"            pm.test(\"CouldResultBeEvaluated\", function () \r",
															"            {\r",
															"                pm.expect(success).to.be.true;\r",
															"            });\r",
															"        }\r",
															"    };\r",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);\r",
															"        \r",
															"    defaultValueForStandardEvaluation = \"\";\r",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";\r",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, \r",
															"                                    EvaluatingResultAsaString, \r",
															"                                    defaultValueForStandardEvaluation,\r",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported\r",
															"                                 ); \r",
															"}   //attributes.push(newAttribute);\r",
															"\r",
															"\r",
															"// alarm-clearing-threshold\r",
															"{\r",
															"    CreatingDummyValue = () => {\r",
															"        console.log(\"\\n-------------------------Checking Configuration of alarm-clearing-threshold--------------------------\");\r",
															"            \r",
															"        var DATATYPE_UNDER_TEST = \"g-826-threshold-cross-alarm-list\";\r",
															"        var keysOfDatatypeInstanceUnderTest = [{},{}];\r",
															"        var ATTRIBUTE_UNDER_TEST = \"alarm-clearing-threshold\";\r",
															"\t\tconst DATATYPE_INDEX_UNDER_TEST = 0;\r",
															"\t\tkeysOfDatatypeInstanceUnderTest[0].key = \"g-826-value-kind\";\r",
															"        keysOfDatatypeInstanceUnderTest[1].key = \"granularity-period\";\r",
															"\t\ttry \r",
															"\t    {\r",
															"\t\t    var currentValue;\r",
															"\t\t    if ( (DATATYPE_UNDER_TEST===\"\") ) {\r",
															"                currentValue = configuration[ATTRIBUTE_UNDER_TEST];\r",
															"\t\t    } \r",
															"\t\t    else \r",
															"\t\t    {\r",
															"                currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];\r",
															"                keysOfDatatypeInstanceUnderTest[0].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"g-826-value-kind\"];\r",
															"                keysOfDatatypeInstanceUnderTest[1].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"granularity-period\"];\r",
															"\t\t    }\r",
															"\t\t    CouldCurrentConfigurationValuesBeRead(currentValue);\r",
															"\t    } catch (error) {\r",
															"            CouldCurrentConfigurationValuesBeRead();\r",
															"\t    }\r",
															"        try \r",
															"        {\r",
															"            let alarmRaisingThreshold = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"alarm-raising-threshold\"];\r",
															"            var dummyValue = Math.floor(Math.random() * alarmRaisingThreshold);\r",
															"            CouldDummyValueBeDefined(alarmRaisingThreshold, dummyValue);\r",
															"\t    } catch (error) {\r",
															"            CouldDummyValueBeDefined();\r",
															"\t    }   \r",
															"\t    var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;\r",
															"\t    \r",
															"        // Self Testing Functions\r",
															"\t    function CouldCurrentConfigurationValuesBeRead(currentValue) {\r",
															"\t        pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {\r",
															"                pm.expect(currentValue).to.be.a(\"number\");\r",
															"\t        });\r",
															"    \t}\r",
															"\r",
															"\t    function CouldDummyValueBeDefined(alarmRaisingThreshold, dummyValue) {\r",
															"            pm.test(\"CouldAlarmRaisingThresholdBeRetrieved\", function () {\r",
															"                pm.expect(alarmRaisingThreshold).to.be.a(\"number\");\r",
															"            });\r",
															"            pm.test(\"CouldDummyValueBeCalculated\", function () {\r",
															"                pm.expect(dummyValue).to.be.a(\"number\");\r",
															"            });\r",
															"\t    }\r",
															"    };\r",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);\r",
															"        \r",
															"    EvaluatingResult = () => {\r",
															"    try \r",
															"    {\r",
															"        if ( (Math.floor(dummyCode/100) === 2)\r",
															"            && (Math.floor(resultCode/100) === 2) \r",
															"            && (dummyValueString===resultValueString) ) \r",
															"        {\r",
															"            configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";\r",
															"        } \r",
															"        else \r",
															"        {\r",
															"            if ( (capability[\"performance-monitoring-is-avail\"] === false)\r",
															"                && (resultValueString === \"-1\") ) {\r",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";\r",
															"            } else {\r",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";\r",
															"            }\r",
															"        }\r",
															"        CouldResultBeEvaluated(true);\r",
															"\t} catch (error) \r",
															"\t{\r",
															"        CouldResultBeEvaluated(false);\r",
															"\t}\r",
															"    \r",
															"    // Functions\r",
															"    function CouldResultBeEvaluated(success) \r",
															"    {\r",
															"        pm.test(\"CouldResultBeEvaluated\", function () {\r",
															"            pm.expect(success).to.be.true;\r",
															"            });\r",
															"    }\r",
															"    };\r",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);\r",
															"        \r",
															"    defaultValueForStandardEvaluation = \"\";\r",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";\r",
															"        \r",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, \r",
															"                                    EvaluatingResultAsaString, \r",
															"                                    defaultValueForStandardEvaluation,\r",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported\r",
															"                                 ); \r",
															"}   //attributes.push(newAttribute);\r",
															"\r",
															"\r",
															"// clearing-threshold-cross-alarms-is-on\r",
															"{\r",
															"    CreatingDummyValue = () => {\r",
															"        console.log(\"\\n------------------------Checking Configuration of clearing-threshold-cross-alarms-is-on-----------------------\");\r",
															"            \r",
															"        var DATATYPE_UNDER_TEST = \"\";\r",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];\r",
															"        var ATTRIBUTE_UNDER_TEST = \"clearing-threshold-cross-alarms-is-on\";\r",
															"            \r",
															"        // Individual Values Definition \r",
															"        try {\r",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];\r",
															"            CouldDummyValueBeSet(dummyValue);\r",
															"        } catch (error) {\r",
															"            CouldDummyValueBeSet();\r",
															"        }\r",
															"            \r",
															"        // Self Testing Functions\r",
															"        function CouldDummyValueBeSet(dummyValue) {\r",
															"            pm.test(\"CouldDummyValueBeSet\", function () {\r",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");\r",
															"            });\r",
															"        }\r",
															"    };\r",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);\r",
															"            \r",
															"    EvaluatingResult = () => {\r",
															"\ttry {\r",
															"\r",
															"    if ( (Math.floor(dummyCode/100) === 2)\r",
															"            && (Math.floor(resultCode/100) === 2) \r",
															"            && (dummyValueString===resultValueString)) {\r",
															"        configurationValidationResults[attributeUnderTest] = \"ok\";\r",
															"    } else {\r",
															"        if ( (resultValueString === \"true\") ) {\r",
															"            configurationValidationResults[attributeUnderTest] = \"not supported\";\r",
															"        } else {\r",
															"            configurationValidationResults[attributeUnderTest] = \"not configurable\";\r",
															"        }\r",
															"    }\r",
															"\r",
															"    CouldResultBeEvaluated(true);\r",
															"\t} catch (error) {\r",
															"    CouldResultBeEvaluated(false);\r",
															"\t}\r",
															"\t\r",
															"\t// Self Testing Functions\r",
															"\t\tfunction CouldResultBeEvaluated(success) {\r",
															"\t\tpm.test(\"CouldResultBeEvaluated\", function () {\r",
															"        pm.expect(success).to.be.true;\r",
															"\t\t});\r",
															"\t\t}\r",
															"\t};\r",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);\r",
															"        \r",
															"    defaultValueForStandardEvaluation = false;\r",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";\r",
															"        \r",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, \r",
															"                                    EvaluatingResultAsaString, \r",
															"                                    defaultValueForStandardEvaluation,\r",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported\r",
															"                                 );\r",
															"}   //attributes.push(newAttribute);\r",
															"\r",
															"// performance-monitoring-is-on\r",
															"{\r",
															"    CreatingDummyValue = () => {\r",
															"        console.log(\"\\n------------------------Checking Configuration of performance-monitoring-is-on-----------------------\");\r",
															"            \r",
															"        var DATATYPE_UNDER_TEST = \"\";\r",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];\r",
															"        var ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";\r",
															"            \r",
															"        // Individual Values Definition \r",
															"        try {\r",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];\r",
															"            CouldDummyValueBeSet(dummyValue);\r",
															"        } catch (error) {\r",
															"            CouldDummyValueBeSet();\r",
															"        }\r",
															"            \r",
															"        // Self Testing Functions\r",
															"        function CouldDummyValueBeSet(dummyValue) {\r",
															"            pm.test(\"CouldDummyValueBeSet\", function () {\r",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");\r",
															"            });\r",
															"        }\r",
															"    };\r",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);\r",
															"            \r",
															"    EvaluatingResult = () => {\r",
															"\ttry {\r",
															"\r",
															"    if ( (Math.floor(dummyCode/100) === 2)\r",
															"            && (Math.floor(resultCode/100) === 2) \r",
															"            && (dummyValueString===resultValueString)) {\r",
															"        configurationValidationResults[attributeUnderTest] = \"ok\";\r",
															"    } else {\r",
															"        if ( (resultValueString === \"true\") ) {\r",
															"            configurationValidationResults[attributeUnderTest] = \"not supported\";\r",
															"        } else {\r",
															"            configurationValidationResults[attributeUnderTest] = \"not configurable\";\r",
															"        }\r",
															"    }\r",
															"\r",
															"    CouldResultBeEvaluated(true);\r",
															"\t} catch (error) {\r",
															"    CouldResultBeEvaluated(false);\r",
															"\t}\r",
															"\t\r",
															"\t// Self Testing Functions\r",
															"\t\tfunction CouldResultBeEvaluated(success) {\r",
															"\t\tpm.test(\"CouldResultBeEvaluated\", function () {\r",
															"        pm.expect(success).to.be.true;\r",
															"\t\t});\r",
															"\t\t}\r",
															"\t};\r",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);\r",
															"        \r",
															"    defaultValueForStandardEvaluation = false;\r",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";\r",
															"        \r",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, \r",
															"                                    EvaluatingResultAsaString, \r",
															"                                    defaultValueForStandardEvaluation,\r",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported\r",
															"                                 );\r",
															"}   //attributes.push(newAttribute);\r",
															"\r",
															"// tdm-structure-kind\r",
															"{\r",
															"    CreatingDummyValue = () => {\r",
															"        console.log(\"\\n-------------------------Checking Configuration of tdm-structure-kind--------------------------\");\r",
															"        \r",
															"        // Individual Values Definition\r",
															"        var DATATYPE_UNDER_TEST = \"\";\r",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];\r",
															"        var ATTRIBUTE_UNDER_TEST = \"tdm-structure-kind\";    \r",
															"        \r",
															"        // Checking the available values as per the capabilities \r",
															"        try \r",
															"        {\r",
															"            var supportedTDMStructureNames = [];\r",
															"            var currentValue = configuration[ATTRIBUTE_UNDER_TEST];\r",
															"                \r",
															"            for (let i=0; i<(capability[\"supported-tdm-structure-kind-list\"].length); i++)\r",
															"            {\r",
															"                supportedTDMStructureNames.push(capability[\"supported-tdm-structure-kind-list\"][i][\"tdm-structure-name\"]);\r",
															"            }\r",
															"        \r",
															"            if(supportedTDMStructureNames.length == 1)\r",
															"            {\r",
															"                var dummyValue = supportedTDMStructureNames[0];\r",
															"            }else\r",
															"            {\r",
															"                do \r",
															"                {\r",
															"        \t        var randomIndex = getRandomValueFromAvailableValues(0,supportedTDMStructureNames.length);\r",
															"        \t        var dummyValue = supportedTDMStructureNames[randomIndex];\r",
															"                } while(dummyValue===currentValue);\r",
															"            }\r",
															"            CouldDummyValueBeCreated(supportedTDMStructureNames,currentValue, dummyValue);\r",
															"        }\r",
															"        catch (error) {\r",
															"            CouldDummyValueBeCreated();\r",
															"        }\r",
															"        \r",
															"        //functions\r",
															"        function getRandomValueFromAvailableValues(min, max) {  \r",
															"           return Math.floor(Math.random() * (max - min) + min);  \r",
															"        } \r",
															"        \r",
															"        // Self Testing Function\r",
															"        function CouldDummyValueBeCreated(supportedTDMStructureNames,currentValue, dummyValue) {\r",
															"            pm.test(\"CouldsupportedTDMStructureNamesBeRetrieved\", function () {\r",
															"                pm.expect(supportedTDMStructureNames).to.be.a(\"array\");\r",
															"            });\r",
															"            pm.test(\"CouldcurrentValueBeRetrieved\", function () {\r",
															"                pm.expect(currentValue).to.be.a(\"string\");\r",
															"            });\r",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {\r",
															"                pm.expect(dummyValue).to.be.a(\"string\");\r",
															"            });\r",
															"        }\r",
															"    };\r",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);\r",
															"        \r",
															"    EvaluatingResult = () => {};\r",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);\r",
															"        \r",
															"    defaultValueForStandardEvaluation = \"Interface name not yet defined.\";\r",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";\r",
															"        \r",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, \r",
															"                                    EvaluatingResultAsaString, \r",
															"                                    defaultValueForStandardEvaluation,\r",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported\r",
															"                                 ); \r",
															"}   attributes.push(newAttribute);\r",
															"\r",
															"// number-of-tdm-segments-to-be-reserved\r",
															"{\r",
															"    CreatingDummyValue = () => {\r",
															"        console.log(\"\\n-------------------------Checking Configuration of number-of-tdm-segments-to-be-reserved--------------------------\");\r",
															"        \r",
															"        // Individual Values Definition\r",
															"        var DATATYPE_UNDER_TEST = \"\";\r",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];\r",
															"        var ATTRIBUTE_UNDER_TEST = \"number-of-tdm-segments-to-be-reserved\";    \r",
															"        var CurrentTDMStructureName = configuration[\"tdm-structure-kind\"];\r",
															"        var maxNumberOfSegmentsReservable = 0;\r",
															"        // Checking the available values as per the capabilities \r",
															"        try\r",
															"        {\r",
															"            var supportedTDMStructureNames = [];\r",
															"            for (let i=0; i<(capability[\"supported-tdm-structure-kind-list\"].length); i++) \r",
															"            {\r",
															"                var supportedTDMStructureName = capability[\"supported-tdm-structure-kind-list\"][i][\"tdm-structure-name\"];\r",
															"                if( supportedTDMStructureName == CurrentTDMStructureName)\r",
															"                {\r",
															"                    maxNumberOfSegmentsReservable = capability[\"supported-tdm-structure-kind-list\"][i][\"max-number-of-segments-reservable\"];\r",
															"                }\r",
															"            }\r",
															"            if(maxNumberOfSegmentsReservable == -1)\r",
															"            {\r",
															"                var dummyValue = configuration[\"number-of-tdm-segments-to-be-reserved\"];\r",
															"            }\r",
															"            else\r",
															"            {\r",
															"                var dummyValue = getRandomValueFromAvailableValues(0,maxNumberOfSegmentsReservable);\r",
															"            }\r",
															"            CouldDummyValueBeCreated(CurrentTDMStructureName,supportedTDMStructureName,maxNumberOfSegmentsReservable,dummyValue);\r",
															"        }\r",
															"        catch (error) {\r",
															"            CouldDummyValueBeCreated();\r",
															"        }\r",
															"        //functions\r",
															"        function getRandomValueFromAvailableValues(min, max) {  \r",
															"           return Math.floor(Math.random() * (max - min) + min);  \r",
															"        } \r",
															"        \r",
															"        // Self Testing Function\r",
															"        function CouldDummyValueBeCreated(CurrentTDMStructureName,supportedTDMStructureName,maxNumberOfSegmentsReservable, dummyValue) {\r",
															"            pm.test(\"CouldCurrentTDMStructureNameBeRetrieved\", function () {\r",
															"                pm.expect(CurrentTDMStructureName).to.be.a(\"string\");\r",
															"            });\r",
															"            pm.test(\"CouldsupportedTDMStructureNameBeRetrieved\", function () {\r",
															"                pm.expect(supportedTDMStructureName).to.be.a(\"string\");\r",
															"            });\r",
															"            pm.test(\"CouldmaxNumberOfSegmentsReservableBeRetrieved\", function () {\r",
															"                pm.expect(maxNumberOfSegmentsReservable).to.be.a(\"number\");\r",
															"            });\r",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {\r",
															"                pm.expect(dummyValue).to.be.a(\"number\");\r",
															"            });\r",
															"        }\r",
															"    };\r",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);\r",
															"        \r",
															"    EvaluatingResult = () => {};\r",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);\r",
															"        \r",
															"    defaultValueForStandardEvaluation = \"Interface name not yet defined.\";\r",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";\r",
															"        \r",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, \r",
															"                                    EvaluatingResultAsaString, \r",
															"                                    defaultValueForStandardEvaluation,\r",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported\r",
															"                                 ); \r",
															"}   attributes.push(newAttribute);\r",
															"\r",
															"\r",
															"console.log(\"attribute length :\"+attributes.length);\r",
															"\r",
															"/*//    another attribute's YANG name\r",
															"{\r",
															"    CreatingDummyValue = () => {\r",
															"        console.log(\"\\n-------------------Checking Configuration of performance-monitoring-is-on-----------------\");\r",
															"            \r",
															"        try {\r",
															"            \r",
															"            \r",
															"            CouldDummyValueBeSet(dummyValue);\r",
															"        } catch (error) {\r",
															"            CouldDummyValueBeSet();\r",
															"        }\r",
															"            \r",
															"        var DATATYPE_UNDER_TEST = \"\";\r",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];\r",
															"        var ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";\r",
															"            \r",
															"        // Self Testing Functions\r",
															"        function CouldDummyValueBeSet(dummyValue) {\r",
															"            pm.test(\"CouldDummyValueBeSet\", function () {\r",
															"                pm.expect(dummyValue).to.be.a(\"?\");\r",
															"            });\r",
															"        }    \r",
															"    };\r",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);\r",
															"        \r",
															"    EvaluatingResult = () => {\r",
															"        try {\r",
															"        \r",
															"        \r",
															"            CouldResultBeEvaluated(true);\r",
															"        } catch (error) {\r",
															"            CouldResultBeEvaluated(false);\r",
															"        }\r",
															"            \r",
															"        // Self Testing Function\r",
															"        function CouldResultBeEvaluated(success) {\r",
															"            pm.test(\"CouldResultBeEvaluated\", function () {\r",
															"                pm.expect(success).to.be.true;\r",
															"            });\r",
															"        }\r",
															"    };\r",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);\r",
															"    \r",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, EvaluatingResultAsaString);\r",
															"}   //attributes.push(newAttribute);\r",
															"*/\r",
															"\r",
															"pm.collectionVariables.set( \"attributes\", attributes);\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Setting up Local Variables and Preparing the Request\r",
															"****************************************************************************************/\r",
															"pm.variables.clear();\r",
															"try {\r",
															"    pm.variables.set(\"uri\", dummyUri);\r",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});\r",
															"} catch (error) { }\r",
															"CouldTheRequestBePrepared();\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Functions\r",
															"****************************************************************************************/\r",
															"function ConvertingThisFunctionToString(functionToBeConverted) {\r",
															"    let functionAsAString = String(functionToBeConverted);\r",
															"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");\r",
															"    return functionAsAString.slice(indexOfFirstCurly);\r",
															"}\r",
															"\r",
															"\r",
															"/****************************************************************************************\r",
															"* Self Testing Functions\r",
															"****************************************************************************************/\r",
															"function CouldTheInputBeLoaded(uri) {\r",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {\r",
															"        pm.expect(uri).to.be.a(\"string\");\r",
															"        pm.expect(uri).to.not.have.lengthOf(0);\r",
															"    });\r",
															"}\r",
															"\r",
															"function CouldTheRequestBePrepared() {\r",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {\r",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");\r",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);\r",
															"    });\r",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointhybridmwstructureConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "cf92fea6-e265-484a-acc0-3214aa146427",
														"exec": [
															"console.log(\"\\n--------------EntryPoint of HybridMWStructure Validation of Configuration-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the HybridMWStructureConfiguration TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"numberOfExistingInterfaces :\");",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].hybridMwStructureList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    console.log(\"numberOfExistingInterfaces :\" + numberOfExistingInterfaces);",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointhybridMWStructureConfiguration\");",
															"        console.log(\"Proceeding with terminating hybridMWStructure validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST = 0;",
															"",
															"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d36ad331-f757-46ba-9bd9-b023ce1f82c8",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bdf648f1-d091-4703-967b-d0f15d691a03",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "CollectionInformationLoading",
									"item": [
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d218c7c8-0cb1-4862-9189-fde395c8fb85",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c09948db-b06c-4f17-8d47-4ea85c3bd10b",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ff3a3f88-708a-4313-8ca5-3d0d749308c0",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "83063c50-adbd-448d-be83-1ec01a72a114",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceStatus",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1e0e26ac-2241-4658-aec4-1582f6082de3",
														"exec": [
															"console.log(\"\\n------------------------------Uploading Interface Status----------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Status",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "024c5285-964d-4976-9e98-b7e188470e0b",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "8e3c35ff-2b43-4913-9701-00218b5f9837",
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "AttributeConfiguration",
									"item": [
										{
											"name": "EntryPointAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2ab8002d-6d41-4344-8d29-c8690b9dcbe8",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the AttributeConfiguration Tests ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var attributes = pm.collectionVariables.get(\"attributes\");",
															"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
															"    ",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    ",
															"    CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"        ",
															"    if ( indexOfAttributeUnderTest < attributes.length ) {",
															"        postman.setNextRequest();",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointAttributeConfiguration\");",
															"    }",
															"        ",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri) {",
															"    pm.test(\"CouldTheAttributesBeLoaded\", function () {",
															"        pm.expect(attributes).to.be.an(\"array\");",
															"    });",
															"    pm.test(\"CouldIndexOfAttributeUnderTestBeLoaded\", function () {",
															"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"CouldTheDummyUriBeLoaded\", function () {",
															"        pm.expect(dummyUri).to.be.a(\"string\");",
															"        pm.expect(dummyUri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Writing",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8a420a02-11aa-4f5a-a389-b99e4e88196d",
														"exec": [
															"/****************************************************************************************",
															"* Retrieving DummyCode",
															"****************************************************************************************/",
															"try {",
															"    var dummyCode = JSON.parse(pm.response.code);",
															"    var dummyErrorMessage = \"\";",
															"    if (Math.floor(dummyCode / 100) !== 2) {",
															"        if (pm.response) {",
															"            var dummyErrorMessage = JSON.parse(pm.response.stream).errors.error[0][\"error-message\"];",
															"            pm.variables.set(\"responseForMantis\", pm.response.json());  //Mantis purpose storing request uri            ",
															"        } else {",
															"            var emptyResponse = {};",
															"            pm.variables.set(\"responseForMantis\", emptyResponse);",
															"        }",
															"        CouldTheResponseBeStoredForMntis();",
															"    }",
															"    CouldResponseBeRetrieved(dummyCode, dummyErrorMessage);",
															"} catch (error) {",
															"    CouldResponseBeRetrieved();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting Local Variables",
															"****************************************************************************************/",
															"pm.variables.set(\"dummyCode\", dummyCode);",
															"pm.variables.set(\"dummyErrorMessage\", dummyErrorMessage);",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldResponseBeRetrieved(responseCode, responseErrorMessage) {",
															"    pm.test(\"CouldTheDummyCodeOfPuttingBeReceived\", function () {",
															"        pm.expect(responseCode).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"CouldTheErrorMessagePuttingBeComposed\", function () {",
															"        pm.expect(responseErrorMessage).to.be.a(\"string\");",
															"    });",
															"}",
															"function CouldTheResponseBeStoredForMntis() {",
															"    pm.test(\"CouldTheResponseBeStoredForMntis\", function () {",
															"        pm.expect(pm.variables.get(\"responseForMantis\")).to.be.an(\"object\");;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "ee5db3d9-1a6a-43a8-b49d-83ad1606f24c",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Writing",
															"* ",
															"* This Request is for PUTting an boolean attribute with the alternate value and",
															"* providing this value as dummyValueString to the local Variables.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfWritingAsaString = pm.environment.get(\"PreRequestOfWritingAsaString\");",
															"    eval(PreRequestOfWritingAsaString);",
															"    CouldPreRequestOfWritingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfWritingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfWritingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfWritingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Reading",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7b03fd84-34cd-4922-b5ce-5edc7ed7eb94",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Reading",
															"* ",
															"* This Request is for GETting the value of the attributeUnderTest and providing it ",
															"* as ResultValue to the local Variables",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfReadingAsaString = pm.environment.get(\"PreRequestOfReadingAsaString\");",
															"    eval(PreRequestOfReadingAsaString);",
															"    CouldPreRequestOfReadingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfReadingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfReadingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfReadingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "77320de3-f0bb-485a-b6b1-2ebee603c938",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PostRequestOfReadingAsaString = pm.environment.get(\"PostRequestOfReadingAsaString\");",
															"    eval(PostRequestOfReadingAsaString);",
															"    CouldPostRequestOfReadingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPostRequestOfReadingBeExecuted();",
															"}",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPostRequestOfReadingBeExecuted(success) {",
															"    pm.test(\"CouldPostRequestOfReadingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Evaluating",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f5bb952d-9910-4ec1-8bab-476f2dd9be1c",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Evaluating",
															"* ",
															"* This Request compares resultValue with dummyValue.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfEvaluatingAsaString = pm.environment.get(\"PreRequestOfEvaluatingAsaString\");",
															"    eval(PreRequestOfEvaluatingAsaString);",
															"    CouldPreRequestOfEvaluatingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfEvaluatingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfEvaluatingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfEvaluatingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Restoring",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "cfb92977-d4e9-4417-8053-0c4553f7f4c0",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Restoring",
															"* ",
															"* This Request is for Restoring the initial value to the attributeUnderTest",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfRestoringAsaString = pm.environment.get(\"PreRequestOfRestoringAsaString\");",
															"    eval(PreRequestOfRestoringAsaString);",
															"    CouldPreRequestOfRestoringBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfRestoringBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfRestoringBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfRestoringBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "78f47412-b808-4bf0-8f27-2c7355f2dfe0",
														"exec": [
															"/****************************************************************************************",
															"* Setting Local Variables",
															"****************************************************************************************/   ",
															"pm.variables.clear();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ReversalPointAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6a012968-1f8e-4933-94f8-4cd007ec6be4",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"        ",
															"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
															"        ",
															"    CouldTheInputBeLoaded(dummyUri, indexOfAttributeUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextAttributeUnderTest = indexOfAttributeUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", indexOfPotentialNextAttributeUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointAttributeConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfAttributeUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b20fb493-0b6a-4b32-a736-f9eb8b666c87",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "01a802a0-cd1b-4475-98fe-7713f5842ec7",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is terminating the Test",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a2b44894-9769-4d9c-9e81-154adce050bc",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b549ce55-39cb-4d4a-a329-67cf950a380f",
														"exec": [
															"console.log(\"\\n-------------------Restoring the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"        ",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration",
															"                                                   );",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    completeClassName = moduleUnderTest + \":\" + technologyUnderTest + \"-configuration\";",
															"    configuration = AddHeadlineToDataObject(configuration, completeClassName);",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "67d7e780-4703-4982-9eee-59be48b0878d",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e42d201b-ec82-4092-9359-c230643a2440",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7c281119-ac85-4be0-bb57-2b1df07f96e4",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointhybridmwstructureConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e9dbb20c-a39d-4eb5-9383-56d911206c63",
														"exec": [
															"console.log(\"\\n-------------ReversalPoint of AirInterface Validation of Configuration---------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Console.log of Validation Results",
															" ****************************************************************************************/",
															"let allConfigurationValidationResults = { \"allConfigurationValidationResults\" : configurationValidationResults };",
															"console.log(allConfigurationValidationResults);",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointAirInterfaceConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ee07f639-6496-44dc-8839-52de593632cf",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointhybridmwstructureConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e0e5ee54-27eb-4a23-99eb-c0b5f10181b1",
														"exec": [
															"console.log(\"\\n----------------------Terminating AirInterfaceConfiguration--------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is for clearing the Collection variables and terminating the TestCase",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7bca49ff-19fd-4776-9f07-ee2ad86087f5",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fe13307b-c655-4755-af51-d86a60c582a2",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "498575b8-f23f-4259-bdcb-757c47f97ff0",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c230a7e6-7721-41e0-8ef3-5fbf7c06c4a3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "97fb216e-b22b-43c4-ae8a-a93d5cdef104",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PureEthernetStructure",
					"item": [
						{
							"name": "PureEthernetStructureCompleteness",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3a048c31-2021-497f-9782-7c48734e9a7f",
														"exec": [
															"console.log(\"\\n\\n============================ PureEthernetStructureCompleteness.3 =============================\");",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Completeness of PureEthernetStructure Objects against definition ",
															"* ",
															"*                   PureEthernetStructure_2.0.0-tsp.191123.1000",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/pureEthernetStructure/tree/tsp",
															"* ",
															"****************************************************************************************/",
															" ",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"all\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"pure-ethernet-structure-2-0:pure-ethernet-structure-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function() {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function() {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "53d8efcc-4a8f-4aed-acee-8b8674e02a68",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointPureEthernetStructureCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "8fca61e8-fd17-48f2-9ea2-1dcbd8134350",
														"exec": [
															"console.log(\"\\n--------------EntryPoint of PureEthernetStructure Validation for Completeness-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the PureEthernetStructureCompleteness TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].pureEthernetStructureList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointPureEthernetStructureCompleteness\");",
															"        console.log(\"Proceeding with terminating PureEthernetStructure validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a329d6f2-3231-47e6-94ee-c686ddcd0a1f",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e18b5ff4-f6df-4460-96f5-1dee10fc0129",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "93e06d1d-eddd-40a5-8c97-8e637cc38ad0",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "db4fc718-1eda-4a74-96c7-74870d254ba3",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a9189935-fa3b-4b7e-8686-272c5ed76f04",
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "44eefb3e-ae19-49f9-95ab-efce94bf6286",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a39dd93f-741e-44dc-bac2-fdbc2755447e",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "NetworkPreparation",
									"item": [
										{
											"name": "SwitchingOnMonitoring",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0a31f595-feee-4cd4-8633-c1716cbc98e5",
														"exec": [
															"console.log(\"\\n---------------------------------Switching Monitoring On----------------------------------\");",
															"/****************************************************************************************",
															" * ",
															" * Switching Monitoring On",
															" * ",
															" * This Request is for activating collection of performance data on the device under",
															" * test, so the data can be retrieved during validating completeness of the implementation",
															" *  ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration);",
															"} catch (error) {",
															"    CouldInputForSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Forming the Body",
															" ****************************************************************************************/",
															"try {",
															"    let requestBodyString = ('{ \"' + moduleUnderTest + ':performance-monitoring-is-on\": true }');",
															"    var requestBody = JSON.parse(requestBodyString);",
															"    CouldRequestBodyBeFormed(requestBody);",
															"} catch (error) {",
															"    CouldRequestBodyBeFormed();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Calling for Preparation of the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(requestBody);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration) {",
															"    pm.test(\"CouldInputForSwitchingMonitoringOnBeLoaded\", function() {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(configuration).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyBeFormed(requestBody) {",
															"    pm.test(\"CouldRequestBodyBeFormed\", function() {",
															"        pm.expect(requestBody).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, ",
															"                                                keysOfDatatypeInstanceUnderTest,",
															"                                                attributeUnterTest, ",
															"                                                contentType,",
															"                                                filteredDepth, ",
															"                                                filteredFields, ",
															"                                                requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"            \"current-problems\", \"current-performance\",",
															"            \"historical-performances\"",
															"        ]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function() {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0153d722-3136-4ea0-b913-6d9368e8cd23",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched on.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched on.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ad903c03-5eaf-4711-8389-554017c1a0ee",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bfbca12c-647d-4a60-b4e1-f4acd4881beb",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ValidationRequests",
									"item": [
										{
											"name": "PacCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1df82590-df37-4a8f-a23c-a16ecac8f498",
														"exec": [
															"console.log(\"\\n---------------------Checking PureEthernetStructure_Pac for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* PacCompleteness",
															"* ",
															"* This Request is for validating PureEthernetStructure Pac Objects against definition ",
															"* PureEthernetStructure_Pac_2.0.0-tsp.191123.1000",
															"* as it can be found on https://github.com/openBackhaul/pureEthernetStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the *_Pac class",
															"*  - availability of all attributes in this particular class",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"pac\";             // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 3;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let PURE_ETHERNET_STRUCTURE_PAC_SCHEMA = {\t",
															"    \"type\": \"object\",",
															"\t\"properties\": {",
															"        \"pure-ethernet-structure-capability\": {",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": {",
															"\t\t\t\t\"supported-alarm-list\": \t\t\t\t\t{ \"type\": \"array\"   },",
															"\t\t\t\t\"performance-monitoring-is-avail\":\t\t\t{ \"type\": \"boolean\" }",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"pure-ethernet-structure-configuration\":{",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": {",
															"\t\t\t\t\"problem-kind-severity-list\": \t\t\t\t{ \"type\": \"array\"   }, ",
															"\t\t\t\t\"g-826-threshold-cross-alarm-list\": \t\t{ \"type\": \"array\"   },",
															"\t\t\t\t\"clearing-threshold-cross-alarms-is-on\":\t{ \"type\": \"boolean\" },  ",
															"\t\t\t\"performance-monitoring-is-on\": \t\t\t{ \"type\": \"boolean\" }",
															"\t\t\t}\t\t\t",
															"\t\t},",
															"\t\t\"pure-ethernet-structure-status\": {",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": {",
															"\t\t\t\t\"segment-status-list\": \t\t\t\t\t\t{ \"type\": \"array\"   },",
															"\t\t\t\t\"performance-monitoring-is-up\": \t\t\t{ \"type\": \"boolean\" }",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"pure-ethernet-structure-current-problems\": {",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": {",
															"\t\t\t\t\"current-problem-list\": \t\t\t\t\t{ \"type\": \"array\"  }",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"pure-ethernet-structure-current-performance\": {",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": {",
															"\t\t\t\t\"current-performance-data-list\":\t\t\t{ \"type\": \"array\"  }",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"pure-ethernet-structure-historical-performances\": {",
															"\t\t\t\"type\": \"object\",",
															"            \"properties\": {",
															"\t\t\t\t\"historical-performance-data-list\": \t\t{ \"type\": \"array\"  }",
															"\t\t\t}",
															"\t\t}",
															"\t},",
															"\t\"required\": [\"pure-ethernet-structure-capability\",",
															"\t\t\t\t\"pure-ethernet-structure-configuration\",",
															"\t\t\t\t\"pure-ethernet-structure-status\",",
															"\t\t\t\t\"pure-ethernet-structure-current-problems\",",
															"\t\t\t\t\"pure-ethernet-structure-current-performance\",",
															"\t\t\t\t\"pure-ethernet-structure-historical-performances\"",
															"    ]",
															"};",
															"",
															"pm.variables.set(\"schema\", PURE_ETHERNET_STRUCTURE_PAC_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4bdb12b1-16a7-472b-a291-0e46120f2a35",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CapabilityCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "25631406-9c29-41de-9353-0e876e6bc96c",
														"exec": [
															"console.log(\"\\n--------------------Checking PureEthernetStructure Capability for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* CapabilityCompleteness",
															"* ",
															"* This Request is for validating PureEthernetStructure Capability Objects against definition ",
															"* PureEthernetStructure_2.0.0-tsp.191123.1000",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/pureEthernetStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Capability class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let PURE_ETHERNET_STRUCTURE_CAPABILITY_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"supported-alarm-list\": {",
															"            \"type\": \"array\",",
															"            \"item\":                          { \"type\": \"string\" }",
															"\t\t},\t\t",
															"\t\t\"performance-monitoring-is-avail\":\t { \"type\": \"boolean\" }",
															"\t},",
															"\t\"required\": [ \"supported-alarm-list\", ",
															"\t\t\t\t\"performance-monitoring-is-avail\"\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t]",
															"};",
															"",
															"pm.variables.set(\"schema\", PURE_ETHERNET_STRUCTURE_CAPABILITY_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5808503a-f54e-42ca-906b-a32eefaf865a",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ConfigurationCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1ab5344d-eb75-4dbd-a001-25ace4a191bb",
														"exec": [
															"console.log(\"\\n----------------Checking PureEthernetStructure Configuration for Completeness------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ConfigurationCompleteness",
															"* ",
															"* This Request is for validating PureEthernetStructure Configuration Objects against definition ",
															"* PureEthernetStructure_2.0.0-tsp.191123.1000",
															"* as it can be found on https://github.com/openBackhaul/pureEthernetStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Configuration class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let PURE_ETHERNET_STRUCTURE_CONFIGURATION_SCHEMA = {\t",
															"\t\"$schema\": \"\",",
															"    \"$id\": \"\",",
															"    \"title\": \"\",",
															"    \"description\": \"\",",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"\t\t\"pure-ethernet-structure-2-0:pure-ethernet-structure-configuration\": {",
															"\t\t\"type\": \"object\", ",
															"\t\t\"properties\": {",
															" \t\t\t\"problem-kind-severity-list\": { ",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t\t\"problem-kind-name\": \t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\"problem-kind-severity\": \t\t\t{ \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_WARNING\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_MINOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_MAJOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_CRITICAL\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t}",
															"\t\t\t}",
															"\t\t\t}, ",
															" \t\t\t\"g-826-threshold-cross-alarm-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t\t\"g-826-value-kind\": \t\t\t\t{ \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:G826_TYPE_ES\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:G826_TYPE_SES\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:G826_TYPE_CSES\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:G826_TYPE_UAS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:G826_TYPE_NOT_SPECIFIED\"",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t},",
															"\t\t\t\t\"alarm-raising-threshold\": \t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\"alarm-clearing-threshold\": \t\t{ \"type\": \"number\" },",
															"\t\t\t\t\"granularity-period\": \t\t\t\t{ \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t}\t\t\t\t",
															"\t\t\t}",
															"\t\t\t}, \t\t\t",
															"\t\t\t\"clearing-threshold-cross-alarms-is-on\":{ \"type\": \"boolean\" },  ",
															"\t\t\t\"performance-monitoring-is-on\": \t\t{ \"type\": \"boolean\" }, \t ",
															" \t\t\t\"required\": \t\t\t\t\t\t\t[ \"problem-kind-severity-list\", ",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t  \"g-826-threshold-cross-alarm-list\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t  \"clearing-threshold-cross-alarms-is-on\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t  \"performance-monitoring-is-on\"\t",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t]\t\t",
															" \t\t}",
															"\t\t},",
															"    \"required\": [\"pure-ethernet-structure-2-0:pure-ethernet-structure-configuration\"]",
															"\t}",
															"};",
															"",
															"pm.variables.set(\"schema\", PURE_ETHERNET_STRUCTURE_CONFIGURATION_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "01808628-67ab-4281-8e2e-090bca23d7be",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "StatusCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3dcaa58d-7e34-4851-9810-d1021e031f92",
														"exec": [
															"console.log(\"\\n-------------------Checking PureEthernetStructure Status for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* StatusCompleteness",
															"* ",
															"* This Request is for validating PureEthernetStructure Status Objects against definition ",
															"* PureEthernetStructure_2.0.0-tsp.191123.1000",
															"* as it can be found on https://github.com/openBackhaul/pureEthernetStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Status class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let PURE_ETHERNET_STRUCTURE_STATUS_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"segment-status-list\": { ",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": { ",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"segment-status-type-id\": \t{ \"type\": \"number\" },",
															"\t\t\t\t\t\"operational-status\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:OPERATIONAL_STATE_TYPE_ENABLED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:OPERATIONAL_STATE_TYPE_DISABLED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:OPERATIONAL_STATE_TYPE_NOT_YET_DEFINED\"\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t}",
															"\t\t\t\t},",
															"\t\t\t\t\"required\": [ \"segment-status-type-id\", ",
															"\t\t\t\t\t\t\t\"operational-status\"\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\t\t]\t",
															"\t\t\t}",
															"\t\t},\t\t",
															"\t\t\"performance-monitoring-is-up\": { \"type\": \"boolean\" }\t\t\t\t",
															"\t},",
															"\t\"required\": [ \"segment-status-list\", ",
															"\t\t\t\t\"performance-monitoring-is-up\"\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t]\t",
															"};",
															"pm.variables.set(\"schema\", PURE_ETHERNET_STRUCTURE_STATUS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "fe4a22e3-0535-4d29-8cfc-f3205d688c33",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentProblemsCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "bebf7a79-aa6e-400f-9619-acbe073f50ed",
														"exec": [
															"console.log(\"\\n---------------Checking PureEthernetStructureCurrentProblems for Completeness-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentProblemsCompleteness",
															"* ",
															"* This Request is for validating PureEthernetStructure CurrentProblems Objects against definition ",
															"* PureEthernetStructure_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/pureEthernetStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentProblems class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-problems\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let PURE_ETHERNET_STRUCTURE_CURRENT_PROBLEMS_SCHEMA = {\t",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"\t\t\"current-problem-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"problem-name\": \t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"sequence-number\": \t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\"timestamp\": \t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"problem-severity\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_WARNING\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_MINOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_MAJOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_CRITICAL\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t}\t \t",
															"\t\t\t\t},",
															"\t\t\t\t\"required\": [ \"problem-name\", ",
															"\t\t\t\t\t\t\t\"sequence-number\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\t\t\"timestamp\",",
															"\t\t\t\t\t\t\t\"problem-severity\"\t",
															"\t\t\t\t\t\t\t]\t\t\t",
															"\t\t\t}",
															"\t\t}\t",
															"\t},",
															"\t\"required\":\t[ \"current-problem-list\"] ",
															"};",
															"",
															"pm.variables.set(\"schema\", PURE_ETHERNET_STRUCTURE_CURRENT_PROBLEMS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b1711b24-f7e7-4df5-af46-58fd7d65a035",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentPerformanceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9b5370c0-7813-4361-849a-ec6c9025e0d8",
														"exec": [
															"console.log(\"\\n-------------Checking PureEthernetStructure CurrentPerformance for Completeness----------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentPerformanceCompleteness",
															"* ",
															"* This Request is for validating PureEthernetStructure CurrentPerformance Objects against definition ",
															"* PureEthernetStructure_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/PureEthernetStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentPerformance class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-performance\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let PURE_ETHERNET_STRUCTURE_CURRENT_PERFORMANCE_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"current-performance-data-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\"time-period\": \t\t\t\t\t{ \"type\": \"number\" }, \t\t\t\t",
															"\t\t\t\t\t\t\t\"es\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"ses\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, \t\t",
															"\t\t\t\t\t\t\t\"cses\": \t\t\t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"unavailability\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rx-level-min\": \t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"rx-level-max\": \t\t\t\t{ \"type\": \"number\" },\t\t",
															"\t\t\t\t\t\t\t\"rx-level-avg\": \t\t\t\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\"required\":[ \"time-period\",",
															"\t\t\t\t\t\t\t\t\t\"es\", ",
															"\t\t\t\t\t\t\t\t\t\"ses\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\t\t\t\t\"cses\",",
															"\t\t\t\t\t\t\t\t\t\"unavailability\",\t",
															"\t\t\t\t\t\t\t\t\t\"rx-level-min\",",
															"\t\t\t\t\t\t\t\t\t\"rx-level-max\",",
															"\t\t\t\t\t\t\t\t\t\"rx-level-avg\"",
															"\t\t\t\t\t\t\t\t\t]\t",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"timestamp\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"suspect-interval-flag\": \t\t\t{ \"type\": \"boolean\" },\t\t\t",
															"\t\t\t\t\t\"elapsed-time\": \t\t\t\t\t{ \"type\": \"integer\" },\t\t",
															"\t\t\t\t\t\"scanner-id\": \t\t\t\t\t\t{ \"type\": \"string\" },\t ",
															"\t\t\t\t\t\"granularity-period\":{ \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t},",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"performance-data\",",
															"\t\t\t\t\t\t\t\"timestamp\",",
															"\t\t\t\t\t\t\t\"suspect-interval-flag\",",
															"\t\t\t\t\t\t\t\"elapsed-time\",",
															"\t\t\t\t\t\t\t\"scanner-id\",",
															"\t\t\t\t\t\t\t\"granularity-period\",",
															"\t\t\t\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-current-performance-sets\": { \"type\": \"number\" },",
															"\t},",
															"\t\"required\":\t[ \"current-performance-data-list\",",
															"\t\t\t\t  \"number-of-current-performance-sets\"",
															"\t \t\t\t]",
															"};",
															"",
															"try {",
															"    if (capability[\"performance-monitoring-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", PURE_ETHERNET_STRUCTURE_CURRENT_PERFORMANCE_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"current-performance-data-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        PURE_ETHERNET_STRUCTURE_CURRENT_PERFORMANCE_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldPureEthernetStructureCurrentPerformanceBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldPureEthernetStructureCurrentPerformanceBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", PURE_ETHERNET_STRUCTURE_CURRENT_PERFORMANCE_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldPureEthernetStructureCurrentPerformanceBeShortened(success) {",
															"    pm.test(\"CouldPureEthernetStructureCurrentPerformanceBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9afff9bb-c53a-4db7-a0ff-ace94817f4c1",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "HistoricalPerformancesCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3a5657d9-2ccf-4214-86e9-c2579f15daf6",
														"exec": [
															"console.log(\"\\n------------Checking PureEthernetStructure HistoricalPerformances for Completeness-------------\");",
															"/*******************************************************************************",
															"* ",
															"* HistoricalPerformancesCompleteness",
															"* ",
															"* This Request is for validating PureEthernetStructure HistoricalPerformances Objects against definition ",
															"* PureEthernetStructure_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/pureEthernetStructure/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the HistoricalPerformances class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"*******************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"historical-performances\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let PURE_ETHERNET_STRUCTURE_HISTORICAL_PERFORMANCES_SCHEMA = {",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"historical-performance-data-list\": {",
															"\t\t\t\"type\": \"array\",",
															"            \"items\": {",
															"            \t\"type\": \"object\",",
															"            \t\"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\"time-period\": \t\t\t\t\t{ \"type\": \"number\" }, \t\t\t\t",
															"\t\t\t\t\t\t\t\"es\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"ses\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, \t\t",
															"\t\t\t\t\t\t\t\"cses\": \t\t\t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"unavailability\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rx-level-min\": \t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"rx-level-max\": \t\t\t\t{ \"type\": \"number\" },\t\t",
															"\t\t\t\t\t\t\t\"rx-level-avg\": \t\t\t\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t},\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\"required\": [ \"time-period\",",
															"\t\t\t\t\t\t\t\t\t\"es\", ",
															"\t\t\t\t\t\t\t\t\t\"ses\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\t\t\t\t\"cses\",",
															"\t\t\t\t\t\t\t\t\t\"unavailability\",\t",
															"\t\t\t\t\t\t\t\t\t\"rx-level-min\",",
															"\t\t\t\t\t\t\t\t\t\"rx-level-max\",",
															"\t\t\t\t\t\t\t\t\t\"rx-level-avg\"",
															"\t\t\t\t\t\t\t\t\t]\t\t\t\t\t",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"suspect-interval-flag\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\t\"history-data-id\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"period-end-time\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"granularity-period\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"pure-ethernet-structure-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t]\t\t\t\t",
															"\t\t\t\t\t},",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"performance-data\",",
															"\t\t\t\t\t\t\t\"suspect-interval-flag\",",
															"\t\t\t\t\t\t\t\"history-data-id\",",
															"\t\t\t\t\t\t\t\"period-end-time\",",
															"\t\t\t\t\t\t\t\"granularity-period\",",
															"\t\t\t\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"        \"number-of-historical-performance-sets\": { \"type\": \"number\" },",
															"\t\t\"time-of-latest-change\": { \"type\": \"string\" },",
															"\t},",
															"\t\"required\":\t[ \"historical-performance-data-list\",",
															"                  \"number-of-historical-performance-sets\",",
															"\t\t          \"time-of-latest-change\"",
															"                ]",
															"};",
															"",
															"try {",
															"    if (capability[\"performance-monitoring-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", PURE_ETHERNET_STRUCTURE_HISTORICAL_PERFORMANCES_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"historical-performance-data-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        PURE_ETHERNET_STRUCTURE_HISTORICAL_PERFORMANCES_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldPureEthernetStructureHistoricalPerformancesBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldPureEthernetStructureHistoricalPerformancesBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", PURE_ETHERNET_STRUCTURE_HISTORICAL_PERFORMANCES_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldPureEthernetStructureHistoricalPerformancesBeShortened(success) {",
															"    pm.test(\"CouldPureEthernetStructureHistoricalPerformancesBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "288728bc-db6c-43fc-8445-cae41e97a7e6",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e257defc-1c31-4e9f-92a1-10317e42574f",
														"exec": [
															"console.log(\"\\n-------------------Restoring the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"        ",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration",
															"                                                   );",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    completeClassName = moduleUnderTest + \":\" + technologyUnderTest + \"-configuration\";",
															"    configuration = AddHeadlineToDataObject(configuration, completeClassName);",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "582c4e2c-4f50-40b8-ab14-8d557355e8fc",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "f8ec7e5c-5c72-4bf4-be13-02ae2866c9b2",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "66fb04ae-c58e-4d66-8167-160b1f10af82",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointPureEthernetStructureCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4072aa41-1c3c-48d9-8547-0cacf01fc1df",
														"exec": [
															"console.log(\"\\n-------------ReversalPoint of PureEthernetStructure Validation for Completeness---------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointPureEthernetStructureCompleteness\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "629ef403-a151-4d6f-8da5-c221de8f15ff",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointPureEthernetStructureCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "75f7f265-18cb-4f80-9243-c0552c4789fe",
														"exec": [
															"console.log(\"\\n-----------------------Terminating PureEthernetStructureCompleteness--------------------------\");",
															"/****************************************************************************************",
															" * ",
															" * ExitPoint",
															" * ",
															" * This Request is for clearing the Collection variables and terminating the TestCase",
															" * ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Preparing the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({",
															"        key: \"Accept\",",
															"        value: \"application/json\"",
															"    });",
															"} catch (error) {}",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, controller, indexOfDeviceUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function() {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function() {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "10195f08-b723-42ff-aa80-bef018808aad",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "490608ab-3f1c-4a66-9d8d-840f72bdcfd6",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a3249825-d809-40d3-9421-26c721d880da",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "1a422a5d-f1ec-4e4c-992c-3e9a18c9c362",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "da111a4b-f9e2-42a3-a929-41dc884bc5fa",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "PureEthernetStructureConfiguration",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "bd773558-c578-468b-be03-bd9e822b8a54",
														"exec": [
															"console.log(\"\\n\\n============================ PureEthernetStructureConfiguration.1 =============================\");",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Configuration of PureEthernetStructure Objects against definition ",
															"* ",
															"*                   PureEthernetStructure_2.0.0-tsp.191123.1000",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/pureEthernetStructure/tree/tsp",
															"* ",
															"****************************************************************************************/",
															" ",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"* ",
															"* It is recommended to apply this TestCase on devices on the local (not remote) site",
															"* of the microwave connection, otherwise the management connection might break and ",
															"* configurations, which are done during the validation, cannot be reversed.",
															"* ",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"one\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"pure-ethernet-structure-2-0:pure-ethernet-structure-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"RESPONSE_CODE_FOR_OPERATION_FAILED = 501;       // 500: Expected translation of aggreed <error-tag> operation failed",
															"CONFIGURATION_VALIDATION_RESULTS = {};",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"pm.collectionVariables.set(\"responseCodeForOperationFailed\", RESPONSE_CODE_FOR_OPERATION_FAILED);",
															"pm.collectionVariables.set(\"configurationValidationResults\", CONFIGURATION_VALIDATION_RESULTS);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function() {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function() {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "dcb43ebc-6993-4cfb-9a60-553e59ff0579",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DefiningDummyValuesAndEvaluations()",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d0b4014e-0388-4ada-8d23-695d4cbaacb8",
														"exec": [
															"console.log(\"\\n----------Defining DummyValues and Evaluation Criteria in Configuration Validation--------\");",
															"/****************************************************************************************",
															"* ",
															"* Definition of DefiningDummyValuesAndEvaluations()",
															"*  ",
															"* Functions for Defining DummyValues and Evaluation Criteria in all Configuration Validations.",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"        ",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"class Attribute {",
															"    constructor (CreatingDummyValueAsaString, ",
															"                    EvaluatingResultAsaString, ",
															"                    defaultValueForStandardEvaluation,",
															"                    capabilityAttributeToBeFalseIfFeatureNotSupported) {",
															"        this.CreatingDummyValueAsaString = CreatingDummyValueAsaString;",
															"        this.EvaluatingResultAsaString = EvaluatingResultAsaString;",
															"        this.defaultValueForStandardEvaluation = defaultValueForStandardEvaluation;",
															"        this.capabilityAttributeToBeFalseIfFeatureNotSupported = capabilityAttributeToBeFalseIfFeatureNotSupported;",
															"    }",
															"}",
															"var attributes = [];",
															"",
															"var CreatingDummyValueAsaString;",
															"var EvaluatingResultAsaString;",
															"var defaultValueForStandardEvaluation;",
															"var capabilityAttributeToBeFalseIfFeatureNotSupported;",
															"var newAttribute;",
															"",
															"/*// problem-kind-severity-list/problem-kind-name",
															"{",
															"}attributes.push(newAttribute);*/",
															"",
															"// problem-kind-severity-list/problem-kind-severity",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------Checking Configuration of problem-kind-severity-list/problem-kind-severity--------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"problem-kind-severity-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"problem-kind-name\";",
															"        var ATTRIBUTE_UNDER_TEST = \"problem-kind-severity\";",
															"            ",
															"        try {",
															"            var currentValue;",
															"            currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"            keysOfDatatypeInstanceUnderTest[0].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"            CouldCurrentConfigurationValuesBeRead(currentValue);",
															"        } catch (error) {",
															"            CouldCurrentConfigurationValuesBeRead();",
															"        }",
															"            ",
															"        try {",
															"            if ( currentValue !== \"pure-ethernet-structure-2-0:SEVERITY_TYPE_MINOR\" ) {",
															"                var dummyValue = \"pure-ethernet-structure-2-0:SEVERITY_TYPE_MINOR\";",
															"            } else {",
															"                var dummyValue = \"pure-ethernet-structure-2-0:SEVERITY_TYPE_MAJOR\";",
															"            }",
															"            CouldDummyValueBeDefined(true);",
															"        } catch (error) {",
															"            CouldDummyValueBeDefined(false);",
															"        }",
															"            ",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"            ",
															"        // Self Testing Function",
															"        function CouldCurrentConfigurationValuesBeRead(currentValue) {",
															"            pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
															"                pm.expect(currentValue).to.be.a(\"string\");",
															"                pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"            ",
															"        function CouldDummyValueBeDefined(success) {",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"pure-ethernet-structure-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"/*",
															"// g-826-threshold-cross-alarm-list/g-826-value-kind",
															"{",
															"}   attributes.push(newAttribute);",
															"",
															"// g-826-threshold-cross-alarm-list/alarm-raising-threshold",
															"{",
															"}   attributes.push(newAttribute);",
															"",
															"// g-826-threshold-cross-alarm-list/alarm-clearing-threshold",
															"{",
															"}   attributes.push(newAttribute);",
															"",
															"// g-826-threshold-cross-alarm-list/granularity-period",
															"{",
															"}   attributes.push(newAttribute);",
															"",
															"//clearing-threshold-cross-alarms-is-on",
															"{",
															"}   attributes.push(newAttribute);",
															"*/",
															"",
															"// performance-monitoring-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------Checking Configuration of performance-monitoring-is-on-----------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"            ",
															"        try {",
															"            var dummyValue = !configuration[\"performance-monitoring-is-on\"];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"performance-monitoring-is-avail\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"/*//    another attribute's YANG name",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------Checking Configuration of performance-monitoring-is-on-----------------\");",
															"            ",
															"        try {",
															"            ",
															"            ",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"?\");",
															"            });",
															"        }    ",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try {",
															"        ",
															"        ",
															"            CouldResultBeEvaluated(true);",
															"        } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"        }",
															"            ",
															"        // Self Testing Function",
															"        function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, EvaluatingResultAsaString);",
															"}   //attributes.push(newAttribute);",
															"*/",
															"",
															"pm.collectionVariables.set( \"attributes\", attributes);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function ConvertingThisFunctionToString(functionToBeConverted) {",
															"    let functionAsAString = String(functionToBeConverted);",
															"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
															"    return functionAsAString.slice(indexOfFirstCurly);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointPureEthernetStructureConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "64c89b8c-7e80-4b90-95bb-cd0fcbd272d0",
														"exec": [
															"console.log(\"\\n--------------EntryPoint of PureEthernetStructure Validation of Configuration-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the PureEthernetStructureConfiguration TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].pureEthernetStructureList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointPureEthernetStructureConfiguration\");",
															"        console.log(\"Proceeding with terminating PureEthernetStructure validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST = 0;",
															"",
															"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6f389f58-ac81-4334-b38b-55a3c1ce5ee0",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a78fb4c9-9931-4acf-867b-ed54f7bb9d6d",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "CollectionInformationLoading",
									"item": [
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "60bf38dc-15a7-43c6-9fa4-9f12ef96113f",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7f35d424-0644-4aba-ba21-401d40a86a71",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "607d4f78-0c2d-4999-896c-402441094cfc",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c2e3f64d-eca6-4a9d-b291-4abae60b6983",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "PRSe08",
															"type": "string"
														},
														{
															"key": "username",
															"value": "senthilvel.s",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceStatus",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f91707ff-529c-4538-b145-7f8cb71484ae",
														"exec": [
															"console.log(\"\\n------------------------------Uploading Interface Status----------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Status",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3a72eea5-eb6c-438c-98b9-c83554284b0b",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "322da826-fe00-4cd9-be0c-c5b2758b7327",
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "AttributeConfiguration",
									"item": [
										{
											"name": "EntryPointAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c2f9a872-2fc4-446c-bd81-46e1f953b3b4",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the AttributeConfiguration Tests ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var attributes = pm.collectionVariables.get(\"attributes\");",
															"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
															"    ",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    ",
															"    CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"        ",
															"    if ( indexOfAttributeUnderTest < attributes.length ) {",
															"        postman.setNextRequest();",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointAttributeConfiguration\");",
															"    }",
															"        ",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri) {",
															"    pm.test(\"CouldTheAttributesBeLoaded\", function () {",
															"        pm.expect(attributes).to.be.an(\"array\");",
															"    });",
															"    pm.test(\"CouldIndexOfAttributeUnderTestBeLoaded\", function () {",
															"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"CouldTheDummyUriBeLoaded\", function () {",
															"        pm.expect(dummyUri).to.be.a(\"string\");",
															"        pm.expect(dummyUri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Writing",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e407c260-e5a5-49ea-8e3d-41ad270b5361",
														"exec": [
															"/****************************************************************************************",
															"* Retrieving DummyCode",
															"****************************************************************************************/",
															"try {",
															"    var dummyCode = JSON.parse(pm.response.code);",
															"    var dummyErrorMessage = \"\";",
															"    if (Math.floor(dummyCode / 100) !== 2) {",
															"        if (pm.response) {",
															"            var dummyErrorMessage = JSON.parse(pm.response.stream).errors.error[0][\"error-message\"];",
															"            pm.variables.set(\"responseForMantis\", pm.response.json());  //Mantis purpose storing request uri            ",
															"        } else {",
															"            var emptyResponse = {};",
															"            pm.variables.set(\"responseForMantis\", emptyResponse);",
															"        }",
															"        CouldTheResponseBeStoredForMntis();",
															"    }",
															"    CouldResponseBeRetrieved(dummyCode, dummyErrorMessage);",
															"} catch (error) {",
															"    CouldResponseBeRetrieved();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting Local Variables",
															"****************************************************************************************/",
															"pm.variables.set(\"dummyCode\", dummyCode);",
															"pm.variables.set(\"dummyErrorMessage\", dummyErrorMessage);",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldResponseBeRetrieved(responseCode, responseErrorMessage) {",
															"    pm.test(\"CouldTheDummyCodeOfPuttingBeReceived\", function () {",
															"        pm.expect(responseCode).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"CouldTheErrorMessagePuttingBeComposed\", function () {",
															"        pm.expect(responseErrorMessage).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldTheResponseBeStoredForMntis() {",
															"    pm.test(\"CouldTheResponseBeStoredForMntis\", function () {",
															"        pm.expect(pm.variables.get(\"responseForMantis\")).to.be.an(\"object\");;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "949b6b2c-e066-452a-8425-982c5773afd0",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Writing",
															"* ",
															"* This Request is for PUTting an boolean attribute with the alternate value and",
															"* providing this value as dummyValueString to the local Variables.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfWritingAsaString = pm.environment.get(\"PreRequestOfWritingAsaString\");",
															"    eval(PreRequestOfWritingAsaString);",
															"    CouldPreRequestOfWritingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfWritingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfWritingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfWritingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Reading",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "8fbe78af-f63e-44fc-8dcd-25c1677260b6",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Reading",
															"* ",
															"* This Request is for GETting the value of the attributeUnderTest and providing it ",
															"* as ResultValue to the local Variables",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfReadingAsaString = pm.environment.get(\"PreRequestOfReadingAsaString\");",
															"    eval(PreRequestOfReadingAsaString);",
															"    CouldPreRequestOfReadingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfReadingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfReadingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfReadingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "25469edc-b9de-470d-90e4-6ffb3b13a60e",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PostRequestOfReadingAsaString = pm.environment.get(\"PostRequestOfReadingAsaString\");",
															"    eval(PostRequestOfReadingAsaString);",
															"    CouldPostRequestOfReadingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPostRequestOfReadingBeExecuted();",
															"}",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPostRequestOfReadingBeExecuted(success) {",
															"    pm.test(\"CouldPostRequestOfReadingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Evaluating",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7c2a3913-834a-4b42-9ad7-0176ed63ac34",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Evaluating",
															"* ",
															"* This Request compares resultValue with dummyValue.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfEvaluatingAsaString = pm.environment.get(\"PreRequestOfEvaluatingAsaString\");",
															"    eval(PreRequestOfEvaluatingAsaString);",
															"    CouldPreRequestOfEvaluatingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfEvaluatingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfEvaluatingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfEvaluatingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Restoring",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c1060b72-7b83-40a8-a4d0-60515233a339",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Restoring",
															"* ",
															"* This Request is for Restoring the initial value to the attributeUnderTest",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfRestoringAsaString = pm.environment.get(\"PreRequestOfRestoringAsaString\");",
															"    eval(PreRequestOfRestoringAsaString);",
															"    CouldPreRequestOfRestoringBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfRestoringBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfRestoringBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfRestoringBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1973e988-3fe4-444f-af6a-cfd91c42843f",
														"exec": [
															"/****************************************************************************************",
															"* Setting Local Variables",
															"****************************************************************************************/   ",
															"pm.variables.clear();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ReversalPointAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a0ff6069-b75c-4080-a868-59afb2072a54",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"        ",
															"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
															"        ",
															"    CouldTheInputBeLoaded(dummyUri, indexOfAttributeUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextAttributeUnderTest = indexOfAttributeUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", indexOfPotentialNextAttributeUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointAttributeConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfAttributeUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "80a911db-4492-42fd-81ff-37fd20aaddd4",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2390b477-e597-451b-b091-c06748c61a89",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is terminating the Test",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4a4eb2a8-1897-4be2-930c-5961cea60c5d",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "512b3bee-41d6-4c5c-ba48-f693bc70643a",
														"exec": [
															"console.log(\"\\n-------------------Restoring the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"        ",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration",
															"                                                   );",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    completeClassName = moduleUnderTest + \":\" + technologyUnderTest + \"-configuration\";",
															"    configuration = AddHeadlineToDataObject(configuration, completeClassName);",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "de07bd79-5592-43b4-82fc-2f00628c8268",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "574c324d-8600-4a2d-91a0-75f58dbaca14",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ac795f2c-ce6e-4e89-9741-62b7210c9e39",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointPureEthernetStructureConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f64b21e4-1927-4ff5-adfd-c861c83bbc72",
														"exec": [
															"console.log(\"\\n-------------ReversalPoint of PureEthernetStructure Validation of Configuration---------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Console.log of Validation Results",
															" ****************************************************************************************/",
															"let allConfigurationValidationResults = { \"allConfigurationValidationResults\" : configurationValidationResults };",
															"console.log(allConfigurationValidationResults);",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointPureEthernetStructureConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b12ec030-10ac-40e4-b735-5f170d3d1776",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointPureEthernetStructureConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "58bd4e27-4ba2-4e01-b462-b37054f7b6a0",
														"exec": [
															"console.log(\"\\n----------------------Terminating PureEthernetStructureConfiguration--------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is for clearing the Collection variables and terminating the TestCase",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "96c08543-e3eb-4e6a-afe6-c717350c1f89",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "342a6fed-78b6-4797-bb1e-97b92b9ad1c7",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7aa3f5b1-2f5a-47b8-8a8f-7428054589e4",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "92e9347a-5fb2-4ad6-970d-9b4b6a8ab824",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "830017b7-2067-4c53-b526-4f7e20f43a8e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5c51bba7-001c-40b0-a30a-930143b8636b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "144bd071-1d00-489a-b6e3-06dc822acca5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "NetworkRestoration",
			"item": [],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3d45152e-7f68-4fb1-a010-271b884ced1d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "7d7ebcf7-45d3-4d8c-b3b4-f019e11d54a9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "MantisIntegration",
			"item": [
				{
					"name": "UserInputForMantisIntegration",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "64626ac5-a3d3-41b6-9f14-4327b01adadf",
								"exec": [
									"console.log(\"\\n\\n======================= UserInput For Mantis Intrgration =======================\");",
									"/****************************************************************************************",
									" * ",
									" * User Input for Mantis Integration",
									" * ",
									" ****************************************************************************************/",
									"INITIAL_INDEX_OF_ERROR_MESSAGE = 0;",
									"MANTIS_INTERFACE_STATUS = \"read-write\";     // choose from \"off\", \"read-only\" or \"read-write\"",
									"var validErrorResults = [];",
									"var count = 0;",
									"IsInputValueCorrect(INITIAL_INDEX_OF_ERROR_MESSAGE, MANTIS_INTERFACE_STATUS, validErrorResults, count);",
									"",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    var validationErrorResults = pm.environment.get(\"validationErrorResults\");",
									"    var controller = pm.environment.get(\"controller\");",
									"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
									"    CouldTheInputBeLoaded(dummyUri, validationErrorResults, controller, indexOfDeviceUnderTest);",
									"} catch (error) {",
									"    CouldTheInputBeLoaded();",
									"}",
									"",
									"/****************************************************************************************",
									"* Mantis URI and Authorization Code",
									"****************************************************************************************/",
									"try {",
									"    var vendor = controller.nodeList[indexOfDeviceUnderTest].vendor;",
									"    //var mantisAuthorizationCode = controller.nodeList[indexOfDeviceUnderTest].mantisAuthorizationCode;",
									"    //var uri = \"https://\" + vendor + \".bugtracker.openBackhaul.com/api/rest/issues/\";",
									"    var mantisAuthorizationCode = \"g8DMMnKxzoPXHvDv1h6q-vzdwDxmBmEh\";",
									"    var uri = \"https://nallativ1.mantishub.io/api/rest/issues/\";",
									"    CouldTheUriAndAuthcodeBePrepared(vendor, mantisAuthorizationCode, uri);",
									"} catch (error) {",
									"    CouldTheUriAndAuthcodeBePrepared();",
									"}",
									"",
									"/****************************************************************************************",
									"* Screening the valid error results from total validation results",
									"****************************************************************************************/",
									"try {",
									"    for (let index = 0; index < validationErrorResults.length; index++) {",
									"        var testCaseErrorMessage = validationErrorResults[index].message;",
									"",
									"        //Discard not valid error messages",
									"        if (((!testCaseErrorMessage) || (testCaseErrorMessage === \"\") || (testCaseErrorMessage == \"undefined\")) ||",
									"            ((testCaseErrorMessage.includes(\"Missing\") === false) &&",
									"            (testCaseErrorMessage.includes(\"not configurable\") === false))) {",
									"            continue;",
									"        }",
									"        ",
									"        if (validationErrorResults[index].attributeUnderTest) {",
									"            var preparedErrorSummary = validationErrorResults[index].objectUnderTest + \"::\" +",
									"                validationErrorResults[index].attributeUnderTest + \" is \" + testCaseErrorMessage;",
									"        } else {",
									"            //Prepare error Summary as per Mantis issue ",
									"            var alignedErrorSummary = PrepareErrorSummaryFromTestResultMessage(testCaseErrorMessage);",
									"            var preparedErrorSummary = validationErrorResults[index].objectUnderTest + \"::\" + alignedErrorSummary;",
									"        }",
									"        validErrorResults.push(validationErrorResults[index]);",
									"        validErrorResults[count].message = preparedErrorSummary;",
									"        count++;",
									"    }",
									"    console.log(validationErrorResults);",
									"    console.log(validErrorResults);    ",
									"    CouldTheInputBeScreened(validErrorResults, validationErrorResults);",
									"} catch (error) {",
									"    CouldTheInputBeScreened();",
									"}",
									"",
									"/****************************************************************************************",
									" * Set Variables ",
									" ****************************************************************************************/",
									"pm.collectionVariables.clear();",
									"pm.environment.set(\"mantisInterfaceStatus\", MANTIS_INTERFACE_STATUS);",
									"pm.collectionVariables.set(\"indexOfErrorMessage\", INITIAL_INDEX_OF_ERROR_MESSAGE);",
									"pm.collectionVariables.set(\"validErrorResults\", validErrorResults);",
									"pm.collectionVariables.set(\"mantisAuthorizationCode\", mantisAuthorizationCode);",
									"pm.collectionVariables.set(\"mantisUri\", uri);",
									"CouldTheVariablesBeSet();",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
									"} catch (error) { }",
									"CouldTheRequestBePrepared();",
									"",
									"/****************************************************************************************",
									"* Functions",
									"****************************************************************************************/",
									"function PrepareErrorSummaryFromTestResultMessage(testCaseErrorMessage) {",
									"    try {",
									"        var trimedErrorMessage = testCaseErrorMessage.trim();",
									"        var parameterLocation = trimedErrorMessage.lastIndexOf(\":\");",
									"        if (parameterLocation != -1) {",
									"            var precedingErrorMessage = trimedErrorMessage.slice(0, parameterLocation);",
									"            var extractedParameter = trimedErrorMessage.slice(parameterLocation + 2);",
									"            var preparedErrorSummary = extractedParameter + \" \" + precedingErrorMessage;",
									"            CouldSummaryExtractedFromMessage(testCaseErrorMessage, trimedErrorMessage, parameterLocation,",
									"                precedingErrorMessage, extractedParameter, preparedErrorSummary);",
									"        } else {",
									"            preparedErrorSummary = trimedErrorMessage;",
									"        }",
									"",
									"        if (preparedErrorSummary.includes(\"Missing\")) {",
									"            var stringLocation = preparedErrorSummary.search(\"Missing\");",
									"            var precedingErrorSummary = preparedErrorSummary.slice(stringLocation);",
									"            preparedErrorSummary = preparedErrorSummary.replace(precedingErrorSummary, \"is missing\");",
									"            CouldSummaryBeRephrased(preparedErrorSummary, stringLocation, precedingErrorSummary);",
									"        }",
									"        CouldSummaryExtractedFromErrorMessage(preparedErrorSummary);",
									"    } catch (error) {",
									"        CouldSummaryExtractedFromErrorMessage();",
									"    }",
									"    return preparedErrorSummary;",
									"}",
									"",
									"/****************************************************************************************",
									"* Self Testing Functions",
									"****************************************************************************************/",
									"function IsInputValueCorrect(indexOfErrorMessage, mantisInterfaceStatus, validErrorResults, count) {",
									"    pm.test(\"IsInputValueCorrect\", function () {",
									"        pm.expect(indexOfErrorMessage).to.equal(0);",
									"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"        pm.expect(validErrorResults).to.be.an(\"array\");",
									"        pm.expect(count).to.equal(0);",
									"    });",
									"}",
									"",
									"",
									"function CouldTheInputBeLoaded(dummyUri, validationErrorResults, controller, indexOfDeviceUnderTest) {",
									"    pm.test(\"CouldTheInputBeLoaded\", function () {",
									"        pm.expect(dummyUri).to.be.a(\"string\");",
									"        pm.expect(dummyUri).to.not.have.lengthOf(0);",
									"        pm.expect(validationErrorResults).to.be.an(\"array\");",
									"        pm.expect(controller).to.be.an(\"object\");",
									"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
									"    });",
									"}",
									"",
									"function CouldTheInputBeScreened(validErrorResults, validationErrorResults) {",
									"    pm.test(\"CouldTheInputBeScreened\", function () {",
									"        pm.expect(validErrorResults).to.be.an(\"array\");",
									"        pm.expect(validationErrorResults).to.be.an(\"array\");",
									"    });",
									"}",
									"",
									"function CouldTheUriAndAuthcodeBePrepared(vendor, mantisAuthorizationCode, uri) {",
									"    pm.test(\"CouldTheUriAndAuthcodeBePrepared\", function () {",
									"        pm.expect(vendor).to.be.a(\"string\");",
									"        pm.expect(vendor).to.not.have.lengthOf(0);",
									"        pm.expect(mantisAuthorizationCode).to.be.a(\"string\");",
									"        pm.expect(mantisAuthorizationCode).to.not.have.lengthOf(0);",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldTheVariablesBeSet() {",
									"    pm.test(\"CouldTheVariablesBeSet\", function () {",
									"        pm.expect(pm.environment.get(\"mantisInterfaceStatus\")).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"        pm.expect(pm.collectionVariables.get(\"indexOfErrorMessage\")).to.equal(0);",
									"        pm.expect(pm.collectionVariables.get(\"validErrorResults\")).to.be.an(\"array\");",
									"        pm.expect(pm.collectionVariables.get(\"mantisAuthorizationCode\")).to.be.a(\"string\");",
									"        pm.expect(pm.collectionVariables.get(\"mantisAuthorizationCode\")).to.not.have.lengthOf(0);",
									"        pm.expect(pm.collectionVariables.get(\"mantisUri\")).to.be.a(\"string\");",
									"        pm.expect(pm.collectionVariables.get(\"mantisUri\")).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldSummaryExtractedFromMessage(testCaseErrorMessage, trimedErrorMessage, parameterLocation,",
									"    precedingErrorMessage, extractedParameter, preparedErrorSummary) {",
									"    pm.test(\"CouldSummaryExtractedFromErrorMessage\", function () {",
									"        pm.expect(testCaseErrorMessage).to.be.a(\"string\");",
									"        pm.expect(testCaseErrorMessage).to.not.have.lengthOf(0);",
									"        pm.expect(trimedErrorMessage).to.be.a(\"string\");",
									"        pm.expect(trimedErrorMessage).to.not.have.lengthOf(0);",
									"        pm.expect(parameterLocation).to.be.a(\"number\");",
									"        pm.expect(precedingErrorMessage).to.be.a(\"string\");",
									"        pm.expect(precedingErrorMessage).to.not.have.lengthOf(0);",
									"        pm.expect(extractedParameter).to.be.a(\"string\");",
									"        pm.expect(extractedParameter).to.not.have.lengthOf(0);",
									"        pm.expect(preparedErrorSummary).to.be.a(\"string\");",
									"        pm.expect(preparedErrorSummary).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"function CouldSummaryBeRephrased(preparedErrorSummary, stingLocation, precedingErrorSummary) {",
									"    pm.test(\"CouldSummaryExtractedFromErrorMessage\", function () {",
									"        pm.expect(preparedErrorSummary).to.be.a(\"string\");",
									"        pm.expect(preparedErrorSummary).to.not.have.lengthOf(0);",
									"        pm.expect(stingLocation).to.be.a(\"number\");",
									"        pm.expect(precedingErrorSummary).to.be.a(\"string\");",
									"        pm.expect(precedingErrorSummary).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"function CouldSummaryExtractedFromErrorMessage(preparedErrorSummary) {",
									"    pm.test(\"CouldSummaryExtractedFromErrorMessage\", function () {",
									"        pm.expect(preparedErrorSummary).to.be.a(\"string\");",
									"        pm.expect(preparedErrorSummary).to.not.have.lengthOf(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1971789f-1461-45e0-9154-a31880a3df50",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "PRSe08",
									"type": "string"
								},
								{
									"key": "username",
									"value": "senthilvel.s",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "www.google.in",
							"host": [
								"www",
								"google",
								"in"
							]
						}
					},
					"response": []
				},
				{
					"name": "LoadingMantisIssues",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "48e9bfaa-66e7-46fc-b3eb-ec0f6adc49eb",
								"exec": [
									"console.log(\"\\n----------------------------------Loading Mantis Issues-----------------------------------\");",
									"/****************************************************************************************",
									"* ",
									"* Loading Mantis Issues",
									"*  ",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
									"    var dummyUri = pm.environment.get(\"dummyUri\");    ",
									"    var mantisAuthorizationCode = pm.collectionVariables.get(\"mantisAuthorizationCode\");",
									"    var mantisUri = pm.collectionVariables.get(\"mantisUri\");",
									"    CouldInputForLoadingMantisIssuesBeLoaded(mantisInterfaceStatus, dummyUri, mantisAuthorizationCode, mantisUri);",
									"} catch (error) {",
									"    CouldInputForLoadingMantisIssuesBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    if (mantisInterfaceStatus === \"read-only\" || mantisInterfaceStatus === \"read-write\") {   ",
									"        var uri = mantisUri;        ",
									"    } else {",
									"        console.log(\"Loading Mantis Issues has been configured to be switched-off.\")",
									"        uri = dummyUri;",
									"    }",
									"    CouldTheMantisUriBeComposed(uri);",
									"} catch (error) {",
									"    CouldTheMantisUriBeComposed();",
									"    uri = dummyUri;",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", uri);",
									"    pm.request.headers.upsert({ key: \"Authorization\", value: mantisAuthorizationCode });",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });",
									"} catch (error) { }",
									"CouldTheGetRequestForMantisIssuesBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									"* Self Testing Functions",
									"****************************************************************************************/",
									"function CouldInputForLoadingMantisIssuesBeLoaded(mantisInterfaceStatus, dummyUri, mantisAuthorizationCode, mantisUri) {",
									"    pm.test(\"CouldInputForLoadingMantisIssuesBeLoaded\", function () {",
									"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"        pm.expect(dummyUri).to.be.a(\"string\");",
									"        pm.expect(dummyUri).to.not.have.lengthOf(0);",
									"        pm.expect(mantisAuthorizationCode).to.be.a(\"string\");",
									"        pm.expect(mantisAuthorizationCode).to.not.have.lengthOf(0);",
									"         pm.expect(mantisUri).to.be.a(\"string\");",
									"        pm.expect(mantisUri).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldTheMantisUriBeComposed(uri) {",
									"    pm.test(\"CouldTheMantisUriBeComposed\", function () {",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldTheGetRequestForMantisIssuesBePrepared() {",
									"    pm.test(\"CouldTheGetRequestForMantisIssuesBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d3da6dc0-96b5-413d-96e6-49e165633ce0",
								"exec": [
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
									"    var controller = pm.environment.get(\"controller\");",
									"",
									"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
									"",
									"    CouldRequiredInputBeRead(mantisInterfaceStatus, controller, indexOfDeviceUnderTest);",
									"} catch (error) {",
									"    CouldRequiredInputBeRead();",
									"}",
									"",
									"/****************************************************************************************",
									"* Processing received data to a list of MantisBT issues",
									"****************************************************************************************/",
									"try {",
									"    if (mantisInterfaceStatus === \"read-only\" || mantisInterfaceStatus === \"read-write\") {",
									"        let responseCode = parseInt(pm.response.code);",
									"        CouldCommentBeComposedandPrinted(responseCode);",
									"",
									"        if (Math.floor(responseCode / 100) === 2) {",
									"            var deviceType = controller.nodeList[indexOfDeviceUnderTest].deviceType;",
									"            CouldDeviceTypeBeRetrieved(deviceType);",
									"            console.log(\"Mantis issues for \" + deviceType + \" could successfully be loaded.\");",
									"",
									"            let responseWithHeadline = pm.response.json();",
									"            var mantisIssueList = responseWithHeadline.issues;",
									"            mantisIssueList = FilterIssuesForDeviceType(mantisIssueList, deviceType);",
									"            console.log(mantisIssueList);",
									"            CouldMantisIssueListBeRead(pm.response.code);",
									"        } else {",
									"            console.log(\"ERROR: Mantis issues for \" + deviceType + \" could not be \"",
									"                + \"successfully be loaded.\");",
									"        }",
									"    }",
									"} catch (error) {",
									"    CouldDeviceTypeBeRetrieved();",
									"    CouldMantisIssueListBeRead();",
									"}",
									"",
									"/****************************************************************************************",
									"* Provided Output Parameters",
									"****************************************************************************************/",
									"if (mantisInterfaceStatus === \"read-only\" || mantisInterfaceStatus === \"read-write\") {",
									"    pm.environment.set(\"mantisIssueList\", mantisIssueList);",
									"    AreAllEnvironmentVariablesSet();",
									"}",
									"",
									"/****************************************************************************************",
									" * Functions",
									" ****************************************************************************************/",
									"function FilterIssuesForDeviceType(issueList, deviceType) {",
									"    for (let i = (issueList.length - 1); i >= 0; i--) {",
									"        if (issueList[i].project.name !== deviceType) {",
									"            issueList.splice(i, 1);",
									"        }",
									"    }",
									"    return issueList;",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Test Driven Development",
									" ****************************************************************************************/",
									"function CouldRequiredInputBeRead(mantisInterfaceStatus, controller, indexOfDeviceUnderTest) {",
									"    pm.test(\"CouldRequiredInputBeRead\", function () {",
									"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"        pm.expect(controller).to.be.an(\"object\");",
									"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
									"    });",
									"}",
									"",
									"function CouldDeviceTypeBeRetrieved(deviceType) {",
									"    pm.test(\"CouldDeviceTypeBeRetrieved\", function () {",
									"        pm.expect(deviceType).to.be.a(\"string\");",
									"        pm.expect(deviceType).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldMantisIssueListBeRead(ResponseCode) {",
									"    pm.test(\"CouldMantisIssueListBeRead\", function () {",
									"        pm.expect(ResponseCode).to.equal(200);",
									"    });",
									"}",
									"",
									"function CouldCommentBeComposedandPrinted(ResponseCode) {",
									"    pm.test(\"CouldCommentBeComposedandPrinted\", function () {",
									"        pm.expect(ResponseCode).to.equal(200);",
									"    });",
									"}",
									"",
									"function AreAllEnvironmentVariablesSet() {",
									"    pm.test(\"AreAllEnvironmentVariablesSet\", function () {",
									"        pm.expect(pm.environment.get(\"mantisIssueList\")).to.be.an(\"array\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "StartingIntegrationToMantis",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "02a6bb7f-18f6-4060-9b1e-8b598bac51d8",
								"exec": [
									"console.log(\"\\n---------------------Starting Integration To Mantis------------------------\");\r",
									"/****************************************************************************************\r",
									"* \r",
									"* StartingIntegrationToMantis\r",
									"*  \r",
									"****************************************************************************************/\r",
									"\r",
									"/****************************************************************************************\r",
									"* Required Input Parameters\r",
									"****************************************************************************************/\r",
									"try {\r",
									"\tvar mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");\r",
									"\tvar mantisIssueList = pm.environment.get(\"mantisIssueList\");\r",
									"\tvar dummyUri = pm.environment.get(\"dummyUri\");\r",
									"\tvar validErrorResults = pm.collectionVariables.get(\"validErrorResults\");\r",
									"\tvar indexOfErrorMessage = pm.collectionVariables.get(\"indexOfErrorMessage\");\r",
									"\tCouldInputForStartingMantisIssuesBeLoaded(mantisInterfaceStatus, mantisIssueList, dummyUri,\r",
									"\t\tvalidErrorResults, indexOfErrorMessage);\r",
									"} catch (error) {\r",
									"\tCouldInputForCreatingMantisIssuesBeLoaded();\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									"* Preparing the Request\r",
									"****************************************************************************************/\r",
									"try {\r",
									"\tif (mantisInterfaceStatus === \"read-write\") {\r",
									"\t\tmaximumIndexOfErrorMessage = validErrorResults.length;\r",
									"\t\tconsole.log(\"Issue index number is : \" + indexOfErrorMessage + \" Out of(\" + maximumIndexOfErrorMessage + \")\");\r",
									"\r",
									"\t\tif (indexOfErrorMessage < maximumIndexOfErrorMessage) {\r",
									"\t\t\tCreateOrUpdateBugsInMantis(indexOfErrorMessage, validErrorResults, mantisIssueList);\r",
									"\t\t} else {\r",
									"\t\t\tpostman.setNextRequest(\"ExitIntegrationToMantis\");\r",
									"\t\t\tconsole.log(\"Proceeding with terminating of the Mantis Integration.\");\r",
									"\t\t}\r",
									"\t\tCouldFurtherProceedingBeDetermined(true);\r",
									"\t}\r",
									"} catch (error) {\r",
									"\tCouldFurtherProceedingBeDetermined(false);\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									"* Functions\r",
									"****************************************************************************************/\r",
									"function CreateOrUpdateBugsInMantis(indexOfErrorMessage, validErrorResults, mantisIssueList) {\r",
									"\ttry {\r",
									"\t\tCouldInputForCreateOrUpdateBugsInMantis(indexOfErrorMessage, validErrorResults, mantisIssueList);\r",
									"\t} catch (error) {\r",
									"\t\tCouldInputForCreateOrUpdateBugsInMantis();\r",
									"\t}\r",
									"\r",
									"\tvar mantisBugSummaryMatched = false; // Mantis Bug summary matched with Test case Error message \r",
									"\tvar mantisBugId = 0;              \t\t // Mantis Bug ID\r",
									"\tvar mantisMatchedClosedBugId = 0; \t\t // Mantis Bug ID which is in closed state to update relation\r",
									"\r",
									"\tconst CLOSED = \"closed\";\r",
									"\tconst ASSIGNED = \"assigned\";\r",
									"\tconst RESOLVED = \"resolved\";\r",
									"\r",
									"\t//----Traverse and check whether prepared Error Summary exists in Matis Bug list---\r",
									"\ttry {\r",
									"\t\tvar preparedSummary = validErrorResults[indexOfErrorMessage].message;\r",
									"\t\tfor (let bIndex = 0; bIndex < mantisIssueList.length; bIndex++) {\r",
									"\t\t\tif (mantisIssueList[bIndex].summary === preparedSummary) {\r",
									"\t\t\t\t//----Check\tIssue status is in Closed state----\t\r",
									"\t\t\t\tif (mantisIssueList[bIndex].status.name === CLOSED) {\r",
									"\t\t\t\t\tmantisMatchedClosedBugId = mantisIssueList[bIndex].id;\r",
									"\t\t\t\t\tpm.collectionVariables.set(\"mantisMatchedClosedBugId\", mantisMatchedClosedBugId);\r",
									"\t\t\t\t\tconsole.log(\"BUG ID - \" + mantisMatchedClosedBugId + \" already exists in Mantis, but it is in CLOSED state, so create new BUG and add relation\");\r",
									"\r",
									"\t\t\t\t\t//Send Create Issue request to Mantis and add relation to it\r",
									"\t\t\t\t\tpostman.setNextRequest(\"CreateIssue\");\r",
									"\t\t\t\t} else {\r",
									"\t\t\t\t\tmantisBugId = mantisIssueList[bIndex].id;\r",
									"\t\t\t\t\tpm.collectionVariables.set(\"mantisBugId\", mantisBugId);\r",
									"\t\t\t\t\tconsole.log(\"BUG ID - \" + mantisBugId + \" already exists in Mantis, so update Bug data\");\r",
									"\r",
									"\t\t\t\t\tif (mantisIssueList[bIndex].status.name === RESOLVED) {\r",
									"\t\t\t\t\t\t//Send Update Issue Status request to Mantis\r",
									"\t\t\t\t\t\tpostman.setNextRequest(\"UpdateIssue\");\r",
									"\t\t\t\t\t} else {\r",
									"\t\t\t\t\t\t//Send Update Notes request to Mantis\r",
									"\t\t\t\t\t\tpostman.setNextRequest(\"UpdateIssueNotes\");\r",
									"\t\t\t\t\t}\r",
									"\t\t\t\t}\r",
									"\t\t\t\tmantisBugSummaryMatched = true;\r",
									"\t\t\t\tCouldErrorSummaryMatchedWithMantisBugSummary(preparedSummary, mantisMatchedClosedBugId, \r",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t mantisBugId, mantisBugSummaryMatched);\r",
									"\t\t\t\tbreak;\r",
									"\t\t\t}\r",
									"\t\t}\t\t\r",
									"\t} catch (error) {\r",
									"\t\tCouldErrorSummaryMatchedWithMantisBugSummary();\r",
									"\t}\r",
									"\r",
									"\t//Issue Summary not found in Mantis, so create new Bug\r",
									"\ttry {\r",
									"\t\tif (mantisBugSummaryMatched === false) {\r",
									"\t\t\tconsole.log(\"Mantis Bugs are not matched, Create new BUG with following Summary: \" + preparedSummary);\r",
									"\t\t\tmantisMatchedClosedBugId = 0;\r",
									"\t\t\tpm.collectionVariables.unset(\"mantisBugId\");\r",
									"\t\t\tpm.collectionVariables.unset(\"mantisMatchedClosedBugId\");\r",
									"\r",
									"\t\t\t//Send Create Bug request to Mantis\r",
									"\t\t\tpostman.setNextRequest(\"CreateIssue\");\r",
									"\t\t} else {\r",
									"\t\t\tmantisBugSummaryMatched = false;\r",
									"\t\t}\r",
									"\t\tCouldErrorSummaryNotMatchedWithMantisBugSummary(preparedSummary, mantisBugSummaryMatched);\r",
									"\t} catch (error) {\r",
									"\t\tCouldErrorSummaryNotMatchedWithMantisBugSummary();\r",
									"\t}\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									"* Self Testing Functions\r",
									"****************************************************************************************/\r",
									"\r",
									"function CouldInputForStartingMantisIssuesBeLoaded(mantisInterfaceStatus, mantisIssueList, dummyUri,\r",
									"\tvalidErrorResults, indexOfErrorMessage\r",
									") {\r",
									"\tpm.test(\"CouldInputForStartingMantisIssuesBeLoaded\", function () {\r",
									"\t\tpm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);\r",
									"\t\tpm.expect(mantisIssueList).to.be.an(\"array\");\r",
									"\t\tpm.expect(dummyUri).to.be.a(\"string\");\r",
									"\t\tpm.expect(dummyUri).to.not.have.lengthOf(0);\r",
									"\t\tpm.expect(validErrorResults).to.be.an(\"array\");\r",
									"\t\tpm.expect(indexOfErrorMessage).to.be.a(\"number\");\r",
									"\t});\r",
									"}\r",
									"\r",
									"function CouldInputForCreateOrUpdateBugsInMantis(indexOfErrorMessage, validErrorResults, mantisIssueList) {\r",
									"\tpm.test(\"CouldInputForCreateOrUpdateBugsInMantis\", function () {\r",
									"\t\tpm.expect(indexOfErrorMessage).to.be.a(\"number\");\r",
									"\t\tpm.expect(validErrorResults).to.be.an(\"array\");\r",
									"\t\tpm.expect(mantisIssueList).to.be.an(\"array\");\r",
									"\t});\r",
									"}\r",
									"\r",
									"function CouldFurtherProceedingBeDetermined(success) {\r",
									"\tpm.test(\"CouldFurtherProceedingBeDetermined\", function () {\r",
									"\t\tpm.expect(success).to.be.true;\r",
									"\t});\r",
									"}\r",
									"\r",
									"/****************************************************************************************\r",
									"* Setting up Local Variables and Preparing the Request\r",
									"****************************************************************************************/\r",
									"pm.variables.clear();\r",
									"try {\r",
									"\tpm.variables.set(\"uri\", dummyUri);\r",
									"\tpm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });\r",
									"} catch (error) { }\r",
									"CouldTheRequestBePrepared();\r",
									"\r",
									"/****************************************************************************************\r",
									" * Self Testing Functions\r",
									" ****************************************************************************************/\r",
									"function CouldTheInputBeLoaded(uri) {\r",
									"\tpm.test(\"CouldTheInputBeLoaded\", function () {\r",
									"\t\tpm.expect(uri).to.be.a(\"string\");\r",
									"\t\tpm.expect(uri).to.not.have.lengthOf(0);\r",
									"\t});\r",
									"}\r",
									"\r",
									"function CouldTheRequestBePrepared() {\r",
									"\tpm.test(\"CouldTheRequestBePrepared\", function () {\r",
									"\t\tpm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");\r",
									"\t\tpm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);\r",
									"\t});\r",
									"}\r",
									"\r",
									"function CouldErrorSummaryMatchedWithMantisBugSummary(preparedSummary, mantisMatchedClosedBugId, \r",
									"\t\t\t\t\t\t\t\t\t\t\t\t\t  mantisBugId, mantisBugSummaryMatched) {\r",
									"\tpm.test(\"CouldErrorSummaryMatchedWithMantisBugSummary\", function () {\r",
									"\t\tpm.expect(preparedSummary).to.be.a(\"string\");\r",
									"\t\tpm.expect(preparedSummary).to.not.have.lengthOf(0);\r",
									"\t\tpm.expect(mantisMatchedClosedBugId).to.be.a(\"number\");\r",
									"\t\tpm.expect(mantisBugId).to.be.a(\"number\");\r",
									"\t\tpm.expect(mantisBugSummaryMatched).to.be.true;\r",
									"\t});\r",
									"}\r",
									"\r",
									"function CouldErrorSummaryNotMatchedWithMantisBugSummary(preparedSummary, mantisBugSummaryMatched) {\r",
									"\tpm.test(\"CouldErrorSummaryNotMatchedWithMantisBugSummary\", function () {\r",
									"\t\tpm.expect(preparedSummary).to.be.a(\"string\");\r",
									"\t\tpm.expect(preparedSummary).to.not.have.lengthOf(0);\r",
									"\t\tpm.expect(mantisBugSummaryMatched).to.be.false;\r",
									"\t});\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "www.google.in",
							"host": [
								"www",
								"google",
								"in"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateIssue",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "99f803d9-a606-471b-9629-d4c5c56097d5",
								"exec": [
									"console.log(\"\\n-------------Send Create Issue Request To Mantis Issues------------------------\");",
									"/****************************************************************************************",
									"* CreateIssue",
									"* ",
									"* Send Create Issue Request",
									"*  ",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    var validErrorResults = pm.collectionVariables.get(\"validErrorResults\");",
									"    var indexOfErrorMessage = pm.collectionVariables.get(\"indexOfErrorMessage\");",
									"    var mantisAuthorizationCode = pm.collectionVariables.get(\"mantisAuthorizationCode\");",
									"    var mantisUri = pm.collectionVariables.get(\"mantisUri\");",
									"    CouldInputForSendCreateIssuesBeLoaded(mantisInterfaceStatus, dummyUri, validErrorResults,",
									"                                            indexOfErrorMessage, mantisAuthorizationCode, mantisUri);",
									"} catch (error) {",
									"    CouldInputForSendCreateIssuesBeLoaded();",
									"}",
									"",
									"/****************************************************************************************",
									"* Preparing the Request",
									"****************************************************************************************/",
									"try {",
									"    if (mantisInterfaceStatus === \"read-write\") {        ",
									"        var project = TypeOf(validErrorResults[indexOfErrorMessage].nameOfTheDeviceUnderTest);        ",
									"        var uri = mantisUri;",
									"        ",
									"        var preparedDescription = validErrorResults[indexOfErrorMessage].description + \"\\n\" +",
									"            validErrorResults[indexOfErrorMessage].requestUri;",
									"        ",
									"        var preparedSummary = validErrorResults[indexOfErrorMessage].message;``",
									"",
									"        const CREATE_REQUEST_BODY = {",
									"            summary: preparedSummary,",
									"            description: preparedDescription,",
									"            project: { name: project },",
									"            category: { name: \"General\" }",
									"        };",
									"        var requestBody = JSON.stringify(CREATE_REQUEST_BODY);",
									"        CouldTheMantisCreateRequestBodyBeComposed(project, uri, preparedDescription,  preparedSummary, requestBody);",
									"    } else {",
									"        console.log(\"Creating Mantis Issues has been configured to be switched-off.\");",
									"        uri = dummyUri;",
									"    }",
									"} catch (error) {",
									"    CouldTheMantisCreateRequestBodyBeComposed();",
									"    uri = dummyUri;",
									"}",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"",
									"try {",
									"    pm.variables.set(\"uri\", uri);",
									"    pm.request.headers.upsert({ key: \"Authorization\", value: mantisAuthorizationCode });",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });",
									"    pm.variables.set(\"requestBody\", requestBody);",
									"} catch (error) { }",
									"CouldTheCreateRequestUriForMantisBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									"* Self Testing Functions",
									"****************************************************************************************/",
									"function CouldInputForSendCreateIssuesBeLoaded(mantisInterfaceStatus, dummyUri, validErrorResults,",
									"                                                indexOfErrorMessage, mantisAuthorizationCode, mantisUri) {",
									"    pm.test(\"CouldInputForSendCreateIssuesBeLoaded\", function () {",
									"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"        pm.expect(dummyUri).to.be.a(\"string\");",
									"        pm.expect(dummyUri).to.not.have.lengthOf(0);",
									"        pm.expect(validErrorResults).to.be.an(\"array\");  ",
									"        pm.expect(indexOfErrorMessage).to.be.a(\"number\");",
									"        pm.expect(mantisAuthorizationCode).to.be.a(\"string\");",
									"        pm.expect(mantisAuthorizationCode).to.not.have.lengthOf(0);",
									"        pm.expect(mantisUri).to.be.a(\"string\");",
									"        pm.expect(mantisUri).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldTheMantisCreateRequestBodyBeComposed(project, uri, preparedDescription,  preparedSummary, requestBody) {",
									"    pm.test(\"CouldTheMantisCreateRequestBodyBeComposed\", function () { ",
									"        pm.expect(project).to.be.a(\"string\");",
									"        pm.expect(project).to.not.have.lengthOf(0);       ",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"        pm.expect(preparedDescription).to.be.a(\"string\");",
									"        pm.expect(preparedDescription).to.not.have.lengthOf(0);        ",
									"        pm.expect(preparedSummary).to.be.a(\"string\");",
									"        pm.expect(preparedSummary).to.not.have.lengthOf(0);",
									"        pm.expect(requestBody).to.be.a(\"string\");",
									"        pm.expect(requestBody).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldTheCreateRequestUriForMantisBePrepared() {",
									"    pm.test(\"CouldTheGetRequestForMantisIssuesBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function TypeOf(deviceUnderTest) {",
									"    let deviceNameSegements = deviceUnderTest.split(\"_\");",
									"    return deviceNameSegements[1];",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4dc41c60-dddd-4618-b0a8-e17f9e5cca43",
								"exec": [
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
									"    var mantisMatchedClosedBugId = pm.collectionVariables.get(\"mantisMatchedClosedBugId\");",
									"    CouldRequiredInputBeRead(mantisInterfaceStatus);",
									"} catch (error) {",
									"    CouldRequiredInputBeRead();",
									"}",
									"",
									"/****************************************************************************************",
									"* Commenting the ResponseCode",
									"****************************************************************************************/",
									"try {",
									"    if (mantisInterfaceStatus === \"read-only\" || mantisInterfaceStatus === \"read-write\") {",
									"        let responseCode = parseInt(pm.response.code);",
									"        if (Math.floor(responseCode / 100) === 2) {",
									"            var newMantisBugId = pm.response.json().issue.id;",
									"            var mantisBugSummary = pm.response.json().issue.summary;",
									"            pm.collectionVariables.set(\"mantisBugId\", newMantisBugId);",
									"",
									"            if (mantisMatchedClosedBugId === undefined) {",
									"",
									"                console.log(\"========================================================================================\");",
									"                console.log(\"New bug ID - \" + newMantisBugId + \" is created with Summary - \" + mantisBugSummary);",
									"                console.log(\"========================================================================================\");",
									"                postman.setNextRequest(\"UpdateIssueNotes\");",
									"",
									"            } else {",
									"                postman.setNextRequest(\"UpdateIssueRelation\");",
									"            }",
									"        } else {",
									"            console.log(\"ERROR: Mantis issues could not be created \");",
									"        }",
									"        CouldCommentBeComposedandPrinted(responseCode, newMantisBugId, mantisBugSummary);",
									"    }",
									"} catch (error) {",
									"    CouldCommentBeComposedandPrinted();",
									"}",
									"",
									"pm.variables.clear();",
									"",
									"/****************************************************************************************",
									" * Test Driven Development",
									" ****************************************************************************************/",
									"function CouldRequiredInputBeRead(mantisInterfaceStatus) {",
									"    pm.test(\"CouldRequiredInputBeRead\", function () {",
									"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"    });",
									"}",
									"",
									"function CouldCommentBeComposedandPrinted(ResponseCode, newMantisBugId, mantisBugSummary) {",
									"    pm.test(\"CouldCommentBeComposedandPrinted\", function () {",
									"        pm.expect(ResponseCode).to.equal(201);",
									"        pm.expect(newMantisBugId).to.be.a(\"number\");",
									"        pm.expect(mantisBugSummary).to.be.a(\"string\");",
									"        pm.expect(mantisBugSummary).to.not.have.lengthOf(0);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}"
						},
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateIssueRelation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "093eea74-711d-4253-88de-f41152c482b8",
								"exec": [
									"console.log(\"\\n-------------Send Update Issue Relation Request To Mantis------------------------\");",
									"/****************************************************************************************",
									"* UpdateIssueRelation",
									"* ",
									"* Send Update Issue Relation Request",
									"*  ",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    var mantisAuthorizationCode = pm.collectionVariables.get(\"mantisAuthorizationCode\");",
									"    var mantisUri = pm.collectionVariables.get(\"mantisUri\");",
									"    var validErrorResults = pm.collectionVariables.get(\"validErrorResults\");",
									"    var indexOfErrorMessage = pm.collectionVariables.get(\"indexOfErrorMessage\");",
									"    var mantisBugId = pm.collectionVariables.get(\"mantisBugId\");",
									"    var mantisMatchedClosedBugId = pm.collectionVariables.get(\"mantisMatchedClosedBugId\");",
									"    CouldInputForUpdateRelationInMMantisBeLoaded(mantisInterfaceStatus, dummyUri, mantisAuthorizationCode, mantisUri,",
									"                                        validErrorResults, indexOfErrorMessage, mantisBugId, mantisMatchedClosedBugId);",
									"} catch (error) {",
									"    CouldInputForUpdateRelationInMMantisBeLoaded();",
									"}",
									"",
									"/****************************************************************************************",
									"* Preparing the Request",
									"****************************************************************************************/",
									"try {",
									"    if (mantisInterfaceStatus === \"read-write\") {        ",
									"        var uri = mantisUri + mantisBugId + \"/relationships/\";",
									"",
									"        const UPDATE_RELATION_REQUEST_BODY = {",
									"            issue: { id: mantisMatchedClosedBugId },",
									"            type: { name: \"related-to\" }",
									"        };",
									"        var requestBody = JSON.stringify(UPDATE_RELATION_REQUEST_BODY);",
									"        CouldTheUpdateRelationRequestBodyBeComposed(uri, requestBody);",
									"    } else {",
									"        console.log(\"Creating Mantis Issues has been configured to be switched-off.\");",
									"        uri = dummyUri;",
									"    }",
									"} catch (error) {",
									"    CouldTheUpdateRelationRequestBodyBeComposed();",
									"    uri = dummyUri;",
									"}",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", uri);",
									"    pm.request.headers.upsert({ key: \"Authorization\", value: mantisAuthorizationCode });",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });",
									"    pm.variables.set(\"requestBody\", requestBody);",
									"} catch (error) { }",
									"CouldTheUpdateRelationRequestForMantisBePrepared();",
									"",
									"/****************************************************************************************",
									" * Providing collection Variables for either Repeating or Terminating the Device Testing",
									" ****************************************************************************************/",
									"var indexOfPotentialNextErrorMessage = indexOfErrorMessage + 1;",
									"pm.collectionVariables.set(\"indexOfErrorMessage\", indexOfPotentialNextErrorMessage);",
									"",
									"postman.setNextRequest(\"StartingIntegrationToMantis\");",
									"",
									"/****************************************************************************************",
									"* Self Testing Functions",
									"****************************************************************************************/",
									"function CouldInputForUpdateRelationInMMantisBeLoaded(mantisInterfaceStatus, dummyUri, ",
									"                                                      mantisAuthorizationCode, mantisUri,",
									"                                                      validErrorResults, indexOfErrorMessage, ",
									"                                                      mantisBugId, mantisMatchedClosedBugId) {",
									"    pm.test(\"CouldInputForSendCreateIssuesBeLoaded\", function () {",
									"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"        pm.expect(dummyUri).to.be.a(\"string\");",
									"        pm.expect(dummyUri).to.not.have.lengthOf(0);",
									"        pm.expect(mantisAuthorizationCode).to.be.a(\"string\");",
									"        pm.expect(mantisAuthorizationCode).to.not.have.lengthOf(0);",
									"        pm.expect(mantisUri).to.be.a(\"string\");",
									"        pm.expect(mantisUri).to.not.have.lengthOf(0);",
									"        pm.expect(validErrorResults).to.be.an(\"array\");",
									"        pm.expect(indexOfErrorMessage).to.be.a(\"number\");",
									"        pm.expect(mantisBugId).to.be.a(\"number\");",
									"        pm.expect(mantisMatchedClosedBugId).to.be.a(\"number\");",
									"    });",
									"}",
									"",
									"function CouldTheUpdateRelationRequestBodyBeComposed(uri, requestBody) {",
									"    pm.test(\"CouldTheUpdateRelationRequestBodyBeComposed\", function () {",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"        pm.expect(requestBody).to.be.a(\"string\");",
									"        pm.expect(requestBody).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldTheUpdateRelationRequestForMantisBePrepared() {",
									"    pm.test(\"CouldTheGetRequestForMantisIssuesBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "df992c30-861b-48c0-8837-d264e0a62b79",
								"exec": [
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
									"    var mantisMatchedClosedBugId = pm.collectionVariables.get(\"mantisMatchedClosedBugId\");",
									"     CouldRequiredInputBeRead(mantisInterfaceStatus, mantisMatchedClosedBugId);",
									"} catch (error) {",
									"    CouldRequiredInputBeRead();",
									"}",
									"",
									"/****************************************************************************************",
									"* Commenting the ResponseCode",
									"****************************************************************************************/",
									"try {",
									"    if (mantisInterfaceStatus===\"read-only\" || mantisInterfaceStatus===\"read-write\") {",
									"        let responseCode = parseInt(pm.response.code);",
									"        var newMantisBugId = pm.response.json().issue.id;",
									"\t\t",
									"        if (Math.floor(responseCode/100) === 2) {",
									"           \tconsole.log(\"========================================================================================\");",
									"\t\t\tconsole.log(\"New bug ID - \" + newMantisBugId + \" is created and Updated with Relation of Closed Bud ID - \"+mantisMatchedClosedBugId);",
									"\t\t\tconsole.log(\"========================================================================================\");",
									"",
									"        } else {",
									"            console.log(\"ERROR: Mantis issues could not be created \");",
									"        }",
									"        CouldCommentBeComposedandPrinted(responseCode, newMantisBugId);",
									"    }",
									"} catch (error) {",
									"    CouldCommentBeComposedandPrinted();",
									"}",
									"",
									"/****************************************************************************************",
									" * Test Driven Development",
									" ****************************************************************************************/",
									"function CouldRequiredInputBeRead(mantisInterfaceStatus, mantisMatchedClosedBugId) {",
									"    pm.test(\"CouldRequiredInputBeRead\", function () {",
									"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"        pm.expect(mantisMatchedClosedBugId).to.be.a(\"number\");",
									"    });",
									"}",
									"",
									"function CouldCommentBeComposedandPrinted(ResponseCode, newMantisBugId) {",
									"    pm.test(\"CouldMantisIssueListBeRead\", function () {",
									"        pm.expect(ResponseCode).to.equal(201);",
									"        pm.expect(newMantisBugId).to.be.a(\"number\");",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}"
						},
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateIssueNotes",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a124a901-f24c-4461-842d-d1d5da1124fd",
								"exec": [
									"console.log(\"\\n-------------Send Update Issue Notes Request To Mantis Issues------------------------\");",
									"/****************************************************************************************",
									"* ",
									"* Send Update Issue Notes Request",
									"*  ",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    var mantisAuthorizationCode = pm.collectionVariables.get(\"mantisAuthorizationCode\");",
									"    var mantisUri = pm.collectionVariables.get(\"mantisUri\");",
									"    var validErrorResults = pm.collectionVariables.get(\"validErrorResults\");",
									"    var indexOfErrorMessage = pm.collectionVariables.get(\"indexOfErrorMessage\");",
									"    var mantisBugId = pm.collectionVariables.get(\"mantisBugId\");",
									"    CouldInputForUpdateIssuesBeLoaded(mantisInterfaceStatus, dummyUri, mantisAuthorizationCode, mantisUri,",
									"                                            validErrorResults, indexOfErrorMessage, mantisBugId);",
									"} catch (error) {",
									"    CouldInputForUpdateIssuesBeLoaded();",
									"}",
									"",
									"/****************************************************************************************",
									"* Preparing the Request",
									"****************************************************************************************/",
									"try {",
									"    if (mantisInterfaceStatus === \"read-write\") {",
									"        var uri = mantisUri + mantisBugId + \"/notes\";",
									"        var notesContent = \"Bug ID - \" + mantisBugId + \" is updated with following details: \" + \"\\n\" +",
									"            \"Object: \" +",
									"            validErrorResults[indexOfErrorMessage].objectUnderTest + \"  \" +",
									"            validErrorResults[indexOfErrorMessage].attributeUnderTest + \"\\n\" +",
									"            \"Device: \" +",
									"            validErrorResults[indexOfErrorMessage].nameOfTheDeviceUnderTest + \"\\n\" +",
									"            \"Response code: \" +",
									"            validErrorResults[indexOfErrorMessage].responseCode + \"\\n\" +",
									"            \"Error description: \" +",
									"            validErrorResults[indexOfErrorMessage].description;",
									"",
									"        var fileContent = \"\";",
									"        if (validErrorResults[indexOfErrorMessage].requestBody) {",
									"            fileContent = \"requestBody: \" + \"\\n\" + JSON.stringify(validErrorResults[indexOfErrorMessage].requestBody);",
									"        }",
									"        if (validErrorResults[indexOfErrorMessage].response) {",
									"            fileContent = fileContent + \"\\n\" + \"response: \" + \"\\n\" + JSON.stringify(validErrorResults[indexOfErrorMessage].response);",
									"        }",
									"        var convetedFileContent = btoa(fileContent);",
									"",
									"        const UPDATE_REQUEST_BODY = {",
									"            text: notesContent,",
									"            files: [{",
									"                name: \"response.log\",",
									"                content: convetedFileContent",
									"            }]",
									"        };",
									"        var requestBody = JSON.stringify(UPDATE_REQUEST_BODY);",
									"        CouldTheUpdateRequestBodyBeComposed(uri, notesContent, fileContent, convetedFileContent, requestBody);",
									"    } else {",
									"        console.log(\"Creating Mantis Issues has been configured to be switched-off.\");",
									"        uri = dummyUri;",
									"    }",
									"} catch (error) {",
									"    CouldTheUpdateRequestBodyBeComposed();",
									"    uri = dummyUri;",
									"}",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", uri);",
									"    pm.request.headers.upsert({ key: \"Authorization\", value: mantisAuthorizationCode });",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });",
									"    pm.variables.set(\"requestBody\", requestBody);",
									"} catch (error) { }",
									"CouldTheUpdateRequestUriForMantisBePrepared();",
									"",
									"/****************************************************************************************",
									" * Providing collection Variables for either Repeating or Terminating the Device Testing",
									" ****************************************************************************************/",
									"var indexOfPotentialNextErrorMessage = indexOfErrorMessage + 1;",
									"pm.collectionVariables.set(\"indexOfErrorMessage\", indexOfPotentialNextErrorMessage);",
									"",
									"postman.setNextRequest(\"StartingIntegrationToMantis\");",
									"",
									"/****************************************************************************************",
									"* Self Testing Functions",
									"****************************************************************************************/",
									"function CouldInputForUpdateIssuesBeLoaded(mantisInterfaceStatus, dummyUri, mantisAuthorizationCode, ",
									"                                        mantisUri, validErrorResults, indexOfErrorMessage, mantisBugId) { ",
									"    pm.test(\"CouldInputForUpdateIssuesBeLoaded\", function () {",
									"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"        pm.expect(dummyUri).to.be.a(\"string\");",
									"        pm.expect(dummyUri).to.not.have.lengthOf(0);",
									"        pm.expect(mantisAuthorizationCode).to.be.a(\"string\");",
									"        pm.expect(mantisAuthorizationCode).to.not.have.lengthOf(0);",
									"        pm.expect(mantisUri).to.be.a(\"string\");",
									"        pm.expect(mantisUri).to.not.have.lengthOf(0);",
									"        pm.expect(validErrorResults).to.be.an(\"array\");       ",
									"        pm.expect(indexOfErrorMessage).to.be.a(\"number\");",
									"        pm.expect(mantisBugId).to.be.a(\"number\");",
									"    });",
									"}",
									"",
									"function CouldTheUpdateRequestBodyBeComposed(uri, notesContent, fileContent, convetedFileContent, requestBody) {",
									"    pm.test(\"CouldTheUpdateRequestBodyBeComposed\", function () {",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"        pm.expect(notesContent).to.be.a(\"string\");",
									"        pm.expect(notesContent).to.not.have.lengthOf(0);",
									"        pm.expect(fileContent).to.be.a(\"string\");",
									"        pm.expect(fileContent).to.not.have.lengthOf(0);",
									"        pm.expect(convetedFileContent).to.be.a(\"string\");",
									"        pm.expect(convetedFileContent).to.not.have.lengthOf(0);",
									"        pm.expect(requestBody).to.be.a(\"string\");",
									"        pm.expect(requestBody).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldTheUpdateRequestUriForMantisBePrepared() {",
									"    pm.test(\"CouldTheUpdateRequestUriForMantisBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "db7bda99-7374-494e-b800-e7b6501b3c2c",
								"exec": [
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
									"    CouldRequiredInputBeRead(mantisInterfaceStatus);",
									"} catch (error) {",
									"    CouldRequiredInputBeRead();",
									"}",
									"",
									"/****************************************************************************************",
									"* Commenting the ResponseCode",
									"****************************************************************************************/",
									"try {",
									"    if (mantisInterfaceStatus === \"read-only\" || mantisInterfaceStatus === \"read-write\") {",
									"        var responseCode = parseInt(pm.response.code);",
									"        var mantisBugId = pm.response.json().issue.id;",
									"",
									"        if (Math.floor(responseCode / 100) === 2) {",
									"            console.log(\"========================================================================================\");",
									"            console.log(\"New bug ID - \" + mantisBugId + \" is Updated with Notes \");",
									"            console.log(\"========================================================================================\");",
									"        } else {",
									"            console.log(\"ERROR: Mantis issues could not be created \");",
									"        }",
									"        CouldCommentBeComposedandPrinted(responseCode, mantisBugId);",
									"    }",
									"} catch (error) {",
									"    CouldCommentBeComposedandPrinted();",
									"}",
									"",
									"pm.variables.clear();",
									"",
									"/****************************************************************************************",
									" * Test Driven Development",
									" ****************************************************************************************/",
									"function CouldRequiredInputBeRead(mantisInterfaceStatus) {",
									"    pm.test(\"CouldRequiredInputBeRead\", function () {",
									"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"    });",
									"}",
									"",
									"function CouldCommentBeComposedandPrinted(ResponseCode, mantisBugId) {",
									"    pm.test(\"CouldMantisIssueListBeRead\", function () {",
									"        pm.expect(ResponseCode).to.equal(201);",
									"        pm.expect(mantisBugId).to.be.a(\"number\");",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}"
						},
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateIssue",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9624d9e4-9807-44c5-b694-2a8714e9ab9e",
								"exec": [
									"console.log(\"\\n-------------Send Update Issue Request To Mantis Issues------------------------\");",
									"/****************************************************************************************",
									"* ",
									"* Send Update Issue Request",
									"*  ",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    var mantisAuthorizationCode = pm.collectionVariables.get(\"mantisAuthorizationCode\");",
									"    var mantisUri = pm.collectionVariables.get(\"mantisUri\");",
									"    var validErrorResults = pm.collectionVariables.get(\"validErrorResults\");",
									"    var indexOfErrorMessage = pm.collectionVariables.get(\"indexOfErrorMessage\");",
									"    var mantisBugId = pm.collectionVariables.get(\"mantisBugId\");",
									"    CouldInputForSendUpdateStatusBeLoaded(mantisInterfaceStatus, dummyUri, ",
									"                                          mantisAuthorizationCode, mantisUri,",
									"                                          validErrorResults, indexOfErrorMessage, mantisBugId);",
									"} catch (error) {",
									"    CouldInputForSendUpdateStatusBeLoaded();",
									"}",
									"",
									"/****************************************************************************************",
									"* Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    if (mantisInterfaceStatus === \"read-write\") {",
									"        var uri = mantisUri;",
									"        const UPDATE_STATUS_REQUEST = {",
									"            id: mantisBugId,",
									"            status: { name: \"assigned\" },",
									"            resolution: { name: \"open\" }",
									"        };",
									"        var requestBody = JSON.stringify(UPDATE_STATUS_REQUEST);",
									"        CouldTheUpdateStatusRequestBodyBeComposed(uri, requestBody);",
									"    } else {",
									"        console.log(\"Creating Mantis Issues has been configured to be switched-off.\");",
									"        uri = dummyUri;",
									"    }",
									"} catch (error) {",
									"    CouldTheUpdateStatusRequestBodyBeComposed();",
									"    uri = dummyUri;",
									"}",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"",
									"try {",
									"    pm.variables.set(\"uri\", uri);",
									"    pm.request.headers.upsert({ key: \"Authorization\", value: mantisAuthorizationCode });",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });",
									"    pm.variables.set(\"requestBody\", requestBody);",
									"} catch (error) { }",
									"CouldTheUpdateStatusRequestUriForMantisBePrepared();",
									"",
									"/****************************************************************************************",
									" * Providing collection Variables for either Repeating or Terminating the Device Testing",
									" ****************************************************************************************/",
									"var indexOfPotentialNextErrorMessage = indexOfErrorMessage + 1;",
									"pm.collectionVariables.set(\"indexOfErrorMessage\", indexOfPotentialNextErrorMessage);",
									"",
									"postman.setNextRequest(\"StartingIntegrationToMantis\");",
									"",
									"/****************************************************************************************",
									"* Self Testing Functions",
									"****************************************************************************************/",
									"function CouldInputForSendUpdateStatusBeLoaded(mantisInterfaceStatus, dummyUri, ",
									"                                            mantisAuthorizationCode, mantisUri,",
									"                                            validErrorResults, indexOfErrorMessage, mantisBugId) {",
									"    pm.test(\"CouldInputForSendCreateIssuesBeLoaded\", function () {",
									"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"        pm.expect(dummyUri).to.be.a(\"string\");",
									"        pm.expect(dummyUri).to.not.have.lengthOf(0);",
									"        pm.expect(mantisAuthorizationCode).to.be.a(\"string\");",
									"        pm.expect(mantisAuthorizationCode).to.not.have.lengthOf(0);",
									"        pm.expect(mantisUri).to.be.a(\"string\");",
									"        pm.expect(mantisUri).to.not.have.lengthOf(0);",
									"        pm.expect(validErrorResults).to.be.an(\"array\");",
									"        pm.expect(indexOfErrorMessage).to.be.a(\"number\");       ",
									"        pm.expect(mantisBugId).to.be.a(\"number\");",
									"    });",
									"}",
									"",
									"function CouldTheUpdateStatusRequestBodyBeComposed(uri, requestBody) {",
									"    pm.test(\"CouldTheUpdateStatusRequestBodyBeComposed\", function () {",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"        pm.expect(requestBody).to.be.a(\"string\");",
									"        pm.expect(requestBody).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldTheUpdateStatusRequestUriForMantisBePrepared() {",
									"    pm.test(\"CouldTheGetRequestForMantisIssuesBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "aecf482a-6973-4931-b1d6-96fad44729cb",
								"exec": [
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
									"    CouldRequiredInputBeRead(mantisInterfaceStatus);",
									"} catch (error) {",
									"    CouldRequiredInputBeRead();",
									"}",
									"",
									"/****************************************************************************************",
									"* Commenting the ResponseCode",
									"****************************************************************************************/",
									"try {",
									"    if (mantisInterfaceStatus === \"read-only\" || mantisInterfaceStatus === \"read-write\") {",
									"        let responseCode = parseInt(pm.response.code);",
									"        var mantisBugId = pm.response.json().issues[0].id;",
									"        var mantisBugStatus = pm.response.json().issues[0].status.name;",
									"",
									"        if (Math.floor(responseCode / 100) === 2) {",
									"            console.log(\"========================================================================================\");",
									"            console.log(\"New bug ID - \" + mantisBugId + \" is updated with Status - \" + mantisBugStatus);",
									"            console.log(\"========================================================================================\");",
									"",
									"        } else {",
									"            console.log(\"ERROR: Mantis issues could not be created \");",
									"        }",
									"        CouldCommentBeComposedandPrinted(responseCode, mantisBugId, mantisBugStatus);",
									"    }",
									"} catch (error) {",
									"    CouldCommentBeComposedandPrinted();",
									"}",
									"",
									"pm.variables.clear();",
									"",
									"/****************************************************************************************",
									" * Test Driven Development",
									" ****************************************************************************************/",
									"function CouldRequiredInputBeRead(mantisInterfaceStatus) {",
									"    pm.test(\"CouldRequiredInputBeRead\", function () {",
									"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"    });",
									"}",
									"",
									"function CouldCommentBeComposedandPrinted(responseCode, mantisBugId, mantisBugStatus) {",
									"    pm.test(\"CouldMantisIssueListBeRead\", function () {",
									"        pm.expect(responseCode).to.equal(200);",
									"        pm.expect(mantisBugId).to.be.a(\"number\");",
									"        pm.expect(mantisBugStatus).to.be.a(\"string\");",
									"        pm.expect(mantisBugStatus).to.not.have.lengthOf(0);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{requestBody}}"
						},
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ExitIntegrationToMantis",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5e1648ba-7a44-4435-85f7-1d834e14083c",
								"exec": [
									"console.log(\"\\n------------------------Exit Integration To Mantis--------------------------\");",
									"/****************************************************************************************",
									"* ",
									"* ExitIntegrationToMantis",
									"* ",
									"* Exiting the integration with Mantis",
									"* ",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    CouldTheInputBeLoaded(dummyUri);",
									"} catch (error) {",
									"    CouldTheInputBeLoaded();",
									"}",
									"",
									"/****************************************************************************************",
									" * Clear Variables for Terminating the Device Testing",
									" ****************************************************************************************/",
									"pm.collectionVariables.clear();",
									"var indexOfPotentialNextErrorMessage = 0;",
									"pm.collectionVariables.set(\"indexOfErrorMessage\", indexOfPotentialNextErrorMessage);",
									"MANTIS_INTERFACE_STATUS = \"off\";          // choose from \"off\", \"read-only\" or \"read-write\"",
									"pm.environment.set(\"mantisInterfaceStatus\", MANTIS_INTERFACE_STATUS);",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"",
									"try {",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
									"} catch (error) { }",
									"CouldTheRequestBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function CouldTheInputBeLoaded(uri) {",
									"    pm.test(\"CouldTheInputBeLoaded\", function () {",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "www.google.in",
							"host": [
								"www",
								"google",
								"in"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "de51e82c-1cd3-42bd-a504-07e8ebd578d5",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4c7cb5c4-1432-4bcc-b4d4-5464bb51e20b",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Terminating",
			"item": [
				{
					"name": "ReversalPointInterfaceValidator",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d310c6b1-dfd4-46e0-b076-ff4dbb652cf7",
								"exec": [
									"console.log(\"\\n------------------------ReversalPoint of the Interface Validator--------------------------\");",
									"/****************************************************************************************",
									"* ",
									"* ReversalPoint",
									"* ",
									"* Directs the flow of execution back to the StartPoint",
									"* ",
									"****************************************************************************************/",
									" ",
									" ",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
									"    CouldTheInputBeLoaded(dummyUri, indexOfDeviceUnderTest);",
									"} catch (error) {",
									"    CouldTheInputBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Providing Environment Variables for either Repeating or Terminating the Device Testing",
									" ****************************************************************************************/",
									"var indexOfPotentialNextDeviceUnderTest = indexOfDeviceUnderTest + 1;",
									"pm.environment.set(\"indexOfDeviceUnderTest\", indexOfPotentialNextDeviceUnderTest);",
									"",
									"postman.setNextRequest(\"StartPointDeviceTesting\");",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheRequestBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function CouldTheInputBeLoaded(uri, indexOfDeviceUnderTest) {",
									"    pm.test(\"CouldTheInputBeLoaded\", function () {",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "23fa3de6-a543-4ede-8584-297c2810c78b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "EndPointInterfaceValidator",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "14bbd44e-7a74-4d82-9b21-487e6ea3dd5a",
								"exec": [
									"console.log(\"\\n--------------------------Terminating the InterfaceValidator------------------------------\");",
									"/****************************************************************************************",
									"* ",
									"* EndPoint of the Interface Validator",
									"* ",
									"* This Request is for clearing the Environment variables and terminating the Program",
									"* ",
									"****************************************************************************************/",
									" ",
									" ",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    CouldTheInputBeLoaded(dummyUri);",
									"} catch (error) {",
									"    CouldTheInputBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Clearing all Environment Variables for Terminating the Program",
									" ****************************************************************************************/",
									"pm.environment.clear();",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheRequestBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function CouldTheInputBeLoaded(uri, controller, indexOfDeviceUnderTest) {",
									"    pm.test(\"CouldTheInputBeLoaded\", function () {",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2a3049fe-fcd2-48a0-8260-48e213768f46",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "41b60eec-672b-462c-b3ce-911a02ee3c28",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "59095252-b77e-4e07-8ec8-6348566438b2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "9203db43-e041-4bb7-8faf-973c65efe3e6",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "c60bfec1-f0dc-435a-98ef-50b7618139e0",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "61dfe465-ded2-490f-b766-7303bd230aaf",
			"key": "indexOfLtpUnderTest",
			"value": 0,
			"type": "number"
		},
		{
			"id": "844d04ff-6ac4-48cf-86c3-88270944cdef",
			"key": "moduleUnderTest",
			"value": "air-interface-2-0",
			"type": "string"
		},
		{
			"id": "f61a23dd-6be1-404c-a8cf-a6233199b5a5",
			"key": "multiplicityOfTestCaseIterations",
			"value": "all",
			"type": "string"
		},
		{
			"id": "478d152f-d347-42b9-abf1-7546065040c8",
			"key": "pacUnderTest",
			"value": "air-interface-2-0:air-interface-pac",
			"type": "string"
		},
		{
			"id": "485d57bc-f13b-4028-a8f0-266db30cb5e5",
			"key": "technologyUnderTest",
			"value": "air-interface",
			"type": "string"
		},
		{
			"id": "9bee8683-af15-4c76-8627-adb5f101d57e",
			"key": "capability",
			"value": {
				"adaptive-modulation-is-avail": true,
				"atpc-is-avail": true,
				"atpc-range": 13,
				"auto-freq-select-is-avail": false,
				"direction-of-acm-performance-values": "air-interface-2-0:DIRECTION_TYPE_TX",
				"duplex-distance-is-freely-configurable": false,
				"duplex-distance-list": [
					1010000
				],
				"encryption-is-avail": false,
				"expected-equals-transmitted-radio-signal-id": true,
				"maintenance-timer-range": "0-172800",
				"performance-monitoring-is-avail": true,
				"rx-frequency-max": 19535625,
				"rx-frequency-min": 19341750,
				"supported-alarm-list": [
					"modemIsFaulty",
					"es24HCrossThreshold",
					"rslIsExceeded",
					"temperatureIsExceedeed",
					"signalIsLost",
					"ses24HCrossThreshold",
					"radioIsFaulty",
					"modulationIsDownShifted",
					"es15MCrossThreshold",
					"ses15MCrossThreshold"
				],
				"supported-loop-back-kind-list": [
					"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_LOCAL",
					"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_LOCAL"
				],
				"supported-radio-signal-id-datatype": "air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_INTEGER",
				"supported-radio-signal-id-length": 255,
				"transmission-mode-list": [
					{
						"am-downshift-level": -60,
						"am-upshift-level": -57,
						"channel-bandwidth": 56000,
						"code-rate": 90,
						"modulation-scheme": 256,
						"rx-threshold": -65,
						"supported-as-fixed-configuration": true,
						"symbol-rate-reduction-factor": 1,
						"transmission-mode-name": "56008",
						"transmission-mode-rank": 56008,
						"tx-power-max": 18,
						"tx-power-min": -2,
						"xpic-is-avail": true
					},
					{
						"am-downshift-level": -63,
						"am-upshift-level": -61,
						"channel-bandwidth": 56000,
						"code-rate": 88,
						"modulation-scheme": 128,
						"rx-threshold": -68,
						"supported-as-fixed-configuration": true,
						"symbol-rate-reduction-factor": 1,
						"transmission-mode-name": "56007",
						"transmission-mode-rank": 56007,
						"tx-power-max": 19,
						"tx-power-min": -1,
						"xpic-is-avail": true
					},
					{
						"am-downshift-level": -71,
						"am-upshift-level": -66,
						"channel-bandwidth": 56000,
						"code-rate": 89,
						"modulation-scheme": 16,
						"rx-threshold": -76,
						"supported-as-fixed-configuration": true,
						"symbol-rate-reduction-factor": 1,
						"transmission-mode-name": "56004",
						"transmission-mode-rank": 56004,
						"tx-power-max": 21,
						"tx-power-min": 1,
						"xpic-is-avail": true
					},
					{
						"am-downshift-level": -73,
						"am-upshift-level": -71,
						"channel-bandwidth": 56000,
						"code-rate": 83,
						"modulation-scheme": 8,
						"rx-threshold": -77,
						"supported-as-fixed-configuration": true,
						"symbol-rate-reduction-factor": 1,
						"transmission-mode-name": "56003",
						"transmission-mode-rank": 56003,
						"tx-power-max": 23,
						"tx-power-min": 3,
						"xpic-is-avail": true
					},
					{
						"am-downshift-level": -66,
						"am-upshift-level": -62,
						"channel-bandwidth": 56000,
						"code-rate": 88,
						"modulation-scheme": 64,
						"rx-threshold": -71,
						"supported-as-fixed-configuration": true,
						"symbol-rate-reduction-factor": 1,
						"transmission-mode-name": "56006",
						"transmission-mode-rank": 56006,
						"tx-power-max": 19,
						"tx-power-min": -1,
						"xpic-is-avail": true
					},
					{
						"am-downshift-level": -68,
						"am-upshift-level": -66,
						"channel-bandwidth": 56000,
						"code-rate": 88,
						"modulation-scheme": 32,
						"rx-threshold": -73,
						"supported-as-fixed-configuration": true,
						"symbol-rate-reduction-factor": 1,
						"transmission-mode-name": "56005",
						"transmission-mode-rank": 56005,
						"tx-power-max": 21,
						"tx-power-min": 1,
						"xpic-is-avail": true
					},
					{
						"am-downshift-level": -73,
						"am-upshift-level": -71,
						"channel-bandwidth": 14000,
						"code-rate": 85,
						"modulation-scheme": 32,
						"rx-threshold": -78,
						"supported-as-fixed-configuration": true,
						"symbol-rate-reduction-factor": 1,
						"transmission-mode-name": "14005",
						"transmission-mode-rank": 14005,
						"tx-power-max": 21,
						"tx-power-min": 1,
						"xpic-is-avail": true
					},
					{
						"am-downshift-level": -70,
						"am-upshift-level": -67,
						"channel-bandwidth": 14000,
						"code-rate": 84,
						"modulation-scheme": 64,
						"rx-threshold": -76,
						"supported-as-fixed-configuration": true,
						"symbol-rate-reduction-factor": 1,
						"transmission-mode-name": "14006",
						"transmission-mode-rank": 14006,
						"tx-power-max": 19,
						"tx-power-min": -1,
						"xpic-is-avail": true
					},
					{
						"am-downshift-level": -68,
						"am-upshift-level": -66,
						"channel-bandwidth": 14000,
						"code-rate": 86,
						"modulation-scheme": 128,
						"rx-threshold": -73,
						"supported-as-fixed-configuration": true,
						"symbol-rate-reduction-factor": 1,
						"transmission-mode-name": "14007",
						"transmission-mode-rank": 14007,
						"tx-power-max": 19,
						"tx-power-min": -1,
						"xpic-is-avail": true
					},
					{
						"am-downshift-level": -66,
						"am-upshift-level": -63,
						"channel-bandwidth": 14000,
						"code-rate": 89,
						"modulation-scheme": 256,
						"rx-threshold": -70,
						"supported-as-fixed-configuration": true,
						"symbol-rate-reduction-factor": 1,
						"transmission-mode-name": "14008",
						"transmission-mode-rank": 14008,
						"tx-power-max": 18,
						"tx-power-min": -2,
						"xpic-is-avail": true
					},
					{
						"am-downshift-level": -63,
						"am-upshift-level": -61,
						"channel-bandwidth": 28000,
						"code-rate": 90,
						"modulation-scheme": 256,
						"rx-threshold": -68,
						"supported-as-fixed-configuration": true,
						"symbol-rate-reduction-factor": 1,
						"transmission-mode-name": "28008",
						"transmission-mode-rank": 28008,
						"tx-power-max": 18,
						"tx-power-min": -2,
						"xpic-is-avail": true
					},
					{
						"am-downshift-level": -72,
						"am-upshift-level": -68,
						"channel-bandwidth": 28000,
						"code-rate": 88,
						"modulation-scheme": 16,
						"rx-threshold": -78,
						"supported-as-fixed-configuration": true,
						"symbol-rate-reduction-factor": 1,
						"transmission-mode-name": "28004",
						"transmission-mode-rank": 28004,
						"tx-power-max": 21,
						"tx-power-min": 1,
						"xpic-is-avail": true
					},
					{
						"am-downshift-level": -69,
						"am-upshift-level": -67,
						"channel-bandwidth": 28000,
						"code-rate": 88,
						"modulation-scheme": 32,
						"rx-threshold": -75,
						"supported-as-fixed-configuration": true,
						"symbol-rate-reduction-factor": 1,
						"transmission-mode-name": "28005",
						"transmission-mode-rank": 28005,
						"tx-power-max": 21,
						"tx-power-min": 1,
						"xpic-is-avail": true
					},
					{
						"am-downshift-level": -67,
						"am-upshift-level": -64,
						"channel-bandwidth": 28000,
						"code-rate": 88,
						"modulation-scheme": 64,
						"rx-threshold": -73,
						"supported-as-fixed-configuration": true,
						"symbol-rate-reduction-factor": 1,
						"transmission-mode-name": "28006",
						"transmission-mode-rank": 28006,
						"tx-power-max": 19,
						"tx-power-min": -1,
						"xpic-is-avail": true
					},
					{
						"am-downshift-level": -66,
						"am-upshift-level": -63,
						"channel-bandwidth": 28000,
						"code-rate": 87,
						"modulation-scheme": 128,
						"rx-threshold": -71,
						"supported-as-fixed-configuration": true,
						"symbol-rate-reduction-factor": 1,
						"transmission-mode-name": "28007",
						"transmission-mode-rank": 28007,
						"tx-power-max": 19,
						"tx-power-min": -1,
						"xpic-is-avail": true
					},
					{
						"am-downshift-level": -87,
						"am-upshift-level": -87,
						"channel-bandwidth": 28000,
						"code-rate": 75,
						"modulation-scheme": 4,
						"rx-threshold": -87,
						"supported-as-fixed-configuration": false,
						"symbol-rate-reduction-factor": 1,
						"transmission-mode-name": "28001",
						"transmission-mode-rank": 28001,
						"tx-power-max": 23,
						"tx-power-min": 3,
						"xpic-is-avail": true
					},
					{
						"am-downshift-level": -79,
						"am-upshift-level": -77,
						"channel-bandwidth": 28000,
						"code-rate": 89,
						"modulation-scheme": 4,
						"rx-threshold": -85,
						"supported-as-fixed-configuration": true,
						"symbol-rate-reduction-factor": 1,
						"transmission-mode-name": "28002",
						"transmission-mode-rank": 28002,
						"tx-power-max": 23,
						"tx-power-min": 3,
						"xpic-is-avail": true
					},
					{
						"am-downshift-level": -75,
						"am-upshift-level": -73,
						"channel-bandwidth": 28000,
						"code-rate": 88,
						"modulation-scheme": 8,
						"rx-threshold": -80,
						"supported-as-fixed-configuration": true,
						"symbol-rate-reduction-factor": 1,
						"transmission-mode-name": "28003",
						"transmission-mode-rank": 28003,
						"tx-power-max": 23,
						"tx-power-min": 3,
						"xpic-is-avail": true
					},
					{
						"am-downshift-level": -90,
						"am-upshift-level": -90,
						"channel-bandwidth": 14000,
						"code-rate": 75,
						"modulation-scheme": 4,
						"rx-threshold": -90,
						"supported-as-fixed-configuration": false,
						"symbol-rate-reduction-factor": 1,
						"transmission-mode-name": "14001",
						"transmission-mode-rank": 14001,
						"tx-power-max": 23,
						"tx-power-min": 3,
						"xpic-is-avail": true
					},
					{
						"am-downshift-level": -82,
						"am-upshift-level": -80,
						"channel-bandwidth": 14000,
						"code-rate": 87,
						"modulation-scheme": 4,
						"rx-threshold": -88,
						"supported-as-fixed-configuration": true,
						"symbol-rate-reduction-factor": 1,
						"transmission-mode-name": "14002",
						"transmission-mode-rank": 14002,
						"tx-power-max": 23,
						"tx-power-min": 3,
						"xpic-is-avail": true
					},
					{
						"am-downshift-level": -78,
						"am-upshift-level": -76,
						"channel-bandwidth": 14000,
						"code-rate": 87,
						"modulation-scheme": 8,
						"rx-threshold": -84,
						"supported-as-fixed-configuration": true,
						"symbol-rate-reduction-factor": 1,
						"transmission-mode-name": "14003",
						"transmission-mode-rank": 14003,
						"tx-power-max": 23,
						"tx-power-min": 3,
						"xpic-is-avail": true
					},
					{
						"am-downshift-level": -76,
						"am-upshift-level": -71,
						"channel-bandwidth": 14000,
						"code-rate": 87,
						"modulation-scheme": 16,
						"rx-threshold": -81,
						"supported-as-fixed-configuration": true,
						"symbol-rate-reduction-factor": 1,
						"transmission-mode-name": "14004",
						"transmission-mode-rank": 14004,
						"tx-power-max": 21,
						"tx-power-min": 1,
						"xpic-is-avail": true
					},
					{
						"am-downshift-level": -77,
						"am-upshift-level": -75,
						"channel-bandwidth": 56000,
						"code-rate": 90,
						"modulation-scheme": 4,
						"rx-threshold": -83,
						"supported-as-fixed-configuration": true,
						"symbol-rate-reduction-factor": 1,
						"transmission-mode-name": "56002",
						"transmission-mode-rank": 56002,
						"tx-power-max": 23,
						"tx-power-min": 3,
						"xpic-is-avail": true
					},
					{
						"am-downshift-level": -84,
						"am-upshift-level": -84,
						"channel-bandwidth": 56000,
						"code-rate": 75,
						"modulation-scheme": 4,
						"rx-threshold": -84,
						"supported-as-fixed-configuration": false,
						"symbol-rate-reduction-factor": 1,
						"transmission-mode-name": "56001",
						"transmission-mode-rank": 56001,
						"tx-power-max": 23,
						"tx-power-min": 3,
						"xpic-is-avail": true
					}
				],
				"tx-frequency-max": 18525625,
				"tx-frequency-min": 18331750,
				"type-of-equipment": "ALCplus2e"
			},
			"type": "any"
		},
		{
			"id": "9f55355f-e345-4b6e-8eb3-96420216cc3a",
			"key": "configuration",
			"value": {
				"acm-threshold-cross-alarm-list": [
					{
						"acm-threshold-cross-alarm-definition-number": 1,
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN",
						"transmission-mode": "28001"
					},
					{
						"acm-threshold-cross-alarm-definition-number": 2,
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN",
						"transmission-mode": "28002"
					},
					{
						"acm-threshold-cross-alarm-definition-number": 3,
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN",
						"transmission-mode": "28003"
					},
					{
						"acm-threshold-cross-alarm-definition-number": 4,
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN",
						"transmission-mode": "28004"
					},
					{
						"acm-threshold-cross-alarm-definition-number": 1,
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS",
						"transmission-mode": "28001"
					},
					{
						"acm-threshold-cross-alarm-definition-number": 5,
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN",
						"transmission-mode": "28005"
					},
					{
						"acm-threshold-cross-alarm-definition-number": 6,
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN",
						"transmission-mode": "28006"
					},
					{
						"acm-threshold-cross-alarm-definition-number": 7,
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN",
						"transmission-mode": "28007"
					},
					{
						"acm-threshold-cross-alarm-definition-number": 8,
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN",
						"transmission-mode": "28008"
					},
					{
						"acm-threshold-cross-alarm-definition-number": 2,
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS",
						"transmission-mode": "28002"
					},
					{
						"acm-threshold-cross-alarm-definition-number": 3,
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS",
						"transmission-mode": "28003"
					},
					{
						"acm-threshold-cross-alarm-definition-number": 4,
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS",
						"transmission-mode": "28004"
					},
					{
						"acm-threshold-cross-alarm-definition-number": 5,
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS",
						"transmission-mode": "28005"
					},
					{
						"acm-threshold-cross-alarm-definition-number": 6,
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS",
						"transmission-mode": "28006"
					},
					{
						"acm-threshold-cross-alarm-definition-number": 7,
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS",
						"transmission-mode": "28007"
					},
					{
						"acm-threshold-cross-alarm-definition-number": 8,
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS",
						"transmission-mode": "28008"
					}
				],
				"adaptive-modulation-is-on": true,
				"air-interface-name": "RADIO LINK 1",
				"alic-is-on": false,
				"atpc-is-on": false,
				"atpc-thresh-lower": -59,
				"atpc-thresh-upper": -40,
				"atpc-tx-power-min": 5,
				"auto-freq-select-is-on": false,
				"auto-freq-select-range": -1,
				"clearing-threshold-cross-alarms-is-on": false,
				"cryptographic-key": "Cryptographic key not yet defined.",
				"encryption-is-on": false,
				"expected-radio-signal-id": {
					"alphanumeric-radio-signal-id": "Not yet defined.",
					"numeric-radio-signal-id": 197
				},
				"g-826-threshold-cross-alarm-list": [
					{
						"alarm-clearing-threshold": -1,
						"alarm-raising-threshold": 0,
						"g-826-value-kind": "air-interface-2-0:G_826_TYPE_CSES",
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS"
					},
					{
						"alarm-clearing-threshold": -1,
						"alarm-raising-threshold": 0,
						"g-826-value-kind": "air-interface-2-0:G_826_TYPE_ES",
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN"
					},
					{
						"alarm-clearing-threshold": -1,
						"alarm-raising-threshold": 0,
						"g-826-value-kind": "air-interface-2-0:G_826_TYPE_SES",
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN"
					},
					{
						"alarm-clearing-threshold": -1,
						"alarm-raising-threshold": 0,
						"g-826-value-kind": "air-interface-2-0:G_826_TYPE_SES",
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS"
					},
					{
						"alarm-clearing-threshold": -1,
						"alarm-raising-threshold": 0,
						"g-826-value-kind": "air-interface-2-0:G_826_TYPE_ES",
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS"
					},
					{
						"alarm-clearing-threshold": -1,
						"alarm-raising-threshold": 0,
						"g-826-value-kind": "air-interface-2-0:G_826_TYPE_CSES",
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN"
					}
				],
				"loop-back-kind-on": "air-interface-2-0:LOOP_BACK_TYPE_NONE",
				"maintenance-timer": 92074,
				"mimo-is-on": false,
				"modulation-is-on": true,
				"performance-monitoring-is-on": true,
				"power-is-on": true,
				"problem-kind-severity-list": [
					{
						"problem-kind-name": "radioIsFaulty",
						"problem-kind-severity": "air-interface-2-0:SEVERITY_TYPE_MAJOR"
					},
					{
						"problem-kind-name": "ses15MCrossThreshold",
						"problem-kind-severity": "air-interface-2-0:SEVERITY_TYPE_MAJOR"
					},
					{
						"problem-kind-name": "ses24HCrossThreshold",
						"problem-kind-severity": "air-interface-2-0:SEVERITY_TYPE_MAJOR"
					},
					{
						"problem-kind-name": "rslIsExceeded",
						"problem-kind-severity": "air-interface-2-0:SEVERITY_TYPE_MAJOR"
					},
					{
						"problem-kind-name": "es24HCrossThreshold",
						"problem-kind-severity": "air-interface-2-0:SEVERITY_TYPE_MAJOR"
					},
					{
						"problem-kind-name": "modemIsFaulty",
						"problem-kind-severity": "air-interface-2-0:SEVERITY_TYPE_MAJOR"
					},
					{
						"problem-kind-name": "signalIsLost",
						"problem-kind-severity": "air-interface-2-0:SEVERITY_TYPE_MAJOR"
					},
					{
						"problem-kind-name": "es15MCrossThreshold",
						"problem-kind-severity": "air-interface-2-0:SEVERITY_TYPE_MAJOR"
					},
					{
						"problem-kind-name": "temperatureIsExceedeed",
						"problem-kind-severity": "air-interface-2-0:SEVERITY_TYPE_MAJOR"
					},
					{
						"problem-kind-name": "modulationIsDownShifted",
						"problem-kind-severity": "air-interface-2-0:SEVERITY_TYPE_WARNING"
					}
				],
				"receiver-is-on": true,
				"remote-air-interface-name": "Dummy 144",
				"rx-frequency": -1,
				"transmission-mode-max": "28008",
				"transmission-mode-min": "28002",
				"transmitted-radio-signal-id": {
					"alphanumeric-radio-signal-id": "Not yet defined.",
					"numeric-radio-signal-id": 197
				},
				"transmitter-is-on": true,
				"tx-frequency": 18500250,
				"tx-power": 18,
				"xlts-threshold-cross-alarm-list": [
					{
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN",
						"level-threshold-second-kind": "air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_TLTS",
						"xlts-level": 13,
						"xlts-threshold-cross-alarm-definition-number": 1
					},
					{
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN",
						"level-threshold-second-kind": "air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_TLTS",
						"xlts-level": 15,
						"xlts-threshold-cross-alarm-definition-number": 2
					},
					{
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN",
						"level-threshold-second-kind": "air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_TLTS",
						"xlts-level": 17,
						"xlts-threshold-cross-alarm-definition-number": 3
					},
					{
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN",
						"level-threshold-second-kind": "air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_RLTS",
						"xlts-level": -40,
						"xlts-threshold-cross-alarm-definition-number": 1
					},
					{
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN",
						"level-threshold-second-kind": "air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_RLTS",
						"xlts-level": -80,
						"xlts-threshold-cross-alarm-definition-number": 5
					},
					{
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN",
						"level-threshold-second-kind": "air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_RLTS",
						"xlts-level": -70,
						"xlts-threshold-cross-alarm-definition-number": 4
					},
					{
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN",
						"level-threshold-second-kind": "air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_RLTS",
						"xlts-level": -60,
						"xlts-threshold-cross-alarm-definition-number": 3
					},
					{
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN",
						"level-threshold-second-kind": "air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_RLTS",
						"xlts-level": -50,
						"xlts-threshold-cross-alarm-definition-number": 2
					},
					{
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN",
						"level-threshold-second-kind": "air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_TLTS",
						"xlts-level": 19,
						"xlts-threshold-cross-alarm-definition-number": 4
					},
					{
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS",
						"level-threshold-second-kind": "air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_RLTS",
						"xlts-level": -80,
						"xlts-threshold-cross-alarm-definition-number": 5
					},
					{
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS",
						"level-threshold-second-kind": "air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_RLTS",
						"xlts-level": -60,
						"xlts-threshold-cross-alarm-definition-number": 3
					},
					{
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS",
						"level-threshold-second-kind": "air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_RLTS",
						"xlts-level": -70,
						"xlts-threshold-cross-alarm-definition-number": 4
					},
					{
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS",
						"level-threshold-second-kind": "air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_RLTS",
						"xlts-level": -40,
						"xlts-threshold-cross-alarm-definition-number": 1
					},
					{
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS",
						"level-threshold-second-kind": "air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_TLTS",
						"xlts-level": 19,
						"xlts-threshold-cross-alarm-definition-number": 4
					},
					{
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS",
						"level-threshold-second-kind": "air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_RLTS",
						"xlts-level": -50,
						"xlts-threshold-cross-alarm-definition-number": 2
					},
					{
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS",
						"level-threshold-second-kind": "air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_TLTS",
						"xlts-level": 17,
						"xlts-threshold-cross-alarm-definition-number": 3
					},
					{
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS",
						"level-threshold-second-kind": "air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_TLTS",
						"xlts-level": 15,
						"xlts-threshold-cross-alarm-definition-number": 2
					},
					{
						"amount-of-seconds": 0,
						"granularity-period": "air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS",
						"level-threshold-second-kind": "air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_TLTS",
						"xlts-level": 13,
						"xlts-threshold-cross-alarm-definition-number": 1
					}
				],
				"xpic-is-on": false
			},
			"type": "any"
		}
	],
	"protocolProfileBehavior": {}
}