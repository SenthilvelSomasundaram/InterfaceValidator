{
	"info": {
		"_postman_id": "0d06f9fe-6e36-4c05-b1c1-9d340dcdbcca",
		"name": "InterfaceValidator.3Dev Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "UserInput",
			"item": [
				{
					"name": "UserInput",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "33191fa2-0ab1-4a7f-bbfb-6c7b868416f5",
								"exec": [
									"console.log(\"\\n\\n\\n===========================================================================================\");",
									"console.log(\"================================= InterfaceValidator.3 ===================================\");",
									"console.log(\"==========================================================================================\");",
									"/****************************************************************************************",
									"* ",
									"* Request collection for validating the management interface of microwave devices",
									"* as it can be found on https://github.com/openBackhaul",
									"*  ",
									"* This RequestCollection is for perpetual complementation.",
									"* ",
									"*   !   Please, provide the following User Input   !",
									"* ",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Manual Definition of Source of Environmental Parameters",
									"****************************************************************************************/",
									"SOURCE_OF_INPUT_PARAMETERS = \"manual\";          // choose from \"manual\" or \"file\"",
									"MULTIPLICITY_OF_DEVICE_ITERATIONS = \"all\";      // \"none\", \"one\" or \"all\" devices to be validated",
									"MANTIS_INTERFACE_STATUS = \"off\";          // choose from \"off\", \"read-only\" or \"read-write\"",
									"",
									"AreMainInputParametersCorrect(SOURCE_OF_INPUT_PARAMETERS, ",
									"                                MULTIPLICITY_OF_DEVICE_ITERATIONS, ",
									"                                MANTIS_INTERFACE_STATUS",
									"                              );",
									"",
									"",
									"/****************************************************************************************",
									"* Manual Definition of Controller and Device Information (required for \"manual\" only)",
									"****************************************************************************************/",
									"if ( SOURCE_OF_INPUT_PARAMETERS === \"manual\" ) {",
									"    IP_ADDRESS_OF_THE_CONTROLLER = \"172.29.145.220\";  //\"10.118.125.76\";",
									"    RESTCONF_PORT_AT_THE_CONTROLLER = \"8181\";",
									"    AUTHORIZATION_CODE_AT_THE_CONTROLLER = \"c2VudGhpbHZlbC5zOlBSU2UwOA==\"; //\"Basic dGhvcnN0ZW4uaDpQUlRoMDk=\";",
									"    PATH_TO_DB_AND_MOUNT_POINT = \"/rests/data/network-topology:network-topology/topology=topology-netconf\";",
									"        ",
									"    /*NAME_OF_DEVICE_UNDER_TEST = \"highstreet_nts_thorsten_50004\";    //\"ericsson_trafficnode_13322\"; //\"highstreet_nts_thorsten_50004\"; //\"siae_alcplus2e_12970\";",
									"    AUTHORIZATION_CODE_AT_THE_MANTIS = \"\";                      //\"wJPHIpvvvhJHj8tYqhpaPpF6mf-Jo_ao\";                        //\"pHCn4WYf74wyUmn0ZCj_BBkkIvIE4CtM\";",
									"    UUID_OF_LTP_UNDER_TEST = \"e0290b56-5cb7-4175-a226-747114951cf5\"; //\"RF-2146697601\";   //\"e0290b56-5cb7-4175-a226-747114951cf5\";  //\"LTP-MWPS-TTP-RADIO-1A\";",
									"    LID_OF_LP_UNDER_TEST = \"WWKWKKW\";                               //\"2146697601\";    //\"WWKWKKW\"; //\"LP-MWPS-TTP-RADIO-1A\";",
									"    PAC_UNDER_TEST = \"air-interface-2-0:air-interface-pac\";",
									"    */",
									"    /*",
									"    NAME_OF_DEVICE_UNDER_TEST = \"highstreet_nts_thorsten_50004\";    //\"ericsson_trafficnode_13322\"; //\"highstreet_nts_thorsten_50004\"; //\"siae_alcplus2e_12970\";",
									"    AUTHORIZATION_CODE_AT_THE_MANTIS = \"\";                      //\"wJPHIpvvvhJHj8tYqhpaPpF6mf-Jo_ao\";                        //\"pHCn4WYf74wyUmn0ZCj_BBkkIvIE4CtM\";",
									"    UUID_OF_LTP_UNDER_TEST = \"c3ebd9d5-9168-49e6-8444-668ac2007c3d\"; //\"ETH-2134638850\";   //\"c3ebd9d5-9168-49e6-8444-668ac2007c3d\";  //\"\";",
									"    LID_OF_LP_UNDER_TEST = \"MzE4LIIsz4EL4MMIMI\";                    //\"2134638850\";    //\"MzE4LIIsz4EL4MMIMI\"; //\"\";",
									"    PAC_UNDER_TEST = \"ethernet-container-2-0:ethernet-container-pac\";",
									"    */",
									"    ",
									"    /*if (SOURCE_OF_INPUT_PARAMETERS === \"manual\") {",
									"        NAME_OF_DEVICE_UNDER_TEST = \"siae_alcplus2e_12970\";    //\"ericsson_trafficnode_13322\"; ",
									"        AUTHORIZATION_CODE_AT_THE_MANTIS = \"pHCn4WYf74wyUmn0ZCj_BBkkIvIE4CtM\"; //\"wJPHIpvvvhJHj8tYqhpaPpF6mf-Jo_ao\"",
									"        UUID_OF_LTP_UNDER_TEST = \"LTP-MWPS-TTP-RADIO-1A\"; //\"RF-2146697601\";   //\"506f0848-2ae0-4594-ac58",
									"        LID_OF_LP_UNDER_TEST = \"LP-MWPS-TTP-RADIO-1A\";   //\"2146697601\";    //\"jajjj\"; //\"LP-MWPS-TTP-RADIO-1A\";",
									"        PAC_UNDER_TEST = \"air-interface-2-0:air-interface-pac\";",
									"    }*/",
									"    ",
									"    /*if (SOURCE_OF_INPUT_PARAMETERS === \"manual\") {",
									"    NAME_OF_DEVICE_UNDER_TEST = \"siae_alcplus2e_12970\";    //\"ericsson_trafficnode_13322\"; //\"highstreet_nts_andreas_50014\"; //\"siae_alcplus2e_12970\";",
									"    AUTHORIZATION_CODE_AT_THE_MANTIS = \"pHCn4WYf74wyUmn0ZCj_BBkkIvIE4CtM\"; //\"wJPHIpvvvhJHj8tYqhpaPpF6mf-Jo_ao\";                        //\"pHCn4WYf74wyUmn0ZCj_BBkkIvIE4CtM\";",
									"    UUID_OF_LTP_UNDER_TEST = \"LTP-ETC-TTP-PORT-A\";  //\"LTP-MWPS-TTP-RADIO-1A\";",
									"    LID_OF_LP_UNDER_TEST = \"LP-ETC-TTP-PORT-A\";    //\"LP-MWPS-TTP-RADIO-1A\";",
									"    PAC_UNDER_TEST = \"ethernet-container-2-0:ethernet-container-pac\";",
									"    }*/",
									"    ",
									"    if (SOURCE_OF_INPUT_PARAMETERS === \"manual\") {",
									"        NAME_OF_DEVICE_UNDER_TEST = \"ericsson_trafficnode_13322\";",
									"        AUTHORIZATION_CODE_AT_THE_MANTIS = \"pHCn4WYf74wyUmn0ZCj_BBkkIvIE4CtM\";   // this is specific to Mantis",
									"        UUID_OF_LTP_UNDER_TEST = \"RF-2146697601\";  ",
									"        LID_OF_LP_UNDER_TEST = \"2146697601\";   ",
									"        PAC_UNDER_TEST = \"air-interface-2-0:air-interface-pac\";",
									"    }",
									"        ",
									"    IsControllerAndDeviceInformationComplete(IP_ADDRESS_OF_THE_CONTROLLER,",
									"                                                    RESTCONF_PORT_AT_THE_CONTROLLER,",
									"                                                    AUTHORIZATION_CODE_AT_THE_CONTROLLER,",
									"                                                    PATH_TO_DB_AND_MOUNT_POINT,",
									"                                                    NAME_OF_DEVICE_UNDER_TEST,",
									"                                                    AUTHORIZATION_CODE_AT_THE_MANTIS,",
									"                                                    UUID_OF_LTP_UNDER_TEST,",
									"                                                    LID_OF_LP_UNDER_TEST,",
									"                                                    PAC_UNDER_TEST",
									"                                             );",
									"}",
									"",
									"class Interface {",
									"    constructor(newLtpUuid, newlpLid) {",
									"        this.ltpUuid = newLtpUuid;",
									"        this.lpLid = newlpLid;",
									"    }",
									"}",
									"if ( SOURCE_OF_INPUT_PARAMETERS === \"manual\" ) {",
									"    var interfaceUnderTest = new Interface(UUID_OF_LTP_UNDER_TEST, LID_OF_LP_UNDER_TEST);",
									"    IsInterfaceUnderTestDefined(interfaceUnderTest);",
									"}",
									"",
									"class Node {",
									"    constructor(newNodeId,",
									"                    newVendor,",
									"                    newDeviceType,",
									"                    newDeviceNumber,",
									"                    newMantisAuthorizationCode) {",
									"        this.nodeId = newNodeId;",
									"        this.vendor = newVendor;",
									"        this.deviceType = newDeviceType;",
									"        this.deviceNumber = newDeviceNumber;",
									"        this.mantisAuthorizationCode = newMantisAuthorizationCode;",
									"        this.airInterfaceList = [];",
									"        this.ethernetContainerList = [];",
									"        this.hybridMwStructureList = [];",
									"        this.ipInterfaceList = [];",
									"        this.macInterfaceList = [];",
									"        this.pureEthernetStructureList = [];",
									"        this.tdmContainerList = [];",
									"        this.vlanInterfaceList = [];",
									"        this.wireInterfaceList = [];",
									"    }",
									"}",
									"if ( SOURCE_OF_INPUT_PARAMETERS === \"manual\" ) {",
									"    var nodeUnderTest = new Node(NAME_OF_DEVICE_UNDER_TEST,",
									"                                    VendorOf(NAME_OF_DEVICE_UNDER_TEST),",
									"                                    TypeOf(NAME_OF_DEVICE_UNDER_TEST),",
									"                                    NumberOf(NAME_OF_DEVICE_UNDER_TEST),",
									"                                    AUTHORIZATION_CODE_AT_THE_MANTIS",
									"                                );  ",
									"    switch (TechnologyOf(PAC_UNDER_TEST)) {",
									"        case \"air-interface\":",
									"            nodeUnderTest.airInterfaceList.push(interfaceUnderTest);",
									"            break;",
									"        case \"ethernet-container\":",
									"            nodeUnderTest.ethernetContainerList.push(interfaceUnderTest);",
									"            break;",
									"        case \"hybrid-mw-structure\":",
									"            nodeUnderTest.hybridMwStructureList.push(interfaceUnderTest);",
									"            break;",
									"        case \"ip-interface\":",
									"            nodeUnderTest.ipInterfaceList.push(interfaceUnderTest);",
									"            break;",
									"        case \"mac-interface\":",
									"            nodeUnderTest.macInterfaceList.push(interfaceUnderTest);",
									"            break;",
									"        case \"pure-ethernet-structure\":",
									"            nodeUnderTest.pureEthernetStructureList.push(interfaceUnderTest);",
									"            break;",
									"        case \"tdm-container\":",
									"            nodeUnderTest.tdmContainerList.push(interfaceUnderTest);",
									"            break;",
									"        case \"vlan-interface\":",
									"            nodeUnderTest.vlanInterfaceList.push(interfaceUnderTest);",
									"            break;",
									"        case \"wire-interface\":",
									"            nodeUnderTest.wireInterfaceList.push(interfaceUnderTest);",
									"            break;",
									"    }",
									"    IsNodeUnderTestDefined(nodeUnderTest);",
									"}",
									"",
									"class Controller {",
									"    constructor(newControllerAddress,",
									"                    newAuthorizationCode,",
									"                    newPathToDbAndMountPoint) {",
									"        this.controllerAddress = newControllerAddress;",
									"        this.authorizationCode = newAuthorizationCode;",
									"        this.pathToDbAndMountPoint = newPathToDbAndMountPoint;",
									"        this.nodeList = [];",
									"    }",
									"}",
									"if ( SOURCE_OF_INPUT_PARAMETERS === \"manual\" ) {",
									"    var controller = new Controller(IP_ADDRESS_OF_THE_CONTROLLER + \":\" + RESTCONF_PORT_AT_THE_CONTROLLER,",
									"                                        AUTHORIZATION_CODE_AT_THE_CONTROLLER,",
									"                                        PATH_TO_DB_AND_MOUNT_POINT",
									"                                    );",
									"    controller.nodeList.push(nodeUnderTest);",
									"    IsControllerUnderTestDefined(controller);",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Automated Definition of Controller and Device Information by Loading Static Data File",
									"****************************************************************************************/",
									"if (SOURCE_OF_INPUT_PARAMETERS === \"file\") {",
									"    try {",
									"        var controller = data.CONTROLLER;",
									"        CouldControllerBeLoadedFromFile(controller);",
									"    } catch (error) {",
									"        CouldControllerBeLoadedFromFile();",
									"    }",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Automated Definition of Device Information from Controller Topology Information",
									" ****************************************************************************************/",
									"if (SOURCE_OF_INPUT_PARAMETERS === \"network\") {",
									"    /* public version supports only SOURCE_OF_INPUT_PARAMETERS === \"manual\" || \"file\" */",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Provided Environmental Variables ",
									" ****************************************************************************************/",
									"pm.environment.clear();",
									"",
									"INITIAL_INDEX_OF_DEVICE_UNDER_TEST = 0;",
									"//DUMMY_URI = \"ping.openBackhaul.com\";",
									"DUMMY_URI = \"http://172.29.145.220:8181/rests/data/programming:instructions-queue=pcep-topology\";",
									"",
									"pm.environment.set(\"multiplicityOfDeviceIterations\", MULTIPLICITY_OF_DEVICE_ITERATIONS);",
									"pm.environment.set(\"controller\", controller);",
									"pm.environment.set(\"indexOfDeviceUnderTest\", INITIAL_INDEX_OF_DEVICE_UNDER_TEST);",
									"pm.environment.set(\"mantisInterfaceStatus\", MANTIS_INTERFACE_STATUS);",
									"pm.environment.set(\"dummyUri\", DUMMY_URI);",
									"AreAllEnvironmentVariablesSet();",
									"",
									"",
									"/****************************************************************************************",
									" * Provided Collection Variables ",
									" ****************************************************************************************/",
									"pm.collectionVariables.clear();",
									"",
									"",
									"/****************************************************************************************",
									" * Setting up Local Variables and Preparing the Request",
									" ****************************************************************************************/",
									"pm.variables.clear();",
									"",
									"try {",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({ key: \"Authorization\", value: \"\" });",
									"    pm.request.headers.upsert({ key: \"Accept\", value: \"application/json\" });",
									"    pm.request.headers.upsert({ key: \"Content-Type\", value: \"application/json\" });",
									"} catch (error) {}",
									"CouldTheRequestBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									" * Functions",
									" ****************************************************************************************/",
									"function TechnologyOf(pacUnderTest) {",
									"    let indexOfColon = pacUnderTest.indexOf(\":\");",
									"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
									"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
									"}",
									"",
									"function VendorOf(deviceUnderTest) {",
									"    let indexOfFirstUnderscore = deviceUnderTest.indexOf(\"_\");",
									"    return deviceUnderTest.slice(0, indexOfFirstUnderscore);",
									"}",
									"",
									"function TypeOf(deviceUnderTest) {",
									"    let deviceNameSegements = deviceUnderTest.split(\"_\");",
									"    return deviceNameSegements[1];",
									"}",
									"",
									"function NumberOf(deviceUnderTest) {",
									"    let indexOfSecondUnderscore = deviceUnderTest.indexOf(\"_\", deviceUnderTest.indexOf(\"_\") + 1);",
									"    return deviceUnderTest.slice(indexOfSecondUnderscore + 1);",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function AreMainInputParametersCorrect(sourceOfInputParameters, ",
									"                                                    multiplicityOfDeviceIterations, ",
									"                                                    mantisInterfaceStatus) {",
									"    pm.test(\"IsValueOfSourceOfInputParametersCorrect\", function() {",
									"        pm.expect(sourceOfInputParameters).to.be.oneOf([\"manual\", \"file\", \"network\"]);",
									"    });",
									"    pm.test(\"IsValueOfMultiplicityOfDeviceIterationsCorrect\", function() {",
									"        pm.expect(multiplicityOfDeviceIterations).to.be.oneOf([\"none\", \"one\", \"all\"]);",
									"    });",
									"    pm.test(\"IsValueOfMantisInterfaceStatusCorrect\", function() {",
									"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"    });",
									"}",
									"",
									"function IsControllerAndDeviceInformationComplete(ipAddressOfTheController,",
									"                                                    restconfPortAtTheController,",
									"                                                    authorizationCodeAtTheController,",
									"                                                    pathToDbAndMountPoint,",
									"                                                    nameOfDeviceUnderTest,",
									"                                                    authorizationCodeAtTheMantis,",
									"                                                    uuidOfLtpUnderTest,",
									"                                                    lidOfLpUnderTest,",
									"                                                    pacUnderTest) {",
									"    pm.test(\"IsControllerAndDeviceInformationComplete\", function() {",
									"        pm.expect(ipAddressOfTheController).to.be.a(\"string\");",
									"        pm.expect(ipAddressOfTheController).to.not.have.lengthOf(0);",
									"        pm.expect(restconfPortAtTheController).to.be.a(\"string\");",
									"        pm.expect(restconfPortAtTheController).to.not.have.lengthOf(0);",
									"        pm.expect(authorizationCodeAtTheController).to.be.a(\"string\");",
									"        pm.expect(authorizationCodeAtTheController).to.not.have.lengthOf(0);",
									"        pm.expect(pathToDbAndMountPoint).to.be.a(\"string\");",
									"        pm.expect(pathToDbAndMountPoint).to.not.have.lengthOf(0);",
									"        pm.expect(nameOfDeviceUnderTest).to.be.a(\"string\");",
									"        pm.expect(nameOfDeviceUnderTest).to.not.have.lengthOf(0);",
									"        pm.expect(authorizationCodeAtTheMantis).to.be.a(\"string\");",
									"        if (MANTIS_INTERFACE_STATUS !== \"off\") {",
									"            pm.expect(authorizationCodeAtTheMantis).to.not.have.lengthOf(0);",
									"        }",
									"        pm.expect(uuidOfLtpUnderTest).to.be.a(\"string\");",
									"        pm.expect(uuidOfLtpUnderTest).to.not.have.lengthOf(0);",
									"        pm.expect(lidOfLpUnderTest).to.be.a(\"string\");",
									"        pm.expect(lidOfLpUnderTest).to.not.have.lengthOf(0);",
									"        pm.expect(pacUnderTest).to.be.a(\"string\");",
									"        pm.expect(pacUnderTest).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldControllerBeLoadedFromFile(controller) {",
									"    pm.test(\"CouldControllerBeLoadedFromFile\", function () {",
									"        pm.expect(controller).to.be.an(\"object\");",
									"    });",
									"}",
									"",
									"function IsInterfaceUnderTestDefined(interfaceUnderTest) {",
									"    pm.test(\"IsInterfaceUnderTestDefined\", function() {",
									"        pm.expect(interfaceUnderTest).to.be.an.instanceof(Interface);",
									"    });",
									"    pm.test(\"IsLtpUuidDefined\", function() {",
									"        pm.expect(interfaceUnderTest.ltpUuid).to.be.a(\"string\");",
									"        pm.expect(interfaceUnderTest.ltpUuid).to.not.have.lengthOf(0);",
									"    });",
									"    pm.test(\"IsLpLidDefined\", function() {",
									"        pm.expect(interfaceUnderTest.lpLid).to.be.a(\"string\");",
									"        pm.expect(interfaceUnderTest.lpLid).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function IsNodeUnderTestDefined(nodeUnderTest) {",
									"    pm.test(\"IsNodeUnderTestDefined\", function() {",
									"        pm.expect(nodeUnderTest).to.be.an.instanceof(Node);",
									"        pm.expect(nodeUnderTest.nodeId).to.be.a(\"string\");",
									"        pm.expect(nodeUnderTest.nodeId).to.not.have.lengthOf(0);",
									"        pm.expect(nodeUnderTest.vendor).to.be.a(\"string\");",
									"        pm.expect(nodeUnderTest.vendor).to.not.have.lengthOf(0);",
									"        pm.expect(nodeUnderTest.deviceType).to.be.a(\"string\");",
									"        pm.expect(nodeUnderTest.deviceType).to.not.have.lengthOf(0);",
									"        pm.expect(nodeUnderTest.deviceNumber).to.be.a(\"string\");",
									"        pm.expect(nodeUnderTest.deviceNumber).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function IsControllerUnderTestDefined(controllerUnderTest) {",
									"    pm.test(\"IsControllerUnderTestDefined\", function() {",
									"        pm.expect(controllerUnderTest).to.be.an.instanceof(Controller);",
									"        pm.expect(controllerUnderTest.controllerAddress).to.be.a(\"string\");",
									"        pm.expect(controllerUnderTest.controllerAddress).to.not.have.lengthOf(0);",
									"        pm.expect(controllerUnderTest.authorizationCode).to.be.a(\"string\");",
									"        pm.expect(controllerUnderTest.authorizationCode).to.not.have.lengthOf(0);",
									"        pm.expect(controllerUnderTest.pathToDbAndMountPoint).to.be.a(\"string\");",
									"        pm.expect(controllerUnderTest.pathToDbAndMountPoint).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function AreAllEnvironmentVariablesSet() {",
									"    pm.test(\"AreAllEnvironmentVariablesSet\", function() {",
									"        pm.expect(pm.environment.get(\"multiplicityOfDeviceIterations\")).to.be.oneOf([\"none\", \"one\", \"all\"]);",
									"        pm.expect(pm.environment.get(\"controller\")).to.be.an(\"object\");",
									"        pm.expect(pm.environment.get(\"indexOfDeviceUnderTest\")).to.be.a(\"number\");",
									"        pm.expect(pm.environment.get(\"indexOfDeviceUnderTest\")).to.be.at.least(0);",
									"        pm.expect(pm.environment.get(\"mantisInterfaceStatus\")).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"        pm.expect(pm.environment.get(\"dummyUri\")).to.be.a(\"string\");",
									"        pm.expect(pm.environment.get(\"dummyUri\")).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
									"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function() {",
									"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
									"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
									"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
									"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function() {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f7d0402e-63b9-47fa-8f95-3c046dfed438",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "PRSe08",
									"type": "string"
								},
								{
									"key": "username",
									"value": "senthilvel.s",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "906cda88-1d73-4050-889f-7971a4779533",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9d3fdc9e-6e8c-48f6-be64-2c5260851dc3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "functions()",
			"item": [
				{
					"name": "General()",
					"item": [
						{
							"name": "PrintMantisIssuesForTechnologyAndClass()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "f86ebf10-2b80-4952-99e7-9893f258f9f7",
										"exec": [
											"console.log(\"\\n-------------Uploading Function for Filtering and Listing of Mantis Issues----------------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of PrintMantisIssuesForTechnologyAndClass()",
											"* ",
											"* Function for filtering a list of Mantis issues for defined technology and class ",
											"* under test and console.log of the filtered issues.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Environment Variables ",
											"****************************************************************************************/",
											"const PRINT_MANTIS_ISSUES_FOR_TECHNOLOGY_AND_CLASS = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var mantisIssueList = pm.environment.get(\"mantisIssueList\");",
											"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
											"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
											"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
											"        CouldInputForFilteringMantisIssuesBeLoaded(mantisIssueList, technologyUnderTest, ",
											"                                                        classUnderTest,",
											"                                                        attributeUnderTest",
											"                                                   );",
											"    } catch (error) {",
											"        CouldInputForFilteringMantisIssuesBeLoaded();",
											"    }",
											"",
											"    // Filtering the Mantis Issues for Technology and Class",
											"    try {",
											"        let technologyAndClassUnderTest = technologyUnderTest + \"-\" + classUnderTest;",
											"        var filteredIssueList = mantisIssueList;",
											"        for (let i=(filteredIssueList.length-1); i>=0; i--) {",
											"            let summary = filteredIssueList[i].summary;",
											"            let indexOfTwoColons = summary.indexOf(\"::\");",
											"            let technologyAndClass = summary.slice(0, indexOfTwoColons);",
											"            if (technologyAndClass!==technologyAndClassUnderTest){",
											"                filteredIssueList.splice(i,1);",
											"            } else {",
											"                if ( (attributeUnderTest!==undefined) && (attributeUnderTest!==\"\") ) {",
											"                    let indexOfBlank = summary.indexOf(\" \");",
											"                    let attributeName = summary.slice(indexOfTwoColons+2, indexOfBlank);",
											"                    if (attributeName!==attributeUnderTest){",
											"                        filteredIssueList.splice(i,1);",
											"                    }",
											"                }",
											"            }",
											"        }",
											"        CouldMantisIssueListBeFiltered(filteredIssueList);",
											"    } catch (error) {",
											"        CouldMantisIssueListBeFiltered();",
											"    }",
											"    ",
											"    // Printing filtered Issues into the Console",
											"    try {",
											"        if ( filteredIssueList.length>0 ) {",
											"            console.log(\"Issues documented in Mantis:\");",
											"            for (let i=0; i<filteredIssueList.length; i++) {",
											"                let indexOfIssue = filteredIssueList[i].id;",
											"                let summary = filteredIssueList[i].summary;",
											"                let indexOfTwoColons = summary.indexOf(\"::\");",
											"                let attributeAndError = summary.slice(indexOfTwoColons+2);",
											"                let status = filteredIssueList[i].status.name;",
											"                console.log(\"#\" + indexOfIssue + \" : \" + attributeAndError + \" (\" + status + \")\");",
											"            }",
											"        }",
											"        CouldMantisIssueListBePrinted(true);",
											"    } catch (error) {",
											"        CouldMantisIssueListBePrinted(false);",
											"    }",
											"    ",
											"    // Provided Output Parameters",
											"    pm.variables.set(\"filteredIssueList\", filteredIssueList);",
											"    ",
											"    // Self Testing Functions",
											"    function CouldInputForFilteringMantisIssuesBeLoaded(mantisIssueList, technologyUnderTest, ",
											"                                                            classUnderTest,",
											"                                                            attributeUnderTest) {",
											"        pm.test(\"CouldInputForFilteringMantisIssuesBeLoaded\", function () {",
											"            pm.expect(mantisIssueList).to.be.an(\"array\");",
											"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
											"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(classUnderTest).to.be.a(\"string\");",
											"            pm.expect(classUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"        });",
											"    }",
											"    ",
											"    function CouldMantisIssueListBeFiltered(filteredIssueList) {",
											"        pm.test(\"CouldMantisIssueListBeFiltered\", function () {",
											"            pm.expect(filteredIssueList).to.be.an(\"array\");",
											"        });",
											"    }",
											"        ",
											"    function CouldMantisIssueListBePrinted(success) {",
											"        pm.test(\"CouldMantisIssueListBePrinted\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"PrintMantisIssuesForTechnologyAndClass\", ",
											"                            PRINT_MANTIS_ISSUES_FOR_TECHNOLOGY_AND_CLASS.toString() );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											" * Self Testing Functions",
											" ****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "SettingTheRequestVariables()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "da607a3a-c330-4628-b363-47b2449490dc",
										"exec": [
											"console.log(\"\\n------------------Uploading Function for Setting the Request Variables--------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of SettingTheRequestVariables()",
											"* ",
											"* Function for composing and setting of the local variables for GET requests.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const SETTING_THE_REQUEST_VARIABLES = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
											"            ",
											"        var controller = pm.environment.get(\"controller\");",
											"        var dummyUri = pm.environment.get(\"dummyUri\");",
											"        var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
											"            ",
											"        var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
											"        var pacUnderTest = pm.collectionVariables.get(\"pacUnderTest\");",
											"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
											"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
											"            ",
											"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
											"        var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
											"        var keysOfDatatypeInstanceUnderTest = pm.variables.get(\"keysOfDatatypeInstanceUnderTest\");",
											"        var filteredContent = pm.variables.get(\"filteredContent\");",
											"        var filteredDepth = pm.variables.get(\"filteredDepth\");",
											"        var filteredFields = pm.variables.get(\"filteredFields\");",
											"        CouldInputForSettingTheRequestVariablesBeLoaded(attributeUnderTest,",
											"                                                            controller, ",
											"                                                            dummyUri,",
											"                                                            indexOfDeviceUnderTest, ",
											"                                                            indexOfLtpUnderTest,",
											"                                                            pacUnderTest,",
											"                                                            moduleUnderTest,",
											"                                                            technologyUnderTest,",
											"                                                            classUnderTest,",
											"                                                            datatypeUnderTest,",
											"                                                            keysOfDatatypeInstanceUnderTest,",
											"                                                            filteredContent,",
											"                                                            filteredDepth,",
											"                                                            filteredFields",
											"                                                        );",
											"    } catch (error) {",
											"        CouldInputForSettingTheRequestVariablesBeLoaded();",
											"    }",
											"        ",
											"    // Preparing the Request",
											"    try {",
											"        let nodeIds = controller.nodeList[indexOfDeviceUnderTest];",
											"        var idPair;",
											"        switch (technologyUnderTest) {",
											"            case \"air-interface\":",
											"                idPair = nodeIds.airInterfaceList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"ethernet-container\":",
											"                idPair = nodeIds.ethernetContainerList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"hybrid-mw-structure\":",
											"                idPair = nodeIds.hybridMwStructureList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"ip-interface\":",
											"                idPair = nodeIds.ipInterfaceList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"mac-interface\":",
											"                idPair = nodeIds.macInterfaceList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"pure-ethernet-structure\":",
											"                idPair = nodeIds.pureEthernetStructureList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"tdm-container\":",
											"                idPair = nodeIds.tdmContainerList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"vlan-interface\":",
											"                idPair = nodeIds.vlanInterfaceList[indexOfLtpUnderTest];",
											"                break;",
											"            case \"wire-interface\":",
											"                idPair = nodeIds.wireInterfaceList[indexOfLtpUnderTest];",
											"                break;",
											"        }",
											"        CouldIdPairForSettingTheRequestVariablesBeRetrieved(attributeUnderTest, idPair);",
											"    } catch (error) {",
											"        CouldIdPairForSettingTheRequestVariablesBeRetrieved(attributeUnderTest);",
											"    }",
											"        ",
											"    try {",
											"        var objectUnderTest = \"/core-model-1-4:control-construct/logical-termination-point=\" ",
											"                                    + idPair.ltpUuid",
											"                                    + \"/layer-protocol=\" ",
											"                                    + idPair.lpLid",
											"                                    + \"/\"",
											"                                    + pacUnderTest;",
											"        if ( (typeof technologyUnderTest!=\"undefined\") ",
											"                && (technologyUnderTest!==\"\")",
											"                && (classUnderTest!==\"pac\") ) {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"/\"",
											"                                    + technologyUnderTest",
											"                                    + \"-\"",
											"                                    + classUnderTest;",
											"        }",
											"        if ( (typeof datatypeUnderTest!=\"undefined\") && (datatypeUnderTest !== \"\") ) {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"/\"",
											"                                    + datatypeUnderTest;",
											"        }",
											"        if ( (typeof keysOfDatatypeInstanceUnderTest[0].value!=\"undefined\") && (keysOfDatatypeInstanceUnderTest[0].value!==\"\") ) {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"=\"",
											"                                    + ReplaceColonsInside(keysOfDatatypeInstanceUnderTest[0].value);",
											"            for (let i=1; i<keysOfDatatypeInstanceUnderTest.length; i++) {",
											"                objectUnderTest = objectUnderTest",
											"                                    + \",\"",
											"                                    + ReplaceColonsInside(keysOfDatatypeInstanceUnderTest[i].value);",
											"            }",
											"        } ",
											"        if ( (typeof attributeUnderTest!=\"undefined\") && (attributeUnderTest !== \"\") ) {",
											"            objectUnderTest = objectUnderTest",
											"                                    + \"/\"",
											"                                    + attributeUnderTest;",
											"        }    ",
											"        let alreadySomeFilterAttached = false;",
											"        if ( (typeof filteredContent!=\"undefined\") ",
											"                && (typeof filteredDepth!=\"undefined\") ",
											"                && (typeof filteredFields!=\"undefined\") ) {",
											"            if (filteredContent !== \"\" || filteredDepth !== 0 || filteredFields !== \"\") {",
											"                objectUnderTest = objectUnderTest",
											"                                        + \"?\";",
											"            }",
											"            if (filteredContent !== \"\") {",
											"                objectUnderTest = objectUnderTest",
											"                                        + \"content=\"",
											"                                        + filteredContent;",
											"                alreadySomeFilterAttached = true;",
											"            }",
											"            if (filteredDepth !== 0) {",
											"                if (alreadySomeFilterAttached) {",
											"                     objectUnderTest = objectUnderTest",
											"                                        + \"&\";",
											"                }",
											"                objectUnderTest = objectUnderTest",
											"                                        + \"depth=\"",
											"                                        + filteredDepth;",
											"                alreadySomeFilterAttached = true;",
											"            }",
											"            if (filteredFields !== \"\") {",
											"                if (alreadySomeFilterAttached) {",
											"                     objectUnderTest = objectUnderTest",
											"                                        + \"&\";",
											"                }",
											"                objectUnderTest = objectUnderTest",
											"                                        + \"fields=\"",
											"                                        + filteredFields;",
											"                alreadySomeFilterAttached = true;",
											"            }",
											"        }",
											"        HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(attributeUnderTest, objectUnderTest);",
											"    } catch (error) {",
											"        HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(attributeUnderTest);",
											"    }",
											"        ",
											"    try {",
											"        var uri = \"http://\" ",
											"                    + controller.controllerAddress ",
											"                    + controller.pathToDbAndMountPoint ",
											"                    + \"/node=\" ",
											"                    + controller.nodeList[indexOfDeviceUnderTest].nodeId ",
											"                    + \"/yang-ext:mount\" ",
											"                    + objectUnderTest;",
											"        HasUriBeenDefinedForSettingTheRequestVariables(attributeUnderTest, uri);",
											"    } catch (error) {",
											"        uri = dummyUri;",
											"        HasUriBeenDefinedForSettingTheRequestVariables(attributeUnderTest);",
											"    }",
											"        ",
											"    pm.variables.set(\"uri\", uri);",
											"    pm.request.headers.upsert({key:\"Authorization\", value:controller.authorizationCode});",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});",
											"        ",
											"    // Functions",
											"    function ReplaceColonsInside(keyAttributeValue) {",
											"        return encodeURIComponent(keyAttributeValue);",
											"    }",
											"",
											"    // Self Testing Functions",
											"    function CouldInputForSettingTheRequestVariablesBeLoaded(attributeUnderTest,",
											"                                                                controller, ",
											"                                                                uri,",
											"                                                                indexOfDeviceUnderTest, ",
											"                                                                indexOfLtpUnderTest,",
											"                                                                pacUnderTest,",
											"                                                                moduleUnderTest,",
											"                                                                technologyUnderTest,",
											"                                                                classUnderTest,",
											"                                                                datatypeUnderTest,",
											"                                                                keysOfDatatypeInstanceUnderTest,",
											"                                                                filteredContent,",
											"                                                                filteredDepth,",
											"                                                                filteredFields) {",
											"        pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldInputForSettingTheRequestVariablesBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(controller).to.be.an(\"object\");",
											"            pm.expect(uri).to.be.a(\"string\");",
											"            pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
											"            pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
											"            pm.expect(pacUnderTest).to.be.a(\"string\");",
											"            pm.expect(pacUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
											"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
											"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(classUnderTest).to.be.a(\"string\");",
											"            pm.expect(classUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(datatypeUnderTest).to.be.a(\"string\");",
											"            pm.expect(keysOfDatatypeInstanceUnderTest).to.be.an(\"array\");",
											"            pm.expect(filteredContent).to.be.a(\"string\");",
											"            pm.expect(filteredDepth).to.be.a(\"number\");",
											"            pm.expect(filteredFields).to.be.a(\"string\");",
											"        });",
											"    }",
											"        ",
											"    function CouldIdPairForSettingTheRequestVariablesBeRetrieved(location, idPair) {",
											"        pm.test(\"CouldIdPairForSettingTheRequestVariablesBeRetrieved (\" + location + \")\", function () {",
											"            pm.expect(idPair.ltpUuid).to.be.a(\"string\");",
											"            pm.expect(idPair.ltpUuid).to.not.have.lengthOf(0);",
											"            pm.expect(idPair.lpLid).to.be.an(\"string\");",
											"            pm.expect(idPair.lpLid).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"    ",
											"    function HasObjectUnderTestBeenDefinedForSettingTheRequestVariables(location, objectUnderTest) {",
											"        pm.test(\"HasObjectUnderTestBeenDefinedForSettingTheRequestVariables (\" + location + \")\", function () {",
											"            pm.expect(objectUnderTest).to.be.a(\"string\");",
											"            pm.expect(objectUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"    ",
											"    function HasUriBeenDefinedForSettingTheRequestVariables(location, uri) {",
											"        pm.test(\"HasUriBeenDefinedForSettingTheRequestVariables (\" + location + \")\", function () {",
											"            pm.expect(uri).to.be.a(\"string\");",
											"            pm.expect(uri).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"SettingTheRequestVariables\", SETTING_THE_REQUEST_VARIABLES.toString() );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											" ",
											"/****************************************************************************************",
											" * Self Testing Functions",
											" ****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "CommentingResponse()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2c9ff56d-5c7d-4652-9430-3c7bf01b0597",
										"exec": [
											"console.log(\"\\n--------------------Uploading Function for Commenting GET Responses-----------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of CommentingGetResponse()",
											"* ",
											"* Function for creating a result statement on the console.log based on the Response ",
											"* Code of a GET Request.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const COMMENTING_RESPONSE = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var controller = pm.environment.get(\"controller\");",
											"        var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
											"            ",
											"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
											"            ",
											"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
											"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
											"        var positiveOutcome = pm.variables.get(\"positiveOutcome\");",
											"        var negativeOutcome = pm.variables.get(\"negativeOutcome\");",
											"        var response = pm.variables.get(\"response\");",
											"        CouldInputForCommentingResponseBeLoaded(controller, indexOfDeviceUnderTest,",
											"                                                            technologyUnderTest,",
											"                                                            classUnderTest,",
											"                                                            attributeUnderTest,",
											"                                                            positiveOutcome,",
											"                                                            negativeOutcome,",
											"                                                            response",
											"                                                );",
											"    } catch (error) {",
											"        CouldInputForCommentingResponseBeLoaded();",
											"    }",
											"        ",
											"    // Typing the comment",
											"    try {",
											"        let nameOfTheDeviceUnderTest = controller.nodeList[indexOfDeviceUnderTest].nodeId;",
											"        let objectUnderTest = technologyUnderTest + \"-\" + classUnderTest;",
											"        let responseCode = parseInt(response.code);",
											"        if (attributeUnderTest!==\"\") {",
											"            objectUnderTest = objectUnderTest",
											"                                + \"::\"",
											"                                + attributeUnderTest;",
											"        }",
											"        ",
											"        if (Math.floor(responseCode/100) === 2) {",
											"            console.log(objectUnderTest + \" at \" + nameOfTheDeviceUnderTest + positiveOutcome);",
											"        } else {",
											"            console.log(\" ERROR: \" + objectUnderTest + \" at \" + nameOfTheDeviceUnderTest ",
											"                                + negativeOutcome + \" Response Code: \" + pm.response.code);",
											"        }",
											"        CouldCommentBeComposedandPrinted(nameOfTheDeviceUnderTest, objectUnderTest);",
											"    } catch (error) {",
											"        CouldCommentBeComposedandPrinted();",
											"    }",
											"        ",
											"    // Self Testing Functions",
											"    function CouldInputForCommentingResponseBeLoaded(controller, indexOfDeviceUnderTest,",
											"                                                            technologyUnderTest,",
											"                                                            classUnderTest,",
											"                                                            attributeUnderTest,",
											"                                                            positiveOutcome,",
											"                                                            negativeOutcome,",
											"                                                            response) {",
											"        pm.test(\"CouldEnvironmentForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(controller).to.be.a(\"object\");",
											"        });",
											"        pm.test(\"CouldIndexOfDeviceForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"CouldTechnologyUnderTestForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
											"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldClassUnderTestForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(classUnderTest).to.be.a(\"string\");",
											"            pm.expect(classUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldAttributeUnderTestForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldPositiveOutcomeForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(positiveOutcome).to.be.a(\"string\");",
											"            pm.expect(positiveOutcome).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldNegativeOutcomeForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(negativeOutcome).to.be.a(\"string\");",
											"            pm.expect(negativeOutcome).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldResponseForCommentingResponseBeLoaded\", function () {",
											"            pm.expect(response).to.be.a(\"object\");",
											"        });",
											"    }",
											"    function CouldCommentBeComposedandPrinted(nameOfTheDeviceUnderTest, objectUnderTest) {",
											"        pm.test(\"CouldCommentBeComposedandPrinted\", function () {",
											"            pm.expect(nameOfTheDeviceUnderTest).to.be.a(\"string\");",
											"            pm.expect(nameOfTheDeviceUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(objectUnderTest).to.be.a(\"string\");",
											"            pm.expect(objectUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"CommentingResponse\", COMMENTING_RESPONSE.toString() );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											" * Self Testing Functions",
											" ****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Completeness()",
					"item": [
						{
							"name": "RemoveAttributeFromRequired()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "97dfb5dd-5b23-4c3a-a683-05b8e2e72f9a",
										"exec": [
											"console.log(\"\\n----------------Uploading Function for Shortening the Reference Schema--------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of RemoveAttributeFromRequired()",
											"* ",
											"* Function for removing some attribute from the list of required attributes in the ",
											"* reference schema.",
											"* ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const REMOVE_ATTRIBUTE_FROM_REQUIRED = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var schemaToBeShortened = pm.variables.get(\"schemaToBeShortened\");",
											"        var unRequiredAttribute = pm.variables.get(\"unRequiredAttribute\");",
											"        CouldInputForRemoveAttributeFromRequiredBeLoaded(schemaToBeShortened, unRequiredAttribute);",
											"    } catch (error) {",
											"        CouldInputForRemoveAttributeFromRequiredBeLoaded();",
											"    }",
											"        ",
											"    // Removing the Attribute from Required",
											"    try {",
											"        unRequiredAttribute = '\"' + unRequiredAttribute + '\"';",
											"        let schemaString = JSON.stringify(schemaToBeShortened);",
											"        let indexOfStartOfSubStringToBeDeleted = schemaString.lastIndexOf(unRequiredAttribute);",
											"        let precedingSubString = schemaString.slice(0, indexOfStartOfSubStringToBeDeleted);",
											"        const COMMA = 1;",
											"        let indexOfEndOfSubStringToBeDeleted = indexOfStartOfSubStringToBeDeleted + unRequiredAttribute.length + COMMA;",
											"        let subsequentSubString = schemaString.slice(indexOfEndOfSubStringToBeDeleted);",
											"        schemaString = precedingSubString + subsequentSubString;",
											"        var shortenedSchema = JSON.parse(schemaString);",
											"        CouldTheAttributeBeRemovedFromRequired(shortenedSchema);",
											"    } catch (error) {",
											"        CouldTheAttributeBeRemovedFromRequired();",
											"    }    ",
											"        ",
											"    // Provided Output Parameters",
											"    pm.variables.set(\"shortenedSchema\", shortenedSchema);",
											"    ",
											"    // Self Testing Functions",
											"    function CouldInputForRemoveAttributeFromRequiredBeLoaded(schemaToBeShortened, unRequiredAttribute) {",
											"        pm.test(\"CouldInputForRemoveAttributeFromRequiredBeLoaded\", function () {",
											"            pm.expect(schemaToBeShortened).to.be.a(\"object\");",
											"            pm.expect(unRequiredAttribute).to.be.a(\"string\");",
											"            pm.expect(unRequiredAttribute).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"    ",
											"    function CouldTheAttributeBeRemovedFromRequired(shortenedSchema) {",
											"        pm.test(\"CouldTheAttributeBeRemovedFromRequired\", function () {",
											"            pm.expect(shortenedSchema).to.be.an(\"object\");",
											"        });",
											"    }    ",
											"};",
											"pm.environment.set( \"RemoveAttributeFromRequired\", REMOVE_ATTRIBUTE_FROM_REQUIRED.toString() );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											" * Self Testing Functions",
											" ****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "ValidatingCompleteness()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "9cac895d-c3cf-4a74-ae7f-a7880376c5a4",
										"exec": [
											"console.log(\"\\n---------------------Uploading Function for Validating Completeness-----------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of ValidatingCompleteness()",
											"* ",
											"* Function for Validating the uploaded device response against a reference schema.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const VALIDATING_COMPLETENESS = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var controller = pm.environment.get(\"controller\");",
											"        var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
											"        var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
											"        var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
											"            ",
											"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
											"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
											"",
											"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
											"        var reference = pm.variables.get(\"schema\");",
											"        var response = pm.variables.get(\"response\");",
											"        CouldInputForValidatingCompletenessBeLoaded(controller, mantisInterfaceStatus, ",
											"                                                        indexOfDeviceUnderTest, ",
											"                                                        moduleUnderTest, ",
											"                                                        technologyUnderTest, ",
											"                                                        PrintMantisIssuesForTechnologyAndClass, ",
											"                                                        classUnderTest, ",
											"                                                        reference,",
											"                                                        response);",
											"    } catch (error) {",
											"        CouldInputForValidatingCompletenessBeLoaded();",
											"    }",
											"",
											"    // Validating Completeness",
											"    try {",
											"        var nameOfTheDeviceUnderTest = controller.nodeList[indexOfDeviceUnderTest].nodeId;",
											"        var objectUnderTest = technologyUnderTest + \"-\" + classUnderTest;",
											"        CouldLocalVariablesBeRetrieved(nameOfTheDeviceUnderTest, objectUnderTest);",
											"    } catch (error) {",
											"        CouldLocalVariablesBeRetrieved();",
											"    }",
											"        ",
											"    try {",
											"        if (response.code == 200) {",
											"            var objectInclHeadline = response.json();",
											"            var object = objectInclHeadline[moduleUnderTest + \":\" + technologyUnderTest + \"-\" + classUnderTest];",
											"            console.log(objectUnderTest + \" at \" + nameOfTheDeviceUnderTest + \" could be retrieved:\");",
											"            console.log(object);",
											"            ",
											"            console.log(objectUnderTest + \" Reference:\");               ",
											"            console.log(reference);                                     ",
											"            ",
											"            console.log(objectUnderTest + \" at \" + nameOfTheDeviceUnderTest + \" Validation Result: \");",
											"            console.log(tv4.validateMultiple(object, reference, true, true));",
											"        } else {",
											"            console.log(\" ERROR: \" + objectUnderTest + \" at \" + nameOfTheDeviceUnderTest ",
											"                            + \" could not be retrieved. Response Code: \" + response.code);",
											"        }",
											"        CouldValidationBeExecuted(true);",
											"    } catch (error) {",
											"        CouldValidationBeExecuted(false);",
											"    }",
											"        ",
											"    try {",
											"        if (mantisInterfaceStatus===\"read-only\") {",
											"            eval(PrintMantisIssuesForTechnologyAndClass)();",
											"            CouldMantisIssuesBeListed(true);",
											"        }",
											"    } catch (error) {",
											"        CouldMantisIssuesBeListed(false);",
											"    }",
											"",
											"    // Self Testing Functions",
											"    function CouldInputForValidatingCompletenessBeLoaded(controller, mantisInterfaceStatus, ",
											"                                                            indexOfDeviceUnderTest, ",
											"                                                            moduleUnderTest, ",
											"                                                            technologyUnderTest, ",
											"                                                            PrintMantisIssuesForTechnologyAndClass, ",
											"                                                            classUnderTest, ",
											"                                                            reference,",
											"                                                            response) {",
											"        pm.test(\"CouldControllerBeLoaded\", function () {",
											"            pm.expect(controller).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldMantisInterfaceStatusBeLoaded\", function () {",
											"            pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
											"        });",
											"        pm.test(\"CouldIndexOfDeviceUnderTestBeLoaded\", function () {            ",
											"            pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"CouldModuleUnderTestBeLoaded\", function () {            ",
											"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
											"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTechnologyUnderTestBeLoaded\", function () {",
											"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
											"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldPrintMantisIssuesForTechnologyAndClassBeLoaded\", function () {",
											"            pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
											"            pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldClassUnderTestBeLoaded\", function () {",
											"            pm.expect(classUnderTest).to.be.a(\"string\");",
											"            pm.expect(classUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldReferenceBeLoaded\", function () {",
											"            pm.expect(reference).to.be.a(\"object\");",
											"            pm.expect(response).to.be.a(\"object\");",
											"        });",
											"    }",
											"        ",
											"    function CouldLocalVariablesBeRetrieved(nameOfTheDeviceUnderTest, objectUnderTest) {",
											"        pm.test(\"CouldLocalVariablesBeRetrieved\", function () {",
											"            pm.expect(nameOfTheDeviceUnderTest).to.be.a(\"string\");",
											"            pm.expect(nameOfTheDeviceUnderTest).to.not.have.lengthOf(0);",
											"            pm.expect(objectUnderTest).to.be.a(\"string\");",
											"            pm.expect(objectUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"        ",
											"    function CouldValidationBeExecuted(success) {",
											"        pm.test(\"CouldValidationBeExecuted\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"        ",
											"    function CouldMantisIssuesBeListed(success) {",
											"        pm.test(\"CouldMantisIssuesBeListed\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"ValidatingCompleteness\", VALIDATING_COMPLETENESS.toString() );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											" * Self Testing Functions",
											" ****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Configuration()",
					"item": [
						{
							"name": "PreRequestOfWriting()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "99851d7f-d555-464c-a53c-6a2dad7839cc",
										"exec": [
											"console.log(\"\\n-----------Defining standard Pre-Request for Writing in Configuration Validation----------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of PreRequestOfWriting()",
											"* ",
											"* Entire Pre-Request Script of the Writing Request in all Configuration Validations.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"        ",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const PRE_REQUEST_OF_WRITING = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        pm.variables.clear();",
											"            ",
											"        var indexOfAttributeUnderTest =  pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
											"",
											"        var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
											"            ",
											"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
											"        var capability = pm.collectionVariables.get(\"capability\");",
											"        var configuration = pm.collectionVariables.get(\"configuration\");",
											"        var status = pm.collectionVariables.get(\"status\");",
											"        var attributes = pm.collectionVariables.get(\"attributes\");",
											"            ",
											"        CouldInputBeLoaded(indexOfAttributeUnderTest,",
											"                                SettingTheRequestVariables, ",
											"                                moduleUnderTest, ",
											"                                capability, ",
											"                                configuration, ",
											"                                status,",
											"                                attributes",
											"                           );",
											"    } catch (error) {",
											"        CouldInputBeLoaded(indexOfAttributeUnderTest);",
											"    }",
											"        ",
											"    // CASE SPECIFIC Parameters",
											"    try {",
											"        eval(attributes[indexOfAttributeUnderTest].CreatingDummyValueAsaString);",
											"        CouldCreatingDummyValueBeExecuted(indexOfAttributeUnderTest, true);",
											"    } catch (error) {",
											"        CouldCreatingDummyValueBeExecuted(indexOfAttributeUnderTest, false);",
											"    }",
											"        ",
											"    // Determining the Request Body",
											"    try {",
											"        var CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
											"                                                    // \"status\", \"current-problems\", \"current-performance\" ",
											"                                                    // or \"historical-performances\"",
											"            ",
											"        var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
											"        var FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
											"        var FILTERED_FIELDS = \"\";",
											"        var requestBody = '{ \"'",
											"                            + moduleUnderTest",
											"                            + ':'",
											"                            + ATTRIBUTE_UNDER_TEST",
											"                            + '\": ';",
											"        if (typeof dummyValue === \"string\") {",
											"            requestBody = requestBody",
											"                            + '\"'",
											"                            + dummyValue",
											"                            + '\" }';",
											"        } else {",
											"            requestBody = requestBody",
											"                            + dummyValue",
											"                            + ' }'; ",
											"        }",
											"        AreValuesOfInputParametersCorrect(ATTRIBUTE_UNDER_TEST, ",
											"                                            CLASS_UNDER_TEST, ",
											"                                            DATATYPE_UNDER_TEST, ",
											"                                            KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST,",
											"                                            CONTENT_TYPE, ",
											"                                            FILTER_DEPTH, ",
											"                                            FILTERED_FIELDS, ",
											"                                            requestBody",
											"                                          );",
											"    } catch (error) {",
											"        AreValuesOfInputParametersCorrect(ATTRIBUTE_UNDER_TEST);",
											"    }",
											"        ",
											"    // Setting Local Variables and Calling for Preparation of the Request",
											"    pm.variables.clear();",
											"        ",
											"    let dummyValueString = JSON.stringify(dummyValue);",
											"    console.log(\"DummyValue: \" + dummyValueString);",
											"        ",
											"    pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
											"    pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
											"    pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
											"    pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
											"    pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
											"    pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
											"    pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
											"    pm.variables.set(\"requestBody\", requestBody);",
											"    pm.variables.set(\"dummyValueString\", dummyValueString);",
											"        ",
											"    try {",
											"        eval(SettingTheRequestVariables)();",
											"        CouldFunctionForSettingTheRequestVariablesBeCalled(ATTRIBUTE_UNDER_TEST, true);",
											"    } catch (error) {",
											"        CouldFunctionForSettingTheRequestVariablesBeCalled(ATTRIBUTE_UNDER_TEST, false);",
											"    }",
											"        ",
											"    //Self Testing Functions",
											"    function CouldInputBeLoaded(indexOfAttributeUnderTest, ",
											"                                    SettingTheRequestVariables, ",
											"                                    moduleUnderTest, ",
											"                                    capability, ",
											"                                    configuration, ",
											"                                    status,",
											"                                    attributes) {",
											"        pm.test(\"CouldIndexOfAttributeUnderTestBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
											"        });   ",
											"        pm.test(\"CouldSettingTheRequestVariablesBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
											"            pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldModuleUnderTestBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
											"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldCapabilityBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(capability).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldConfigurationBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(configuration).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldStatusBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(status).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldAttributesBeLoaded (\" + indexOfAttributeUnderTest + \")\", function () {",
											"            pm.expect(attributes).to.be.an(\"array\");",
											"        });        ",
											"    }",
											"        ",
											"    function CouldCreatingDummyValueBeExecuted(location, success) {",
											"        pm.test(\"CouldCreatingDummyValueBeExecuted (\" + location + \")\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"        ",
											"    function AreValuesOfInputParametersCorrect(attributeUnderTest, ",
											"                                                classUnderTest, ",
											"                                                datatypeUnderTest, ",
											"                                                keysOfDatatypeInstanceUnderTest, ",
											"                                                contentType, ",
											"                                                filteredDepth, ",
											"                                                filteredFields, ",
											"                                                requestBody) {",
											"        pm.test(\"IsValueOfAttributeUnderTestCorrect (\" + attributeUnderTest + \")\", function() {",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"            pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"IsValueOfClassUnderTestCorrect (\" + attributeUnderTest + \")\", function() {",
											"            pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
											"                                                    \"current-problems\", \"current-performance\",",
											"                                                    \"historical-performances\"]);",
											"        });",
											"        pm.test(\"IsValueOfDatatypeUnderTestCorrect (\" + attributeUnderTest + \")\", function() {",
											"            pm.expect(datatypeUnderTest).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect (\" + attributeUnderTest + \")\", function() {",
											"            pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
											"        });",
											"        pm.test(\"IsValueOfContentTypeCorrect (\" + attributeUnderTest + \")\", function() {",
											"            pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
											"        });",
											"        pm.test(\"IsValueOfFilteredDepthCorrect (\" + attributeUnderTest + \")\", function() {",
											"            pm.expect(filteredDepth).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"IsValueOfFilteredFieldsCorrect (\" + attributeUnderTest + \")\", function() {",
											"            pm.expect(filteredFields).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"IsValueOfRequestBodyCorrect (\" + attributeUnderTest + \")\", function() {",
											"            pm.expect(requestBody).to.be.a(\"string\");",
											"            pm.expect(requestBody).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"        ",
											"    function CouldFunctionForSettingTheRequestVariablesBeCalled(location, success) {",
											"        pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled (\" + location + \")\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"PreRequestOfWritingAsaString\", ConvertingThisFunctionToString(PRE_REQUEST_OF_WRITING) );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"function ConvertingThisFunctionToString(functionToBeConverted) {",
											"    let functionAsAString = String(functionToBeConverted);",
											"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
											"    return functionAsAString.slice(indexOfFirstCurly);",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Self Testing Functions",
											"****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PreRequestOfReading()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "72cd1814-f46d-4cf5-9917-61057587a0e1",
										"exec": [
											"console.log(\"\\n-----------Defining standard Pre-Request for Reading in Configuration Validation----------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of PreRequestOfReading()",
											"* ",
											"* Entire Pre-Request Script of the Reading Request in all Configuration Validations.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"        ",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const PRE_REQUEST_OF_READING = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
											"        CouldInputBeLoaded(SettingTheRequestVariables);",
											"    } catch (error) {",
											"        CouldInputBeLoaded();",
											"    }",
											"        ",
											"    // Setting Local Variables and Calling for Preparation of the Request",
											"    const CONTENT_TYPE = \"config\";              // choose from \"\", \"config\" or \"nonconfig\"",
											"    const REQUEST_BODY = \"\";",
											"        ",
											"    AreValuesOfInputParametersCorrect(CONTENT_TYPE, REQUEST_BODY);",
											"        ",
											"    pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
											"    pm.variables.set(\"requestBody\", REQUEST_BODY);",
											"        ",
											"    try {",
											"        eval(SettingTheRequestVariables)();",
											"        CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
											"    } catch (error) {",
											"        CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
											"    }",
											"        ",
											"    // Self Testing Functions",
											"    function CouldInputBeLoaded(SettingTheRequestVariables) {",
											"        pm.test(\"CouldInputBeLoaded\", function () {",
											"            pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
											"            pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"        ",
											"    function AreValuesOfInputParametersCorrect(contentType, requestBody) {",
											"        pm.test(\"IsValueOfContentTypeCorrect\", function() {",
											"            pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
											"        });",
											"        pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
											"            pm.expect(requestBody).to.be.a(\"string\");",
											"        });",
											"    }",
											"        ",
											"    function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
											"        pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"PreRequestOfReadingAsaString\", ConvertingThisFunctionToString(PRE_REQUEST_OF_READING) );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"function ConvertingThisFunctionToString(functionToBeConverted) {",
											"    let functionAsAString = String(functionToBeConverted);",
											"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
											"    return functionAsAString.slice(indexOfFirstCurly);",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Self Testing Functions",
											"****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PostRequestOfReading()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "dde04577-071e-41ee-a8e5-c0686d70f83d",
										"exec": [
											"console.log(\"\\n----------Defining standard Post-Request for Reading in Configuration Validation----------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of PostRequestOfReading()",
											"* ",
											"* Entire Post-Request Script of the Reading Request in all Configuration Validations.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"        ",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const POST_REQUEST_OF_READING = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
											"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
											"        CouldInputForGetResultValueBeLoaded(attributeUnderTest, moduleUnderTest);",
											"    } catch (error) {",
											"        CouldInputForGetResultValueBeLoaded();",
											"    }",
											"        ",
											"    // Retrieving ResultValue",
											"    try {",
											"        let response = pm.response;",
											"            ",
											"        var responseCode = parseInt(response.code);",
											"            ",
											"        let responseBody = JSON.parse(response.stream);",
											"        let completeAttributeName = moduleUnderTest + ':' + attributeUnderTest;",
											"        let responseValue = responseBody[completeAttributeName];",
											"        var responseValueString = JSON.stringify(responseValue);",
											"        console.log(\"ResultValue: \" + responseValueString);",
											"            ",
											"        CouldResponseBeRetrieved(attributeUnderTest, responseValueString, responseCode);",
											"    } catch (error) {",
											"        CouldResponseBeRetrieved(attributeUnderTest, responseValueString, responseCode);",
											"    }",
											"        ",
											"    // Setting Local Variables",
											"    pm.variables.set(\"resultValueString\", responseValueString);",
											"    pm.variables.set(\"resultCode\", responseCode);",
											"        ",
											"    // Self Testing Functions",
											"    function CouldInputForGetResultValueBeLoaded(attributeUnderTest, moduleUnderTest) {",
											"        pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"            pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldModuleUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
											"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"        ",
											"    function CouldResponseBeRetrieved(location, responseValueString, responseCode) {",
											"        pm.test(\"CouldResponseValueStringBeRetrieved (\" + location + \")\", function () {",
											"            pm.expect(responseValueString).to.be.a(\"string\");",
											"            pm.expect(responseValueString).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldResponseCodeBeRetrieved (\" + location + \")\", function () {",
											"            pm.expect(responseCode).to.be.a(\"number\");",
											"        });",
											"    }   ",
											"};",
											"pm.environment.set( \"PostRequestOfReadingAsaString\", ConvertingThisFunctionToString(POST_REQUEST_OF_READING) );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"function ConvertingThisFunctionToString(functionToBeConverted) {",
											"    let functionAsAString = String(functionToBeConverted);",
											"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
											"    return functionAsAString.slice(indexOfFirstCurly);",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Self Testing Functions",
											"****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PreRequestOfEvaluating()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "b3e00a40-737b-4e37-827b-037ef3cb3102",
										"exec": [
											"console.log(\"\\n---------Defining standard Pre-Request for Evaluating in Configuration Validation---------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of PreRequestOfEvaluating()",
											"* ",
											"* Entire Pre-Request Script of the Evaluating Request in all Configuration Validations.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"        ",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const PRE_REQUEST_OF_EVALUATING = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
											"            ",
											"        var dummyUri = pm.environment.get(\"dummyUri\");",
											"        var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
											"        var PrintMantisIssuesForTechnologyAndClass = pm.environment.get(\"PrintMantisIssuesForTechnologyAndClass\");",
											"            ",
											"        var responseCodeForOperationFailed = pm.collectionVariables.get(\"responseCodeForOperationFailed\");",
											"        var capability = pm.collectionVariables.get(\"capability\");",
											"        var configuration = pm.collectionVariables.get(\"configuration\");",
											"        var status = pm.collectionVariables.get(\"status\");",
											"        var attributes = pm.collectionVariables.get(\"attributes\");",
											"        var indexOfAttributeUnderTest =  pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
											"        var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
											"            ",
											"        var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
											"        var keysOfDatatypeInstanceUnderTest = pm.variables.get(\"keysOfDatatypeInstanceUnderTest\");",
											"            ",
											"        var dummyValueString = pm.variables.get(\"dummyValueString\");",
											"        var dummyCode = pm.variables.get(\"dummyCode\");",
											"        var dummyErrorMessage = pm.variables.get(\"dummyErrorMessage\"); ",
											"        var resultValueString = pm.variables.get(\"resultValueString\");",
											"        var resultCode = pm.variables.get(\"resultCode\");",
											"            ",
											"        if ( (datatypeUnderTest===undefined) || (datatypeUnderTest===\"\") ) {",
											"            var NameOfAttributeUnderTest = attributeUnderTest;",
											"        } else {",
											"            var NameOfAttributeUnderTest = datatypeUnderTest + \"/\" + attributeUnderTest;",
											"        }",
											"    } catch (error) { }",
											"    CouldTheInputBeLoaded(attributeUnderTest,",
											"                            dummyUri, ",
											"                            mantisInterfaceStatus, ",
											"                            PrintMantisIssuesForTechnologyAndClass,",
											"                            responseCodeForOperationFailed,",
											"                            capability,",
											"                            configuration,",
											"                            status,",
											"                            attributes,",
											"                            indexOfAttributeUnderTest,",
											"                            configurationValidationResults,",
											"                            datatypeUnderTest,",
											"                            keysOfDatatypeInstanceUnderTest,",
											"                            dummyValueString,",
											"                            dummyCode,",
											"                            dummyErrorMessage,",
											"                            resultValueString,",
											"                            resultCode,",
											"                            NameOfAttributeUnderTest",
											"                         );",
											"        ",
											"    // CASE SPECIFIC Parameters",
											"    try {",
											"        var aCaseSpecificEvaluationHasBeenDefined;",
											"        if ( attributes[indexOfAttributeUnderTest].EvaluatingResultAsaString === \"{}\" ) {",
											"            aCaseSpecificEvaluationHasBeenDefined = false;",
											"        } else {",
											"            aCaseSpecificEvaluationHasBeenDefined = true;",
											"        }",
											"        ",
											"        var defaultValueString = \"\";",
											"        try {",
											"            defaultValueString ",
											"                = JSON.stringify(attributes[indexOfAttributeUnderTest].defaultValueForStandardEvaluation);",
											"        } catch (error) { }",
											"        ",
											"        var capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
											"        var capabilitiesAreIndicatingThatFeatureNotSupported = true;",
											"        try {",
											"            capabilityAttributeToBeFalseIfFeatureNotSupported ",
											"                = attributes[indexOfAttributeUnderTest].capabilityAttributeToBeFalseIfFeatureNotSupported;",
											"                ",
											"            console.log(\"capabilityAttributeToBeFalseIfFeatureNotSupported: \" + capabilityAttributeToBeFalseIfFeatureNotSupported);  // for debugging only",
											"            ",
											"            if ( capabilityAttributeToBeFalseIfFeatureNotSupported !== \"\" ) {",
											"                if ( capability[capabilityAttributeToBeFalseIfFeatureNotSupported] === false) {",
											"                    capabilitiesAreIndicatingThatFeatureNotSupported = true;",
											"                } else {",
											"                    capabilitiesAreIndicatingThatFeatureNotSupported = false;",
											"                }",
											"            }",
											"        } catch (error) { }",
											"            ",
											"        if ( aCaseSpecificEvaluationHasBeenDefined === true ) {",
											"            ",
											"            console.log(\"case specific evaluation is available for \" + NameOfAttributeUnderTest);       // for debugging only",
											"            ",
											"            eval(attributes[indexOfAttributeUnderTest].EvaluatingResultAsaString);",
											"            ",
											"        } else {",
											"            ",
											"            console.log(\"standard evaluation will be executed for \" + NameOfAttributeUnderTest);       // for debugging only",
											"            ",
											"            if ( Math.floor(resultCode/100) === 2 ) {",
											"                ",
											"                if ( (Math.floor(dummyCode/100)===2) && (resultValueString===dummyValueString) ) {",
											"                    configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
											"                    ",
											"                } else if ( dummyCode === responseCodeForOperationFailed ) {",
											"console.log(\"ErrorMessageIsIndicatingANotSupported(dummyErrorMessage): \" + ErrorMessageIsIndicatingANotSupported(dummyErrorMessage));       // for debugging only",
											"console.log(\"capabilitiesAreIndicatingThatFeatureNotSupported: \" + capabilitiesAreIndicatingThatFeatureNotSupported);       // for debugging only",
											"console.log(\"resultValueString===defaultValueString: \" + (resultValueString===defaultValueString));       // for debugging only",
											"                    if ( (ErrorMessageIsIndicatingANotSupported(dummyErrorMessage)===true) ",
											"                            && (capabilitiesAreIndicatingThatFeatureNotSupported===true)",
											"                            && (resultValueString===defaultValueString) ) {",
											"                        configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
											"                        ",
											"                    } else if ( ErrorMessageIsIndicatingADummyOutOfRange(dummyErrorMessage) === true ) {",
											"                        configurationValidationResults[NameOfAttributeUnderTest] = \"dummyValue out of hardware range\";",
											"                        ",
											"                    } else if ( ErrorMessageIsIndicatingAContradictingDummy(dummyErrorMessage) === true ) {",
											"                        configurationValidationResults[NameOfAttributeUnderTest] = \"dummyValue contradicts existing configuration\";",
											"                        ",
											"                    } else {",
											"                        configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable on application layer\";",
											"                    }",
											"                    ",
											"                } else {",
											"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable on server layer\";",
											"                }",
											"                ",
											"            } else {",
											"                configurationValidationResults[NameOfAttributeUnderTest] = \"not existing\";",
											"            }",
											"        }",
											"            ",
											"        CouldResultEvaluationBeExecuted(attributeUnderTest, ",
											"                                            resultCode, ",
											"                                            dummyCode, ",
											"                                            resultValueString, ",
											"                                            dummyValueString,",
											"                                            dummyErrorMessage,",
											"                                            defaultValueString, ",
											"                                            configurationValidationResults[NameOfAttributeUnderTest]",
											"                                        );",
											"    } catch (error) {",
											"        CouldResultEvaluationBeExecuted(attributeUnderTest);",
											"    }    ",
											"        ",
											"    // console.log",
											"    console.log(\"EvaluationResult: \" + configurationValidationResults[NameOfAttributeUnderTest]);",
											"        ",
											"    try {",
											"        if (mantisInterfaceStatus===\"read-only\") {",
											"            eval(PrintMantisIssuesForTechnologyAndClass)();",
											"            CouldMantisIssuesBeListed(attributeUnderTest, true);",
											"        }",
											"    } catch (error) {",
											"        CouldMantisIssuesBeListed(attributeUnderTest, false);",
											"    }",
											"        ",
											"    // Output provided to the Collection Variables",
											"    pm.collectionVariables.set(\"configurationValidationResults\", configurationValidationResults);",
											"        ",
											"    // Setting up Local Variables and Preparing the Request",
											"    try {",
											"        pm.variables.set(\"uri\", dummyUri);",
											"        pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"        CouldTheRequestBePrepared(attributeUnderTest, true);",
											"    } catch (error) {",
											"        CouldTheRequestBePrepared(attributeUnderTest, false);",
											"    }",
											"    ",
											"    // Functions",
											"    function DistillingOnfErrorMessageFrom(dummyErrorMessage) {",
											"        let indexOfStartTag = dummyErrorMessage.indexOf(\"#[onf:\");",
											"        let indexOfEndTag = dummyErrorMessage.indexOf(\"]#\");",
											"        return dummyErrorMessage.slice(indexOfStartTag+6, indexOfEndTag);",
											"    }",
											"        ",
											"    function ErrorMessageIsIndicatingANotSupported(dummyErrorMessage) {",
											"        ",
											"        return true;            // to be deleted after 20th of May 2020",
											"        ",
											"        onfErrorMessage = DistillingOnfErrorMessageFrom(dummyErrorMessage);",
											"        if ( onfErrorMessage === \"Attribute/feature not supported by the hardware.\" ) {",
											"            return true;",
											"        } else {",
											"            return false;",
											"        }",
											"    }",
											"        ",
											"    function ErrorMessageIsIndicatingADummyOutOfRange() {",
											"        onfErrorMessage = DistillingOnfErrorMessageFrom(dummyErrorMessage);",
											"        if ( onfErrorMessage === \"Configuration value out of range of hardware capabilities.\" ) {",
											"            return true;",
											"        } else {",
											"            return false;",
											"        }",
											"    }",
											"        ",
											"    function ErrorMessageIsIndicatingAContradictingDummy() {",
											"        onfErrorMessage = DistillingOnfErrorMessageFrom(dummyErrorMessage);",
											"        if ( onfErrorMessage === \"Wished change contradicts existing configuration.\" ) {",
											"            return true;",
											"        } else {",
											"            return false;",
											"        }",
											"    }",
											"        ",
											"    // Self Testing Functions",
											"    function CouldTheInputBeLoaded(attributeUnderTest,",
											"                                        dummyUri, ",
											"                                        mantisInterfaceStatus, ",
											"                                        PrintMantisIssuesForTechnologyAndClass,",
											"                                        responseCodeForOperationFailed,",
											"                                        capability,",
											"                                        configuration,",
											"                                        status,",
											"                                        attributes,",
											"                                        indexOfAttributeUnderTest,",
											"                                        configurationValidationResults,",
											"                                        datatypeUnderTest,",
											"                                        keysOfDatatypeInstanceUnderTest,",
											"                                        dummyValueString,",
											"                                        dummyCode,",
											"                                        dummyErrorMessage,",
											"                                        resultValueString,",
											"                                        resultCode,",
											"                                        NameOfAttributeUnderTest) {",
											"        pm.test(\"CouldTheAttributeUnderTestBeLoaded\", function () {",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"            pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTheDummyUriBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(dummyUri).to.be.a(\"string\");",
											"            pm.expect(dummyUri).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTheMantisInterfaceStatusBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
											"        });",
											"        pm.test(\"CouldPrintMantisIssuesForTechnologyAndClassBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(PrintMantisIssuesForTechnologyAndClass).to.be.a(\"string\");",
											"            pm.expect(PrintMantisIssuesForTechnologyAndClass).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTheResponseCodeForOperationFailedBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(responseCodeForOperationFailed).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"CouldTheCapabilityBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(capability).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldTheConfigurationBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(configuration).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldTheStatusBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(status).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldAttributesBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(attributes).to.be.an(\"array\");",
											"        }); ",
											"        pm.test(\"CouldIndexOfAttributeUnderTestBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
											"        });    ",
											"        pm.test(\"CouldTheConfigurationValidationResultsBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(configurationValidationResults).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldTheDatatypeUnderTestBeLoaded (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(datatypeUnderTest).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldTheKeysOfDatatypeInstanceUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(keysOfDatatypeInstanceUnderTest).to.be.an(\"array\");",
											"        });",
											"        pm.test(\"CouldTheDummyValueStringBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(dummyValueString).to.be.a(\"string\");",
											"            pm.expect(dummyValueString).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTheDummyCodeBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(dummyCode).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"CouldTheDummyErrorMessageBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(dummyErrorMessage).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldTheResultValueStringBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(resultValueString).to.be.a(\"string\");",
											"            pm.expect(resultValueString).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTheResultCodeBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(resultCode).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"CouldTheNameOfAttributeUnderTestBeCombined (\" + attributeUnderTest+ \")\", function () {",
											"            pm.expect(NameOfAttributeUnderTest).to.be.a(\"string\");",
											"            pm.expect(NameOfAttributeUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"        ",
											"    function CouldResultEvaluationBeExecuted(location,",
											"                                                resultCode, ",
											"                                                dummyCode, ",
											"                                                resultValueString, ",
											"                                                dummyValueString, ",
											"                                                dummyErrorMessage,",
											"                                                defaultValueString, ",
											"                                                configurationValidationResult",
											"                                            ) {",
											"        pm.test(\"WasResultCodeAvailable (\" + location + \")\", function () {",
											"            pm.expect(resultCode).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"WasDummyCodeAvailable (\" + location + \")\", function () {",
											"            pm.expect(dummyCode).to.be.a(\"number\");",
											"        });",
											"        pm.test(\"WasResultValueStringAvailable (\" + location + \")\", function () {",
											"            pm.expect(resultValueString).to.be.a(\"string\");",
											"            pm.expect(resultValueString).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"WasDummyValueStringAvailable (\" + location + \")\", function () {",
											"            pm.expect(dummyValueString).to.be.a(\"string\");",
											"            pm.expect(dummyValueString).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"WasDummyErrorMessageAvailable (\" + location + \")\", function () {            ",
											"            pm.expect(dummyErrorMessage).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"WasDefaultValueStringAvailable (\" + location + \")\", function () {            ",
											"            pm.expect(defaultValueString).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldConfigurationValidationResultBeCalculated (\" + location + \")\", function () {            ",
											"            pm.expect(configurationValidationResult).to.be.a(\"string\");",
											"            pm.expect(configurationValidationResult).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"        ",
											"    function CouldMantisIssuesBeListed(location, success) {",
											"        pm.test(\"CouldMantisIssuesBeListed (\" + location + \")\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"        ",
											"    function CouldTheRequestBePrepared(location, success) {",
											"        pm.test(\"CouldTheRequestBePrepared (\" + location + \")\", function () {",
											"            pm.expect(success).to.be.true;",
											"            pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"            pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"PreRequestOfEvaluatingAsaString\", ConvertingThisFunctionToString(PRE_REQUEST_OF_EVALUATING) );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"function ConvertingThisFunctionToString(functionToBeConverted) {",
											"    let functionAsAString = String(functionToBeConverted);",
											"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
											"    return functionAsAString.slice(indexOfFirstCurly);",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Self Testing Functions",
											"****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "PreRequestOfRestoring()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "ba83234f-47e1-487a-9af2-d706ba265ecd",
										"exec": [
											"console.log(\"\\n----------Defining standard Pre-Request for Restoring in Configuration Validation---------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of PreRequestOfRestoring()",
											"* ",
											"* Entire Pre-Request Script of the Restoring Request in all Configuration Validations.",
											"*  ",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"        ",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const PRE_REQUEST_OF_RESTORING = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var attributeUnderTest = pm.variables.get(\"attributeUnderTest\");",
											"            ",
											"        var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
											"            ",
											"        var configuration = pm.collectionVariables.get(\"configuration\");",
											"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
											"            ",
											"        var datatypeUnderTest = pm.variables.get(\"datatypeUnderTest\");",
											"        var keysOfDatatypeInstanceUnderTest = pm.variables.get(\"keysOfDatatypeInstanceUnderTest\");",
											"            ",
											"        CouldInputBeLoaded(attributeUnderTest,",
											"                                SettingTheRequestVariables, ",
											"                                configuration, ",
											"                                moduleUnderTest,",
											"                                datatypeUnderTest,",
											"                                keysOfDatatypeInstanceUnderTest",
											"                           );",
											"    } catch (error) {",
											"        CouldInputBeLoaded(attributeUnderTest);",
											"    }",
											"        ",
											"    // Determining the Request Body",
											"    try {",
											"        var originalValue;",
											"        if ( (typeof datatypeUnderTest==\"undefined\") || (datatypeUnderTest===\"\") ) {",
											"            originalValue = configuration[attributeUnderTest];",
											"        } else {",
											"            let instanceIndexUnderTest = InstanceIndexOf(keysOfDatatypeInstanceUnderTest[0], datatypeUnderTest, configuration);",
											"            originalValue = configuration[datatypeUnderTest][instanceIndexUnderTest][attributeUnderTest];",
											"        }",
											"            ",
											"        var CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
											"        var requestBody = '{ \"'",
											"                            + moduleUnderTest",
											"                            + ':'",
											"                            + attributeUnderTest",
											"                            + '\": ';",
											"        if (typeof originalValue === \"string\") {",
											"            requestBody = requestBody",
											"                            + '\"'",
											"                            + originalValue",
											"                            + '\" }';",
											"        } else {",
											"            requestBody = requestBody",
											"                            + originalValue",
											"                            + ' }'; ",
											"        }",
											"        AreValuesOfTheRequestBodyCorrect(attributeUnderTest, originalValue, CONTENT_TYPE, requestBody);",
											"    } catch (error) {",
											"        AreValuesOfTheRequestBodyCorrect(attributeUnderTest);",
											"    }",
											"        ",
											"    // Setting Local Variables and Calling for Preparation of the Request",
											"    pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
											"    pm.variables.set(\"requestBody\", requestBody);",
											"        ",
											"    try {",
											"        eval(SettingTheRequestVariables)();",
											"        CouldFunctionForSettingTheRequestVariablesBeCalled(attributeUnderTest, true);",
											"    } catch (error) {",
											"        CouldFunctionForSettingTheRequestVariablesBeCalled(attributeUnderTest, false);",
											"    }",
											"        ",
											"    // Functions",
											"    function InstanceIndexOf(keyValueOfInstanceUnderTest, datatypeUnderTest, configuration) {",
											"        for (let i=0; i<(configuration[datatypeUnderTest].length); i++) {",
											"            let sampleName = configuration[datatypeUnderTest][i][keyValueOfInstanceUnderTest.key];",
											"            if ( sampleName === keyValueOfInstanceUnderTest.value ) {",
											"                return i;",
											"            }",
											"        }",
											"    }",
											"        ",
											"    //Self Testing Functions",
											"    function CouldInputBeLoaded(attributeUnderTest,",
											"                                    SettingTheRequestVariables, ",
											"                                    configuration, ",
											"                                    moduleUnderTest,",
											"                                    datatypeUnderTest,",
											"                                    keysOfDatatypeInstanceUnderTest) {",
											"        pm.test(\"CouldAttributeUnderTestBeLoaded\", function () {",
											"            pm.expect(attributeUnderTest).to.be.a(\"string\");",
											"            pm.expect(attributeUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldSettingTheRequestVariablesBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
											"            pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldConfigurationBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(configuration).to.be.an(\"object\");",
											"        });",
											"        pm.test(\"CouldModuleUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
											"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldDatatypeUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(datatypeUnderTest).to.be.a(\"string\");",
											"        });",
											"        pm.test(\"CouldKeysOfDatatypeInstanceUnderTestBeLoaded (\" + attributeUnderTest + \")\", function () {",
											"            pm.expect(keysOfDatatypeInstanceUnderTest[0]).to.be.an(\"object\");",
											"        });",
											"    }",
											"        ",
											"    function AreValuesOfTheRequestBodyCorrect(location, originalValue, contentType, requestBody) {",
											"        pm.test(\"CouldTheOriginalValueBeRead (\" + location + \")\", function() {",
											"            pm.expect(originalValue).to.not.be.undefined;",
											"        });",
											"        pm.test(\"IsValueOfContentTypeCorrect (\" + location + \")\", function() {",
											"            pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
											"        });",
											"        pm.test(\"IsValueOfRequestBodyCorrect (\" + location + \")\", function() {",
											"            pm.expect(requestBody).to.be.a(\"string\");",
											"            pm.expect(requestBody).to.not.have.lengthOf(0);",
											"        });",
											"    }",
											"        ",
											"    function CouldFunctionForSettingTheRequestVariablesBeCalled(location, success) {",
											"        pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled (\" + location + \")\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"};",
											"pm.environment.set( \"PreRequestOfRestoringAsaString\", ConvertingThisFunctionToString(PRE_REQUEST_OF_RESTORING) );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											"* Functions",
											"****************************************************************************************/",
											"function ConvertingThisFunctionToString(functionToBeConverted) {",
											"    let functionAsAString = String(functionToBeConverted);",
											"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
											"    return functionAsAString.slice(indexOfFirstCurly);",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Self Testing Functions",
											"****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "UploadingInterfaceInformation()",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "4177dbe3-f964-40f8-80d5-0ba64fb0f032",
										"exec": [
											"console.log(\"\\n-----------------Uploading Function for Uploading Interface Information-------------------\");",
											"/****************************************************************************************",
											"* ",
											"* Definition of UploadingInterfaceInformation()",
											"* ",
											"* Defines code that is shared by UploadingInterfaceCapability and ",
											"* UploadingInterfaceConfiguration in the Tests script.",
											"*",
											"****************************************************************************************/",
											"",
											"",
											"/****************************************************************************************",
											"* Required Input Parameters",
											"****************************************************************************************/",
											"try {",
											"    var dummyUri = pm.environment.get(\"dummyUri\");",
											"    CouldTheInputBeLoaded(dummyUri);",
											"} catch (error) {",
											"    CouldTheInputBeLoaded();",
											"}",
											"",
											"",
											"/****************************************************************************************",
											"* Provided Collection Variables ",
											"****************************************************************************************/",
											"const UPLOADING_INTERFACE_INFORMATION = () => {",
											"    // Required Input Parameters",
											"    try {",
											"        var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
											"        var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
											"        var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
											"        var classUnderTest = pm.variables.get(\"classUnderTest\");",
											"        var response = pm.variables.get(\"response\");",
											"        CouldInputForUploadingInterfaceInformationBeLoaded(moduleUnderTest, ",
											"                                                                technologyUnderTest, ",
											"                                                                CommentingResponse, ",
											"                                                                classUnderTest,",
											"                                                                response",
											"                                                            );",
											"    } catch (error) {",
											"        CouldInputForUploadingInterfaceInformationBeLoaded();",
											"    }",
											"    ",
											"    // Commenting the ResponseCode",
											"    pm.variables.set(\"positiveOutcome\", \" successfully uploaded.\");",
											"    pm.variables.set(\"negativeOutcome\", \" could not be retrieved.\");",
											"    try {",
											"        eval(CommentingResponse)();",
											"        CouldCommentingResponseBeSuccessfullyCalled(true);",
											"    } catch (error) {",
											"        CouldCommentingResponseBeSuccessfullyCalled(false);",
											"    }",
											"    ",
											"    // Extracting Uploaded Information",
											"    try {",
											"        let objectInclHeadline;",
											"        var objectWithoutHeadline;",
											"        if (response.code == 200) {",
											"            objectInclHeadline = response.json();",
											"            objectWithoutHeadline = objectInclHeadline[moduleUnderTest ",
											"                                                            + \":\" ",
											"                                                            + technologyUnderTest ",
											"                                                            + \"-\" ",
											"                                                            + classUnderTest",
											"                                                        ];",
											"        }",
											"        CouldInformationBeSuccessfullyUploaded(response.code, objectWithoutHeadline);",
											"    } catch (error) {",
											"        CouldInformationBeSuccessfullyUploaded();",
											"    }",
											"    ",
											"    // Provided Output Parameters",
											"    pm.collectionVariables.set(classUnderTest, objectWithoutHeadline);",
											"        ",
											"    // Self Testing Functions",
											"    function CouldInputForUploadingInterfaceInformationBeLoaded(moduleUnderTest, ",
											"                                                                technologyUnderTest, ",
											"                                                                CommentingResponse, ",
											"                                                                classUnderTest,",
											"                                                                response) {",
											"        pm.test(\"CouldModuleUnderTestForUploadingInterfaceInformationBeLoaded\", function () {",
											"            pm.expect(moduleUnderTest).to.be.a(\"string\");",
											"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldTechnologyUnderTestForUploadingInterfaceInformationBeLoaded\", function () {",
											"            pm.expect(technologyUnderTest).to.be.a(\"string\");",
											"            pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldCommentingResponseForUploadingInterfaceInformationBeLoaded\", function () {",
											"            pm.expect(CommentingResponse).to.be.a(\"string\");",
											"            pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldClassUnderTestForUploadingInterfaceInformationBeLoaded\", function () {",
											"            pm.expect(classUnderTest).to.be.a(\"string\");",
											"            pm.expect(classUnderTest).to.not.have.lengthOf(0);",
											"        });",
											"        pm.test(\"CouldResponseForUploadingInterfaceInformationBeLoaded\", function () {",
											"            pm.expect(response).to.be.a(\"object\");",
											"        });",
											"    }",
											"        ",
											"    function CouldCommentingResponseBeSuccessfullyCalled(success) {",
											"        pm.test(\"CouldCommentingResponseBeSuccessfullyCalled\", function () {",
											"            pm.expect(success).to.be.true;",
											"        });",
											"    }",
											"    ",
											"    function CouldInformationBeSuccessfullyUploaded(responseCode, response) {",
											"        pm.test(\"CouldInformationBeSuccessfullyUploaded\", function () {",
											"            pm.expect(responseCode).to.equal(200);",
											"            pm.expect(response).to.be.a(\"object\");",
											"        });",
											"    }    ",
											"};",
											"pm.environment.set( \"UploadingInterfaceInformation\", UPLOADING_INTERFACE_INFORMATION.toString() );",
											"",
											"",
											"/****************************************************************************************",
											"* Setting up Local Variables and Preparing the Request",
											"****************************************************************************************/",
											"pm.variables.clear();",
											"try {",
											"    pm.variables.set(\"uri\", dummyUri);",
											"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
											"} catch (error) { }",
											"CouldTheRequestBePrepared();",
											"",
											"",
											"/****************************************************************************************",
											" * Self Testing Functions",
											" ****************************************************************************************/",
											"function CouldTheInputBeLoaded(uri) {",
											"    pm.test(\"CouldTheInputBeLoaded\", function () {",
											"        pm.expect(uri).to.be.a(\"string\");",
											"        pm.expect(uri).to.not.have.lengthOf(0);",
											"    });",
											"}",
											"",
											"function CouldTheRequestBePrepared() {",
											"    pm.test(\"CouldTheRequestBePrepared\", function () {",
											"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
											"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
											"    });",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{uri}}",
									"host": [
										"{{uri}}"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7e88a70d-3f92-49dd-a820-e36f32cf7a75",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "4b52351b-77c9-4afe-8d86-33e4886cf031",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "EnvironmentInformationLoading",
			"item": [
				{
					"name": "StartPointDeviceTesting",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fb11531e-8aee-4289-abc9-1a7e486a5266",
								"exec": [
									"console.log(\"\\n######################## StartingPoint of Validation of a Device #########################\");",
									"/****************************************************************************************",
									"* ",
									"* StartPoint",
									"* ",
									"* Manages the number of iterations over several devices in the environment",
									"* ",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var multiplicityOfDeviceIterations = pm.environment.get(\"multiplicityOfDeviceIterations\");",
									"    var controller = pm.environment.get(\"controller\");",
									"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, multiplicityOfDeviceIterations, dummyUri);",
									"} catch (error) {",
									"    CouldTheInputBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Displaying ",
									"****************************************************************************************/",
									"try {",
									"    var numberOfExistingDevices = controller.nodeList.length;",
									"    var maximumIndexOfDeviceUnderTest;",
									"    switch (multiplicityOfDeviceIterations) {",
									"        case \"none\":",
									"            maximumIndexOfDeviceUnderTest = -1;",
									"            break;",
									"        case \"one\":",
									"            maximumIndexOfDeviceUnderTest = Math.min( 0, (numberOfExistingDevices-1) );",
									"            break;",
									"        case \"all\":",
									"            maximumIndexOfDeviceUnderTest = (numberOfExistingDevices-1);",
									"            break;",
									"    }",
									"    CouldMaximumIndexOfDeviceUnderTestBeDetermined(maximumIndexOfDeviceUnderTest);",
									"} catch (error) {",
									"    CouldMaximumIndexOfDeviceUnderTestBeDetermined();",
									"}    ",
									"try {",
									"    if (indexOfDeviceUnderTest<=maximumIndexOfDeviceUnderTest) {",
									"        postman.setNextRequest();",
									"        console.log(\"Testing of the \" + (indexOfDeviceUnderTest+1) + \". out of \" ",
									"                        + (maximumIndexOfDeviceUnderTest+1) ",
									"                        + \" Devices will be started.\");",
									"    } else {",
									"        postman.setNextRequest(\"EndPointInterfaceValidator\");",
									"        console.log(\"Proceeding with terminating the Interface Validator.\");",
									"    }",
									"    CouldFurtherProceedingBeDetermined(true);",
									"} catch (error) {",
									"    CouldFurtherProceedingBeDetermined(false);",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheRequestBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, ",
									"                                multiplicityOfDeviceIterations, uri) {",
									"    pm.test(\"CouldTheInputBeLoaded\", function () {",
									"        pm.expect(controller).to.be.an(\"object\");",
									"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
									"        pm.expect(multiplicityOfDeviceIterations).to.be.a(\"string\");",
									"        pm.expect(multiplicityOfDeviceIterations).to.not.have.lengthOf(0);",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldMaximumIndexOfDeviceUnderTestBeDetermined(maximumIndexOfDeviceUnderTest) {",
									"    pm.test(\"CouldMaximumIndexOfDeviceUnderTestBeDetermined\", function () {",
									"        pm.expect(maximumIndexOfDeviceUnderTest).to.be.a(\"number\");",
									"    });",
									"}",
									"",
									"function CouldFurtherProceedingBeDetermined(success) {",
									"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
									"        pm.expect(success).to.be.true;",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "LoadingMantisIssues",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "87c8a7f0-deb9-427f-bae4-ee3bac485162",
								"exec": [
									"console.log(\"\\n----------------------------------Loading Mantis Issues-----------------------------------\");",
									"/****************************************************************************************",
									"* ",
									"* Loading Mantis Issues",
									"*  ",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
									"    var controller = pm.environment.get(\"controller\");",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
									"    CouldInputForLoadingMantisIssuesBeLoaded(mantisInterfaceStatus, controller, ",
									"                                            dummyUri, ",
									"                                            indexOfDeviceUnderTest",
									"                                           );",
									"} catch (error) {",
									"    CouldInputForLoadingMantisIssuesBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    if (mantisInterfaceStatus===\"read-only\" || mantisInterfaceStatus===\"read-write\") {",
									"        var vendor = controller.nodeList[indexOfDeviceUnderTest].vendor;",
									"        var mantisAuthorizationCode = controller.nodeList[indexOfDeviceUnderTest].mantisAuthorizationCode;",
									"        var uri = \"https://\" + vendor + \".bugtracker.openBackhaul.com/api/rest/issues\";",
									"        CouldTheMantisUriBeComposed(vendor, mantisAuthorizationCode, uri);",
									"    } else {",
									"        console.log(\"Loading Mantis Issues has been configured to be switched-off.\")",
									"        uri = dummyUri;",
									"    }",
									"} catch (error) {",
									"    CouldTheMantisUriBeComposed();",
									"    uri = dummyUri;",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {   ",
									"    pm.variables.set(\"uri\", uri);",
									"    pm.request.headers.upsert({key:\"Authorization\", value:mantisAuthorizationCode});",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"    pm.request.headers.upsert({key:\"Content-Type\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheGetRequestForMantisIssuesBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									"* Self Testing Functions",
									"****************************************************************************************/",
									"function CouldInputForLoadingMantisIssuesBeLoaded(mantisInterfaceStatus, ",
									"                                                    controller, ",
									"                                                    uri, ",
									"                                                    indexOfDeviceUnderTest) {",
									"    pm.test(\"CouldInputForLoadingMantisIssuesBeLoaded\", function () {",
									"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"        pm.expect(controller).to.be.an(\"object\");",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");      ",
									"    });",
									"}",
									"",
									"function CouldTheMantisUriBeComposed(vendor, mantisAuthorizationCode, uri) {",
									"    pm.test(\"CouldTheMantisUriBeComposed\", function () {",
									"        pm.expect(vendor).to.be.a(\"string\");",
									"        pm.expect(vendor).to.not.have.lengthOf(0);  ",
									"        pm.expect(mantisAuthorizationCode).to.be.a(\"string\");",
									"        pm.expect(mantisAuthorizationCode).to.not.have.lengthOf(0);  ",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);  ",
									"    });",
									"}",
									"",
									"function CouldTheGetRequestForMantisIssuesBePrepared() {",
									"    pm.test(\"CouldTheGetRequestForMantisIssuesBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b8089a6e-5be7-4c87-b0e0-bbc7911ebc8a",
								"exec": [
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var mantisInterfaceStatus = pm.environment.get(\"mantisInterfaceStatus\");",
									"    var controller = pm.environment.get(\"controller\");",
									"    ",
									"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
									"",
									"    CouldRequiredInputBeRead(mantisInterfaceStatus, controller, indexOfDeviceUnderTest);",
									"} catch (error) {",
									"    CouldRequiredInputBeRead();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Processing received data to a list of MantisBT issues",
									"****************************************************************************************/",
									"try {",
									"    if (mantisInterfaceStatus===\"read-only\" || mantisInterfaceStatus===\"read-write\") {",
									"        var deviceType = controller.nodeList[indexOfDeviceUnderTest].deviceType;",
									"        CouldDeviceTypeBeRetrieved(deviceType);",
									"",
									"        let responseWithHeadline = pm.response.json();",
									"        var mantisIssueList = responseWithHeadline.issues;",
									"        mantisIssueList = FilterIssuesForDeviceType(mantisIssueList, deviceType);",
									"        CouldMantisIssueListBeRead(pm.response.code);",
									"    }",
									"} catch (error) {",
									"    CouldDeviceTypeBeRetrieved();",
									"    CouldMantisIssueListBeRead();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Commenting the ResponseCode",
									"****************************************************************************************/",
									"try {",
									"    if (mantisInterfaceStatus===\"read-only\" || mantisInterfaceStatus===\"read-write\") {",
									"        let responseCode = parseInt(pm.response.code);",
									"        if (Math.floor(responseCode/100) === 2) {",
									"            console.log(\"Mantis issues for \" + deviceType + \" could successfully be loaded.\");",
									"        } else {",
									"            console.log(\"ERROR: Mantis issues for \" + deviceType + \" could not be \"",
									"                            + \"successfully be loaded.\");",
									"        }",
									"        CouldCommentBeComposedandPrinted(responseCode);",
									"    }",
									"} catch (error) {",
									"    CouldCommentBeComposedandPrinted();",
									"}",
									"",
									"pm.variables.clear();",
									"",
									"",
									"/****************************************************************************************",
									"* Provided Output Parameters",
									"****************************************************************************************/",
									"if (mantisInterfaceStatus===\"read-only\" || mantisInterfaceStatus===\"read-write\") {",
									"    pm.environment.set(\"mantisIssueList\", mantisIssueList);",
									"    AreAllEnvironmentVariablesSet();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Functions",
									" ****************************************************************************************/",
									"function FilterIssuesForDeviceType(issueList, deviceType) {",
									"    for (let i=(issueList.length-1); i>=0; i--) {",
									"        if (issueList[i].project.name!==deviceType){",
									"            issueList.splice(i,1);",
									"        }",
									"    }",
									"    return issueList;",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Test Driven Development",
									" ****************************************************************************************/",
									"function CouldRequiredInputBeRead(mantisInterfaceStatus, controller, indexOfDeviceUnderTest) {",
									"    pm.test(\"CouldRequiredInputBeRead\", function () {",
									"        pm.expect(mantisInterfaceStatus).to.be.oneOf([\"off\", \"read-only\", \"read-write\"]);",
									"        pm.expect(controller).to.be.an(\"object\");",
									"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
									"    });",
									"}",
									"",
									"function CouldDeviceTypeBeRetrieved(deviceType) {",
									"    pm.test(\"CouldDeviceTypeBeRetrieved\", function () {",
									"        pm.expect(deviceType).to.be.a(\"string\");",
									"        pm.expect(deviceType).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldMantisIssueListBeRead(ResponseCode) {",
									"    pm.test(\"CouldMantisIssueListBeRead\", function () {",
									"        pm.expect(ResponseCode).to.equal(200);",
									"    });",
									"}",
									"",
									"function CouldCommentBeComposedandPrinted(ResponseCode) {",
									"    pm.test(\"CouldMantisIssueListBeRead\", function () {",
									"        pm.expect(ResponseCode).to.equal(200);",
									"    });",
									"}",
									"",
									"function AreAllEnvironmentVariablesSet() {",
									"    pm.test(\"AreAllEnvironmentVariablesSet\", function () {",
									"        pm.expect(pm.environment.get(\"mantisIssueList\")).to.be.an(\"array\");",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DisplayEnvironmentVariables",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "aeb89bf5-e92e-4b75-a9bd-cb87e2c51d39",
								"exec": [
									"console.log(\"\\n-------------------------Displaying all Environment variables-----------------------------\");",
									"/****************************************************************************************",
									"* ",
									"* Console.log of all Environment variables",
									"* ",
									"****************************************************************************************/",
									"",
									"",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    CouldTheInputBeLoaded(dummyUri);",
									"} catch (error) {",
									"    CouldTheInputBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Displaying ",
									"****************************************************************************************/",
									"try {",
									"    console.log(\"Device will be tested with the following set of Environment variables:\");",
									"    let allEnvironmentVariables = { \"allEnvironmentVariables\" : pm.environment.toObject() };",
									"    console.log(allEnvironmentVariables);",
									"    CouldAllEnvironmentalVariablesBeDisplayed(true);",
									"} catch (error) {",
									"    CouldAllEnvironmentalVariablesBeDisplayed(false);",
									"}",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheRequestBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function CouldTheInputBeLoaded(uri) {",
									"    pm.test(\"CouldTheInputBeLoaded\", function () {",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldAllEnvironmentalVariablesBeDisplayed(success) {",
									"    pm.test(\"CouldAllEnvironmentalVariablesBeDisplayed\", function () {",
									"        pm.expect(success).to.be.true;",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "5aaa1986-a76a-42fd-817b-a40f8a9b1518",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2dc23782-614b-4fb4-a52b-d1fcc9bfb437",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "InterfaceValidation",
			"item": [
				{
					"name": "AirInterfaceValidation",
					"item": [
						{
							"name": "AirInterfaceCompleteness",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputAirInterfaceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "46c17eb8-df95-44a4-adeb-ae265861f828",
														"exec": [
															"console.log(\"\\n\\n=============================== AirInterfaceCompleteness.3 ===============================\");",
															"/****************************************************************************************",
															" * ",
															" * RequestCollection for validating Completeness of AirInterface Objects against definition ",
															" * ",
															" *                   AirInterface_2.0.0-tsp.191122.1800",
															" * ",
															" * as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															" * ",
															" ****************************************************************************************/",
															" ",
															"",
															"/****************************************************************************************",
															" * Manual Definition of the Mode of Operation of this TestCase",
															" ****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"all\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"air-interface-2-0:air-interface-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function() {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function() {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "cd8e90e2-9820-406d-9f7f-616c87782300",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "password",
															"value": "PRSe08",
															"type": "string"
														},
														{
															"key": "username",
															"value": "senthilvel.s",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointAirInterfaceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "dba91e49-6b9b-46bb-8077-545a40b65bea",
														"exec": [
															"console.log(\"\\n-----------------EntryPoint of AirInterface Validation for Completeness-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the AirInterfaceCompleteness TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].airInterfaceList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.max( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointAirInterfaceCompleteness\");",
															"        console.log(\"Proceeding with terminating AirInterface validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "798b6422-bc19-4127-99ae-5efb54e535b4",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b62794fe-babe-4a72-91b3-fc39e305cff7",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "32fb7235-2cdf-42f7-97ce-f2a26dbb0a15",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "703f6dac-2929-49bc-8942-89166c7aa31a",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0a8037fd-805f-455f-bb7a-921438b6ad62",
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* StartPoint",
															"* ",
															"* Manages the number of iterations of the AirInterfaceCompleteness TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2cea1a00-0716-42d9-9112-28aa0e7ab3fc",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "acac116f-1693-4266-8c1b-866cba645224",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "NetworkPreparation",
									"item": [
										{
											"name": "SwitchingOnMonitoring",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1dc58209-e67f-42b2-936b-55a9ca875874",
														"exec": [
															"console.log(\"\\n---------------------------------Switching Monitoring On----------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Switching Monitoring On",
															"* ",
															"* This Request is for activating collection of performance data on the device under",
															"* test, so the data can be retrieved during validating completeness of the implementation",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration);",
															"} catch (error) {",
															"    CouldInputForSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify({ \"air-interface-2-0:performance-monitoring-is-on\": true });",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration) {",
															"    pm.test(\"CouldInputForSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(configuration).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "75b41e3f-999f-4d1c-85b9-34208fc1be2f",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched on.\");",
															"pm.variables.set(\"negativeOutcome\", \"could not be switched on.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "SettingWrongRadioSignalId",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f75fcf8e-2aa8-43ed-9668-4c4c0e1d27ec",
														"exec": [
															"console.log(\"\\n-------------------------------Setting Wrong RadioSignalId--------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting wrong Expected RadioSignalID for provocing entries in CurrentProblemList",
															"* ",
															"* This Request is for provocing an alarm to be able to validate completeness of the ",
															"* representation of currently active alarms.",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, capability, configuration);",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    var faultyNumericValue = Math.floor(Math.random() * capability[\"supported-radio-signal-id-length\"]);",
															"    var faultyAlphaNumericValue = GenerateRandomString(capability[\"supported-radio-signal-id-length\"]);",
															"    CouldFaultyValuesBeGenerated(faultyNumericValue, faultyAlphaNumericValue);",
															"} catch (error) {",
															"    CouldFaultyValuesBeGenerated();",
															"}",
															"",
															"try {",
															"    if ( capability[\"supported-radio-signal-id-datatype\"] === \"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_INTEGER\" ) {",
															"        configuration[\"expected-radio-signal-id\"][\"numeric-radio-signal-id\"] = faultyNumericValue;",
															"        if ( capability[\"expected-equals-transmitted-radio-signal-id\"] === true ) {",
															"            configuration[\"transmitted-radio-signal-id\"][\"numeric-radio-signal-id\"] = faultyNumericValue;",
															"        }",
															"    } else {",
															"        configuration[\"expected-radio-signal-id\"][\"alphanumeric-radio-signal-id\"] = faultyAlphaNumericValue;",
															"        if ( capability[\"expected-equals-transmitted-radio-signal-id\"] === true ) {",
															"            configuration[\"transmitted-radio-signal-id\"][\"alphanumeric-radio-signal-id\"] = faultyAlphaNumericValue;",
															"        }",
															"    }",
															"    configuration = AddHeadlineToDataObject(configuration, \"air-interface-2-0:air-interface-configuration\");",
															"    CouldRequestBodyOfSettingWrongRadioSignalIdBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingWrongRadioSignalIdBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const requestBody = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, requestBody);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", requestBody);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function GenerateRandomString(length) {",
															"    let randomString = \"\";",
															"    let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
															"    let charactersLength = characters.length;",
															"    for ( let i=0; i<length; i++ ) {",
															"        randomString += characters.charAt(Math.floor(Math.random() * charactersLength));",
															"    }",
															"    return randomString;",
															"}",
															"",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, capability, configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldFaultyValuesBeGenerated(faultyNumericValue, faultyAlphaNumericValue) {",
															"    pm.test(\"CouldFaultyValuesBeGenerated\", function () {",
															"        pm.expect(faultyNumericValue).to.be.an(\"number\");",
															"        pm.expect(faultyAlphaNumericValue).to.be.a(\"string\");",
															"        pm.expect(faultyAlphaNumericValue).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingWrongRadioSignalIdBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingWrongRadioSignalIdBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f41f40ff-46e7-49f3-b13b-f3921378aed0",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSettingWrongRadioSignalIdBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully misconfigured for provoking an alarm.\");",
															"pm.variables.set(\"negativeOutcome\", \"could not be changed.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSettingWrongRadioSignalIdBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "beab2946-2368-4eca-8331-f8e498f89278",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "22b91b12-7e6f-4d01-9151-e5eb3ca00584",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ValidationRequests",
									"item": [
										{
											"name": "PacCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6f9b52d2-b2c6-4fdc-bc8a-2940b8dcd553",
														"exec": [
															"console.log(\"\\n-----------------------Checking AirInterface_Pac for Completeness-------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* PacCompleteness",
															"* ",
															"* This Request is for validating AirInterface Pac Objects against definition ",
															"* AirInterface_2.0.0-tsp.191122.1800",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the *_Pac class",
															"*  - availability of all attributes in this particular class",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"pac\";             // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 3;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let AIR_INTERFACE_PAC_SCHEMA = {",
															"    \"type\": \"object\",",
															"\t\"properties\": {",
															"        \"air-interface-capability\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"type-of-equipment\": \t\t\t\t\t\t\t{ \"type\": \"string\"  },",
															"                \"tx-frequency-min\": \t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"tx-frequency-max\": \t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"rx-frequency-min\": \t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"rx-frequency-max\": \t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"transmission-mode-list\":                       { \"type\": \"array\"   },",
															"                \"duplex-distance-is-freely-configurable\": \t\t{ \"type\": \"boolean\" },",
															"                \"duplex-distance-list\":                         { \"type\": \"array\"   },",
															"                \"auto-freq-select-is-avail\": \t\t\t\t\t{ \"type\": \"boolean\" },\t",
															"                \"adaptive-modulation-is-avail\": \t\t\t\t{ \"type\": \"boolean\" },\t",
															"                \"atpc-is-avail\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"atpc-range\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"supported-radio-signal-id-datatype\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_INTEGER\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_STRING\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t]",
															"                },",
															"                \"supported-radio-signal-id-length\": \t\t\t{ \"type\": \"number\"  },",
															"                \"expected-equals-transmitted-radio-signal-id\":\t{ \"type\": \"boolean\" },",
															"                \"encryption-is-avail\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"supported-loop-back-kind-list\":                { \"type\": \"array\"   },",
															"                \"maintenance-timer-range\": \t\t\t\t\t\t{ \"type\": \"string\"  },",
															"                \"supported-alarm-list\":                         { \"type\": \"array\"   },",
															"                \"performance-monitoring-is-avail\": \t\t\t\t{ \"type\": \"boolean\" },",
															"                \"direction-of-acm-performance-values\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:DIRECTION_TYPE_TX\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:DIRECTION_TYPE_RX\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:DIRECTION_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t]",
															"                },",
															"            },",
															"        },",
															"        \"air-interface-configuration\":{",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"air-interface-name\": \t\t\t\t\t{ \"type\": \"string\"  },",
															"                \"remote-air-interface-name\": \t\t\t{ \"type\": \"string\"  },",
															"                \"transmitted-radio-signal-id\":          { \"type\": \"object\"  },",
															"                \"expected-radio-signal-id\":             { \"type\": \"object\"  },",
															"                \"tx-frequency\": \t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"rx-frequency\": \t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"transmission-mode-min\": \t\t\t\t{ \"type\": \"string\"  },",
															"                \"transmission-mode-max\": \t\t\t\t{ \"type\": \"string\"  },",
															"                \"power-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"transmitter-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"receiver-is-on\": \t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"tx-power\": \t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"adaptive-modulation-is-on\": \t\t\t{ \"type\": \"boolean\" },",
															"                \"xpic-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"mimo-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"alic-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"atpc-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"atpc-thresh-upper\": \t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"atpc-thresh-lower\": \t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"atpc-tx-power-min\": \t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"auto-freq-select-is-on\": \t\t\t\t{ \"type\": \"boolean\" },",
															"                \"auto-freq-select-range\": \t\t\t\t{ \"type\": \"number\"  },",
															"                \"modulation-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"encryption-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"cryptographic-key\": \t\t\t\t\t{ \"type\": \"string\"  },",
															"                \"loop-back-kind-on\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_NONE\",\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t   ]",
															"                },",
															"                \"maintenance-timer\": \t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"problem-kind-severity-list\":           { \"type\": \"array\"   },",
															"                \"g-826-threshold-cross-alarm-list\":     { \"type\": \"array\"   },",
															"                \"xlts-threshold-cross-alarm-list\":      { \"type\": \"array\"   },",
															"                \"acm-threshold-cross-alarm-list\":       { \"type\": \"array\"   },",
															"                \"clearing-threshold-cross-alarms-is-on\":{ \"type\": \"boolean\" },",
															"                \"performance-monitoring-is-on\": \t\t{ \"type\": \"boolean\" },",
															"\t        },",
															"        },",
															"        \"air-interface-status\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"interface-status\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_UP\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_DOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_TESTING\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_DORMANT\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t]",
															"                },",
															"                \"tx-frequency-cur\": \t\t\t\t    { \"type\": \"number\"  },",
															"                \"rx-frequency-cur\": \t\t\t\t    { \"type\": \"number\"  },",
															"                \"transmission-mode-cur\":                { \"type\": \"string\"  },",
															"                \"received-radio-signal-id\":             { \"type\": \"object\"  },",
															"                \"radio-power-is-up\": \t\t\t\t    { \"type\": \"boolean\" },",
															"                \"link-is-up\": \t\t\t\t\t\t    { \"type\": \"boolean\" },",
															"                \"xpic-is-up\": \t\t\t\t\t\t    { \"type\": \"boolean\" },",
															"                \"mimo-is-up\": \t\t\t\t\t\t    { \"type\": \"boolean\" },",
															"                \"alic-is-up\": \t\t\t\t\t\t    { \"type\": \"boolean\" },",
															"                \"atpc-is-up\": \t\t\t\t\t\t    { \"type\": \"boolean\" },",
															"                \"auto-freq-select-is-up\": \t\t\t    { \"type\": \"boolean\" },",
															"                \"local-end-point-id\": \t\t\t\t    { \"type\": \"string\"  },",
															"                \"remote-end-point-id\":\t \t\t\t    { \"type\": \"string\"  },",
															"                \"loop-back-kind-up\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_NONE\",",
															"                                ]",
															"                },",
															"                \"performance-monitoring-is-up\":     \t{ \"type\": \"boolean\" },",
															"                \"rx-level-cur\": \t\t\t\t\t    { \"type\": \"number\"  },",
															"                \"tx-level-cur\": \t\t\t\t\t    { \"type\": \"number\"  },",
															"                \"snir-cur\": \t\t\t\t\t\t    { \"type\": \"number\"  },",
															"                \"xpd-cur\": \t\t\t\t\t\t\t    { \"type\": \"number\"  },",
															"                \"rf-temp-cur\": \t\t\t\t\t\t    { \"type\": \"number\"  },",
															"            },",
															"        },",
															"        \"air-interface-current-problems\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"current-problem-list\":                 { \"type\": \"array\"   },",
															"                \"number-of-current-problems\":  \t\t\t{ \"type\": \"number\"  },",
															"                \"time-of-latest-change\":                { \"type\": \"string\"  },",
															"            },",
															"        },",
															"        \"air-interface-current-performance\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"current-performance-data-list\":        { \"type\": \"array\"   },",
															"                \"number-of-current-performance-sets\":   { \"type\": \"number\"  },",
															"            },",
															"\t    },",
															"        \"air-interface-historical-performances\":{",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"historical-performance-data-list\":     { \"type\": \"array\"   },",
															"                \"number-of-historical-performance-sets\":{ \"type\": \"number\"  },",
															"                \"time-of-latest-change\": \t\t\t    { \"type\": \"string\"  },",
															"            },",
															"        },",
															"\t},    ",
															"\t\"required\": [\"air-interface-capability\",",
															"                    \"air-interface-configuration\",",
															"                    \"air-interface-status\",",
															"                    \"air-interface-current-problems\",",
															"                    \"air-interface-current-performance\",",
															"                    \"air-interface-historical-performances\",",
															"    ]",
															"};",
															"pm.variables.set(\"schema\", AIR_INTERFACE_PAC_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4f8ad7a7-01c5-4bd5-86bd-eec69edc326d",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CapabilityCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3b42ace8-170d-4766-ad55-d765ecb27eec",
														"exec": [
															"console.log(\"\\n--------------------Checking AirInterfaceCapability for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* CapabilityCompleteness",
															"* ",
															"* This Request is for validating AirInterface Capability Objects against definition ",
															"* AirInterface_2.0.0-tsp.191122.1800",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Capability class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let AIR_INTERFACE_CAPABILITY_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"type-of-equipment\": \t\t\t\t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"tx-frequency-min\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"tx-frequency-max\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"rx-frequency-min\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"rx-frequency-max\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"transmission-mode-list\": {",
															"    \t\t\"type\": \"array\",",
															"    \t\t\"items\": { ",
															"        \t\t\"type\": \"object\",",
															"        \t\t\"properties\": {",
															"                    \"transmission-mode-name\":     \t\t\t\t{ \"type\": \"string\" },",
															"                    \"transmission-mode-rank\":     \t\t\t\t{ \"type\": \"number\" },",
															"                    \"channel-bandwidth\":      \t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"modulation-scheme\":     \t\t\t\t    { \"type\": \"number\" },",
															"                    \"code-rate\":        \t\t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"symbol-rate-reduction-factor\":   \t\t\t{ \"type\": \"number\" },",
															"                    \"tx-power-min\":      \t\t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"tx-power-max\":       \t\t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"rx-threshold\":       \t\t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"am-upshift-level\":      \t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"am-downshift-level\":      \t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"xpic-is-avail\":       \t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                    \"supported-as-fixed-configuration\":  \t\t{ \"type\": \"boolean\" }",
															"        \t\t},",
															"                \"required\": [\"transmission-mode-name\", ",
															"                                \"transmission-mode-rank\",",
															"\t\t\t\t\t\t\t\t\"channel-bandwidth\",",
															"\t\t\t\t\t\t\t\t\"modulation-scheme\",",
															"\t\t\t\t\t\t\t\t\"code-rate\",",
															"\t\t\t\t\t\t\t\t\"symbol-rate-reduction-factor\",",
															"\t\t\t\t\t\t\t\t\"tx-power-min\",",
															"\t\t\t\t\t\t\t\t\"tx-power-max\",",
															"\t\t\t\t\t\t\t\t\"rx-threshold\",",
															"\t\t\t\t\t\t\t\t\"am-upshift-level\",",
															"\t\t\t\t\t\t\t\t\"am-downshift-level\",",
															"\t\t\t\t\t\t\t\t\"xpic-is-avail\",",
															"\t\t\t\t\t\t\t\t\"supported-as-fixed-configuration\"",
															"                ]",
															"    \t\t}",
															"\t\t},",
															"\t\t\"duplex-distance-is-freely-configurable\": \t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"duplex-distance-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\":                                    { \"type\": \"number\" }",
															"\t\t},",
															"\t\t\"auto-freq-select-is-avail\": \t\t\t\t\t{ \"type\": \"boolean\" }, \t\t",
															"\t\t\"adaptive-modulation-is-avail\": \t\t\t\t{ \"type\": \"boolean\" }, \t\t",
															"\t\t\"atpc-is-avail\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"atpc-range\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\"supported-radio-signal-id-datatype\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_INTEGER\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_STRING\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t\t]",
															"\t\t},",
															"\t\t\"supported-radio-signal-id-length\": \t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"expected-equals-transmitted-radio-signal-id\":\t{ \"type\": \"boolean\" }, ",
															"\t\t\"encryption-is-avail\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },\t",
															"\t\t\"supported-loop-back-kind-list\": { ",
															"\t\t    \"type\": \"array\",",
															"\t\t\t\"items\": { \"enum\": [",
															"\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_REMOTE\",",
															"\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_LOCAL\",",
															"\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_REMOTE\",",
															"\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_LOCAL\",",
															"\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_NONE\"\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t   ]",
															"\t\t\t}",
															"\t\t}, \t\t ",
															"\t\t\"maintenance-timer-range\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\"supported-alarm-list\": {",
															"            \"type\": \"array\",",
															"            \"item\":                                     { \"type\": \"string\" }",
															"\t\t},",
															"\t\t\"performance-monitoring-is-avail\": \t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"direction-of-acm-performance-values\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:DIRECTION_TYPE_TX\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:DIRECTION_TYPE_RX\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:DIRECTION_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t ]",
															"\t\t},",
															"\t},",
															"\t\"required\": [\"type-of-equipment\", ",
															"\t\t\t\t\t\"tx-frequency-min\",",
															"\t\t\t\t\t\"tx-frequency-max\",",
															"\t\t\t\t\t\"rx-frequency-min\",",
															"\t\t\t\t\t\"rx-frequency-max\",",
															"\t\t\t\t\t\"duplex-distance-is-freely-configurable\",",
															"\t\t\t\t\t\"duplex-distance-list\",",
															"\t\t\t\t\t\"auto-freq-select-is-avail\",",
															"\t\t\t\t\t\"adaptive-modulation-is-avail\",",
															"\t\t\t\t\t\"atpc-is-avail\",",
															"\t\t\t\t\t\"atpc-range\",",
															"\t\t\t\t\t\"supported-radio-signal-id-datatype\",",
															"\t\t\t\t\t\"expected-equals-transmitted-radio-signal-id\",",
															"\t\t\t\t\t\"encryption-is-avail\",",
															"\t\t\t\t\t\"supported-loop-back-kind-list\",",
															"\t\t\t\t\t\"maintenance-timer-range\",",
															"\t\t\t\t\t\"supported-alarm-list\",",
															"\t\t\t\t\t\"performance-monitoring-is-avail\",",
															"\t\t\t\t\t\"direction-of-acm-performance-values\",",
															"\t]",
															"};",
															"pm.variables.set(\"schema\", AIR_INTERFACE_CAPABILITY_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "fef2235c-3aaf-481f-bdb6-4a772e90fc3a",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ConfigurationCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "084e1dd4-9f6b-4d40-9615-90f8908b1d31",
														"exec": [
															"console.log(\"\\n-------------------Checking AirInterfaceConfiguration for Completeness--------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ConfigurationCompleteness",
															"* ",
															"* This Request is for validating AirInterface Configuration Objects against definition ",
															"* AirInterface_2.0.0-tsp.191122.1800",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Configuration class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let AIR_INTERFACE_CONFIGURATION_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"air-interface-name\": \t\t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"remote-air-interface-name\": \t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"transmitted-radio-signal-id\": { ",
															"\t\t\t\"type\": \"object\", ",
															"\t\t\t\"properties\": {",
															"\t\t\t\t\"numeric-radio-signal-id\": \t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\"alphanumeric-radio-signal-id\": \t{ \"type\": \"string\" }",
															"\t\t\t}",
															"\t\t}, ",
															"\t\t\"expected-radio-signal-id\": {",
															"\t\t\t\"type\": \"object\", ",
															"\t\t\t\"properties\": {",
															"\t\t\t\t\"numeric-radio-signal-id\": \t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\"alphanumeric-radio-signal-id\": \t{ \"type\": \"string\" }",
															"\t\t\t}",
															"\t\t}, ",
															"\t\t\"tx-frequency\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"rx-frequency\": \t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"transmission-mode-min\": \t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"transmission-mode-max\": \t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"power-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"transmitter-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"receiver-is-on\": \t\t\t\t\t\t{ \"type\": \"boolean\" }, \t",
															"\t\t\"tx-power\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"adaptive-modulation-is-on\": \t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"xpic-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"mimo-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"alic-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"atpc-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" }, \t",
															"\t\t\"atpc-thresh-upper\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"atpc-thresh-lower\": \t\t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\"atpc-tx-power-min\": \t\t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\"auto-freq-select-is-on\": \t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"auto-freq-select-range\": \t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\"modulation-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" }, \t",
															"\t\t\"encryption-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" }, \t",
															"\t\t\"cryptographic-key\": \t\t\t\t\t{ \"type\": \"string\" }, \t",
															"\t\t\"loop-back-kind-on\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_NONE\"\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t   ]",
															"\t\t}, \t",
															"\t\t\"maintenance-timer\": \t\t\t\t\t{ \"type\": \"number\" }, \t",
															" \t\t\"problem-kind-severity-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"    \t\t\t\t\"problem-kind-name\": \t\t\t\t{ \"type\": \"string\" },",
															"    \t\t\t\t\"problem-kind-severity\": { \"enum\": [",
															"    \t\t\t\t\t\t\t\t\t\t\t    \"air-interface-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_WARNING\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_MINOR\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_MAJOR\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_CRITICAL\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"",
															"    \t\t\t\t\t\t\t\t\t\t   ]",
															"    \t\t\t\t}",
															"\t\t\t    },",
															"\t\t\t    \"required\": [\"problem-kind-name\",",
															"\t\t\t                    \"problem-kind-severity\"",
															"\t\t\t    ]",
															"\t\t\t}    ",
															"\t\t}, \t\t\t",
															" \t\t\"g-826-threshold-cross-alarm-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"    \t\t\t\t\"g-826-value-kind\": { \"enum\": [",
															"    \t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:G_826_TYPE_ES\",",
															"    \t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:G_826_TYPE_SES\",",
															"    \t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:G_826_TYPE_CSES\",",
															"    \t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:G_826_TYPE_UAS\",",
															"    \t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:G_826_TYPE_NOT_SPECIFIED\"",
															"    \t\t\t\t\t\t\t\t\t  ]",
															"    \t\t\t\t},\t\t\t",
															"    \t\t\t\t\"alarm-raising-threshold\": \t\t\t{ \"type\": \"number\" },",
															"    \t\t\t\t\"alarm-clearing-threshold\": \t\t{ \"type\": \"number\" },",
															"    \t\t\t\t\"granularity-period\": { \"enum\": [",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"    \t\t\t\t\t\t\t\t\t    ]",
															"    \t\t\t\t}",
															"\t\t\t    },",
															"\t\t\t    \"required\": [\"g-826-value-kind\",",
															"\t\t\t                    \"alarm-raising-threshold\",",
															"\t\t\t                    \"alarm-clearing-threshold\",",
															"\t\t\t                    \"granularity-period\"",
															"\t\t\t    ]",
															"\t\t\t}",
															"\t\t}, \t\t\t",
															" \t\t\"xlts-threshold-cross-alarm-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"    \t\t\t\t\"level-threshold-second-kind\": { \"enum\": [",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_RLTS\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_TLTS\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:XLEVEL_THRESHOLD_SECOND_KIND_TYPE_NOT_YET_DEFINED\"",
															"    \t\t\t\t\t\t\t\t\t\t\t\t ]",
															"    \t\t\t\t},\t\t\t\t\t",
															"    \t\t\t\t\"xlts-level\": \t\t\t\t\t    { \"type\": \"number\" },",
															"    \t\t\t\t\"amount-of-seconds\":\t\t\t    { \"type\": \"number\" },",
															"    \t\t\t\t\"granularity-period\": { \"enum\": [",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"    \t\t\t\t\t\t\t\t\t\t]",
															"    \t\t\t\t},",
															"    \t\t\t\t\"xlts-threshold-cross-alarm-definition-number\": { \"type\": \"number\" },",
															"\t\t\t    },",
															"\t\t\t    \"required\": [\"level-threshold-second-kind\",",
															"\t\t\t                    \"xlts-level\",",
															"\t\t\t                    \"amount-of-seconds\",",
															"\t\t\t                    \"granularity-period\",",
															"\t\t\t                    \"xlts-threshold-cross-alarm-definition-number\"",
															"\t\t\t    ]\t",
															"\t\t\t}",
															"\t\t}, \t\t\t\t\t\t",
															" \t\t\"acm-threshold-cross-alarm-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"    \t\t\t\t\"acm-threshold-cross-alarm-definition-number\": \t{ \"type\": \"number\" },",
															"    \t\t\t\t\"amount-of-seconds\": \t\t\t\t{ \"type\": \"number\" },\t",
															"    \t\t\t\t\"granularity-period\": { \"enum\": [",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"    \t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"    \t\t\t\t\t\t\t\t\t\t]",
															"    \t\t\t\t},",
															"    \t\t\t\t\"transmission-mode\":                { \"type\": \"string\" }",
															"\t\t\t    },",
															"\t\t\t    \"required\": [\"acm-threshold-cross-alarm-definition-number\",",
															"\t\t\t                    \"amount-of-seconds\",",
															"\t\t\t                    \"granularity-period\",",
															"\t\t\t                    \"transmission-mode\"",
															"\t\t\t    ]",
															"\t\t\t}",
															"\t\t}, \t\t\t\t\t\t",
															"\t\t\"clearing-threshold-cross-alarms-is-on\":{ \"type\": \"boolean\" },\t",
															"\t\t\"performance-monitoring-is-on\": \t\t{ \"type\": \"boolean\" }",
															"\t},",
															" \t\"required\": [ \"air-interface-name\", ",
															"\t\t\t\t\t\"remote-air-interface-name\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"transmitted-radio-signal-id\",",
															"\t\t\t\t\t\"expected-radio-signal-id\",\t",
															"\t\t\t\t\t\"tx-frequency\",",
															"\t\t\t\t\t\"rx-frequency\",",
															"\t\t\t\t\t\"transmission-mode-min\",",
															"\t\t\t\t\t\"transmission-mode-max\",",
															"\t\t\t\t\t\"power-is-on\",",
															"\t\t\t\t\t\"transmitter-is-on\",\t",
															"\t\t\t\t\t\"receiver-is-on\",\t\t\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"tx-power\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"adaptive-modulation-is-on\",",
															"\t\t\t\t\t\"xpic-is-on\",\t",
															"\t\t\t\t\t\"mimo-is-on\",",
															"\t\t\t\t\t\"alic-is-on\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"atpc-is-on\",",
															"\t\t\t\t\t\"atpc-thresh-upper\",\t",
															"\t\t\t\t\t\"atpc-thresh-lower\",",
															"\t\t\t\t\t\"atpc-tx-power-min\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"auto-freq-select-is-on\",",
															"\t\t\t\t\t\"auto-freq-select-range\",\t",
															"\t\t\t\t\t\"modulation-is-on\",",
															"\t\t\t\t\t\"encryption-is-on\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"cryptographic-key\",",
															"\t\t\t\t\t\"loop-back-kind-on\",\t",
															"\t\t\t\t\t\"maintenance-timer\",\t\t",
															"\t\t\t\t\t\"problem-kind-severity-list\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"g-826-threshold-cross-alarm-list\",",
															"\t\t\t\t\t\"xlts-threshold-cross-alarm-list\",\t",
															"\t\t\t\t\t\"acm-threshold-cross-alarm-list\",",
															"\t\t\t\t\t\"clearing-threshold-cross-alarms-is-on\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\"performance-monitoring-is-on\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t ]",
															"};",
															"pm.variables.set(\"schema\", AIR_INTERFACE_CONFIGURATION_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "fdc04280-513a-44a9-bab2-89788134f4e2",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "StatusCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "8c63f63a-9e69-4dc3-9e13-c719f663e7e1",
														"exec": [
															"console.log(\"\\n----------------------Checking AirInterfaceStatus for Completeness------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* StatusCompleteness",
															"* ",
															"* This Request is for validating AirInterface Status Objects against definition ",
															"* AirInterface_2.0.0-tsp.191122.1800",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Status class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let AIR_INTERFACE_STATUS_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"interface-status\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_UP\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_DOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_TESTING\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_DORMANT\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\",",
															"\t\t\t\t\t\t\t\t\"air-interface-2-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\"\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t]",
															"\t\t}, \t\t  ",
															"\t\t\"tx-frequency-cur\": \t\t\t\t{ \"type\": \"number\"  }, ",
															"\t\t\"rx-frequency-cur\": \t\t\t\t{ \"type\": \"number\"  }, ",
															"\t\t\"transmission-mode-cur\":            { \"type\": \"string\" },",
															"\t\t\"received-radio-signal-id\": {",
															"\t\t\t\"type\": \"object\", ",
															"\t\t\t\"properties\": {",
															"\t\t\t\t\"numeric-radio-signal-id\": \t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\"alphanumeric-radio-signal-id\": { \"type\": \"string\" }",
															"\t\t\t},",
															"\t\t\t\"required\": [\"numeric-radio-signal-id\", ",
															"\t\t\t\t\t\t    \"alphanumeric-radio-signal-id\"",
															"\t\t\t]\t\t\t\t\t\t\t\t\t\t",
															"\t\t}, ",
															"\t\t\"radio-power-is-up\": \t\t\t\t{ \"type\": \"boolean\" }, \t ",
															"\t\t\"link-is-up\": \t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"xpic-is-up\": \t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"mimo-is-up\": \t\t\t\t\t\t{ \"type\": \"boolean\" }, \t ",
															"\t\t\"alic-is-up\": \t\t\t\t\t\t{ \"type\": \"boolean\" },\t ",
															"\t\t\"atpc-is-up\": \t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"auto-freq-select-is-up\": \t\t\t{ \"type\": \"boolean\" }, \t ",
															"\t\t\"local-end-point-id\": \t\t\t\t{ \"type\": \"string\" }, ",
															"\t\t\"remote-end-point-id\":\t \t\t\t{ \"type\": \"string\" },",
															"\t\t\"loop-back-kind-up\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_RF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_IF_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"air-interface-2-0:LOOP_BACK_TYPE_NONE\"\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t]",
															"\t\t}, \t\t ",
															"\t\t\"performance-monitoring-is-up\": \t{ \"type\": \"boolean\" }, ",
															"\t\t\"rx-level-cur\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"tx-level-cur\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"snir-cur\": \t\t\t\t\t\t{ \"type\": \"number\" }, \t ",
															"\t\t\"xpd-cur\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"rf-temp-cur\": \t\t\t\t\t\t{ \"type\": \"number\" }",
															"\t},",
															"\t\"required\": [\"interface-status\", ",
															"\t\t\t\t\"tx-frequency-cur\",\t",
															"\t\t\t\t\"rx-frequency-cur\",\t",
															"\t\t\t\t\"transmission-mode-cur\",",
															"\t\t\t\t\"received-radio-signal-id\",\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\"radio-power-is-up\",\t",
															"\t\t\t\t\"link-is-up\",",
															"\t\t\t\t\"xpic-is-up\",",
															"\t\t\t\t\"mimo-is-up\",",
															"\t\t\t\t\"alic-is-up\",",
															"\t\t\t\t\"atpc-is-up\",",
															"\t\t\t\t\"auto-freq-select-is-up\",",
															"\t\t\t\t\"local-end-point-id\",\t",
															"\t\t\t\t\"remote-end-point-id\",\t",
															"\t\t\t\t\"loop-back-kind-up\",\t",
															"\t\t\t\t\"performance-monitoring-is-up\",",
															"\t\t\t\t\"rx-level-cur\",",
															"\t\t\t\t\"tx-level-cur\",",
															"\t\t\t\t\"snir-cur\",",
															"\t\t\t\t\"xpd-cur\",",
															"\t\t\t\t\"rf-temp-cur\"",
															"\t]\t",
															"};",
															"pm.variables.set(\"schema\", AIR_INTERFACE_STATUS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b2d03bb4-4557-4843-b776-e24c78bfd0b0",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentProblemsCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2661daa1-eb7f-46f2-9fb7-31551ab4afcc",
														"exec": [
															"console.log(\"\\n------------------Checking AirInterfaceCurrentProblems for Completeness-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentProblemsCompleteness",
															"* ",
															"* This Request is for validating AirInterface CurrentProblems Objects against definition ",
															"* AirInterface_2.0.0-tsp.191122.1800",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentProblems class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-problems\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let AIR_INTERFACE_CURRENT_PROBLEMS_SCHEMA = {\t",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"\t\t\"current-problem-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"problem-name\": \t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"sequence-number\": \t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\"timestamp\": \t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"problem-severity\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_WARNING\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_MINOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_MAJOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_CRITICAL\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t}\t\t\t\t\t",
															"\t\t\t\t},",
															"\t\t\t\t\"required\": [ \"problem-name\", ",
															"\t\t\t\t    \t\t\t\"sequence-number\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t    \t\t\"timestamp\",",
															"\t\t\t\t\t\t    \t\"problem-severity\"\t",
															"\t\t\t\t]\t\t\t",
															"\t\t\t}\t\t\t\t\t\t\t",
															"\t\t},",
															"\t\t\"number-of-current-problems\":  \t\t\t{ \"type\": \"number\" },",
															"\t\t\"time-of-latest-change\":                { \"type\": \"string\" },",
															"\t},",
															"\t\"required\": [ \"current-problem-list\",",
															"                    \"number-of-current-problems\",",
															"                    \"time-of-latest-change\",",
															"\t] ",
															"};",
															"pm.variables.set(\"schema\", AIR_INTERFACE_CURRENT_PROBLEMS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2d446f22-1a52-409c-8c86-d31770b1d965",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentPerformanceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "199d7bfd-0044-4480-9eb0-2582e4523c16",
														"exec": [
															"console.log(\"\\n----------------Checking AirInterfaceCurrentPerformance for Completeness------------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentPerformanceCompleteness",
															"* ",
															"* This Request is for validating AirInterface CurrentPerformance Objects against definition ",
															"* AirInterface_2.0.0-tsp.191122.1800",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentPerformance class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-performance\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let AIR_INTERFACE_CURRENT_PERFORMANCE_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"current-performance-data-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\"es\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"ses\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, \t\t",
															"\t\t\t\t\t\t\t\"cses\": \t\t\t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"unavailability\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"tx-level-min\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"tx-level-max\":\t\t\t\t    { \"type\": \"number\" }, \t\t\t",
															"\t\t\t\t\t\t\t\"tx-level-avg\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rx-level-min\": \t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"rx-level-max\": \t\t\t\t{ \"type\": \"number\" },\t\t",
															"\t\t\t\t\t\t\t\"rx-level-avg\": \t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"time-xstates-list\": {    ",
															"\t\t\t\t\t\t\t\t\"type\": \"array\",",
															"\t\t\t\t\t\t\t\t\"items\": {\t\t",
															"\t\t\t\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\t\t\t\"properties\": {\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t\"time-xstate-sequence-number\":\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\t\t\t\"transmission-mode\":            { \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\t\t\t\"time\": \t\t            \t{ \"type\": \"number\" }\t\t\t",
															"\t\t\t\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\t\t\t\"required\": [ \"time-xstate-sequence-number\",",
															"\t\t\t\t\t\t\t\t\t\t\t    \t\"transmission-mode\",\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t\t    \t\"time\"\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\t\t\t\t]\t\t",
															"\t\t\t\t\t\t\t\t}",
															"\t\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\t\"snir-min\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"snir-max\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"snir-avg\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"xpd-min\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"xpd-max\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"xpd-avg\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rf-temp-min\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rf-temp-max\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rf-temp-avg\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"defect-blocks-sum\": \t\t\t{ \"type\": \"number\" }, \t\t\t",
															"\t\t\t\t\t\t\t\"time-period\": \t\t\t\t\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\"required\": [ \"es\", ",
															"                            \t\t\t\"ses\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"                            \t\t\t\"cses\",",
															"                            \t\t\t\"unavailability\",\t",
															"                            \t\t\t\"tx-level-min\",",
															"                            \t\t\t\"tx-level-max\",",
															"                            \t\t\t\"tx-level-avg\",",
															"                            \t\t\t\"rx-level-min\",",
															"                            \t\t\t\"rx-level-max\",",
															"                            \t\t\t\"rx-level-avg\",",
															"                            \t\t\t\"time-xstates-list\",",
															"                            \t\t\t\"snir-min\",",
															"                            \t\t\t\"snir-max\",",
															"                            \t\t\t\"snir-avg\",",
															"                            \t\t\t\"xpd-min\",",
															"                            \t\t\t\"xpd-max\",",
															"                            \t\t\t\"xpd-avg\",",
															"                            \t\t\t\"rf-temp-min\",",
															"                            \t\t\t\"rf-temp-max\",",
															"                            \t\t\t\"rf-temp-avg\",",
															"                            \t\t\t\"defect-blocks-sum\",",
															"                            \t\t\t\"time-period\"",
															"\t\t\t\t\t\t]\t\t\t\t\t",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"timestamp\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"suspect-interval-flag\": \t\t\t{ \"type\": \"boolean\" },\t\t\t",
															"\t\t\t\t\t\"elapsed-time\": \t\t\t\t\t{ \"type\": \"integer\" },\t\t",
															"\t\t\t\t\t\"scanner-id\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"granularity-period\": \t{ \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t  ]",
															"\t\t\t\t\t},\t ",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"performance-data\",",
															"    \t\t\t\t\t\t\t\"timestamp\",",
															"    \t\t\t\t\t\t\t\"suspect-interval-flag\",",
															"    \t\t\t\t\t\t\t\"elapsed-time\",",
															"    \t\t\t\t\t\t\t\"scanner-id\",",
															"    \t\t\t\t\t\t\t\"granularity-period\",",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-current-performance-sets\":  \t\t\t{ \"type\": \"number\" },",
															"\t},\t\t",
															"\t\"required\":\t[ \"current-performance-data-list\",",
															"\t               \"number-of-current-performance-sets\",",
															"\t]",
															"};",
															"try {",
															"    if (capability[\"performance-monitoring-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", AIR_INTERFACE_CURRENT_PERFORMANCE_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"current-performance-data-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        AIR_INTERFACE_CURRENT_PERFORMANCE_SCHEMA = pm.collectionVariables.get(\"shortenedSchema\");",
															"        CouldAirInterfaceCurrentPerformanceBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldAirInterfaceCurrentPerformanceBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", AIR_INTERFACE_CURRENT_PERFORMANCE_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldAirInterfaceCurrentPerformanceBeShortened(success) {",
															"    pm.test(\"CouldAirInterfaceCurrentPerformanceBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a20d8b69-dcec-4fb4-81a0-23f4b1f64552",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "HistoricalPerformancesCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5d51ddf3-4caa-40ff-97e3-9674dc270e96",
														"exec": [
															"console.log(\"\\n---------------Checking AirInterfaceHistoricalPerformances for Completeness---------------\");",
															"/*******************************************************************************",
															"* ",
															"* HistoricalPerformancesCompleteness",
															"* ",
															"* This Request is for validating AirInterface HistoricalPerformances Objects against definition ",
															"* AirInterface_2.0.0-tsp.191122.1800",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the HistoricalPerformances class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"*******************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"historical-performances\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let AIR_INTERFACE_HISTORICAL_PERFORMANCES_SCHEMA = {\t",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"\t\t\"historical-performance-data-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\"es\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"ses\": \t\t\t\t\t\t\t{ \"type\": \"number\" }, \t\t",
															"\t\t\t\t\t\t\t\"cses\": \t\t\t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"unavailability\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"tx-level-min\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"tx-level-max\":\t\t\t\t    { \"type\": \"number\" }, \t\t\t",
															"\t\t\t\t\t\t\t\"tx-level-avg\": \t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rx-level-min\": \t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"rx-level-max\": \t\t\t\t{ \"type\": \"number\" },\t\t",
															"\t\t\t\t\t\t\t\"rx-level-avg\": \t\t\t\t{ \"type\": \"number\" }, \t",
															"\t\t\t\t\t\t\t\"time-xstates-list\": {    ",
															"\t\t\t\t\t\t\t\t\"type\": \"array\",",
															"\t\t\t\t\t\t\t\t\"items\": {\t\t",
															"\t\t\t\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\t\t\t\"properties\": {\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t\"time-xstate-sequence-number\":\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\t\t\t\"transmission-mode\":            { \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\t\t\t\"time\": \t\t            \t{ \"type\": \"number\" }\t\t\t",
															"\t\t\t\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\t\t\t\"required\": [ \"time-xstate-sequence-number\",",
															"\t\t\t\t\t\t\t\t\t\t\t    \t\"transmission-mode\",\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t\t    \t\"time\"\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\t\t\t\t]\t\t",
															"\t\t\t\t\t\t\t\t}",
															"\t\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\t\"snir-min\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"snir-max\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"snir-avg\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"xpd-min\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"xpd-max\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"xpd-avg\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rf-temp-min\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rf-temp-max\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"rf-temp-avg\": \t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\t\t\t\t\t\"defect-blocks-sum\": \t\t\t{ \"type\": \"number\" }, \t\t\t",
															"\t\t\t\t\t\t\t\"time-period\": \t\t\t\t\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\"required\": [ \"es\", ",
															"                            \t\t\t\"ses\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"                            \t\t\t\"cses\",",
															"                            \t\t\t\"unavailability\",\t",
															"                            \t\t\t\"tx-level-min\",",
															"                            \t\t\t\"tx-level-max\",",
															"                            \t\t\t\"tx-level-avg\",",
															"                            \t\t\t\"rx-level-min\",",
															"                            \t\t\t\"rx-level-max\",",
															"                            \t\t\t\"rx-level-avg\",",
															"                            \t\t\t\"time-xstates-list\",",
															"                            \t\t\t\"snir-min\",",
															"                            \t\t\t\"snir-max\",",
															"                            \t\t\t\"snir-avg\",",
															"                            \t\t\t\"xpd-min\",",
															"                            \t\t\t\"xpd-max\",",
															"                            \t\t\t\"xpd-avg\",",
															"                            \t\t\t\"rf-temp-min\",",
															"                            \t\t\t\"rf-temp-max\",",
															"                            \t\t\t\"rf-temp-avg\",",
															"                            \t\t\t\"defect-blocks-sum\",",
															"                            \t\t\t\"time-period\"",
															"\t\t\t\t\t\t]\t\t\t\t\t",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"suspect-interval-flag\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\t\"history-data-id\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"period-end-time\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"granularity-period\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"air-interface-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t]\t\t\t\t",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"object-class\": \t\t\t\t\t{ \"type\": \"string\" },   // Attribute to be removed with February-Release of Mediators",
															"\t\t\t\t\t\"name-binding\": \t\t\t\t\t{ \"type\": \"string\" },   // Attribute to be removed with February-Release of Mediators",
															"\t\t\t\t\t\"packages\": \t\t\t\t\t\t{ \"type\": \"string\" },   // Attribute to be removed with February-Release of Mediators",
															"\t\t\t\t\t\"allomorphs\": \t\t\t\t\t\t{ \"type\": \"string\" },   // Attribute to be removed with February-Release of Mediators",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"performance-data\",",
															"    \t\t\t\t\t\t\t\"suspect-interval-flag\",",
															"    \t\t\t\t\t\t\t\"history-data-id\",",
															"    \t\t\t\t\t\t\t\"period-end-time\",",
															"    \t\t\t\t\t\t\t\"granularity-period\",",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-historical-performance-sets\":  \t\t{ \"type\": \"number\" },",
															"\t\t\"time-of-latest-change\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t},",
															"\t\"required\":\t[ \"historical-performance-data-list\",",
															"//                    \"number-of-historical-performance-sets\",              // Commenting to be removed with February-Release of Mediators",
															"//                    \"time-of-latest-change\",                              // Commenting to be removed with February-Release of Mediators",
															"\t]",
															"};",
															"try {",
															"    if (capability[\"performance-monitoring-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", AIR_INTERFACE_HISTORICAL_PERFORMANCES_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"historical-performance-data-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        AIR_INTERFACE_HISTORICAL_PERFORMANCES_SCHEMA = pm.collectionVariables.get(\"shortenedSchema\");",
															"        CouldAirInterfaceHistoricalPerformancesBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldAirInterfaceHistoricalPerformancesBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", AIR_INTERFACE_HISTORICAL_PERFORMANCES_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldAirInterfaceHistoricalPerformancesBeShortened(success) {",
															"    pm.test(\"CouldAirInterfaceHistoricalPerformancesBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6579245a-c2ea-42ac-b7aa-f5a63c9207f6",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e85f6c3c-2004-4d16-848c-68bad1640d03",
														"exec": [
															"console.log(\"\\n------------------Restoring the Original Interface Configuration Again--------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, configuration);",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    configuration = AddHeadlineToDataObject(configuration, \"air-interface-2-0:air-interface-configuration\");",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9b788e1e-a03f-4ca2-a2da-4e71f2ccef62",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \"could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "85e96a66-a4c0-4eee-ab98-0290f9b85b51",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "701be28e-1b4d-4c66-b58e-620fc0ab4cb6",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointAirInterfaceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1e76713a-f92d-4eae-b2ad-b8a9b57a5c7b",
														"exec": [
															"console.log(\"\\n---------------ReversalPoint of AirInterface Validation for Completeness------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointAirInterfaceCompleteness\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "46c04a4c-6f77-4e57-8e19-eef20cdf608b",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointAirInterfaceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "1b145f22-6bca-46bb-824d-745e8bf1de0d",
														"exec": [
															"console.log(\"\\n-------------------------Terminating AirInterfaceCompleteness-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is for clearing the Collection variables and terminating the TestCase",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, controller, indexOfDeviceUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4f9f6cfb-b97c-4099-9ce0-5a0f09acc62a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "58c230b1-f9c7-42fa-917f-fc548ed2c46f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0adf99a9-272c-492f-a339-375058236540",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "96d178f1-0830-4d77-9079-cb3b4088ec12",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "846ab8a9-e5cb-4443-89a6-b348f2ac9046",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "AirInterfaceConfiguration",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5d8f287c-a590-4e0c-8b22-0d2c8c904244",
														"exec": [
															"console.log(\"\\n\\n============================ AirInterfaceConfiguration.1 =============================\");",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Configuration of AirInterface Objects against definition ",
															"* ",
															"*                   AirInterface_2.0.0-tsp.191122.1800",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/airInterface/tree/tsp",
															"* ",
															"****************************************************************************************/",
															" ",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"* ",
															"* It is recommended to apply this TestCase on devices on the local (not remote) site",
															"* of the microwave connection, otherwise the management connection might break and ",
															"* configurations, which are done during the validation, cannot be reversed.",
															"* ",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"one\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"air-interface-2-0:air-interface-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"RESPONSE_CODE_FOR_OPERATION_FAILED = 501;       // 500: Expected translation of aggreed <error-tag> operation failed",
															"CONFIGURATION_VALIDATION_RESULTS = {};",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"pm.collectionVariables.set(\"responseCodeForOperationFailed\", RESPONSE_CODE_FOR_OPERATION_FAILED);",
															"pm.collectionVariables.set(\"configurationValidationResults\", CONFIGURATION_VALIDATION_RESULTS);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function() {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function() {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1b53a7b1-96fe-49d8-a535-2390b81e650e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DefiningDummyValuesAndEvaluations()",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4e29259a-7a7b-4c2b-882a-b2bdeb45a6ed",
														"exec": [
															"console.log(\"\\n----------Defining DummyValues and Evaluation Criteria in Configuration Validation--------\");",
															"/****************************************************************************************",
															"* ",
															"* Definition of DefiningDummyValuesAndEvaluations()",
															"*  ",
															"* Functions for Defining DummyValues and Evaluation Criteria in all Configuration Validations.",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"        ",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"class Attribute {",
															"    constructor (CreatingDummyValueAsaString, ",
															"                    EvaluatingResultAsaString, ",
															"                    defaultValueForStandardEvaluation,",
															"                    capabilityAttributeToBeFalseIfFeatureNotSupported) {",
															"        this.CreatingDummyValueAsaString = CreatingDummyValueAsaString;",
															"        this.EvaluatingResultAsaString = EvaluatingResultAsaString;",
															"        this.defaultValueForStandardEvaluation = defaultValueForStandardEvaluation;",
															"        this.capabilityAttributeToBeFalseIfFeatureNotSupported = capabilityAttributeToBeFalseIfFeatureNotSupported;",
															"    }",
															"}",
															"var attributes = [];",
															"",
															"var CreatingDummyValueAsaString;",
															"var EvaluatingResultAsaString;",
															"var defaultValueForStandardEvaluation;",
															"var capabilityAttributeToBeFalseIfFeatureNotSupported;",
															"var newAttribute;",
															"",
															"// air-interface-name",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of air-interface-name--------------------------\");",
															"        // Individual Values Definition ",
															"        var dummyValue = \"Dummy \" + String(Math.floor(Math.random() * 999));",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"air-interface-name\";",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    EvaluatingResult = () => {",
															"        try ",
															"        {",
															"         if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString))",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } else ",
															"        {",
															"             if ( (resultValueString === JSON.stringify(\"Air interface ID not yet defined.\")) )",
															"                {",
															"                configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"                } ",
															"            else ",
															"                {",
															"                configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"                }",
															"         }",
															"",
															"            CouldResultBeEvaluated(true);",
															"        } ",
															"        catch (error) ",
															"        {",
															"        CouldResultBeEvaluated(false);",
															"        }",
															"    ",
															"        //Self Testing Function",
															"        function CouldResultBeEvaluated(success)",
															"        {",
															"            pm.test(\"CouldResultBeEvaluated\", function () ",
															"             {",
															"                pm.expect(success).to.be.true;",
															"             });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    defaultValueForStandardEvaluation = \"Interface name not yet defined.\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// remote-air-interface-name",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of remote-air-interface-name--------------------------\");",
															"        // Individual Values Definition ",
															"        var dummyValue = \"Dummy \" + String(Math.floor(Math.random() * 999));",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"remote-air-interface-name\";",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    EvaluatingResult = () => {",
															"        try ",
															"        {",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"ok\";",
															"            } ",
															"        else ",
															"            {",
															"                if ( (resultValueString === JSON.stringify(\"remote air interface name not yet defined.\")) ) ",
															"                {",
															"                    configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"                } ",
															"                else ",
															"                {",
															"                    configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"                }",
															"            }",
															"         CouldResultBeEvaluated(true);",
															"    } ",
															"    catch (error) {",
															"    CouldResultBeEvaluated(false);",
															"    }",
															"    ",
															"    // Self Testing Functions",
															"    function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    defaultValueForStandardEvaluation = \"remote air interface name not yet defined.\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"//    transmitted-radio-signal-id",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------Checking Configuration of transmitted-radio-signal-id-------------------\");",
															"          var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"transmitted-radio-signal-id\";   ",
															"        try {",
															"            var dummyValueOfTypeInteger = Math.floor(Math.random() * capability[\"supported-radio-signal-id-length\"]);",
															"\t\t\tvar dummyValueOfTypeString = GenerateRandomString(capability[\"supported-radio-signal-id-length\"]);",
															"\t\t\tCouldDummyValuesBeGenerated(dummyValueOfTypeInteger, dummyValueOfTypeString);",
															"\t\t\t} ",
															"\t\tcatch (error) ",
															"\t\t    {",
															"\t\t\tCouldDummyValuesBeGenerated();",
															"\t\t\t}",
															"",
															"\t\ttry {",
															"\t\t\tif ( capability[\"supported-radio-signal-id-datatype\"] === \"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_INTEGER\" ) ",
															"\t\t\t{",
															"\t\t\t\tconfiguration[\"transmitted-radio-signal-id\"][\"numeric-radio-signal-id\"] = dummyValueOfTypeInteger;",
															"\t\t\t\tvar dummyValue = dummyValueOfTypeInteger;",
															"\t\t\t\tif ( capability[\"expected-equals-transmitted-radio-signal-id\"] === true ) ",
															"\t\t\t\t{",
															"\t\t\t\t\tconfiguration[\"expected-radio-signal-id\"][\"numeric-radio-signal-id\"] = dummyValueOfTypeInteger;",
															"\t\t\t\t}",
															"\t\t\t} ",
															"\t\t\telse ",
															"\t\t\t{",
															"\t\t\t\tconfiguration[\"transmitted-radio-signal-id\"][\"alphanumeric-radio-signal-id\"] = dummyValueOfTypeString;",
															"\t\t\t\tvar dummyValue = dummyValueOfTypeString;",
															"\t\t\t\tif ( capability[\"expected-equals-transmitted-radio-signal-id\"] === true ) ",
															"\t\t\t\t{",
															"\t\t\t\t\tconfiguration[\"expected-radio-signal-id\"][\"alphanumeric-radio-signal-id\"] = dummyValueOfTypeString;",
															"\t\t\t\t}",
															"\t\t\t}",
															"\t\t\tconfiguration = AddHeadlineToDataObject(configuration, \"air-interface-2-0:air-interface-configuration\");",
															"\t\t\tCouldRequestBodyBeDefined(true);",
															"\t\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"        CouldRequestBodyBeDefined(false);",
															"        }",
															"    ",
															"\t    // Functions",
															"    \tfunction GenerateRandomString(length) ",
															"\t    {",
															"            let randomString = \"\";",
															"            let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
															"            let charactersLength = characters.length;",
															"            for ( let i=0; i<length; i++ )",
															"            {",
															"                randomString += characters.charAt(Math.floor(Math.random() * charactersLength));",
															"            }",
															"            return randomString;",
															"        }",
															"    ",
															"\t    function AddHeadlineToDataObject(objectWithoutHeadline, headline) ",
															"\t    {",
															"            let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"            let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"            let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"            return objectInclHeadline;",
															"\t    }",
															"",
															"\t    // Self Testing Functions",
															"\t    function CouldDummyValuesBeGenerated(dummyValueOfTypeInteger, dummyValueOfTypeString) ",
															"    \t{",
															"            pm.test(\"CouldDummyValuesBeGenerated\", function () ",
															"            {",
															"                pm.expect(dummyValueOfTypeInteger).to.be.an(\"number\");",
															"                pm.expect(dummyValueOfTypeString).to.be.a(\"string\");",
															"                pm.expect(dummyValueOfTypeString).to.not.have.lengthOf(0);",
															"            });",
															"\t    }",
															"\t    ",
															"    \tfunction CouldRequestBodyBeDefined(success) ",
															"    \t{",
															"            pm.test(\"CouldRequestBodyBeDefined\", function () ",
															"            {",
															"            pm.expect(success).to.be.true;",
															"            });",
															"\t    }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    EvaluatingResult = () => { ",
															"        try ",
															"        {",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString))",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"ok\";",
															"            } ",
															"            else ",
															"            {",
															"                if ( (resultValueString === JSON.stringify(\"transmitted radio signal id not yet defined.\")) ) ",
															"                {",
															"                    configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"                } ",
															"                else ",
															"                {",
															"                    configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(true);",
															"        } ",
															"        catch (error) ",
															"        {",
															"            CouldResultBeEvaluated(false);",
															"        }",
															"    ",
															"    // Functions",
															"    function CouldResultBeEvaluated(success) ",
															"    {",
															"        pm.test(\"CouldResultBeEvaluated\", function () ",
															"        {",
															"            pm.expect(success).to.be.true;",
															"        });",
															"    }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    defaultValueForStandardEvaluation = \" \";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"//    expected-radio-signal-id",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------Checking Configuration of expected-radio-signal-id-------------------\");",
															"          var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"expected-radio-signal-id\"; ",
															"\t\ttry {",
															"\t\t\tvar dummyValueOfTypeInteger = Math.floor(Math.random() * capability[\"supported-radio-signal-id-length\"]);",
															"\t\t\tvar dummyValueOfTypeString = GenerateRandomString(capability[\"supported-radio-signal-id-length\"]);",
															"\t\t\tCouldDummyValuesBeGenerated(dummyValueOfTypeInteger, dummyValueOfTypeString);",
															"\t\t\t} ",
															"\t\tcatch (error) ",
															"\t\t\t{",
															"\t\t\tCouldDummyValuesBeGenerated();",
															"\t\t\t}",
															"\t\t",
															"\t\ttry {",
															"\t\t\tif ( capability[\"supported-radio-signal-id-datatype\"] === \"air-interface-2-0:RADIO_SIGNAL_ID_DATATYPE_TYPE_INTEGER\" ) ",
															"\t\t\t{",
															"\t\t\t    configuration[\"expected-radio-signal-id\"][\"numeric-radio-signal-id\"] = dummyValueOfTypeInteger;",
															"\t\t\t\tvar dummyValue = dummyValueOfTypeInteger;",
															"\t\t\t\tif ( capability[\"expected-equals-transmitted-radio-signal-id\"] === true ) ",
															"\t\t\t\t{",
															"\t\t\t\t\tconfiguration[\"transmitted-radio-signal-id\"][\"numeric-radio-signal-id\"] = dummyValueOfTypeInteger;",
															"\t\t\t\t}",
															"\t\t\t} ",
															"\t\t\telse ",
															"\t\t\t{",
															"\t\t\t\tconfiguration[\"expected-radio-signal-id\"][\"alphanumeric-radio-signal-id\"] = dummyValueOfTypeString;",
															"\t\t\t\tvar dummyValue = dummyValueOfTypeString;",
															"\t\t\t\tif ( capability[\"expected-equals-transmitted-radio-signal-id\"] === true ) ",
															"\t\t\t\t{",
															"\t\t\t\t\tconfiguration[\"transmitted-radio-signal-id\"][\"alphanumeric-radio-signal-id\"] = dummyValueOfTypeString;",
															"\t\t\t\t}",
															"\t\t\t}",
															"\t\t\tconfiguration = AddHeadlineToDataObject(configuration, \"air-interface-2-0:air-interface-configuration\");",
															"\t\t\tCouldRequestBodyOfSettingWrongRadioSignalIdBeDefined(true);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t\tCouldRequestBodyOfSettingWrongRadioSignalIdBeDefined(false);",
															"\t\t} ",
															"   ",
															"        // Functions",
															"\t    function GenerateRandomString(length) ",
															"\t    {",
															"            let randomString = \"\";",
															"            let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
															"            let charactersLength = characters.length;",
															"            for ( let i=0; i<length; i++ ) ",
															"            {",
															"                randomString += characters.charAt(Math.floor(Math.random() * charactersLength));",
															"            }",
															"            return randomString;",
															"        }",
															"    ",
															"\t    function AddHeadlineToDataObject(objectWithoutHeadline, headline) ",
															"\t    {",
															"            let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"            let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"            let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"            return objectInclHeadline;",
															"\t    }",
															"",
															"\t    // Self Testing Functions",
															"\t    function CouldRequestBodyOfSettingWrongRadioSignalIdBeDefined(success) ",
															"\t    {",
															"            pm.test(\"CouldRequestBodyOfSettingWrongRadioSignalIdBeDefined\", function () ",
															"            {",
															"            pm.expect(success).to.be.true;",
															"            });",
															"\t    }",
															"\t    function CouldDummyValuesBeGenerated(dummyValueOfTypeInteger, dummyValueOfTypeString) ",
															"\t    {",
															"            pm.test(\"CouldDummyValuesBeGenerated\", function ()",
															"            {",
															"                pm.expect(dummyValueOfTypeInteger).to.be.an(\"number\");",
															"                pm.expect(dummyValueOfTypeString).to.be.a(\"string\");",
															"                pm.expect(dummyValueOfTypeString).to.not.have.lengthOf(0);",
															"            });",
															"    \t}",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    EvaluatingResult = () => { ",
															"    try",
															"    {",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            if ( (resultValueString === JSON.stringify(\"expected radio signal id not yet defined.\")) ) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"            } ",
															"            else ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"            }",
															"        }",
															"        CouldResultBeEvaluated(true);",
															"    } ",
															"    catch (error) ",
															"    {",
															"        CouldResultBeEvaluated(false);",
															"    }",
															"    ",
															"    // Functions",
															"    function CouldResultBeEvaluated(success) ",
															"    {",
															"        pm.test(\"CouldResultBeEvaluated\", function () ",
															"        {",
															"            pm.expect(success).to.be.true;",
															"        });",
															"    }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    defaultValueForStandardEvaluation = \" \";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"//    tx-frequency",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------Checking Configuration of tx-frequency-------------------\");",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"tx-frequency\";       ",
															"\t\ttry ",
															"\t\t{",
															"\t\t\tvar configuredTxFrequency = configuration[\"tx-frequency\"];",
															"\t\t\tvar configuredTransmissionModeName = configuration[\"transmission-mode-min\"];",
															"\t\t\tvar configuredModeIndex = TransmissionModeIndexOf(configuredTransmissionModeName, capability);",
															"\t\t\tvar configuredChannelBandwidth = capability[\"transmission-mode-list\"][configuredModeIndex][\"channel-bandwidth\"];",
															"\t\t\t\t",
															"\t\t\tvar minimumTxFrequency = capability[\"tx-frequency-min\"];",
															"\t\t\tvar maximumTxFrequency = capability[\"tx-frequency-max\"];",
															"\t\t\t\t",
															"\t\t\tif ( (configuredTxFrequency + (3/2)*configuredChannelBandwidth) < maximumTxFrequency) ",
															"\t\t\t{",
															"\t\t\t\tvar dummyValue = configuredTxFrequency + configuredChannelBandwidth;",
															"\t\t\t} ",
															"\t\t\telse ",
															"\t\t\t{",
															"\t\t\t\tvar dummyValue = configuredTxFrequency - configuredChannelBandwidth;",
															"\t\t\t}",
															"\t\t\tCouldDummyValueBeSet(configuredTxFrequency, configuredTransmissionModeName,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tconfiguredModeIndex,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tconfiguredChannelBandwidth,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tminimumTxFrequency,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tmaximumTxFrequency,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tdummyValue);\t",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t\tCouldDummyValueBeSet(configuredTxFrequency, configuredTransmissionModeName,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tconfiguredModeIndex,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tconfiguredChannelBandwidth,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tminimumTxFrequency,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tmaximumTxFrequency,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tdummyValue);",
															"\t\t}",
															"\t\t",
															"\t// Functions",
															"\tfunction TransmissionModeIndexOf(currentModeName, capability) ",
															"\t{",
															"        for (let i=0; i<(capability[\"transmission-mode-list\"].length-1); i++) ",
															"        {",
															"            let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
															"            if ( sampleModeName === currentModeName ) ",
															"            {",
															"                return i;",
															"            }",
															"        }",
															"        console.log(\"ERROR: Name of transmission mode could not be found in air-interface-capability::transmission-mode-list.\");",
															"\t}",
															"",
															"\t// Self Testing Functions",
															"\tfunction CouldDummyValueBeSet(configuredTxFrequency, configuredTransmissionModeName,",
															"                                            configuredModeIndex,",
															"                                            configuredChannelBandwidth,",
															"                                            minimumTxFrequency,",
															"                                            maximumTxFrequency,",
															"                                            dummyValue)",
															"    {",
															"        pm.test(\"CouldConfigurationInformationBeRetrieved\", function () ",
															"        {",
															"            pm.expect(configuredTxFrequency).to.be.a(\"number\");",
															"            pm.expect(configuredTransmissionModeName).to.be.a(\"string\");",
															"            pm.expect(configuredTransmissionModeName).to.not.have.lengthOf(0);",
															"        });",
															"        pm.test(\"CouldConfiguredModeIndexBeEvaluated\", function () ",
															"        {",
															"            pm.expect(configuredModeIndex).to.be.a(\"number\");",
															"        });",
															"        pm.test(\"CouldConfiguredChannelBandwidthBeEvaluated\", function () ",
															"        {",
															"            pm.expect(configuredChannelBandwidth).to.be.a(\"number\");",
															"        });",
															"        pm.test(\"CouldAvailableFrequenciesBeRetrieved\", function () ",
															"        {",
															"            pm.expect(minimumTxFrequency).to.be.a(\"number\");",
															"            pm.expect(maximumTxFrequency).to.be.a(\"number\");",
															"        });",
															"        pm.test(\"CouldDummyValueBeSet\", function () ",
															"        {",
															"            pm.expect(dummyValue).to.be.a(\"number\");",
															"        });",
															"\t}",
															"\t",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    EvaluatingResult = () => { ",
															"    try ",
															"    {",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"        }",
															"        CouldResultBeEvaluated(true);",
															"    } ",
															"    catch (error) ",
															"    {",
															"        CouldResultBeEvaluated(false);",
															"    }",
															"    ",
															"    // Functions",
															"    function CouldResultBeEvaluated(success)",
															"    {",
															"        pm.test(\"CouldResultBeEvaluated\", function () ",
															"        {",
															"            pm.expect(success).to.be.true;",
															"        });",
															"    }",
															"};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    defaultValueForStandardEvaluation = \" \";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}  attributes.push(newAttribute);",
															"",
															"//    rx-frequency",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------Checking Configuration of rx-frequency-------------------\");",
															"         var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"rx-frequency\";    ",
															"\t\ttry ",
															"\t\t{",
															"\t\t\tvar configuredRxFrequency = configuration[\"rx-frequency\"];",
															"\t\t\tvar configuredTransmissionModeName = configuration[\"transmission-mode-min\"];",
															"\t\t\tvar configuredModeIndex = TransmissionModeIndexOf(configuredTransmissionModeName, capability);",
															"\t\t\tvar configuredChannelBandwidth = capability[\"transmission-mode-list\"][configuredModeIndex][\"channel-bandwidth\"];",
															"\t\t\tvar minimumRxFrequency = capability[\"rx-frequency-min\"];",
															"\t\t\tvar maximumRxFrequency = capability[\"rx-frequency-max\"];",
															"\t\t\t\t",
															"\t\t\tif ( (configuredRxFrequency + (3/2)*configuredChannelBandwidth) < maximumRxFrequency) ",
															"\t\t\t{",
															"\t\t\t\tvar dummyValue = configuredRxFrequency + configuredChannelBandwidth;",
															"\t\t\t}",
															"\t\t\telse ",
															"\t\t\t{",
															"\t\t\t\tvar dummyValue = configuredRxFrequency - configuredChannelBandwidth;",
															"\t\t\t}",
															"\t\t\tCouldDummyValueBeSet(configuredRxFrequency, configuredTransmissionModeName,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tconfiguredModeIndex,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tconfiguredChannelBandwidth,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tminimumRxFrequency,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tmaximumRxFrequency,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tdummyValue);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t\tCouldDummyValueBeSet(configuredRxFrequency, configuredTransmissionModeName,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tconfiguredModeIndex,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tconfiguredChannelBandwidth,",
															"\t\t\t\t\t\t\t\t\t\t\t\t\tminimumRxFrequency,",
															"                                            maximumRxFrequency,",
															"                                            dummyValue);",
															"\t\t}",
															"\t\t",
															"\t// Functions",
															"\tfunction TransmissionModeIndexOf(currentModeName, capability)",
															"\t{",
															"        for (let i=0; i<(capability[\"transmission-mode-list\"].length-1); i++) ",
															"        {",
															"            let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
															"            if ( sampleModeName === currentModeName ) {",
															"            return i;",
															"        }",
															"        }",
															"        console.log(\"ERROR: Name of transmission mode could not be found in air-interface-capability::transmission-mode-list.\");",
															"\t}",
															"",
															"\t// Self Testing Functions",
															"\t",
															"\tfunction CouldDummyValueBeSet(configuredRxFrequency, configuredTransmissionModeName,",
															"                                            configuredModeIndex,",
															"                                            configuredChannelBandwidth,",
															"                                            minimumRxFrequency,",
															"                                            maximumRxFrequency,",
															"                                            dummyValue) ",
															"    {",
															"        pm.test(\"CouldConfigurationInformationBeRetrieved\", function () ",
															"        {",
															"            pm.expect(configuredRxFrequency).to.be.a(\"number\");",
															"            pm.expect(configuredTransmissionModeName).to.be.a(\"string\");",
															"            pm.expect(configuredTransmissionModeName).to.not.have.lengthOf(0);",
															"        });",
															"        pm.test(\"CouldConfiguredModeIndexBeEvaluated\", function () ",
															"        {",
															"            pm.expect(configuredModeIndex).to.be.a(\"number\");",
															"        });",
															"        pm.test(\"CouldConfiguredChannelBandwidthBeEvaluated\", function () ",
															"        {",
															"            pm.expect(configuredChannelBandwidth).to.be.a(\"number\");",
															"        });",
															"        pm.test(\"CouldAvailableFrequenciesBeRetrieved\", function () ",
															"        {",
															"            pm.expect(minimumRxFrequency).to.be.a(\"number\");",
															"            pm.expect(maximumRxFrequency).to.be.a(\"number\");",
															"        });",
															"        pm.test(\"CouldDummyValueBeSet\", function () ",
															"        {",
															"            pm.expect(dummyValue).to.be.a(\"number\");",
															"        });",
															"\t}",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    EvaluatingResult = () => { ",
															"    try ",
															"    {",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"        }",
															"        CouldResultBeEvaluated(true);",
															"    } ",
															"    catch (error) ",
															"    {",
															"        CouldResultBeEvaluated(false);",
															"    }",
															"    ",
															"    // Functions",
															"    function CouldResultBeEvaluated(success) ",
															"    {",
															"        pm.test(\"CouldResultBeEvaluated\", function () ",
															"        {",
															"            pm.expect(success).to.be.true;",
															"        });",
															"    }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    defaultValueForStandardEvaluation = \" \";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// transmission-mode-min",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of transmission-mode-min--------------------------\");",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"transmission-mode-min\";     ",
															"        try ",
															"        {",
															"\t\t    let currentModeName = configuration[\"transmission-mode-min\"];",
															"\t\t    let currentModeIndex = TransmissionModeIndexOf(currentModeName, capability);",
															"\t\t    let currentChannelBandwidth = capability[\"transmission-mode-list\"][currentModeIndex][\"channel-bandwidth\"];",
															"\t\t    let currentXpicAvailability = capability[\"transmission-mode-list\"][currentModeIndex][\"xpic-is-avail\"];",
															"\t\t    let minimumRankedModeName = \"\";",
															"\t\t    let minimumRank = Number.MAX_VALUE;",
															"\t\t    for (let i=0; i<(capability[\"transmission-mode-list\"].length-1); i++) ",
															"\t\t    {",
															"\t\t\t    let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
															"\t\t\t    let sampleModeRank = capability[\"transmission-mode-list\"][i][\"transmission-mode-rank\"];",
															"\t\t\t    let sampleModeChannelBandwidth = capability[\"transmission-mode-list\"][i][\"channel-bandwidth\"];",
															"\t\t\t    let sampleModeXpicAvailability = capability[\"transmission-mode-list\"][i][\"xpic-is-avail\"];",
															"\t\t\t    if ( (sampleModeName !== currentModeName) ",
															"\t\t\t\t\t&& (sampleModeRank < minimumRank)",
															"\t\t\t\t\t&& (sampleModeChannelBandwidth === currentChannelBandwidth)",
															"\t\t\t\t\t&& (sampleModeXpicAvailability === currentXpicAvailability) ) ",
															"\t\t\t\t{",
															"\t\t\t\t    minimumRankedModeName = sampleModeName;",
															"\t\t\t\t    minimumRank = sampleModeRank;",
															"\t\t        }",
															"\t\t    }",
															"\t\t    var dummyValue = minimumRankedModeName;",
															"\t\t    CouldDummyValueBeSet(currentModeIndex, currentChannelBandwidth, dummyValue);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t    CouldDummyValueBeSet();",
															"\t\t}",
															"\t\t",
															"\t\t// Functions",
															"\t\tfunction TransmissionModeIndexOf (currentModeName, capability) ",
															"\t\t{",
															"\t\t\tfor (let i=0; i<(capability[\"transmission-mode-list\"].length-1); i++) ",
															"\t\t\t{",
															"\t\t\t\tlet sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
															"\t\t\t\tif ( sampleModeName === currentModeName ) ",
															"\t\t\t\t{",
															"\t\t\t\t    return i;",
															"\t\t    \t}",
															"\t\t    }",
															"\t\t}",
															"",
															"\t\t// Self Testing Functions",
															"\t\tfunction CouldDummyValueBeSet(currentModeIndex, currentChannelBandwidth, dummyValue) ",
															"\t\t{",
															"\t\t    pm.test(\"CouldDummyValueBeSet\", function () ",
															"\t\t    {",
															"            pm.expect(currentModeIndex).to.be.a(\"number\");",
															"            pm.expect(currentChannelBandwidth).to.be.a(\"number\");",
															"            pm.expect(dummyValue).to.be.a(\"string\");",
															"            pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"\t\t    });",
															"\t\t}",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    EvaluatingResult = () => {",
															"        try ",
															"        {",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"ok\";",
															"\t\t    } ",
															"\t\t    else ",
															"\t\t    {",
															"                configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"\t\t    }",
															"\t\t    CouldResultBeEvaluated(true);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t    CouldResultBeEvaluated(false);",
															"\t\t}",
															"\t\t",
															"\t\t// Self Testing Functions",
															"\t\tfunction CouldResultBeEvaluated(success) ",
															"\t\t{",
															"\t\t    pm.test(\"CouldResultBeEvaluated\", function () ",
															"\t\t    {",
															"            pm.expect(success).to.be.true;",
															"\t\t    });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// transmission-mode-max",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of transmission-mode-max--------------------------\");",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"transmission-mode-max\";    ",
															"        try",
															"        {",
															"\t\t\tlet currentModeName = configuration[\"transmission-mode-max\"];",
															"\t\t\tlet currentModeIndex = TransmissionModeIndexOf(currentModeName, capability);",
															"\t\t\tlet currentChannelBandwidth = capability[\"transmission-mode-list\"][currentModeIndex][\"channel-bandwidth\"];",
															"\t\t\tlet currentXpicAvailability = capability[\"transmission-mode-list\"][currentModeIndex][\"xpic-is-avail\"];",
															"\t\t\tlet maximumRankedModeName = \"\";",
															"\t\t\tlet maximumRank = 0;",
															"\t\t\t\t",
															"\t\t\tfor (let i=0; i<(capability[\"transmission-mode-list\"].length-1); i++) ",
															"\t\t\t{",
															"\t\t\t\tlet sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
															"\t\t\t\tlet sampleModeRank = capability[\"transmission-mode-list\"][i][\"transmission-mode-rank\"];",
															"\t\t\t\tlet sampleModeChannelBandwidth = capability[\"transmission-mode-list\"][i][\"channel-bandwidth\"];",
															"\t\t\t\tlet sampleModeXpicAvailability = capability[\"transmission-mode-list\"][i][\"xpic-is-avail\"];",
															"\t\t\t\tif ( (sampleModeName !== currentModeName) ",
															"\t\t\t\t\t\t&& (sampleModeRank > maximumRank)",
															"\t\t\t\t\t\t&& (sampleModeChannelBandwidth === currentChannelBandwidth)",
															"\t\t\t\t\t\t&& (sampleModeXpicAvailability === currentXpicAvailability) ) ",
															"\t\t\t\t{",
															"\t\t\t\t\tmaximumRankedModeName = sampleModeName;",
															"\t\t\t\t\tmaximumRank = sampleModeRank;",
															"\t\t\t\t}",
															"\t\t\t}",
															"\t\t\tvar dummyValue = maximumRankedModeName;",
															"\t\t\tCouldDummyValueBeSet(currentModeIndex, currentChannelBandwidth, dummyValue);",
															"\t\t} ",
															"\t    catch (error) ",
															"\t    {",
															"\t\t    CouldDummyValueBeSet();",
															"\t    }",
															"     ",
															"\t\t// Functions",
															"\t\tfunction TransmissionModeIndexOf (currentModeName, capability) ",
															"\t\t{",
															"\t\t\tfor (let i=0; i<(capability[\"transmission-mode-list\"].length-1); i++) ",
															"\t\t\t{",
															"\t\t\t\tlet sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
															"\t\t\t\tif ( sampleModeName === currentModeName )",
															"\t\t\t\t{",
															"\t\t\t\treturn i;",
															"\t\t\t    }",
															"\t\t\t}",
															"\t\t}",
															"",
															"\t\t// Self Testing Functions",
															"\t\tfunction CouldDummyValueBeSet(currentModeIndex, currentChannelBandwidth, dummyValue) ",
															"\t\t{",
															"\t\t    pm.test(\"CouldDummyValueBeSet\", function () ",
															"\t\t    {",
															"                pm.expect(currentModeIndex).to.be.a(\"number\");",
															"                pm.expect(currentChannelBandwidth).to.be.a(\"number\");",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"\t\t    });",
															"\t\t}",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    EvaluatingResult = () => {",
															"        try {",
															"\t\t\tif ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"ok\";",
															"\t\t    } ",
															"\t\t    else ",
															"\t\t    {",
															"                configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"\t\t    }",
															"\t\t    CouldResultBeEvaluated(true);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t    CouldResultBeEvaluated(false);",
															"\t\t}",
															"\t\t",
															"\t\t// Self Testing Functions",
															"\t\tfunction CouldResultBeEvaluated(success) ",
															"\t\t{",
															"\t\t    pm.test(\"CouldResultBeEvaluated\", function () ",
															"\t\t    {",
															"            pm.expect(success).to.be.true;",
															"\t\t    });",
															"\t\t}",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// power-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of power-is-on-----------------------\");",
															"        // Individual Values Definition ",
															"        ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"power-is-on\";",
															"        ",
															"        try ",
															"        {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } ",
															"        catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) ",
															"        {",
															"            pm.test(\"CouldDummyValueBeSet\", function () ",
															"            {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"            ",
															"    EvaluatingResult = () => {",
															"\ttry ",
															"\t{",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) {",
															"                configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            if ( (resultValueString === \"true\") ) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"            } ",
															"            else ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"            }",
															"        }",
															"        CouldResultBeEvaluated(true);",
															"\t} ",
															"\tcatch (error) ",
															"\t{",
															"        CouldResultBeEvaluated(false);",
															"\t}",
															"\t",
															"\t// Self Testing Functions",
															"\t\tfunction CouldResultBeEvaluated(success) ",
															"\t\t{",
															"\t\t    pm.test(\"CouldResultBeEvaluated\", function () ",
															"\t\t    {",
															"            pm.expect(success).to.be.true;",
															"\t\t    });",
															"\t\t}",
															"\t};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// transmitter-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of transmitter-is-on-----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"transmitter-is-on\";",
															"            ",
															"        // Individual Values Definition ",
															"        try ",
															"        {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } ",
															"        catch (error) ",
															"        {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) ",
															"        {",
															"            pm.test(\"CouldDummyValueBeSet\", function () ",
															"            {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"            ",
															"    EvaluatingResult = () => {",
															"\ttry ",
															"\t{",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            if ( (resultValueString === \"true\") ) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"            }",
															"            else ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"            }",
															"        }",
															"        CouldResultBeEvaluated(true);",
															"\t} ",
															"\tcatch (error) ",
															"\t{",
															"        CouldResultBeEvaluated(false);",
															"\t}",
															"\t",
															"\t// Self Testing Functions",
															"\t\tfunction CouldResultBeEvaluated(success) ",
															"\t\t{",
															"\t\t    pm.test(\"CouldResultBeEvaluated\", function () ",
															"\t\t    {",
															"            pm.expect(success).to.be.true;",
															"\t\t    });",
															"\t\t}",
															"\t};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// receiver-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of receiver-is-on-----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"receiver-is-on\";",
															"            ",
															"        // Individual Values Definition ",
															"        try ",
															"        {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) ",
															"        {",
															"            pm.test(\"CouldDummyValueBeSet\", function () ",
															"            {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"            ",
															"    EvaluatingResult = () => {",
															"\ttry {",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            if ( (resultValueString === \"true\") ) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"            } ",
															"            else ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"            }",
															"        }",
															"",
															"        CouldResultBeEvaluated(true);",
															"\t} ",
															"\tcatch (error) ",
															"\t{",
															"        CouldResultBeEvaluated(false);",
															"\t}",
															"\t",
															"\t// Self Testing Functions",
															"\tfunction CouldResultBeEvaluated(success) ",
															"\t{",
															"\t\tpm.test(\"CouldResultBeEvaluated\", function () ",
															"\t\t{",
															"            pm.expect(success).to.be.true;",
															"\t\t});",
															"\t}",
															"\t};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"} attributes.push(newAttribute);",
															"",
															"// tx-power",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of tx-power--------------------------\");",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"tx-power\";    ",
															"        try ",
															"        {",
															"\t\t    var currentValue = configuration[\"tx-power\"];     ",
															"\t    \tvar currentModeName = status[\"transmission-mode-cur\"];",
															"\t\t    var currentModeIndex = TransmissionModeIndexOf(currentModeName, capability);",
															"\t\t    var minimumValue = capability[\"transmission-mode-list\"][currentModeIndex][\"tx-power-min\"];",
															"\t\t    var maximumValue = capability[\"transmission-mode-list\"][currentModeIndex][\"tx-power-max\"];",
															"\t\t    var valueRange = maximumValue - minimumValue; ",
															"            var dummyValue = minimumValue + Math.floor(Math.random() * valueRange);",
															"\t\t    CouldDummyValueBeSet(currentValue, currentModeName, currentModeIndex, minimumValue, ",
															"                            maximumValue, ",
															"                            valueRange, ",
															"                            dummyValue",
															"                        );",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t    CouldDummyValueBeSet(currentValue, currentModeName, currentModeIndex, minimumValue, ",
															"                            maximumValue, ",
															"                            valueRange, ",
															"                            dummyValue",
															"                        );",
															"\t\t}",
															"\t\t",
															"\t\t// Functions",
															"\t\tfunction TransmissionModeIndexOf(currentModeName, capability) ",
															"\t\t{",
															"\t\t    for (let i=0; i<(capability[\"transmission-mode-list\"].length-1); i++) ",
															"\t\t    {",
															"                let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];",
															"                if ( sampleModeName === currentModeName ) ",
															"                {",
															"                    return i;",
															"                }",
															"\t\t    }",
															"\t\t    console.log(\"ERROR: Name of transmission mode could not be found in air-interface-capability::transmission-mode-list.\");",
															"\t\t}",
															"",
															"\t\t// Self Testing Functions",
															"\t\tfunction CouldDummyValueBeSet(currentValue, currentModeName, currentModeIndex, minimumValue, ",
															"                                maximumValue, ",
															"                                valueRange, ",
															"                                dummyValue) ",
															"        {",
															"\t\t\tpm.test(\"CouldCurrentValueBeReadFromConfiguration\", function () ",
															"\t\t\t{",
															"\t\t\t\tpm.expect(currentValue).to.be.a(\"number\");",
															"\t\t\t});",
															"\t\t\tpm.test(\"CouldCurrentModeNameBeReadFromStatus\", function () ",
															"\t\t\t{",
															"\t\t\t\tpm.expect(currentModeName).to.be.a(\"string\");",
															"\t\t\t\tpm.expect(currentModeName).to.not.have.lengthOf(0);",
															"\t\t\t});",
															"\t\t\tpm.test(\"CouldCurrentModeIndexBeDerivedFromCapabilities\", function () ",
															"\t\t\t{",
															"\t\t\t\tpm.expect(currentModeIndex).to.be.a(\"number\");",
															"\t\t\t});",
															"\t\t\tpm.test(\"CouldMinimumValueBeReadFromCapabilities\", function () ",
															"\t\t\t{",
															"\t\t\t\tpm.expect(minimumValue).to.be.a(\"number\");",
															"\t\t\t});",
															"\t\t\tpm.test(\"CouldMaximumValueBeReadFromCapabilities\", function () ",
															"\t\t\t{",
															"\t\t\t\tpm.expect(maximumValue).to.be.a(\"number\");",
															"\t\t\t});",
															"\t\t\tpm.test(\"CouldValueRangeBeCalculated\", function () ",
															"\t\t\t{",
															"\t\t\t\tpm.expect(valueRange).to.be.a(\"number\");",
															"\t\t\t\tpm.expect(valueRange).to.be.above(0);",
															"\t\t\t});",
															"\t\t\tpm.test(\"CouldDummyValueBeDefined\", function () ",
															"\t\t\t{",
															"\t\t\t\tpm.expect(dummyValue).to.be.a(\"number\");",
															"\t\t\t\tpm.expect(dummyValue).to.be.at.least(minimumValue);",
															"\t\t\t\tpm.expect(dummyValue).to.be.at.most(maximumValue);",
															"\t\t\t});",
															"\t\t}",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"    try ",
															"    {",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"        }",
															"        CouldResultBeEvaluated(true);",
															"\t} ",
															"\tcatch (error) ",
															"\t{",
															"        CouldResultBeEvaluated(false);",
															"\t}",
															"    ",
															"    // Functions",
															"    function CouldResultBeEvaluated(success) ",
															"    {",
															"        pm.test(\"CouldResultBeEvaluated\", function () ",
															"        {",
															"            pm.expect(success).to.be.true;",
															"        });",
															"    }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"} attributes.push(newAttribute);",
															"",
															"// adaptive-modulation-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of adaptive-modulation-is-on-----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"adaptive-modulation-is-on\";",
															"            ",
															"        // Individual Values Definition ",
															"        try ",
															"        {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } ",
															"        catch (error) ",
															"        {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) ",
															"        {",
															"            pm.test(\"CouldDummyValueBeSet\", function () ",
															"            {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"            ",
															"    EvaluatingResult = () => {",
															"\ttry ",
															"\t{",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            if ( (resultValueString === \"true\") ) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"            } ",
															"            else ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"            }",
															"        }",
															"        CouldResultBeEvaluated(true);",
															"\t} ",
															"\tcatch (error) ",
															"\t{",
															"    CouldResultBeEvaluated(false);",
															"\t}",
															"\t",
															"\t// Self Testing Functions",
															"\tfunction CouldResultBeEvaluated(success) ",
															"\t{",
															"\t\tpm.test(\"CouldResultBeEvaluated\", function () ",
															"\t\t{",
															"            pm.expect(success).to.be.true;",
															"\t\t});",
															"\t}",
															"\t};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"} attributes.push(newAttribute);",
															"",
															"// mimo-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of mimo-is-on-----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"mimo-is-on\";",
															"            ",
															"        // Individual Values Definition ",
															"        try ",
															"        {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } ",
															"        catch (error) ",
															"        {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) ",
															"        {",
															"            pm.test(\"CouldDummyValueBeSet\", function () ",
															"            {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"            ",
															"    EvaluatingResult = () => {",
															"\ttry ",
															"\t{",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            if ( (resultValueString === \"true\") ) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"            } ",
															"            else ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"            }",
															"        }",
															"        CouldResultBeEvaluated(true);",
															"\t} ",
															"\tcatch (error) ",
															"\t{",
															"        CouldResultBeEvaluated(false);",
															"\t}",
															"\t",
															"\t// Self Testing Functions",
															"\tfunction CouldResultBeEvaluated(success) ",
															"\t{",
															"\t\tpm.test(\"CouldResultBeEvaluated\", function () ",
															"\t\t{",
															"            pm.expect(success).to.be.true;",
															"\t\t});",
															"\t}",
															"\t};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"} attributes.push(newAttribute);",
															"",
															"// alic-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of alic-is-on-----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"alic-is-on\";",
															"            ",
															"        // Individual Values Definition ",
															"        try ",
															"        {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } ",
															"        catch (error) ",
															"        {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) ",
															"        {",
															"            pm.test(\"CouldDummyValueBeSet\", function () ",
															"            {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"            ",
															"    EvaluatingResult = () => {",
															"\ttry ",
															"\t{",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"        if ( (resultValueString === \"true\") ) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"        } ",
															"        else ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"        }",
															"        }",
															"        CouldResultBeEvaluated(true);",
															"\t} ",
															"\tcatch (error) ",
															"\t{",
															"        CouldResultBeEvaluated(false);",
															"\t}",
															"\t",
															"\t// Self Testing Functions",
															"\tfunction CouldResultBeEvaluated(success) ",
															"\t{",
															"\t\tpm.test(\"CouldResultBeEvaluated\", function () ",
															"\t\t{",
															"            pm.expect(success).to.be.true;",
															"\t\t});",
															"\t}",
															"\t};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"} attributes.push(newAttribute);",
															"",
															"// atpc-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of atpc-is-on-----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"atpc-is-on\";",
															"            ",
															"        // Individual Values Definition ",
															"        try ",
															"        {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } ",
															"        catch (error) ",
															"        {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) ",
															"        {",
															"            pm.test(\"CouldDummyValueBeSet\", function () ",
															"            {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"            ",
															"    EvaluatingResult = () => {",
															"\ttry ",
															"\t{",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            if ( (resultValueString === \"true\") ) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"            } ",
															"            else ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"            }",
															"        }",
															"        CouldResultBeEvaluated(true);",
															"\t} ",
															"\tcatch (error) ",
															"\t{",
															"    CouldResultBeEvaluated(false);",
															"\t}",
															"\t",
															"\t// Self Testing Functions",
															"\tfunction CouldResultBeEvaluated(success) ",
															"\t{",
															"\t\tpm.test(\"CouldResultBeEvaluated\", function () ",
															"\t\t{",
															"            pm.expect(success).to.be.true;",
															"\t\t});",
															"\t}",
															"\t};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// atpc-thresh-upper",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of atpc-thresh-upper--------------------------\");",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"atpc-thresh-upper\";    ",
															"        try ",
															"        {",
															"\t\t    var currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"\t\t    var minimumValue = configuration[\"atpc-thresh-lower\"];",
															"\t\t    CouldCurrentConfigurationValuesBeRead(currentValue, minimumValue);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t    CouldCurrentConfigurationValuesBeRead();",
															"\t\t}",
															"\t\ttry ",
															"\t\t{",
															"\t\t    if ( (currentValue - 1) > minimumValue) ",
															"\t\t    {",
															"                var dummyValue = currentValue - 1;",
															"\t\t    } ",
															"\t\t    else ",
															"\t\t    {",
															"                var dummyValue = currentValue + 1;",
															"\t\t    }",
															"\t\t    CouldDummyValueBeDefined(true);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t    CouldDummyValueBeDefined(false);",
															"\t\t}",
															"\t\t",
															"\t\t// Self Testing Functions",
															"\t\tfunction CouldCurrentConfigurationValuesBeRead(currentValue, minimumValue) ",
															"\t\t{",
															"\t\t    pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () ",
															"\t\t    {",
															"                pm.expect(currentValue).to.be.a(\"number\");",
															"                pm.expect(minimumValue).to.be.a(\"number\");",
															"\t\t    });",
															"\t\t}",
															"",
															"\t\tfunction CouldDummyValueBeDefined(success) ",
															"\t\t{",
															"\t\t    pm.test(\"CouldDummyValueBeDefined\", function () ",
															"\t\t    {",
															"                pm.expect(success).to.be.true;",
															"\t\t    });",
															"\t\t}",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"    try",
															"    {",
															"\t\tif ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString) ) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"\t\t} ",
															"\t\telse ",
															"\t\t{",
															"            if ( (resultValueString === \"99\") ) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"            }",
															"            else ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"            }",
															"\t\t}",
															"\t\tCouldResultBeEvaluated(true);",
															"\t} ",
															"\tcatch (error) ",
															"\t{",
															"        CouldResultBeEvaluated(false);",
															"\t}",
															"    ",
															"    // Functions",
															"    function CouldResultBeEvaluated(success) ",
															"    {",
															"        pm.test(\"CouldResultBeEvaluated\", function () ",
															"        {",
															"            pm.expect(success).to.be.true;",
															"        });",
															"    }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"",
															"",
															"// atpc-thresh-lower",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of atpc-thresh-lower--------------------------\");",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"atpc-thresh-lower\";    ",
															"       try ",
															"        {",
															"\t\t    var currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"\t\t    var maximumValue = configuration[\"atpc-thresh-upper\"];",
															"\t\t    CouldCurrentConfigurationValuesBeRead(currentValue, maximumValue);",
															"\t    } ",
															"\t    catch (error) ",
															"\t    {",
															"\t\t    CouldCurrentConfigurationValuesBeRead();",
															"\t\t}",
															"",
															"\t\ttry ",
															"\t\t{",
															"\t\t    if ( (currentValue + 1) < maximumValue) ",
															"\t\t    {",
															"                var dummyValue = currentValue + 1;",
															"\t\t    } ",
															"\t\t    else ",
															"\t\t    {",
															"                var dummyValue = currentValue - 1;",
															"\t\t    }",
															"\t\t    CouldDummyValueBeDefined(true);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t    CouldDummyValueBeDefined(false);",
															"\t\t}",
															"\t\t",
															"\t\t// Self Testing Functions",
															"\t\tfunction CouldCurrentConfigurationValuesBeRead(currentValue, maximumValue) ",
															"\t\t{",
															"\t\t    pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () ",
															"\t\t    {",
															"                pm.expect(currentValue).to.be.a(\"number\");",
															"                pm.expect(maximumValue).to.be.a(\"number\");",
															"\t\t    });",
															"\t\t}",
															"",
															"\t\tfunction CouldDummyValueBeDefined(success) ",
															"\t\t{",
															"\t\t    pm.test(\"CouldDummyValueBeDefined\", function () ",
															"\t\t    {",
															"                pm.expect(success).to.be.true;",
															"\t\t    });",
															"\t\t}",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"       try ",
															"       {",
															"\t        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"ok\";",
															"\t\t    } ",
															"\t\t    else ",
															"\t\t    {",
															"                if ( (resultValueString === \"99\") ) ",
															"                {",
															"                    configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"                } ",
															"                else ",
															"                {",
															"                    configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"                }",
															"\t\t    }",
															"\t\t    CouldResultBeEvaluated(true);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t    CouldResultBeEvaluated(false);",
															"\t\t}",
															"    ",
															"    // Functions",
															"    function CouldResultBeEvaluated(success) ",
															"    {",
															"        pm.test(\"CouldResultBeEvaluated\", function () ",
															"            {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// atpc-tx-power-min",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of atpc-tx-power-min--------------------------\");",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"atpc-tx-power-min\";    ",
															"        try ",
															"        {",
															"\t\t    var currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"\t\t    CouldCurrentConfigurationValuesBeRead(currentValue);",
															"\t\t} catch (error) {",
															"\t\t    CouldCurrentConfigurationValuesBeRead();",
															"\t\t}",
															"",
															"\t\ttry ",
															"\t\t{",
															"\t\t    let currentModeName = configuration[\"transmission-mode-min\"];",
															"\t\t    for (let i=0; i<(capability[\"transmission-mode-list\"].length-1); i++) ",
															"\t\t    {",
															"                let sampleModeName = capability[\"transmission-mode-list\"][i][\"transmission-mode-name\"];            ",
															"                if ( sampleModeName === currentModeName ) ",
															"                {",
															"                    var minimumValue = capability[\"transmission-mode-list\"][i][\"tx-power-min\"];",
															"                }",
															"\t\t    }",
															"\t\t    CouldMinimumValueBeRetrieved(minimumValue);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t    CouldMinimumValueBeRetrieved();",
															"\t\t}",
															"\t\ttry ",
															"\t\t{",
															"\t\t    var dummyValue = minimumValue + Math.floor(Math.random() * 3);",
															"\t\t    if ( dummyValue === currentValue ) ",
															"\t\t    {",
															"                dummyValue = dummyValue + 1;",
															"\t\t    }    ",
															"\t\t    CouldDummyValueBeDefined(true);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t    CouldDummyValueBeDefined(false);",
															"\t\t}",
															"\t\t\t\t",
															"\t\t// Self Testing Functions",
															"\t\tfunction CouldCurrentConfigurationValuesBeRead(currentValue) ",
															"\t\t{",
															"\t\t\tpm.test(\"CouldCurrentConfigurationValuesBeRead\", function () ",
															"\t\t\t{",
															"\t\t\t    pm.expect(currentValue).to.be.a(\"number\");",
															"\t\t\t});",
															"\t\t}",
															"",
															"\t\tfunction CouldMinimumValueBeRetrieved(minimumValue) ",
															"\t\t{",
															"\t\t\tpm.test(\"CouldMinimumValueBeRetrieved\", function () ",
															"\t\t\t{",
															"\t\t\t    pm.expect(minimumValue).to.be.a(\"number\");",
															"\t\t\t});",
															"\t\t}",
															"",
															"\t\tfunction CouldDummyValueBeDefined(success) ",
															"\t\t{",
															"\t\t\tpm.test(\"CouldDummyValueBeDefined\", function () ",
															"\t\t\t{",
															"\t\t\t    pm.expect(success).to.be.true;",
															"\t\t\t});",
															"\t\t}",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try ",
															"\t\t{",
															"\t\t\tif ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"            {",
															"\t\t\t    configurationValidationResults[attributeUnderTest] = \"ok\";",
															"\t\t\t} ",
															"\t\t\telse ",
															"\t\t\t{",
															"\t\t\t    if ( resultValueString === \"-99\" ) ",
															"\t\t\t    {",
															"                    configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"\t\t\t    } ",
															"\t\t\t    else ",
															"\t\t\t    {",
															"                    configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"\t\t\t    }",
															"\t\t    }",
															"\t\t    CouldResultBeEvaluated(true);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t    CouldResultBeEvaluated(false);",
															"\t\t}",
															"    ",
															"    // Functions",
															"    ",
															"    function CouldResultBeEvaluated(success) ",
															"    {",
															"        pm.test(\"CouldResultBeEvaluated\", function () ",
															"        {",
															"            pm.expect(success).to.be.true;",
															"        });",
															"    }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// auto-freq-select-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of auto-freq-select-is-on-----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"auto-freq-select-is-on\";",
															"            ",
															"        // Individual Values Definition ",
															"        try ",
															"        {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } ",
															"        catch (error) ",
															"        {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) ",
															"        {",
															"            pm.test(\"CouldDummyValueBeSet\", function () ",
															"            {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"            ",
															"    EvaluatingResult = () => {",
															"\ttry ",
															"\t{",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            if ( (resultValueString === \"true\") ) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"            } ",
															"            else ",
															"            {",
															"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"            }",
															"        }",
															"        CouldResultBeEvaluated(true);",
															"\t} ",
															"\tcatch (error) ",
															"\t{",
															"        CouldResultBeEvaluated(false);",
															"\t}",
															"\t",
															"\t// Self Testing Functions",
															"\tfunction CouldResultBeEvaluated(success)",
															"\t{",
															"\t\tpm.test(\"CouldResultBeEvaluated\", function () ",
															"\t\t{",
															"            pm.expect(success).to.be.true;",
															"\t\t});",
															"\t\t}",
															"\t};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}  attributes.push(newAttribute);",
															"",
															"// auto-freq-select-range",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of auto-freq-select-range--------------------------\");",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"auto-freq-select-range\";    ",
															"        try ",
															"\t\t{",
															"\t\t    var dummyValue = Math.floor(Math.random() * 5);",
															"\t\t    CouldDummyValueBeDefined(true);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t    CouldDummyValueBeDefined(false);",
															"\t\t}",
															"\t\t\t\t",
															"\t\t// Self Testing Functions",
															"\t\tfunction CouldDummyValueBeDefined(success) ",
															"\t\t{",
															"\t\t    pm.test(\"CouldDummyValueBeDefined\", function () ",
															"\t\t    {",
															"                pm.expect(success).to.be.true;",
															"\t\t    });",
															"\t\t}",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try ",
															"\t\t{",
															"\t\t    if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString))",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"ok\";",
															"\t\t    } ",
															"\t\t    else ",
															"\t\t    {",
															"                if ( (capability[\"auto-freq-select-is-avail\"] === false)",
															"                && (resultValueString === \"-1\") ) ",
															"                {",
															"                    configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"                } ",
															"                else ",
															"                {",
															"                    configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"                }",
															"\t\t    }",
															"\t\t    CouldResultBeEvaluated(true);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t    CouldResultBeEvaluated(false);",
															"\t\t}",
															"    ",
															"    // Functions",
															"\tfunction CouldResultBeEvaluated(success) ",
															"\t{",
															"        pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// modulation-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of modulation-is-on-----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"modulation-is-on\";",
															"            ",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) ",
															"        {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) ",
															"        {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"            ",
															"    EvaluatingResult = () => {",
															"\ttry {",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            if ( (resultValueString === \"true\") ) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"            } else {",
															"                configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"            }",
															"        }",
															"        CouldResultBeEvaluated(true);",
															"\t} catch (error) {",
															"        CouldResultBeEvaluated(false);",
															"\t}",
															"\t",
															"\t// Self Testing Functions",
															"\tfunction CouldResultBeEvaluated(success) ",
															"\t{",
															"\t\tpm.test(\"CouldResultBeEvaluated\", function () {",
															"        pm.expect(success).to.be.true;",
															"\t\t});",
															"\t}",
															"\t};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}  attributes.push(newAttribute);",
															"",
															"// encryption-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of encryption-is-on-----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"encryption-is-on\";",
															"            ",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) ",
															"        {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"            ",
															"    EvaluatingResult = () => {",
															"\ttry ",
															"\t{",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            if ( (resultValueString === \"true\") ) {",
															"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"            } else {",
															"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"            }",
															"        }",
															"    CouldResultBeEvaluated(true);",
															"\t} catch (error) {",
															"        CouldResultBeEvaluated(false);",
															"\t}",
															"\t",
															"\t// Self Testing Functions",
															"\tfunction CouldResultBeEvaluated(success) {",
															"\t\tpm.test(\"CouldResultBeEvaluated\", function () {",
															"        pm.expect(success).to.be.true;",
															"\t\t});",
															"\t}",
															"\t};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// cryptographic-key",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of cryptographic-key-------------------------\");",
															"            ",
															"        var dummyValue = GenerateRandomString(16);",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"cryptographic-key\";",
															"            ",
															"        // Functions",
															"        function GenerateRandomString(length) ",
															"        {",
															"            let randomString = \"\";",
															"            let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
															"            let charactersLength = characters.length;",
															"            for ( let i=0; i<length; i++ ) {",
															"                randomString += characters.charAt(Math.floor(Math.random() * charactersLength));",
															"            }",
															"            return randomString;",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"Cryptographic key not yet defined.\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// loop-back-kind-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of loop-back-kind-on-----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"loop-back-kind-on\";",
															"            ",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"            ",
															"    EvaluatingResult = () => {",
															"\ttry ",
															"\t{",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) ",
															"        {",
															"            configurationValidationResults[attributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            if ( (resultValueString === \"true\") ) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"            } else {",
															"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"            }",
															"        }",
															"        CouldResultBeEvaluated(true);",
															"\t} catch (error) {",
															"        CouldResultBeEvaluated(false);",
															"\t}",
															"\t",
															"\t// Self Testing Functions",
															"\tfunction CouldResultBeEvaluated(success) ",
															"\t\t{",
															"\t\tpm.test(\"CouldResultBeEvaluated\", function () {",
															"        pm.expect(success).to.be.true;",
															"\t\t});",
															"\t\t}",
															"\t};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// maintenance-timer",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of maintenance-timer--------------------------\");",
															"            ",
															"        var ATTRIBUTE_UNDER_TEST = \"maintenance-timer\";",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"\t\ttry {",
															"\t\t\tvar currentValue;",
															"\t\t\tcurrentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"\t\t\tCouldCurrentConfigurationValuesBeRead(currentValue);",
															"\t\t} catch (error) {",
															"\t\t\tCouldCurrentConfigurationValuesBeRead();",
															"\t\t}",
															"\t\ttry {",
															"\t\t\tvar maintenanceTimerRange = capability[\"maintenance-timer-range\"]",
															"\t\t\tvar randomValue = getRandomValues(maintenanceTimerRange,currentValue);",
															"\t\t\tCouldAnAvailableConfigurationValueBeRead(maintenanceTimerRange, randomValue);",
															"\t\t} catch (error) {",
															"\t\t\tCouldAnAvailableConfigurationValueBeRead();",
															"\t\t}",
															"\t\ttry {",
															"\t\t\tvar dummyValue = randomValue;",
															"\t\t\tCouldDummyValueBeDefined(true);",
															"\t\t} catch (error) {",
															"\t\t\tCouldDummyValueBeDefined(false);",
															"\t\t}",
															"\t\t",
															"\t\t// Functions",
															"\t\tfunction AddRandomIntString() {",
															"            return String(Math.floor(Math.random() * 999));",
															"        }",
															"",
															"        function getRandomValues(availableValues,currentValue) {",
															"            var randomValue=0;",
															"\t        if(availableValues.includes(\"-\"))",
															"\t        {",
															"\t\t        var rangeValues = availableValues.split(\"-\");",
															"\t\t        do ",
															"\t\t        {",
															"\t\t            randomValue = getRandomValueFromAvailableValues(rangeValues[0],rangeValues[1]);",
															"\t\t        }while(randomValue == currentValue);",
															"\t        }",
															"\t        else if(availableValues.includes(\",\"))",
															"\t        {",
															"\t\t        var concreteValues = availableValues.split(\",\");",
															"\t\t        do ",
															"\t\t        {",
															"\t\t\t        var randomIndex = getRandomValueFromAvailableValues(0,concreteValues.length);",
															"\t\t\t        randomValue = Math.floor(concreteValues[randomIndex]);",
															"\t\t        }while(randomValue == currentValue);",
															"\t        }",
															"\t        else",
															"\t        {",
															"\t\t        randomValue = Math.floor(availableValues);",
															"\t        }",
															"\t        return randomValue;",
															"        }",
															"",
															"        function getRandomValueFromAvailableValues(min, max) {  ",
															"            return Math.floor(Math.random() * (max - min) + min);  ",
															"        } ",
															"\t\t",
															"\t\t// Self Testing Functions",
															"\t\tfunction CouldAnAvailableConfigurationValueBeRead(maintenanceTimerRange, randomValue) {",
															"            pm.test(\"CouldAnAvailableConfigurationValueBeRead\", function () {",
															"                pm.expect(maintenanceTimerRange).to.be.a(\"string\");",
															"                pm.expect(maintenanceTimerRange).to.not.have.lengthOf(0);",
															"                pm.expect(randomValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"",
															"        function CouldCurrentConfigurationValuesBeRead(currentValue) {",
															"            pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
															"                pm.expect(currentValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"",
															"        function CouldDummyValueBeDefined(success) {",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try ",
															"        {",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (parseInt(resultValueString) >= 0)",
															"            && (parseInt(resultValueString) <= parseInt(dummyValueString)) ) ",
															"            {",
															"                configurationValidationResults[attributeUnderTest] = \"ok\";",
															"            } else {",
															"                if ( resultValueString === \"-1\" ) {",
															"                    configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"                } else {",
															"                    if (resultValueString === capability[\"maintenance-timer-range\"]) {",
															"                        configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"                    } else {",
															"                        configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"                    }",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(true);",
															"\t    } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"\t\t}",
															"    ",
															"    // Functions",
															"    function CouldResultBeEvaluated(success) ",
															"    {",
															"        pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}  attributes.push(newAttribute);",
															"",
															"// problem-kind-severity",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of problem-kind-severity--------------------------\");",
															"        var DATATYPE_UNDER_TEST = \"problem-kind-severity-list\";",
															"        const DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var ATTRIBUTE_UNDER_TEST = \"problem-kind-severity\";",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"problem-kind-name\";",
															"\t\ttry",
															"\t\t{",
															"\t\t    var currentValue;",
															"\t\t\tcurrentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"\t\t\tkeysOfDatatypeInstanceUnderTest[0].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"\t\t    CouldCurrentConfigurationValuesBeRead(currentValue);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t    CouldCurrentConfigurationValuesBeRead();",
															"\t\t}",
															"\t\ttry {",
															"\t\t\tif ( currentValue !== \"air-interface-2-0:SEVERITY_TYPE_MINOR\" ) {",
															"\t\t\t\tvar dummyValue = \"air-interface-2-0:SEVERITY_TYPE_MINOR\";",
															"\t\t\t} else {",
															"\t\t\t\tvar dummyValue = \"air-interface-2-0:SEVERITY_TYPE_MAJOR\";",
															"\t\t\t}",
															"\t\t\tCouldDummyValueBeDefined(true);",
															"\t\t} ",
															"\t\tcatch (error) ",
															"\t\t{",
															"\t\t\tCouldDummyValueBeDefined(false);",
															"\t\t}",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"        ",
															"\t\t// Self Testing Functions",
															"\t\tfunction CouldCurrentConfigurationValuesBeRead(currentValue) ",
															"\t\t{",
															"\t\t    pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () ",
															"\t\t    {",
															"            pm.expect(currentValue).to.be.a(\"string\");",
															"            pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"            });",
															"\t    }",
															"",
															"\t    function CouldDummyValueBeDefined(success) ",
															"\t    {",
															"            pm.test(\"CouldDummyValueBeDefined\", function () ",
															"            {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"\t    }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try ",
															"        {",
															"\t\t    if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString) ) ",
															"            {",
															"             configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"\t\t    }",
															"\t\t    else ",
															"\t\t    {",
															"                if ( (resultValueString === JSON.stringify(\"air-interface-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\")) ) ",
															"                {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } ",
															"                else ",
															"                {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"                }",
															"\t\t    }",
															"\t\tCouldResultBeEvaluated(true);",
															"\t    } catch (error) ",
															"\t    {",
															"            CouldResultBeEvaluated(false);",
															"\t    }",
															"    ",
															"    // Functions",
															"    ",
															"    function CouldResultBeEvaluated(success) ",
															"    {",
															"        pm.test(\"CouldResultBeEvaluated\", function () ",
															"        {",
															"            pm.expect(success).to.be.true;",
															"        });",
															"    }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// alarm-raising-threshold",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of alarm-raising-threshold--------------------------\");",
															"        ",
															"        var keysOfDatatypeInstanceUnderTest = [{},{}];    ",
															"        var DATATYPE_UNDER_TEST = \"g-826-threshold-cross-alarm-list\";",
															"        var ATTRIBUTE_UNDER_TEST = \"alarm-raising-threshold\";",
															"\t\tconst DATATYPE_INDEX_UNDER_TEST = 0;",
															"\t\tkeysOfDatatypeInstanceUnderTest[0].key=\"g-826-value-kind\";",
															"\t\tkeysOfDatatypeInstanceUnderTest[1].value=\"granularity-period\";",
															"\t\ttry ",
															"\t\t{",
															"\t\t    var currentValue;",
															"\t\t    if ( (DATATYPE_UNDER_TEST===\"\") ) ",
															"\t\t    {",
															"                currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"\t\t    } ",
															"\t\t    else ",
															"\t\t    {",
															"                currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"                keysOfDatatypeInstanceUnderTest[0].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"g-826-value-kind\"];",
															"                keysOfDatatypeInstanceUnderTest[1].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"granularity-period\"];",
															"\t\t    }",
															"\t\tCouldCurrentConfigurationValuesBeRead(currentValue);",
															"\t    } catch (error) ",
															"\t    {",
															"\t\t    CouldCurrentConfigurationValuesBeRead();",
															"\t    }",
															"\t    try ",
															"\t    {",
															"            let alarmClearingThreshold = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"alarm-clearing-threshold\"];",
															"            var dummyValue =  alarmClearingThreshold + Math.floor(Math.random() * 9);",
															"            CouldDummyValueBeDefined(true);",
															"\t    } ",
															"\t    catch (error) ",
															"\t    {",
															"            CouldDummyValueBeDefined(false);",
															"\t    }",
															"\t    var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"\t\t",
															"\t\t// Self Testing Functions",
															"    \tfunction CouldCurrentConfigurationValuesBeRead(currentValue) ",
															"    \t{",
															"\t\t    pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () ",
															"\t\t    {",
															"            pm.expect(currentValue).to.be.a(\"number\");",
															"\t\t    });",
															"\t    }",
															"\t    function CouldDummyValueBeDefined(success) ",
															"\t    {",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"            pm.expect(success).to.be.true;",
															"        });",
															"\t}",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try ",
															"        {",
															"\t\t    if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString) ) ",
															"            {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"\t\t    } ",
															"\t\t    else ",
															"\t\t    {",
															"                if ( (capability[\"performance-monitoring-is-avail\"] === false)",
															"                && (resultValueString === \"-1\") ) ",
															"                {",
															"                     configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } ",
															"                else ",
															"                {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"                }",
															"\t\t    }",
															"            CouldResultBeEvaluated(true);",
															"\t    } ",
															"\t    catch (error) ",
															"\t    {",
															"            CouldResultBeEvaluated(false);",
															"\t    }",
															"    ",
															"        // Functions",
															"    ",
															"        function CouldResultBeEvaluated(success) ",
															"        {",
															"            pm.test(\"CouldResultBeEvaluated\", function () ",
															"            {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"",
															"// alarm-clearing-threshold",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of alarm-clearing-threshold--------------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"g-826-threshold-cross-alarm-list\";",
															"        var keysOfDatatypeInstanceUnderTest = [{},{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"alarm-clearing-threshold\";",
															"\t\tconst DATATYPE_INDEX_UNDER_TEST = 0;",
															"\t\tkeysOfDatatypeInstanceUnderTest[0].key = \"g-826-value-kind\";",
															"        keysOfDatatypeInstanceUnderTest[1].key = \"granularity-period\";",
															"\t\ttry ",
															"\t    {",
															"\t\t    var currentValue;",
															"\t\t    if ( (DATATYPE_UNDER_TEST===\"\") ) {",
															"                currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"\t\t    } ",
															"\t\t    else ",
															"\t\t    {",
															"                currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"                keysOfDatatypeInstanceUnderTest[0].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"g-826-value-kind\"];",
															"                keysOfDatatypeInstanceUnderTest[1].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"granularity-period\"];",
															"\t\t    }",
															"\t\t    CouldCurrentConfigurationValuesBeRead(currentValue);",
															"\t    } catch (error) {",
															"            CouldCurrentConfigurationValuesBeRead();",
															"\t    }",
															"        try ",
															"        {",
															"            let alarmRaisingThreshold = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"alarm-raising-threshold\"];",
															"            var dummyValue = Math.floor(Math.random() * alarmRaisingThreshold);",
															"            CouldDummyValueBeDefined(alarmRaisingThreshold, dummyValue);",
															"\t    } catch (error) {",
															"            CouldDummyValueBeDefined();",
															"\t    }   ",
															"\t    var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"\t    ",
															"        // Self Testing Functions",
															"\t    function CouldCurrentConfigurationValuesBeRead(currentValue) {",
															"\t        pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
															"                pm.expect(currentValue).to.be.a(\"number\");",
															"\t        });",
															"    \t}",
															"",
															"\t    function CouldDummyValueBeDefined(alarmRaisingThreshold, dummyValue) {",
															"            pm.test(\"CouldAlarmRaisingThresholdBeRetrieved\", function () {",
															"                pm.expect(alarmRaisingThreshold).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCalculated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"\t    }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"    try ",
															"    {",
															"        if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString) ) ",
															"        {",
															"            configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"        } ",
															"        else ",
															"        {",
															"            if ( (capability[\"performance-monitoring-is-avail\"] === false)",
															"                && (resultValueString === \"-1\") ) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"            } else {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"            }",
															"        }",
															"        CouldResultBeEvaluated(true);",
															"\t} catch (error) ",
															"\t{",
															"        CouldResultBeEvaluated(false);",
															"\t}",
															"    ",
															"    // Functions",
															"    function CouldResultBeEvaluated(success) ",
															"    {",
															"        pm.test(\"CouldResultBeEvaluated\", function () {",
															"            pm.expect(success).to.be.true;",
															"            });",
															"    }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// xlts-level",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of xlts-level--------------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"xlts-threshold-cross-alarm-list\";",
															"        var keysOfDatatypeInstanceUnderTest = [{},{},{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"xlts-level\";",
															"        const DATATYPE_INDEX_UNDER_TEST = 0;",
															"        keysOfDatatypeInstanceUnderTest[0].key=\"level-threshold-second-kind\";",
															"        keysOfDatatypeInstanceUnderTest[1].key=\"granularity-period\";",
															"        keysOfDatatypeInstanceUnderTest[2].key=\"xlts-threshold-cross-alarm-definition-number\";",
															"\t\ttry {",
															"\t\t    var currentValue;",
															"\t\t    if ( (DATATYPE_UNDER_TEST===\"\") ) {",
															"                currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"\t\t    } else {",
															"                currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"                keysOfDatatypeInstanceUnderTest[0].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"level-threshold-second-kind\"];",
															"                keysOfDatatypeInstanceUnderTest[1].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"granularity-period\"];",
															"                keysOfDatatypeInstanceUnderTest[2].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"xlts-threshold-cross-alarm-definition-number\"];",
															"\t\t    }",
															"\t\t    CouldCurrentConfigurationValuesBeRead(currentValue);",
															"\t\t} catch (error) {",
															"\t\t    CouldCurrentConfigurationValuesBeRead();",
															"\t\t}",
															"",
															"\t\ttry {",
															"\t\t    dummyValue = Math.floor(Math.random() * -99);",
															"\t\t    CouldDummyValueBeDefined(true);",
															"\t\t} catch (error) {",
															"\t\t    CouldDummyValueBeDefined(false);",
															"\t\t}",
															"\t\t",
															"\t\tvar KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"\t\t",
															"\t\t// Self Testing Functions",
															"\t\tfunction CouldCurrentConfigurationValuesBeRead(currentValue) {",
															"\t\t    pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
															"                pm.expect(currentValue).to.be.a(\"number\");",
															"\t\t    });",
															"\t\t}",
															"",
															"\t\tfunction CouldDummyValueBeDefined(success) {",
															"\t\t    pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(success).to.be.true;",
															"\t\t    });",
															"\t\t}",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    EvaluatingResult = () => {",
															"        try {",
															"\t\t    if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString) ) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"\t\t\t} else {",
															"\t\t\t    if ( (capability[\"performance-monitoring-is-avail\"] === false)",
															"                && (resultValueString === \"-1\") ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"\t\t\t    } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"\t\t\t    }",
															"\t\t    }",
															"\t\t    CouldResultBeEvaluated(true);",
															"\t\t} catch (error) {",
															"\t\t    CouldResultBeEvaluated(false);",
															"\t\t}",
															"    ",
															"    // Functions",
															"    function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// xlts-threshold-cross-alarm-list/amount-of-seconds",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of xlts-threshold-cross-alarm-list/amount-of-seconds--------------------------\");",
															"             ",
															"        var DATATYPE_UNDER_TEST = \"xlts-threshold-cross-alarm-list\";",
															"        var keysOfDatatypeInstanceUnderTest = [{},{},{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"amount-of-seconds\";",
															"        const DATATYPE_INDEX_UNDER_TEST = 0;",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"level-threshold-second-kind\";",
															"        keysOfDatatypeInstanceUnderTest[1].key = \"granularity-period\";",
															"        keysOfDatatypeInstanceUnderTest[2].key = \"xlts-threshold-cross-alarm-definition-number\";",
															"\t\ttry {",
															"\t\t    var currentValue;",
															"\t\t    if ( (DATATYPE_UNDER_TEST===\"\") ) {",
															"                currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"\t\t    } else {",
															"                currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"                keysOfDatatypeInstanceUnderTest[0].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"level-threshold-second-kind\"];",
															"                keysOfDatatypeInstanceUnderTest[1].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"granularity-period\"];",
															"                keysOfDatatypeInstanceUnderTest[2].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"xlts-threshold-cross-alarm-definition-number\"];",
															"\t\t    }",
															"\t\t    CouldCurrentConfigurationValuesBeRead(currentValue);",
															"\t    } catch (error) {",
															"\t\t    CouldCurrentConfigurationValuesBeRead();",
															"\t    }",
															"",
															"\ttry {",
															"        dummyValue = Math.floor(Math.random() * 127);",
															"        CouldDummyValueBeDefined(true);",
															"\t} catch (error) {",
															"        CouldDummyValueBeDefined(false);",
															"\t}",
															"\tvar KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"\t",
															"\t// Self Testing Functions",
															"\tfunction CouldCurrentConfigurationValuesBeRead(currentValue) {",
															"        pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
															"            pm.expect(currentValue).to.be.a(\"number\");",
															"        });",
															"\t}",
															"",
															"\tfunction CouldDummyValueBeDefined(success) {",
															"        pm.test(\"CouldDummyValueBeDefined\", function () {",
															"            pm.expect(success).to.be.true;",
															"    });",
															"\t}",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try {",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString) ) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"            } else {",
															"                if ( (capability[\"performance-monitoring-is-avail\"] === false)",
															"                && (resultValueString === \"-1\") ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(true);",
															"\t    } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"\t    }",
															"    ",
															"    // Functions",
															"    function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// acm-threshold-cross-alarm-list/transmission-mode",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of acm-threshold-cross-alarm-list/transmission-mode--------------------------\");",
															"           ",
															"        var DATATYPE_UNDER_TEST = \"acm-threshold-cross-alarm-list\";",
															"        var keysOfDatatypeInstanceUnderTest = [{},{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"transmission-mode\";",
															"\t\tconst DATATYPE_INDEX_UNDER_TEST = 0;",
															"\t\tkeysOfDatatypeInstanceUnderTest[0].key = \"acm-threshold-cross-alarm-definition-number\";",
															"        keysOfDatatypeInstanceUnderTest[1].key = \"granularity-period\";",
															"\t\ttry {",
															"            var currentValue;",
															"            if ( (DATATYPE_UNDER_TEST===\"\") ) {",
															"                currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"            } else {",
															"                currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"                keysOfDatatypeInstanceUnderTest[0].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"acm-threshold-cross-alarm-definition-number\"];",
															"                keysOfDatatypeInstanceUnderTest[1].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"granularity-period\"];",
															"            }",
															"            CouldCurrentConfigurationValuesBeRead(currentValue);",
															"\t    } catch (error) {",
															"            CouldCurrentConfigurationValuesBeRead();",
															"\t    }",
															"",
															"\t    try {",
															"            let randomTransmissionModeIndex = Math.floor(Math.random() * capability[\"transmission-mode-list\"].length);",
															"            dummyValue = capability[\"transmission-mode-list\"][randomTransmissionModeIndex][\"transmission-mode-name\"];",
															"            CouldDummyValueBeDefined(true);",
															"\t    } catch (error) {",
															"            CouldDummyValueBeDefined(false);",
															"\t    }",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"\t    ",
															"\t    // Self Testing Functions",
															"        function CouldCurrentConfigurationValuesBeRead(currentValue) {",
															"\t\t    pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
															"                pm.expect(currentValue).to.be.a(\"string\");",
															"                pm.expect(currentValue).to.not.have.lengthOf(0);",
															"\t\t    });",
															"\t    }",
															"",
															"\t    function CouldDummyValueBeDefined(success) {",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"\t    }",
															"    };",
															"\t",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"       try {",
															"            var performanceMonitoringIsAvail = capability[\"performance-monitoring-is-avail\"];",
															"            var transmissionModeMin = JSON.stringify(configuration[\"transmission-mode-min\"]);",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString) ) ",
															"            {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"            } else {",
															"                if ( (performanceMonitoringIsAvail===false)",
															"                || (resultValueString===transmissionModeMin) ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(true);",
															"\t    } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"\t    }",
															"    ",
															"    // Functions",
															"    function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// acm-threshold-cross-alarm-list/amount-of-seconds",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of acm-threshold-cross-alarm-list/amount-of-seconds--------------------------\");",
															"           ",
															"        var DATATYPE_UNDER_TEST = \"acm-threshold-cross-alarm-list\";",
															"        var keysOfDatatypeInstanceUnderTest = [{},{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"amount-of-seconds\";",
															"\t\tconst DATATYPE_INDEX_UNDER_TEST = 0;",
															"\t\tkeysOfDatatypeInstanceUnderTest[0].key = \"acm-threshold-cross-alarm-definition-number\";",
															"        keysOfDatatypeInstanceUnderTest[1].key = \"granularity-period\";",
															"\t\ttry {",
															"\t\t    var currentValue;",
															"            if ( (DATATYPE_UNDER_TEST===\"\") ) {",
															"                currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"            } else {",
															"                currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"                keysOfDatatypeInstanceUnderTest[0].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"acm-threshold-cross-alarm-definition-number\"];",
															"                keysOfDatatypeInstanceUnderTest[1].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][\"granularity-period\"];",
															"            }",
															"            CouldCurrentConfigurationValuesBeRead(currentValue);",
															"\t    } catch (error) {",
															"            CouldCurrentConfigurationValuesBeRead();",
															"\t    }",
															"",
															"\t    try {",
															"            var dummyValue =  currentValue - 5 + Math.floor(Math.random() * 10);",
															"            CouldDummyValueBeDefined(true);",
															"\t    } catch (error) {",
															"            CouldDummyValueBeDefined(false);",
															"\t    }",
															"\t    var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"\t\t// Self Testing Functions",
															"\t    function CouldCurrentConfigurationValuesBeRead(currentValue) {",
															"            pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
															"                pm.expect(currentValue).to.be.a(\"number\");",
															"            });",
															"\t    }",
															"",
															"\t    function CouldDummyValueBeDefined(success) {",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"\t    }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try {",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString) ) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"            } else {",
															"                if ( (capability[\"performance-monitoring-is-avail\"] === false)",
															"                && (resultValueString === \"-1\") ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(true);",
															"\t    } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"\t    }",
															"    ",
															"    // Functions",
															"    function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}  attributes.push(newAttribute);",
															"",
															"// clearing-threshold-cross-alarms-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of clearing-threshold-cross-alarms-is-on-----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"clearing-threshold-cross-alarms-is-on\";",
															"            ",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"            ",
															"    EvaluatingResult = () => {",
															"\ttry {",
															"",
															"    if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) {",
															"        configurationValidationResults[attributeUnderTest] = \"ok\";",
															"    } else {",
															"        if ( (resultValueString === \"true\") ) {",
															"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"        } else {",
															"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"        }",
															"    }",
															"",
															"    CouldResultBeEvaluated(true);",
															"\t} catch (error) {",
															"    CouldResultBeEvaluated(false);",
															"\t}",
															"\t",
															"\t// Self Testing Functions",
															"\t\tfunction CouldResultBeEvaluated(success) {",
															"\t\tpm.test(\"CouldResultBeEvaluated\", function () {",
															"        pm.expect(success).to.be.true;",
															"\t\t});",
															"\t\t}",
															"\t};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// performance-monitoring-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of performance-monitoring-is-on-----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"            ",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"            ",
															"    EvaluatingResult = () => {",
															"\ttry {",
															"",
															"    if ( (Math.floor(dummyCode/100) === 2)",
															"            && (Math.floor(resultCode/100) === 2) ",
															"            && (dummyValueString===resultValueString)) {",
															"        configurationValidationResults[attributeUnderTest] = \"ok\";",
															"    } else {",
															"        if ( (resultValueString === \"true\") ) {",
															"            configurationValidationResults[attributeUnderTest] = \"not supported\";",
															"        } else {",
															"            configurationValidationResults[attributeUnderTest] = \"not configurable\";",
															"        }",
															"    }",
															"",
															"    CouldResultBeEvaluated(true);",
															"\t} catch (error) {",
															"    CouldResultBeEvaluated(false);",
															"\t}",
															"\t",
															"\t// Self Testing Functions",
															"\t\tfunction CouldResultBeEvaluated(success) {",
															"\t\tpm.test(\"CouldResultBeEvaluated\", function () {",
															"        pm.expect(success).to.be.true;",
															"\t\t});",
															"\t\t}",
															"\t};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"",
															"/*//    another attribute's YANG name",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------Checking Configuration of performance-monitoring-is-on-----------------\");",
															"            ",
															"        try {",
															"            ",
															"            ",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"?\");",
															"            });",
															"        }    ",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try {",
															"        ",
															"        ",
															"            CouldResultBeEvaluated(true);",
															"        } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"        }",
															"            ",
															"        // Self Testing Function",
															"        function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, EvaluatingResultAsaString);",
															"}   //attributes.push(newAttribute);",
															"*/",
															"",
															"pm.collectionVariables.set( \"attributes\", attributes);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function ConvertingThisFunctionToString(functionToBeConverted) {",
															"    let functionAsAString = String(functionToBeConverted);",
															"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
															"    return functionAsAString.slice(indexOfFirstCurly);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointAirInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "12d19e09-509e-442c-9ed8-0ebfd4d53a6a",
														"exec": [
															"console.log(\"\\n--------------EntryPoint of AirInterface Validation of Configuration-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the AirInterfaceConfiguration TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"numberOfExistingInterfaces :\");",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].airInterfaceList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    console.log(\"numberOfExistingInterfaces :\" + numberOfExistingInterfaces);",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointAirInterfaceConfiguration\");",
															"        console.log(\"Proceeding with terminating AirInterface validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST = 0;",
															"",
															"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "905c0ff8-7386-4343-a8e4-8406c5d724e5",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "39b6226c-5d09-4d45-93be-6ea1f031c8f5",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "CollectionInformationLoading",
									"item": [
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b4e5692f-fc2f-4015-b62d-9eb684ef0f4b",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7855ea74-363f-47d9-9fa2-0f4cb30c2ba5",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6be6f11d-21a0-4254-b7d6-3504b4372bda",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "bdab3121-fc4b-4df3-8c52-93b2509f0511",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceStatus",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "cf4f4466-231a-4097-bc5e-6a51e77ff38d",
														"exec": [
															"console.log(\"\\n------------------------------Uploading Interface Status----------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Status",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "bfee9cde-b4e9-4210-8409-e7f8f34ef122",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f72ea92e-4387-4dc5-8ac2-f7024301e5f4",
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "AttributeConfiguration",
									"item": [
										{
											"name": "EntryPointAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f9298593-97ac-47a9-87cf-cacf079cd2c8",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the AttributeConfiguration Tests ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var attributes = pm.collectionVariables.get(\"attributes\");",
															"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
															"    ",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    ",
															"    CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"        ",
															"    if ( indexOfAttributeUnderTest < attributes.length ) {",
															"        postman.setNextRequest();",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointAttributeConfiguration\");",
															"    }",
															"        ",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri) {",
															"    pm.test(\"CouldTheAttributesBeLoaded\", function () {",
															"        pm.expect(attributes).to.be.an(\"array\");",
															"    });",
															"    pm.test(\"CouldIndexOfAttributeUnderTestBeLoaded\", function () {",
															"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"CouldTheDummyUriBeLoaded\", function () {",
															"        pm.expect(dummyUri).to.be.a(\"string\");",
															"        pm.expect(dummyUri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Writing",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8ac7b066-f8d4-4e33-82d5-bb8e395f1de1",
														"exec": [
															"/****************************************************************************************",
															"* Retrieving DummyCode",
															"****************************************************************************************/",
															"try {",
															"    var dummyCode = JSON.parse(pm.response.code);",
															"    var dummyErrorMessage = \"\";",
															"    if ( Math.floor(dummyCode/100) !== 2 ) {",
															"        var dummyErrorMessage = JSON.parse(pm.response.stream).errors.error[0][\"error-message\"];",
															"    }",
															"    CouldResponseBeRetrieved(dummyCode, dummyErrorMessage);",
															"} catch (error) {",
															"    CouldResponseBeRetrieved();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting Local Variables",
															"****************************************************************************************/   ",
															"pm.variables.set(\"dummyCode\", dummyCode);",
															"pm.variables.set(\"dummyErrorMessage\", dummyErrorMessage);",
															"",
															"    ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldResponseBeRetrieved(responseCode, responseErrorMessage) {",
															"    pm.test(\"CouldTheDummyCodeOfPuttingBeReceived\", function () {",
															"        pm.expect(responseCode).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"CouldTheErrorMessagePuttingBeComposed\", function () {",
															"        pm.expect(responseErrorMessage).to.be.a(\"string\");",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "da98aedf-ab0f-471b-800c-5806e465548b",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Writing",
															"* ",
															"* This Request is for PUTting an boolean attribute with the alternate value and",
															"* providing this value as dummyValueString to the local Variables.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfWritingAsaString = pm.environment.get(\"PreRequestOfWritingAsaString\");",
															"    eval(PreRequestOfWritingAsaString);",
															"    CouldPreRequestOfWritingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfWritingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfWritingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfWritingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Reading",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "58f63664-6be0-4cbf-9d29-015458346b3a",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Reading",
															"* ",
															"* This Request is for GETting the value of the attributeUnderTest and providing it ",
															"* as ResultValue to the local Variables",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfReadingAsaString = pm.environment.get(\"PreRequestOfReadingAsaString\");",
															"    eval(PreRequestOfReadingAsaString);",
															"    CouldPreRequestOfReadingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfReadingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfReadingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfReadingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b1f7805d-e6ea-41c8-896b-045ba62623c6",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PostRequestOfReadingAsaString = pm.environment.get(\"PostRequestOfReadingAsaString\");",
															"    eval(PostRequestOfReadingAsaString);",
															"    CouldPostRequestOfReadingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPostRequestOfReadingBeExecuted();",
															"}",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPostRequestOfReadingBeExecuted(success) {",
															"    pm.test(\"CouldPostRequestOfReadingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Evaluating",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c60ac605-2391-4070-ba03-29d23e6fbc08",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Evaluating",
															"* ",
															"* This Request compares resultValue with dummyValue.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfEvaluatingAsaString = pm.environment.get(\"PreRequestOfEvaluatingAsaString\");",
															"    eval(PreRequestOfEvaluatingAsaString);",
															"    CouldPreRequestOfEvaluatingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfEvaluatingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfEvaluatingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfEvaluatingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Restoring",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "07feb6aa-cada-4f03-b30d-f85cdc94b2cc",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Restoring",
															"* ",
															"* This Request is for Restoring the initial value to the attributeUnderTest",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfRestoringAsaString = pm.environment.get(\"PreRequestOfRestoringAsaString\");",
															"    eval(PreRequestOfRestoringAsaString);",
															"    CouldPreRequestOfRestoringBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfRestoringBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfRestoringBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfRestoringBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "bf9cddb4-8e32-4a9c-be43-7a249f8f43e5",
														"exec": [
															"/****************************************************************************************",
															"* Setting Local Variables",
															"****************************************************************************************/   ",
															"pm.variables.clear();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ReversalPointAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "41cc1094-9e44-4f5a-bd75-d3e5d7617678",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"        ",
															"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
															"        ",
															"    CouldTheInputBeLoaded(dummyUri, indexOfAttributeUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextAttributeUnderTest = indexOfAttributeUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", indexOfPotentialNextAttributeUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointAttributeConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfAttributeUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "8ce3273f-9042-4004-8e4c-d2b62c2d571e",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "debcabc9-2bb2-45c3-b49e-2e315a4d6c4d",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is terminating the Test",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "cebb070d-5d02-4910-b40b-6c037c351ec6",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9ef90ca4-7166-4117-99d5-abac6dccfa4c",
														"exec": [
															"console.log(\"\\n-------------------Restoring the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"        ",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration",
															"                                                   );",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    completeClassName = moduleUnderTest + \":\" + technologyUnderTest + \"-configuration\";",
															"    configuration = AddHeadlineToDataObject(configuration, completeClassName);",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ec27852e-8f95-48d6-8447-d6d709b290dc",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "deeb0144-90e7-47e0-a20d-072980fd5ef7",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bf545b99-77c1-4ec1-9dbd-66bc1919d91f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointAirInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c112d30d-1725-4da1-97dd-a6d742e7f886",
														"exec": [
															"console.log(\"\\n-------------ReversalPoint of AirInterface Validation of Configuration---------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Console.log of Validation Results",
															" ****************************************************************************************/",
															"let allConfigurationValidationResults = { \"allConfigurationValidationResults\" : configurationValidationResults };",
															"console.log(allConfigurationValidationResults);",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointAirInterfaceConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f12dc9a9-84fa-4ebd-8560-8c2b1b95acbb",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointAirInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "8e2a70ba-700a-4761-8df0-78d915c533b4",
														"exec": [
															"console.log(\"\\n----------------------Terminating AirInterfaceConfiguration--------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is for clearing the Collection variables and terminating the TestCase",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "8936337c-3117-496b-9539-8386e181506a",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "dec58cb0-a151-49df-920b-ddbc41784e1d",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "95fcf377-d6c3-4453-9c4e-03a5eacd7468",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8236d41a-f859-4a8d-ba45-79e5bcab1697",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7915a7d5-4e4d-498b-b511-1362463c548a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "EthernetContainerValidation",
					"item": [
						{
							"name": "EthernetContainerCompleteness",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9514186a-4336-43fc-8814-3bf3e68197a9",
														"exec": [
															"console.log(\"\\n\\n============================ EthernetContainerCompleteness.3 =============================\");",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Completeness of EthernetContainer Objects against definition ",
															"* ",
															"*                   EthernetContainer_2.0.0-tsp.191123.1240",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"* ",
															"****************************************************************************************/",
															" ",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"all\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"ethernet-container-2-0:ethernet-container-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function() {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function() {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9019927d-a059-4ecb-95b8-5c5a9139326c",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointEthernetContainerCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4d336f28-15e8-4cc9-8b22-f1d0669624f2",
														"exec": [
															"console.log(\"\\n--------------EntryPoint of EthernetContainer Validation for Completeness-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the EthernetContainerCompleteness TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].ethernetContainerList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointEthernetContainerCompleteness\");",
															"        console.log(\"Proceeding with terminating EthernetContainer validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a66f0551-5f2e-4be1-9f72-e6147ec3935e",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "76bb4ffc-acd4-4656-b5a4-020a1d5ecf07",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "59ffd475-8fcf-4506-b79e-4d1f855770e8",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "fda17345-6345-4d4a-bb63-810243ed54d9",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7132fc2f-94c2-4e93-893f-a44d0d154c4c",
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "a1c74ea2-24e6-46a4-8990-c6cfd1f6d5e9",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f4f6a535-0eaf-45e2-850e-34b32d40e620",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "NetworkPreparation",
									"item": [
										{
											"name": "SwitchingOnMonitoring",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ee2f6155-bd7d-44d6-85ce-c1536ceca08c",
														"exec": [
															"console.log(\"\\n---------------------------------Switching Monitoring On----------------------------------\");",
															"/****************************************************************************************",
															" * ",
															" * Switching Monitoring On",
															" * ",
															" * This Request is for activating collection of performance data on the device under",
															" * test, so the data can be retrieved during validating completeness of the implementation",
															" *  ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration);",
															"} catch (error) {",
															"    CouldInputForSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Forming the Body",
															" ****************************************************************************************/",
															"try {",
															"    let requestBodyString = ('{ \"' + moduleUnderTest + ':performance-monitoring-is-on\": true }');",
															"    var requestBody = JSON.parse(requestBodyString);",
															"    CouldRequestBodyBeFormed(requestBody);",
															"} catch (error) {",
															"    CouldRequestBodyBeFormed();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Calling for Preparation of the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(requestBody);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration) {",
															"    pm.test(\"CouldInputForSwitchingMonitoringOnBeLoaded\", function() {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(configuration).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyBeFormed(requestBody) {",
															"    pm.test(\"CouldRequestBodyBeFormed\", function() {",
															"        pm.expect(requestBody).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, ",
															"                                                keysOfDatatypeInstanceUnderTest,",
															"                                                attributeUnterTest, ",
															"                                                contentType,",
															"                                                filteredDepth, ",
															"                                                filteredFields, ",
															"                                                requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"            \"current-problems\", \"current-performance\",",
															"            \"historical-performances\"",
															"        ]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function() {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5d82b151-99e7-471b-8bd4-ea352a8cb82c",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched on.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched on.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d74d165a-ef23-4779-b178-de6b2e8cda28",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c30bdee7-d5e0-4ec6-89d5-60f902327220",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ValidationRequests",
									"item": [
										{
											"name": "PacCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "48660d2c-27f8-4195-b203-445202a3c15f",
														"exec": [
															"console.log(\"\\n---------------------Checking EthernetContainer_Pac for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* PacCompleteness",
															"* ",
															"* This Request is for validating EthernetContainer Pac Objects against definition ",
															"* EthernetContainer_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the *_Pac class",
															"*  - availability of all attributes in this particular class",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"pac\";             // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 3;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_PAC_SCHEMA = {\t",
															"    \"type\": \"object\",",
															"\t\"properties\": {",
															"        \"ethernet-container-capability\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"available-queue-list\":                                     { \"type\": \"array\"   },",
															"                \"explicit-congestion-notification-is-avail\": \t\t\t\t{ \"type\": \"boolean\" },",
															"                \"ingress-policing-is-avail\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"supported-header-compression-kind-list\":                   { \"type\": \"array\"   },",
															"                \"egress-shaping-is-avail\": \t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"information-rate-min\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"information-rate-max\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"burst-size-min\": \t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"burst-size-max\": \t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"bundling-is-avail\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"bundling-group-size-max\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"support-of-management-frames-without-preamble-is-avail\": \t{ \"type\": \"boolean\" },",
															"                \"fec-is-avail\": \t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"fec-word-size-max\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"supported-fec-redundancy-size-list\":                       { \"type\": \"array\"   },",
															"                \"supported-fec-interleaver-kind-list\":                      { \"type\": \"array\"   },",
															"                \"supported-fec-interleaver-depth-list\":                     { \"type\": \"array\"   },",
															"                \"encryption-is-avail\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"admin-shut-down-is-avail\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"supported-loop-back-kind-list\":                            { \"type\": \"array\"   },",
															"                \"maintenance-timer-range\": \t\t\t\t\t\t\t\t\t{ \"type\": \"string\"  },",
															"                \"statistics-is-avail\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"supported-alarm-list\":                                     { \"type\": \"array\"   },",
															"                \"performance-monitoring-is-avail\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"            },",
															"        },",
															"        \"ethernet-container-configuration\":{",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"interface-name\": \t\t\t\t\t\t\t                { \"type\": \"string\"  },",
															"                \"interface-is-on\": \t\t\t\t\t\t\t                { \"type\": \"boolean\" },",
															"                \"queue-behavior-list\":                                      { \"type\": \"array\"   },",
															"                \"explicit-congestion-notification-is-on\": \t                { \"type\": \"boolean\" },",
															"                \"ingress-policing-profile\":                                 { \"type\": \"string\"  },",
															"                \"egress-shaping-is-on\":                  \t\t\t\t\t{ \"type\": \"boolean\" },\t",
															"                \"maximum-information-rate\": \t\t\t\t                { \"type\": \"number\"  },",
															"                \"maximum-burst-size\": \t\t\t\t\t\t                { \"type\": \"number\"  },\t",
															"                \"bundling-is-on\": \t\t\t\t\t\t\t                { \"type\": \"boolean\" },",
															"                \"header-compression-kind\":                                  { \"type\": \"string\"  },",
															"                \"fec-is-on\": \t\t\t\t\t\t\t\t                { \"type\": \"boolean\" },",
															"                \"fec-word-size\": \t\t\t\t\t\t\t                { \"type\": \"number\"  },\t\t",
															"                \"fec-redundancy-size\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_2\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_4\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_8\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_16\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_20\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t\t ]",
															"                },",
															"                \"fec-interleaver-kind\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_BLOCK\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_CONVOLUTION\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t\t  ]",
															"                },",
															"                \"fec-interleaver-depth\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_1\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_2\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_3\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_4\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_6\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_8\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_12\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_16\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_24\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_32\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_48\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_96\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t\t   ]",
															"                },",
															"                \"encryption-is-on\": \t\t\t\t\t\t                { \"type\": \"boolean\" },\t",
															"                \"cryptographic-key\": \t\t\t\t\t\t                { \"type\": \"string\"  },\t\t",
															"                \"loop-back-kind-on\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t   ]",
															"                },",
															"                \"maintenance-timer\": \t\t\t\t\t\t                { \"type\": \"number\"  },",
															"                \"statistics-is-on\": \t\t\t\t\t\t                { \"type\": \"boolean\" },",
															"                \"problem-kind-severity-list\":                               { \"type\": \"array\"   },",
															"                \"performance-monitoring-is-on\": \t\t\t                { \"type\": \"boolean\" },",
															"            },",
															"        },",
															"        \"ethernet-container-status\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"interface-status\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_UP\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_DOWN\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_TESTING\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_DORMANT\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t  ]",
															"                },",
															"                \"bundling-is-up\":                                           { \"type\": \"boolean\" },",
															"                \"remote-site-is-faulty\":                                    { \"type\": \"boolean\" },                ",
															"                \"loop-back-kind-up\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t\t]",
															"                },",
															"                \"statistics-is-up\":                                         { \"type\": \"boolean\" },",
															"                \"performance-monitoring-is-up\":                             { \"type\": \"boolean\" },",
															"                \"timestamp\":                                                { \"type\": \"string\"  },",
															"                \"last-10-sec-data-input-rate\":                              { \"type\": \"integer\" },",
															"                \"last-10-sec-data-output-rate\":                             { \"type\": \"integer\" },",
															"                \"total-bytes-input\":                                        { \"type\": \"string\" },",
															"                \"total-bytes-output\":                                       { \"type\": \"string\" },",
															"                \"forwarded-bytes-input\":                                    { \"type\": \"string\" },",
															"                \"forwarded-bytes-output\":                                   { \"type\": \"string\" },",
															"            },",
															"        },",
															"        \"ethernet-container-current-problems\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"current-problem-list\":                                     { \"type\": \"array\"   },",
															"                \"number-of-current-problems\":  \t\t\t                    { \"type\": \"number\"  },",
															"                \"time-of-latest-change\":                                    { \"type\": \"string\"  },",
															"            },",
															"        },",
															"        \"ethernet-container-current-performance\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"current-performance-data-list\":                            { \"type\": \"array\"   },",
															"                \"number-of-current-performance-sets\":                       { \"type\": \"number\"  },",
															"            },",
															"\t    },",
															"        \"ethernet-container-historical-performances\":{",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"historical-performance-data-list\":                         { \"type\": \"array\"   },",
															"                \"number-of-historical-performance-sets\":                    { \"type\": \"number\"  },",
															"                \"time-of-latest-change\": \t\t\t                        { \"type\": \"string\"  },",
															"            },",
															"        },",
															"\t},",
															"\t\"required\": [\"ethernet-container-capability\",",
															"                    \"ethernet-container-configuration\",",
															"                    \"ethernet-container-status\",",
															"                    \"ethernet-container-current-problems\",",
															"                    \"ethernet-container-current-performance\",",
															"                    \"ethernet-container-historical-performances\",",
															"    ]",
															"};",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_PAC_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7ab71d8a-03dc-4333-bcbb-5bd502ce6f9a",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CapabilityCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5f568795-502a-455f-a611-feb57e3b414e",
														"exec": [
															"console.log(\"\\n--------------------Checking EthernetContainerCapability for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* CapabilityCompleteness",
															"* ",
															"* This Request is for validating EthernetContainer Capability Objects against definition ",
															"* EthernetContainer_2.0.0-tsp.191123.1240",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Capability class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_CAPABILITY_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"available-queue-list\": {",
															"\t\t\t\"type\": \"array\",",
															"            \"items\": {",
															"            \t\"type\": \"object\",",
															"            \t\"properties\": {",
															"\t\t\t\t\t\"queue-name\": { \"enum\": [",
															"                                        \"ethernet-container-2-0:QUEUE_NAME_TYPE_BEST_EFFORT_QUEUE\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE1\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE2\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE3\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE4\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_EXPEDITED_FORWARDING_QUEUE\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_CLASS_SELECTOR_QUEUE6\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_CLASS_SELECTOR_QUEUE7\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_QUEUENAME_NOT_YET_DEFINED\"",
															"        \t\t\t\t\t\t\t]",
															"        \t\t\t}, \t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"max-queue-depth\": \t\t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\"queue-depth-configuration-is-avail\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\t\"available-dropping-behavior-kind-list\":{  ",
															"    \t\t\t\t\t\"type\": \"array\",",
															"    \t\t\t\t\t\"items\": { \"enum\": [\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_DROP_TAIL\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_RED\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_WRED\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_NOT_YET_DEFINED\"\t\t\t",
															"\t\t\t\t\t\t\t       ]",
															"        \t\t\t    }",
															"        \t\t\t},\t\t\t\t\t",
															"\t\t\t\t\t\"available-drop-precedence-kind-list\": {  ",
															"    \t\t\t\t\t\"type\": \"array\",",
															"    \t\t\t\t\t\"items\": { \"enum\": [\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_ALL\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_LOW\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_MEDIUM\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_HIGH\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_NOT_YET_DEFINED\"\t",
															"\t\t\t\t\t\t\t\t\t]",
															"        \t\t\t    }\t\t\t\t\t\t\t\t\t",
															"            \t\t},",
															"\t\t\t\t\t\"wred-profile-per-drop-precedence-is-available\":{ \"type\": \"boolean\" },",
															"\t\t\t\t\t\"available-scheduling-kind-list\": {  ",
															"    \t\t\t\t\t\"type\": \"array\",",
															"    \t\t\t\t\t\"items\": { \"enum\": [\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_STRICT\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_WFQ\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_WRR\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_DWRR\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_NOT_YET_DEFINED\"",
															"                                   ]",
															"                        }",
															"\t\t\t\t\t}",
															"\t\t\t\t},\t\t\t\t\t",
															"\t\t\t\t\"required\": [\"queue-name\",",
															"\t\t\t\t\t\t\t\t\"max-queue-depth\",",
															"\t\t\t\t\t\t\t\t\"queue-depth-configuration-is-avail\",",
															"\t\t\t\t\t\t\t\t\"available-dropping-behavior-kind-list\",",
															"\t\t\t\t\t\t\t\t\"available-drop-precedence-kind-list\",",
															"\t\t\t\t\t\t\t\t\"wred-profile-per-drop-precedence-is-available\",",
															"\t\t\t\t\t\t\t\t\"available-scheduling-kind-list\"",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"explicit-congestion-notification-is-avail\": \t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"ingress-policing-is-avail\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"supported-header-compression-kind-list\": {    ",
															"\t\t\t\"type\": \"array\",",
															"            \"items\": {\t\t",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"header-compression-name\": { \"type\": \"string\" },",
															"\t\t\t\t\t\"header-compression-mode\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:HEADER_COMPRESSION_MODE_TYPE_AUTO\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:HEADER_COMPRESSION_MODE_TYPE_PROTOCOL_BASED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:HEADER_COMPRESSION_MODE_TYPE_LENGTH_BASED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:HEADER_COMPRESSION_MODE_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t\t ]",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"compressed-protocol-layer-list\": {",
															"\t\t\t\t\t\t\"type\": \"array\",",
															"\t\t\t\t\t\t\"items\": { \"enum\": [\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_ETHERNET_MAC\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_VLAN\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_Q_IN_Q\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_MPLS\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_IPV4\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_IPV6\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_TCP\",\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_UDP\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_RTP\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_GTP_U\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_OTHERS\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t},\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"mpls-payload-kind-list\": { \t\t\t\t\t\t",
															"\t\t\t\t\t    \"type\": \"array\",",
															"\t\t\t\t\t\t\"items\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:MPLS_PAYLOAD_KIND_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:MPLS_PAYLOAD_KIND_TYPE_AUTO\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:MPLS_PAYLOAD_KIND_TYPE_ETH_O_MPLS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:MPLS_PAYLOAD_KIND_TYPE_IP_O_MPLS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:MPLS_PAYLOAD_KIND_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t   ]",
															"\t\t\t\t\t\t}",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"compressed-header-length\": { \"type\": \"integer\" }",
															"\t\t\t\t},",
															"\t\t\t\t\"required\": [\"header-compression-name\",",
															"\t\t\t\t\t\t\t\t\"header-compression-mode\",",
															"\t\t\t\t\t\t\t\t\"compressed-protocol-layer-list\",",
															"\t\t\t\t\t\t\t\t\"mpls-payload-kind-list\",",
															"\t\t\t\t\t\t\t\t\"compressed-header-length\"",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"egress-shaping-is-avail\": \t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"information-rate-min\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"information-rate-max\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"burst-size-min\": \t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"burst-size-max\": \t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"bundling-is-avail\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"bundling-group-size-max\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"support-of-management-frames-without-preamble-is-avail\": \t{ \"type\": \"boolean\" },",
															"\t\t\"fec-is-avail\": \t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"fec-word-size-max\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"supported-fec-redundancy-size-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": \t\t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"string\" }",
															"\t\t},",
															"\t\t\"supported-fec-interleaver-kind-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": \t\t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"string\"\t}",
															"\t\t},",
															"\t\t\"supported-fec-interleaver-depth-list\": {\t",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": \t\t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"string\" }",
															"\t\t},",
															"\t\t\"encryption-is-avail\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"admin-shut-down-is-avail\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"supported-loop-back-kind-list\": {  ",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": { \"enum\": [\t\t\t\t\t",
															"\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\",",
															"\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",",
															"\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",",
															"\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t   ]",
															"\t\t\t}\t",
															"\t\t},",
															"\t\t\"maintenance-timer-range\": \t\t\t\t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\"statistics-is-avail\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"supported-alarm-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": \t\t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"string\" }",
															"\t\t},",
															"\t\t\"performance-monitoring-is-avail\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" } \t\t",
															"\t},",
															"\t\"required\": [\"available-queue-list\",",
															"\t\t\t\t\t\"explicit-congestion-notification-is-avail\",",
															"\t\t\t\t\t\"ingress-policing-is-avail\",",
															"\t\t\t\t\t\"supported-header-compression-kind-list\",",
															"\t\t\t\t\t\"egress-shaping-is-avail\", \t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"information-rate-min\",\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"information-rate-max\",\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"burst-size-min\", \t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"burst-size-max\", \t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"bundling-is-avail\", \t\t\t\t\t\t\t\t\t\t ",
															"\t\t\t\t\t\"bundling-group-size-max\", \t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"support-of-management-frames-without-preamble-is-avail\", \t",
															"\t\t\t\t\t\"fec-is-avail\", \t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"fec-word-size-max\",\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"supported-fec-redundancy-size-list\",",
															"\t\t\t\t\t\"supported-fec-interleaver-kind-list\",",
															"\t\t\t\t\t\"supported-fec-interleaver-depth-list\",",
															"\t\t\t\t\t\"encryption-is-avail\",",
															"\t\t\t\t\t\"admin-shut-down-is-avail\",",
															"\t\t\t\t\t\"supported-loop-back-kind-list\",",
															"\t\t\t\t\t\"maintenance-timer-range\",",
															"\t\t\t\t\t\"statistics-is-avail\",",
															"\t\t\t\t\t\"supported-alarm-list\",",
															"\t\t\t\t\t\"performance-monitoring-is-avail\"",
															"\t]",
															"};",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_CAPABILITY_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a7dca249-458e-46dd-83be-382432928f38",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ConfigurationCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "74b25cef-10a3-4098-8542-5f474dc3b936",
														"exec": [
															"console.log(\"\\n----------------Checking EthernetContainerConfiguration for Completeness------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ConfigurationCompleteness",
															"* ",
															"* This Request is for validating EthernetContainer Configuration Objects against definition ",
															"* EthernetContainer_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Configuration class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_CONFIGURATION_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"        \"interface-name\": \t\t\t\t\t\t\t{ \"type\": \"string\" }, ",
															"        \"interface-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"queue-behavior-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"                    \"queue-name\": { \"enum\": [",
															"                                        \"ethernet-container-2-0:QUEUE_NAME_TYPE_BEST_EFFORT_QUEUE\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE1\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE2\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE3\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE4\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_EXPEDITED_FORWARDING_QUEUE\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_CLASS_SELECTOR_QUEUE6\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_CLASS_SELECTOR_QUEUE7\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_QUEUENAME_NOT_YET_DEFINED\"",
															"        \t\t\t\t\t\t\t]",
															"        \t\t\t},",
															"        \t\t\t\"queue-depth\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"dropping-behavior-kind\": { \"enum\": [",
															"        \t\t\t\t\t\t\t\t\t\t    \"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_DROP_TAIL\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_RED\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_WRED\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_NOT_YET_DEFINED\"\t\t\t",
															"        \t\t\t\t\t\t\t\t\t\t]",
															"        \t\t\t},",
															"        \t\t\t\"wred-behavior-list\": {",
															"            \t\t\t\"type\": \"array\",",
															"            \t\t\t\"items\": {",
															"            \t\t\t    \"type\": \"object\",",
															"            \t\t\t    \"properties\": {",
															"            \t\t\t\t    \"affected-drop-precedence\": { \"enum\": [",
															"                        \t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_ALL\",",
															"                        \t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_LOW\",",
															"                        \t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_MEDIUM\",",
															"                        \t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_HIGH\",",
															"                        \t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_NOT_YET_DEFINED\"\t",
															"                \t\t\t\t\t\t\t\t\t\t\t  ]",
															"            \t\t\t\t    },",
															"            \t\t\t\t    \"affected-protocol\": { \"enum\": [",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_NONE\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_ETHERNET_MAC\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_VLAN\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_Q_IN_Q\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_MPLS\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_IPV4\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_IPV6\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_TCP\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_UDP\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_RTP\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_GTP_U\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_OTHERS\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_NOT_YET_DEFINED\"",
															"            \t\t\t\t\t\t\t\t\t       ]",
															"            \t\t\t\t    },",
															"            \t\t\t\t    \"wred-profile\":   \t\t\t\t    { \"type\": \"string\" }",
															"            \t\t\t\t},",
															"            \t\t\t    \"required\": [\"affected-drop-precedence\",",
															"            \t\t\t\t    \t\t    \"affected-protocol\",",
															"            \t\t\t\t    \t\t    \"wred-profile\"",
															"            \t\t\t    ]",
															"            \t\t\t}",
															"    \t\t\t    },",
															"    \t\t\t    \"scheduler-kind\": { \"enum\": [",
															"                                            \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_STRICT\",",
															"                                            \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_WFQ\",",
															"                                            \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_WRR\",",
															"                                            \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_DWRR\",",
															"                                            \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_NOT_YET_DEFINED\"",
															"                                        ]",
															"                    },",
															"                    \"weighting\": \t\t\t\t\t\t\t{ \"type\": \"number\" }",
															"    \t\t    },",
															"    \t\t    \"required\": [\"queue-name\",",
															"                                \"queue-depth\",",
															"                                \"dropping-behavior-kind\",",
															"                                \"wred-behavior-list\",",
															"                                \"scheduler-kind\",",
															"                                \"weighting\"",
															"                ]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"explicit-congestion-notification-is-on\": \t{ \"type\": \"boolean\" }, ",
															"        \"ingress-policing-profile\":                 { \"type\": \"string\" },",
															"        \"egress-shaping-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" },\t\t\t",
															"        \"maximum-information-rate\": \t\t\t\t{ \"type\": \"number\" },  ",
															"\t\t\"maximum-burst-size\": \t\t\t\t\t\t{ \"type\": \"number\" }, \t\t\t",
															"        \"bundling-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"        \"header-compression-kind\":                  { \"type\": \"string\" },",
															"        \"fec-is-on\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"        \"fec-word-size\": \t\t\t\t\t\t\t{ \"type\": \"number\" },\t\t\t\t",
															"        \"fec-redundancy-size\": { \"enum\": [ ",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_2\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_4\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_8\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_16\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_20\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_NOT_YET_DEFINED\"\t",
															"\t\t\t\t\t\t\t\t ]",
															"\t\t},",
															"        \"fec-interleaver-kind\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_BLOCK\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_CONVOLUTION\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t  ]",
															"\t\t}, ",
															"        \"fec-interleaver-depth\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_1\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_2\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_3\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_4\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_6\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_8\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_12\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_16\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_24\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_32\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_48\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_96\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t\t   ]",
															"\t\t},\t\t\t\t\t\t\t\t\t\t\t",
															"        \"encryption-is-on\": \t\t\t\t\t\t{ \"type\": \"boolean\" }, \t\t\t",
															"        \"cryptographic-key\": \t\t\t\t\t\t{ \"type\": \"string\" }, \t\t\t",
															"        \"loop-back-kind-on\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t   ]",
															"\t\t},\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
															"        \"maintenance-timer\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"        \"statistics-is-on\": \t\t\t\t\t\t{ \"type\": \"boolean\" }, \t\t\t",
															" \t\t\"problem-kind-severity-list\": { ",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"        \t\t\t\"problem-kind-name\": \t\t\t\t\t{ \"type\": \"string\" },",
															"        \t\t\t\"problem-kind-severity\": { \"enum\": [",
															"                                                \"ethernet-container-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"                                                \"ethernet-container-2-0:SEVERITY_TYPE_WARNING\",",
															"                                                \"ethernet-container-2-0:SEVERITY_TYPE_MINOR\",",
															"                                                \"ethernet-container-2-0:SEVERITY_TYPE_MAJOR\",",
															"                                                \"ethernet-container-2-0:SEVERITY_TYPE_CRITICAL\",",
															"                                                \"ethernet-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"",
															"                                               ]",
															"                    }",
															"\t\t\t    },",
															"\t\t\t    \"required\": [\"problem-kind-name\",",
															"\t\t\t\t\t\t\t    \"problem-kind-severity\"",
															"\t\t\t\t]",
															"\t\t    }",
															"\t\t}, \t\t\t            \t\t\t",
															"        \"performance-monitoring-is-on\": \t\t\t{ \"type\": \"boolean\" }",
															"    },",
															"\t\"required\": [\"interface-name\",",
															"\t\t\t\t\t\"interface-is-on\",",
															"\t\t\t\t\t\"queue-behavior-list\",",
															"\t\t\t\t\t\"explicit-congestion-notification-is-on\",",
															"\t\t\t\t\t\"egress-shaping-is-on\",",
															"\t\t\t\t\t\"maximum-information-rate\",",
															"\t\t\t\t\t\"maximum-burst-size\",",
															"\t\t\t\t\t\"bundling-is-on\",",
															"\t\t\t\t\t\"fec-is-on\",",
															"\t\t\t\t\t\"fec-word-size\",",
															"\t\t\t\t\t\"fec-redundancy-size\",",
															"\t\t\t\t\t\"fec-interleaver-kind\",",
															"\t\t\t\t\t\"fec-interleaver-depth\",",
															"\t\t\t\t\t\"encryption-is-on\",",
															"\t\t\t\t\t\"cryptographic-key\",",
															"\t\t\t\t\t\"loop-back-kind-on\",",
															"\t\t\t\t\t\"maintenance-timer\",",
															"\t\t\t\t\t\"statistics-is-on\",",
															"\t\t\t\t\t\"problem-kind-severity-list\",",
															"\t\t\t\t\t\"performance-monitoring-is-on\"",
															"\t]",
															"};",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_CONFIGURATION_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3d6c8887-ba56-487a-9c81-561b11a92cd9",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "StatusCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6c9c8cce-dad0-42db-97a5-019453caadcc",
														"exec": [
															"console.log(\"\\n-------------------Checking EthernetContainerStatus for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* StatusCompleteness",
															"* ",
															"* This Request is for validating EthernetContainer Status Objects against definition ",
															"* EthernetContainer_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Status class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_STATUS_SCHEMA = {",
															"\t\"type\": \"object\",",
															"\t\"properties\": {",
															"\t\t\"interface-status\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_UP\", ",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_DOWN\", ",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_TESTING\", ",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_UNKNOWN\", ",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_DORMANT\", ",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\", ",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\", ",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t  ]",
															"\t\t},",
															"\t\t\"bundling-is-up\":               { \"type\": \"boolean\" },   ",
															"\t\t\"remote-site-is-faulty\":        { \"type\": \"boolean\" },                   ",
															"\t\t\"loop-back-kind-up\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\",\t\t",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\", ",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\", ",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t   ]",
															"\t\t},",
															"\t\t\"statistics-is-up\":             { \"type\": \"boolean\" },",
															"\t\t\"performance-monitoring-is-up\": { \"type\": \"boolean\" },",
															"\t\t\"timestamp\":                    { \"type\": \"string\" },",
															"\t\t\"last-10-sec-data-input-rate\":  { \"type\": \"integer\" },",
															"\t\t\"last-10-sec-data-output-rate\": { \"type\": \"integer\" },",
															"\t\t\"total-bytes-input\":            { \"type\": \"string\" },",
															"\t\t\"total-bytes-output\":           { \"type\": \"string\" },",
															"\t\t\"forwarded-bytes-input\":        { \"type\": \"string\" },",
															"\t\t\"forwarded-bytes-output\":       { \"type\": \"string\" }",
															"\t},",
															"\t\"required\": [\"interface-status\", ",
															"\t\t\t\t    \"bundling-is-up\", ",
															"\t\t\t\t    \"remote-site-is-faulty\", ",
															"\t\t\t\t    \"loop-back-kind-up\", ",
															"\t\t\t\t    \"statistics-is-up\", ",
															"\t\t\t\t    \"performance-monitoring-is-up\", ",
															"\t\t\t\t    \"timestamp\", ",
															"\t\t\t\t    \"last-10-sec-data-input-rate\", ",
															"\t\t\t\t    \"last-10-sec-data-output-rate\", ",
															"\t\t\t\t    \"total-bytes-input\", ",
															"\t\t\t\t    \"total-bytes-output\", ",
															"\t\t\t\t    \"forwarded-bytes-input\", ",
															"\t\t\t\t    \"forwarded-bytes-output\"",
															"\t]",
															"};",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_STATUS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "70ea5046-a228-4074-91fe-090ca750dc99",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentProblemsCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6bb4e646-069e-44e4-9ad6-5542c2a84165",
														"exec": [
															"console.log(\"\\n---------------Checking EthernetContainerCurrentProblems for Completeness-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentProblemsCompleteness",
															"* ",
															"* This Request is for validating EthernetContainer CurrentProblems Objects against definition ",
															"* EthernetContainer_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentProblems class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-problems\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_CURRENT_PROBLEMS_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"current-problem-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"problem-name\": \t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"sequence-number\": \t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\"timestamp\": \t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"problem-severity\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SEVERITY_TYPE_WARNING\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SEVERITY_TYPE_MINOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SEVERITY_TYPE_MAJOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SEVERITY_TYPE_CRITICAL\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t  ]",
															"\t\t\t\t\t}",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"problem-name\", ",
															"\t\t\t\t\t\t    \t\"sequence-number\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\t\t    \"timestamp\",",
															"\t\t\t\t\t\t\t    \"problem-severity\"\t",
															"\t\t\t\t]\t\t\t\t\t\t",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-current-problems\": \t\t\t{ \"type\": \"number\" },",
															"\t\t\"time-of-latest-change\": \t\t\t\t{ \"type\": \"string\" },",
															"\t},",
															"\t\"required\": [ \"current-problem-list\",",
															"\t                \"number-of-current-problems\",",
															"\t                \"time-of-latest-change\"",
															"\t] ",
															"};",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_CURRENT_PROBLEMS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "67e25509-c37a-4a15-971d-acec5162a1d1",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentPerformanceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e064828f-4085-4ffa-bb0f-0900ae154e2c",
														"exec": [
															"console.log(\"\\n-------------Checking EthernetContainerCurrentPerformance for Completeness----------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentPerformanceCompleteness",
															"* ",
															"* This Request is for validating EthernetContainer CurrentPerformance Objects against definition ",
															"* EthernetContainer_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentPerformance class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-performance\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_CURRENT_PERFORMANCE_SCHEMA = {\t",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"\t\t\"current-performance-data-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\"tx-ethernet-bytes-max-s\": \t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"tx-ethernet-bytes-max-m\":\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\"tx-ethernet-bytes-sum\":\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\"queue-utilization-list\": {",
															"\t\t\t\t\t\t\t\t\"type\": \"array\",",
															"\t\t\t\t\t\t\t\t\"items\": {",
															"\t\t\t\t\t\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\t\t\t\"queue-name\": \t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\t\t\t\"max-queue-length\":\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\t\t\t\"avg-queue-length\":\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\t\t\t\"required\": [ \"queue-name\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t    \"max-queue-length\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t    \"avg-queue-length\"",
															"\t\t\t\t\t\t\t\t\t]\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t}",
															"\t\t\t\t\t\t\t},\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\"fec-corrected-blocks\":\t\t\t{ \"type\": \"number\" },\t",
															"\t\t\t\t\t\t\t\"fec-uncorrectable-blocks\":\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"time-period\": \t\t\t\t\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t},\t\t\t\t",
															"\t\t\t\t\t\t\"required\": [ \"tx-ethernet-bytes-max-s\",",
															"\t\t\t\t\t\t\t\t\t\t\"tx-ethernet-bytes-max-m\",",
															"\t\t\t\t\t\t\t\t\t\t\"tx-ethernet-bytes-sum\",",
															"\t\t\t\t\t\t\t\t\t\t\"queue-utilization-list\",",
															"\t\t\t\t\t\t\t\t\t\t\"fec-corrected-blocks\",",
															"\t\t\t\t\t\t\t\t\t\t\"fec-uncorrectable-blocks\",",
															"\t\t\t\t\t\t\t\t\t\t\"time-period\"",
															"\t\t\t\t\t\t]\t\t\t\t\t",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"timestamp\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"suspect-interval-flag\": \t\t\t{ \"type\": \"boolean\" },\t\t\t",
															"\t\t\t\t\t\"elapsed-time\": \t\t\t\t\t{ \"type\": \"string\" },\t\t",
															"\t\t\t\t\t\"scanner-id\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"granularity-period\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t},\t ",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"performance-data\",",
															"                                \"timestamp\",",
															"                                \"suspect-interval-flag\",",
															"                                \"elapsed-time\",",
															"                                \"scanner-id\",",
															"                                \"granularity-period\",",
															"    \t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-current-performance-sets\":\t\t    { \"type\": \"number\" },\t\t\t",
															"\t},",
															"\t\"required\":\t[ \"current-performance-data-list\",",
															"\t                \"number-of-current-performance-sets\"",
															"\t]",
															"};",
															"try {",
															"    if (capability[\"performance-monitoring-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", ETHERNET_CONTAINER_CURRENT_PERFORMANCE_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"current-performance-data-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        ETHERNET_CONTAINER_CURRENT_PERFORMANCE_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldEthernetContainerCurrentPerformanceBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldEthernetContainerCurrentPerformanceBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_CURRENT_PERFORMANCE_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldEthernetContainerCurrentPerformanceBeShortened(success) {",
															"    pm.test(\"CouldEthernetContainerCurrentPerformanceBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "878aa53d-f290-4b54-b607-745b0aedd6d4",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "HistoricalPerformancesCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f6108e1b-0e1c-4924-b26d-0b943d48f61d",
														"exec": [
															"console.log(\"\\n------------Checking EthernetContainerHistoricalPerformances for Completeness-------------\");",
															"/*******************************************************************************",
															"* ",
															"* HistoricalPerformancesCompleteness",
															"* ",
															"* This Request is for validating EthernetContainer HistoricalPerformances Objects against definition ",
															"* EthernetContainer_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the HistoricalPerformances class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"*******************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"historical-performances\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_HISTORICAL_PERFORMANCES_SCHEMA = {\t",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"\t\t\"historical-performance-data-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\"tx-ethernet-bytes-max-s\": \t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"tx-ethernet-bytes-max-m\":\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\"tx-ethernet-bytes-sum\":\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\"queue-utilization-list\": {",
															"\t\t\t\t\t\t\t\t\"type\": \"array\",",
															"\t\t\t\t\t\t\t\t\"items\": {",
															"\t\t\t\t\t\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\t\t\t\"queue-name\": \t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\t\t\t\"max-queue-length\":\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\t\t\t\"avg-queue-length\":\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\t\t\t\"required\": [ \"queue-name\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t    \"max-queue-length\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t    \"avg-queue-length\"",
															"\t\t\t\t\t\t\t\t\t]\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t}",
															"\t\t\t\t\t\t\t},\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\"fec-corrected-blocks\":\t\t\t{ \"type\": \"number\" },\t",
															"\t\t\t\t\t\t\t\"fec-uncorrectable-blocks\":\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"time-period\": \t\t\t\t\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t},\t\t\t\t",
															"\t\t\t\t\t\t\"required\": [ \"tx-ethernet-bytes-max-s\",",
															"\t\t\t\t\t\t\t\t\t\t\"tx-ethernet-bytes-max-m\",",
															"\t\t\t\t\t\t\t\t\t\t\"tx-ethernet-bytes-sum\",",
															"\t\t\t\t\t\t\t\t\t\t\"queue-utilization-list\",",
															"\t\t\t\t\t\t\t\t\t\t\"fec-corrected-blocks\",",
															"\t\t\t\t\t\t\t\t\t\t\"fec-uncorrectable-blocks\",",
															"\t\t\t\t\t\t\t\t\t\t\"time-period\"",
															"\t\t\t\t\t\t]\t\t\t\t\t",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"suspect-interval-flag\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\t\"history-data-id\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"period-end-time\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"granularity-period\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t]\t\t\t\t",
															"\t\t\t\t\t},\t \t ",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"performance-data\",",
															"    \t\t\t\t\t\t\t\"suspect-interval-flag\",",
															"    \t\t\t\t\t\t\t\"history-data-id\",",
															"    \t\t\t\t\t\t\t\"period-end-time\",",
															"    \t\t\t\t\t\t\t\"granularity-period\",",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-historical-performance-sets\":\t\t{ \"type\": \"number\" },",
															"\t\t\"time-of-latest-change\": \t\t\t\t        { \"type\": \"string\" },\t\t",
															"\t},",
															"\t\"required\":\t[ \"historical-performance-data-list\",",
															"\t                \"number-of-historical-performance-sets\",",
															"\t                \"time-of-latest-change\"",
															"\t]",
															"};",
															"try {",
															"    if (capability[\"performance-monitoring-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", ETHERNET_CONTAINER_HISTORICAL_PERFORMANCES_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"historical-performance-data-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        ETHERNET_CONTAINER_HISTORICAL_PERFORMANCES_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldEthernetContainerHistoricalPerformancesBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldEthernetContainerHistoricalPerformancesBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_HISTORICAL_PERFORMANCES_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldEthernetContainerHistoricalPerformancesBeShortened(success) {",
															"    pm.test(\"CouldEthernetContainerHistoricalPerformancesBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b9a472ae-4607-4736-975b-a5ff87f1eba1",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7ad09e0d-3bae-4e9c-927c-ddc7181a17d2",
														"exec": [
															"console.log(\"\\n-------------------Restoring the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"        ",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration",
															"                                                   );",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    completeClassName = moduleUnderTest + \":\" + technologyUnderTest + \"-configuration\";",
															"    configuration = AddHeadlineToDataObject(configuration, completeClassName);",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "73139dbe-6cf6-4ca3-88fb-76926269dad4",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "aa6a881d-d72a-4f23-a05c-f50a5b8f19c6",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "49b7fd59-75e9-45e5-9f73-f3ffe6580a24",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointEthernetContainerCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "cad9c833-34bc-448b-b02a-652980a65e1e",
														"exec": [
															"console.log(\"\\n-------------ReversalPoint of EthernetContainer Validation for Completeness---------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointEthernetContainerCompleteness\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "feb479ba-9c16-417b-a9dd-7d8c410825aa",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointEthernetContainerCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "13193b22-983b-4c33-a426-071779e4d0b4",
														"exec": [
															"console.log(\"\\n-----------------------Terminating EthernetContainerCompleteness--------------------------\");",
															"/****************************************************************************************",
															" * ",
															" * ExitPoint",
															" * ",
															" * This Request is for clearing the Collection variables and terminating the TestCase",
															" * ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Preparing the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({",
															"        key: \"Accept\",",
															"        value: \"application/json\"",
															"    });",
															"} catch (error) {}",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, controller, indexOfDeviceUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function() {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function() {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "08a89a82-d14b-4799-922a-fed3d6105343",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "7dac7c2a-0ea6-441d-abe1-7c785d913062",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "54037916-3d85-4932-bb15-0cb13fb932ee",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "EthernetContainerConfiguration",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "463c0091-695f-4a77-92b5-7a190703525f",
														"exec": [
															"console.log(\"\\n\\n============================ EthernetContainerConfiguration.1 =============================\");",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Configuration of EthernetContainer Objects against definition ",
															"* ",
															"*                   EthernetContainer_2.0.0-tsp.191123.1240",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"* ",
															"****************************************************************************************/",
															" ",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"* ",
															"* It is recommended to apply this TestCase on devices on the local (not remote) site",
															"* of the microwave connection, otherwise the management connection might break and ",
															"* configurations, which are done during the validation, cannot be reversed.",
															"* ",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"one\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"ethernet-container-2-0:ethernet-container-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"RESPONSE_CODE_FOR_OPERATION_FAILED = 501;       // 500: Expected translation of aggreed <error-tag> operation failed",
															"CONFIGURATION_VALIDATION_RESULTS = {};",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"pm.collectionVariables.set(\"responseCodeForOperationFailed\", RESPONSE_CODE_FOR_OPERATION_FAILED);",
															"pm.collectionVariables.set(\"configurationValidationResults\", CONFIGURATION_VALIDATION_RESULTS);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function() {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function() {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2eface39-938a-4b7b-8998-17a89b15bc23",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DefiningDummyValuesAndEvaluations()",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6542e19d-d87a-4319-aae6-35c49d1ad782",
														"exec": [
															"console.log(\"\\n----------Defining DummyValues and Evaluation Criteria in Configuration Validation--------\");",
															"/****************************************************************************************",
															"* ",
															"* Definition of DefiningDummyValuesAndEvaluations()",
															"*  ",
															"* Functions for Defining DummyValues and Evaluation Criteria in all Configuration Validations.",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"        ",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"class Attribute {",
															"    constructor (CreatingDummyValueAsaString, ",
															"                    EvaluatingResultAsaString, ",
															"                    defaultValueForStandardEvaluation,",
															"                    capabilityAttributeToBeFalseIfFeatureNotSupported) {",
															"        this.CreatingDummyValueAsaString = CreatingDummyValueAsaString;",
															"        this.EvaluatingResultAsaString = EvaluatingResultAsaString;",
															"        this.defaultValueForStandardEvaluation = defaultValueForStandardEvaluation;",
															"        this.capabilityAttributeToBeFalseIfFeatureNotSupported = capabilityAttributeToBeFalseIfFeatureNotSupported;",
															"    }",
															"}",
															"var attributes = [];",
															"",
															"var CreatingDummyValueAsaString;",
															"var EvaluatingResultAsaString;",
															"var defaultValueForStandardEvaluation;",
															"var capabilityAttributeToBeFalseIfFeatureNotSupported;",
															"var newAttribute;",
															"",
															"// interface-name",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of interface-name--------------------------\");",
															"            ",
															"        // Individual Values Definition ",
															"        var dummyValue = \"Dummy \" + String(Math.floor(Math.random() * 999));",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"interface-name\";",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"Interface name not yet defined.\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// interface-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of interface-is-on-----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"interface-is-on\";",
															"            ",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"            ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// queue-behavior-list/queue-depth",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------Checking Configuration of queue-behavior-list/queue-depth-----------------\");",
															"            ",
															"        // Individual Values Definition",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"queue-name\";",
															"        try {",
															"            keysOfDatatypeInstanceUnderTest[0].value = capability[\"available-queue-list\"][0][keysOfDatatypeInstanceUnderTest[0].key];",
															"            var dummyQueueMaxQueueDepth = 0;",
															"            for (let i=0; i<(capability[\"available-queue-list\"].length); i++) {",
															"                let sampleQueueDepthIsConfigurable = capability[\"available-queue-list\"][i][\"queue-depth-configuration-is-avail\"];",
															"                if ( sampleQueueDepthIsConfigurable === true ) {",
															"                    keysOfDatatypeInstanceUnderTest[0].value = capability[\"available-queue-list\"][i][keysOfDatatypeInstanceUnderTest[0].key];",
															"                    dummyQueueMaxQueueDepth = capability[\"available-queue-list\"][i][\"max-queue-depth\"];",
															"                    break;",
															"                }",
															"            }",
															"            var dummyValue = Math.abs( Math.floor(Math.random() * dummyQueueMaxQueueDepth) );",
															"            CouldDummyValueBeCreated(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeCreated();",
															"        }",
															"        var DATATYPE_UNDER_TEST = \"queue-behavior-list\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"        var ATTRIBUTE_UNDER_TEST = \"queue-depth\";",
															"            ",
															"        // Self Testing Function",
															"        function CouldDummyValueBeCreated(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try {",
															"            let dummyQueueName = keysOfDatatypeInstanceUnderTest[0].value;",
															"            let dummyQueueCapabilityIndex = QueueIndexOf(dummyQueueName, capability);",
															"            let dummyQueueDepthIsConfigurable = capability[\"available-queue-list\"][dummyQueueCapabilityIndex][\"queue-depth-configuration-is-avail\"];",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"                    && (Math.floor(resultCode/100) === 2) ",
															"                    && (dummyValueString===resultValueString) ) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"            } else {",
															"                if ( (dummyQueueDepthIsConfigurable === false)",
															"                        && (resultValueString === JSON.stringify(\"-1\"))",
															"                         && (dummyCode === responseCodeForOperationFailed) ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(true);",
															"        } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"        }",
															"            ",
															"        // Functions",
															"        function QueueIndexOf (queueName, capability) {",
															"            for (let i=0; i<(capability[\"available-queue-list\"].length); i++) {",
															"                let sampleQueueName = capability[\"available-queue-list\"][i][\"queue-name\"];",
															"                if ( sampleQueueName === queueName ) {",
															"                    return i;",
															"                }",
															"            }",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = -1;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"queue-depth-configuration-is-avail\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// queue-behavior-list/dropping-behavior-kind",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------Checking Configuration of queue-behavior-list/dropping-behavior-kind-----------\");",
															"            ",
															"        // Individual Values Definition ",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"queue-name\";",
															"        try {",
															"            let availableDroppingBehaviorKinds = capability[\"available-queue-list\"][0][\"available-dropping-behavior-kind-list\"];",
															"            keysOfDatatypeInstanceUnderTest[0].value = capability[\"available-queue-list\"][0][keysOfDatatypeInstanceUnderTest[0].key];",
															"            let dummyQueueConfigurationIndex = QueueConfigurationIndexOf(keysOfDatatypeInstanceUnderTest[0].value,configuration);",
															"                ",
															"            let configuredDroppingBehaviorKindName = configuration[\"queue-behavior-list\"][dummyQueueConfigurationIndex][\"dropping-behavior-kind\"];",
															"            let configuredDroppingBehaviorKindIndex = availableDroppingBehaviorKinds.indexOf(configuredDroppingBehaviorKindName);",
															"                ",
															"            let potentialDummyValues = availableDroppingBehaviorKinds;",
															"            if ( configuredDroppingBehaviorKindIndex >= 0 ) {",
															"                potentialDummyValues.splice(configuredDroppingBehaviorKindIndex, 1);",
															"            }",
															"            if ( potentialDummyValues.length === 0 ) {",
															"                potentialDummyValues = [\"No alternatives available\"];",
															"            }",
															"                ",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"                ",
															"            CouldDummyBeCreated(availableDroppingBehaviorKinds, keysOfDatatypeInstanceUnderTest[0].value,",
															"                                    dummyQueueConfigurationIndex,",
															"                                    configuredDroppingBehaviorKindName,",
															"                                    configuredDroppingBehaviorKindIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue);",
															"                ",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"queue-behavior-list\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"        var ATTRIBUTE_UNDER_TEST = \"dropping-behavior-kind\";",
															"            ",
															"        // Functions",
															"        function QueueConfigurationIndexOf (queueName, configuration) {",
															"            for (let i=0; i<(configuration[\"queue-behavior-list\"].length); i++) {",
															"                let sampleQueueName = configuration[\"queue-behavior-list\"][i][\"queue-name\"];",
															"                if ( sampleQueueName === queueName ) {",
															"                    return i;",
															"                }",
															"            }",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(availableDroppingBehaviorKinds, dummyQueueName,",
															"                                    dummyQueueConfigurationIndex,",
															"                                    configuredDroppingBehaviorKindName,",
															"                                    configuredDroppingBehaviorKindIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue) {",
															"            pm.test(\"CouldAvailableDroppingBehaviorKindsBeRetrieved\", function () {",
															"                pm.expect(availableDroppingBehaviorKinds).to.be.an(\"array\");",
															"                pm.expect(availableDroppingBehaviorKinds.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyQueueNameBeRetrieved\", function () {",
															"                pm.expect(dummyQueueName).to.be.a(\"string\");",
															"                pm.expect(dummyQueueName).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldDummyQueueConfigurationIndexBeEvaluated\", function () {",
															"                pm.expect(dummyQueueConfigurationIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldConfiguredDroppingBehaviorKindNameBeRetrieved\", function () {",
															"                pm.expect(configuredDroppingBehaviorKindName).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldConfiguredDroppingBehaviorKindIndexBeEvaluated\", function () {",
															"                pm.expect(configuredDroppingBehaviorKindIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        } ",
															"        ",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try {",
															"            keysOfDatatypeInstanceUnderTest[0].value = capability[\"available-queue-list\"][0][keysOfDatatypeInstanceUnderTest[0].key];",
															"            let dummyQueueConfigurationIndex = QueueConfigurationIndexOf(keysOfDatatypeInstanceUnderTest[0].value,configuration);",
															"            let initialDroppingBehaviorKindName = configuration[\"queue-behavior-list\"][dummyQueueConfigurationIndex][\"dropping-behavior-kind\"];",
															"                ",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"                    && (Math.floor(resultCode/100) === 2) ",
															"                    && (dummyValueString===resultValueString) ) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"            } else {",
															"                if ( (dummyValueString === JSON.stringify(\"No alternatives available\"))",
															"                        && (resultValueString === JSON.stringify(initialDroppingBehaviorKindName))",
															"                         && (dummyCode === responseCodeForOperationFailed) ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(true);",
															"        } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"        }",
															"        ",
															"        // Functions",
															"        function QueueConfigurationIndexOf (queueName, configuration) {",
															"            for (let i=0; i<(configuration[\"queue-behavior-list\"].length); i++) {",
															"                let sampleQueueName = configuration[\"queue-behavior-list\"][i][\"queue-name\"];",
															"                if ( sampleQueueName === queueName ) {",
															"                    return i;",
															"                }",
															"            }",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"            ",
															"    defaultValueForStandardEvaluation = \"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_NOT_YET_DEFINED\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// queue-behavior-list/wred-behavior-list/wred-profile",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------Checking Configuration of queue-behavior-list/wred-behavior-list/wred-profile-------\");",
															"        console.log(\"Testing queue-behavior-list/wred-behavior-list/wred-profile is not yet implemented.\")",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    ",
															"    EvaluatingResult = () => {",
															"        ",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"    // attributes.push(newAttribute);",
															"}  ",
															"",
															"// queue-behavior-list/scheduler-kind",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------------Checking Configuration of queue-behavior-list/scheduler-kind---------------\");",
															"            ",
															"        // Individual Values Definition",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"queue-name\";",
															"        try {",
															"            let availableSchedulerKinds = capability[\"available-queue-list\"][0][\"available-scheduling-kind-list\"];",
															"            keysOfDatatypeInstanceUnderTest[0].value = capability[\"available-queue-list\"][0][keysOfDatatypeInstanceUnderTest[0].key];",
															"            let dummyQueueConfigurationIndex = QueueConfigurationIndexOf(keysOfDatatypeInstanceUnderTest[0].value,configuration);",
															"                ",
															"            let configuredSchedulerKindName = configuration[\"queue-behavior-list\"][dummyQueueConfigurationIndex][\"scheduler-kind\"];",
															"            let configuredSchedulerKindIndex = availableSchedulerKinds.indexOf(configuredSchedulerKindName);",
															"                ",
															"            let potentialDummyValues = availableSchedulerKinds;",
															"            if ( configuredSchedulerKindIndex >= 0 ) {",
															"                potentialDummyValues.splice(configuredSchedulerKindIndex, 1);",
															"            }",
															"            if ( potentialDummyValues.length === 0 ) {",
															"                potentialDummyValues = [\"No alternatives available\"];",
															"            }",
															"                ",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"                ",
															"            CouldDummyBeCreated(availableSchedulerKinds, keysOfDatatypeInstanceUnderTest[0].value,",
															"                                    dummyQueueConfigurationIndex,",
															"                                    configuredSchedulerKindName,",
															"                                    configuredSchedulerKindIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue);",
															"                ",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"queue-behavior-list\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"        var ATTRIBUTE_UNDER_TEST = \"scheduler-kind\";",
															"            ",
															"        // Functions",
															"        function QueueConfigurationIndexOf (queueName, configuration) {",
															"            for (let i=0; i<(configuration[\"queue-behavior-list\"].length); i++) {",
															"                let sampleQueueName = configuration[\"queue-behavior-list\"][i][\"queue-name\"];",
															"                if ( sampleQueueName === queueName ) {",
															"                    return i;",
															"                }",
															"            }",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(availableSchedulerKinds, dummyQueueName,",
															"                                    dummyQueueConfigurationIndex,",
															"                                    configuredSchedulerKindName,",
															"                                    configuredSchedulerKindIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue) {",
															"            pm.test(\"CouldAvailableSchedulerKindsBeRetrieved\", function () {",
															"                pm.expect(availableSchedulerKinds).to.be.an(\"array\");",
															"                pm.expect(availableSchedulerKinds.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyQueueNameBeRetrieved\", function () {",
															"                pm.expect(dummyQueueName).to.be.a(\"string\");",
															"                pm.expect(dummyQueueName).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldDummyQueueConfigurationIndexBeEvaluated\", function () {",
															"                pm.expect(dummyQueueConfigurationIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldConfiguredSchedulerKindNameBeRetrieved\", function () {",
															"                pm.expect(configuredSchedulerKindName).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldConfiguredSchedulerKindIndexBeEvaluated\", function () {",
															"                pm.expect(configuredSchedulerKindIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try {",
															"                ",
															"            keysOfDatatypeInstanceUnderTest[0].value = capability[\"available-queue-list\"][0][keysOfDatatypeInstanceUnderTest[0].key];",
															"            let dummyQueueConfigurationIndex = QueueConfigurationIndexOf(keysOfDatatypeInstanceUnderTest[0].value,configuration);",
															"            let initialSchedulerKindName = configuration[\"queue-behavior-list\"][dummyQueueConfigurationIndex][\"scheduler-kind\"];",
															"                ",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"                    && (Math.floor(resultCode/100) === 2) ",
															"                    && (dummyValueString===resultValueString) ) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"            } else {",
															"                if ( (dummyValueString === JSON.stringify(\"No alternatives available\"))",
															"                        && (resultValueString === JSON.stringify(initialSchedulerKindName))",
															"                         && (dummyCode === responseCodeForOperationFailed) ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(true);",
															"        } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"        }",
															"            ",
															"        // Functions",
															"        function QueueConfigurationIndexOf (queueName, configuration) {",
															"            for (let i=0; i<(configuration[\"queue-behavior-list\"].length); i++) {",
															"                let sampleQueueName = configuration[\"queue-behavior-list\"][i][\"queue-name\"];",
															"                if ( sampleQueueName === queueName ) {",
															"                    return i;",
															"                }",
															"            }",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_NOT_YET_DEFINED\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// queue-behavior-list/weighting",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------Checking Configuration of queue-behavior-list/weighting------------------\");",
															"            ",
															"        // Individual Values Definition",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"queue-name\";",
															"        try {",
															"            var dummyQueueIndex = 0;",
															"            keysOfDatatypeInstanceUnderTest[0].value = configuration[\"queue-behavior-list\"][dummyQueueIndex][keysOfDatatypeInstanceUnderTest[0].key];",
															"            var dummyValue = Math.floor(Math.random() * 100);",
															"                ",
															"            var weightableSchedulerKinds = [\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_WFQ\",",
															"                                                \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_WRR\",",
															"                                                \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_DWRR\"",
															"                                           ];",
															"                ",
															"            for (let i=0; i<(configuration[\"queue-behavior-list\"].length); i++) {",
															"                let sampleSchedulerKind = configuration[\"queue-behavior-list\"][i][\"scheduler-kind\"];",
															"                if ( weightableSchedulerKinds.includes(sampleSchedulerKind) ) {",
															"                    dummyQueueIndex = i;",
															"                    keysOfDatatypeInstanceUnderTest[0].value = configuration[\"queue-behavior-list\"][i][keysOfDatatypeInstanceUnderTest[0].key];",
															"                    break;",
															"                }",
															"            }",
															"                ",
															"            CouldDummyNameAndValueBeCreated(keysOfDatatypeInstanceUnderTest[0].value, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyNameAndValueBeCreated();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"queue-behavior-list\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"        var ATTRIBUTE_UNDER_TEST = \"weighting\";",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyNameAndValueBeCreated(dummyQueueName, dummyValue) {",
															"            pm.test(\"CouldDummyNameBeCreated\", function () {",
															"                pm.expect(dummyQueueName).to.be.a(\"string\");",
															"                pm.expect(dummyQueueName).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        // Individual Evaluation Definition",
															"        try {",
															"                ",
															"            let dummyQueueCapabilityIndex = QueueCapabilityIndexOf(keysOfDatatypeInstanceUnderTest[0].value, capability);",
															"            let availableSchedulingKindList = capability[\"available-queue-list\"][dummyQueueCapabilityIndex][\"available-scheduling-kind-list\"];",
															"                ",
															"            let wfqIsAvailable = availableSchedulingKindList.includes(\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_WFQ\");",
															"            let dwrrIsAvailable = availableSchedulingKindList.includes(\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_DWRR\");",
															"            let weightingIsObsolete = (wfqIsAvailable===false) && (dwrrIsAvailable===false);",
															"                ",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"                    && (Math.floor(resultCode/100) === 2) ",
															"                    && (dummyValueString===resultValueString) ) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"            } else {",
															"                if ( (weightingIsObsolete === true)",
															"                        && (resultValueString === JSON.stringify(\"false\"))",
															"                        && (dummyCode === responseCodeForOperationFailed) ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(keysOfDatatypeInstanceUnderTest[0].value, dummyQueueCapabilityIndex, ",
															"                                        availableSchedulingKindList, ",
															"                                        wfqIsAvailable, ",
															"                                        dwrrIsAvailable, ",
															"                                        weightingIsObsolete, ",
															"                                        configurationValidationResults[NameOfAttributeUnderTest]",
															"                                  );",
															"        } catch (error) {",
															"            CouldResultBeEvaluated();",
															"        }",
															"            ",
															"        // Functions",
															"        function QueueCapabilityIndexOf(queueName, capability) {",
															"            for (let i=0; i<(capability[\"available-queue-list\"].length); i++) {",
															"                let sampleQueueName = capability[\"available-queue-list\"][i][\"queue-name\"];",
															"                if ( sampleQueueName === queueName ) {",
															"                    return i;",
															"                }",
															"            }",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldResultBeEvaluated(dummyQueueName, dummyQueueCapabilityIndex, ",
															"                                        availableSchedulingKindList, ",
															"                                        wfqIsAvailable, ",
															"                                        dwrrIsAvailable, ",
															"                                        weightingIsObsolete, ",
															"                                        configurationValidationResults) {",
															"            pm.test(\"CouldDummyQueueNameBeRetrieved\", function () {",
															"                pm.expect(dummyQueueName).to.be.a(\"string\");",
															"                pm.expect(dummyQueueName).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldDummyQueueCapabilityIndexBeCalculated\", function () {",
															"                pm.expect(dummyQueueCapabilityIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldTheAvailableSchedulingKindListBeRetrieved\", function () {",
															"                pm.expect(availableSchedulingKindList).to.be.an(\"array\");",
															"            });",
															"            pm.test(\"CouldWfqIsAvailableBeCalculated\", function () {",
															"                pm.expect(wfqIsAvailable).to.be.a(\"boolean\");",
															"            });",
															"            pm.test(\"CouldDwrrIsAvailableBeCalculated\", function () {",
															"                pm.expect(dwrrIsAvailable).to.be.a(\"boolean\");",
															"            });",
															"            pm.test(\"CouldWeightingIsObsoleteBeCalculated\", function () {",
															"                pm.expect(weightingIsObsolete).to.be.a(\"boolean\");",
															"            });",
															"            pm.test(\"CouldConfigurationValidationResultsBeCalculated\", function () {",
															"                pm.expect(configurationValidationResults).to.be.a(\"string\");",
															"                pm.expect(configurationValidationResults).to.not.have.lengthOf(0);  ",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = -1;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// explicit-congestion-notification-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------Checking Configuration of explicit-congestion-notification-is-on-------------\");",
															"            ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        var ATTRIBUTE_UNDER_TEST = \"explicit-congestion-notification-is-on\";",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"explicit-congestion-notification-is-avail\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// ingress-policing-profile",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------------------Checking Configuration of ingress-policing-profile---------------------\");",
															"            ",
															"        // Individual Values Definition ",
															"        var dummyValue = \"Not yet tested\";",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"ingress-policing-profile\";",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try {",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"                    && (Math.floor(resultCode/100) === 2) ",
															"                    && (dummyValueString===resultValueString)) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"Not yet tested\";",
															"            } else {",
															"                if ( dummyCode === responseCodeForOperationFailed ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"Not yet tested\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(true);",
															"        } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"            ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"ingress-policing-is-avail\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// egress-shaping-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------------Checking Configuration of egress-shaping-is-on----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"egress-shaping-is-on\";",
															"            ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"egress-shaping-is-avail\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// maximum-information-rate",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------------------Checking Configuration of maximum-information-rate--------------------\");",
															"        ",
															"        try {",
															"            var minimumValue = capability[\"information-rate-min\"];",
															"            var maximumValue = capability[\"information-rate-max\"];",
															"            var valueRange = maximumValue - minimumValue; ",
															"            var dummyValue = Math.abs( minimumValue + Math.floor(Math.random() * valueRange) );",
															"            CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue);",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"maximum-information-rate\";",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue) {",
															"            pm.test(\"CouldMinimumValueBeReadFromCapabilities\", function () {",
															"                pm.expect(minimumValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldMaximumValueBeReadFromCapabilities\", function () {",
															"                pm.expect(maximumValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldValueRangeBeCalculated\", function () {",
															"                pm.expect(valueRange).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = -1;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// maximum-burst-size",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of maximum-burst-size-----------------------\");",
															"            ",
															"        try {",
															"            var minimumValue = capability[\"burst-size-min\"];",
															"            var maximumValue = capability[\"burst-size-max\"];",
															"            var valueRange = maximumValue - minimumValue; ",
															"            var dummyValue = Math.abs( minimumValue + Math.floor(Math.random() * valueRange) );",
															"            CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue);",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"maximum-burst-size\";",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue) {",
															"            pm.test(\"CouldMinimumValueBeReadFromCapabilities\", function () {",
															"                pm.expect(minimumValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldMaximumValueBeReadFromCapabilities\", function () {",
															"                pm.expect(maximumValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldValueRangeBeCalculated\", function () {",
															"                pm.expect(valueRange).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"            ",
															"    defaultValueForStandardEvaluation = -1;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}  attributes.push(newAttribute);",
															"",
															"// bundling-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of bundling-is-on-------------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"bundling-is-on\";",
															"            ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"bundling-is-avail\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// header-compression-kind",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------------------Checking Configuration of header-compression-kind--------------------\");",
															"            ",
															"        try {",
															"            let supportedHeaderCompressionKindNames = [];",
															"            for ( let i=0; i<capability[\"supported-header-compression-kind-list\"].length; i++ ) {",
															"                let sampleName = capability[\"supported-header-compression-kind-list\"][i][\"header-compression-name\"];",
															"                supportedHeaderCompressionKindNames.push(sampleName);",
															"            }",
															"            let configuredHeaderCompressionKind = configuration[\"header-compression-kind\"];",
															"            let configuredHeaderCompressionKindIndex = supportedHeaderCompressionKindNames.indexOf(configuredHeaderCompressionKind);",
															"            let potentialDummyValues = supportedHeaderCompressionKindNames;",
															"            if ( configuredHeaderCompressionKindIndex >= 0 ) {",
															"                potentialDummyValues.splice(configuredHeaderCompressionKindIndex, 1);",
															"            }    ",
															"            if ( potentialDummyValues.length === 0 ) {",
															"                potentialDummyValues = [\"No alternatives available\"];",
															"            }",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(supportedHeaderCompressionKindNames, configuredHeaderCompressionKind,",
															"                                    configuredHeaderCompressionKindIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue);",
															"                ",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"header-compression-kind\";",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(supportedHeaderCompressionKindNames, configuredHeaderCompressionKind,",
															"                                        configuredHeaderCompressionKindIndex,",
															"                                        potentialDummyValues,",
															"                                        dummyValueIndex,",
															"                                        dummyValue) {",
															"            pm.test(\"CouldSupportedHeaderCompressionKindNamesBeRetrieved\", function () {",
															"                pm.expect(supportedHeaderCompressionKindNames).to.be.an(\"array\");",
															"            });",
															"            pm.test(\"CouldConfiguredHeaderCompressionKindNameBeRetrieved\", function () {",
															"                pm.expect(configuredHeaderCompressionKind).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldConfiguredHeaderCompressionKindIndexBeEvaluated\", function () {",
															"                pm.expect(configuredHeaderCompressionKindIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try {",
															"                ",
															"            let initialHeaderCompressionKindName = configuration[\"header-compression-kind\"];",
															"                ",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"                    && (Math.floor(resultCode/100) === 2) ",
															"                    && (dummyValueString===resultValueString) ) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"            } else {",
															"                if ( (dummyValueString === JSON.stringify(\"No alternatives available\"))",
															"                        && (resultValueString === JSON.stringify(initialHeaderCompressionKindName))",
															"                         && (dummyCode === responseCodeForOperationFailed) ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(true);",
															"        } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// fec-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------------------Checking Configuration of fec-is-on---------------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"fec-is-on\";",
															"            ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"fec-is-avail\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// fec-word-size",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------------------------Checking Configuration of fec-word-size-------------------------\");",
															"            ",
															"        try {",
															"            var minimumValue = 20;",
															"            var maximumValue = capability[\"fec-word-size-max\"];",
															"            var valueRange = maximumValue - minimumValue; ",
															"            var dummyValue = minimumValue + Math.floor(Math.random() * valueRange);",
															"            CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue);",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"fec-word-size\";",
															"            ",
															"        // Self Testing Function",
															"        function CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue) {",
															"            pm.test(\"CouldMinimumValueBeReadFromCapabilities\", function () {",
															"                pm.expect(minimumValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldMaximumValueBeReadFromCapabilities\", function () {",
															"                pm.expect(maximumValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldValueRangeBeCalculated\", function () {",
															"                pm.expect(valueRange).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = -1;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// fec-redundancy-size",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------------Checking Configuration of fec-redundancy-size------------------------\");",
															"            ",
															"        try {",
															"            let fecRedundancySizes = [\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_2\",",
															"                                        \"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_4\", ",
															"                                        \"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_8\",",
															"                                        \"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_16\",",
															"                                        \"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_20\",",
															"                                        \"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_NOT_YET_DEFINED\"",
															"                                  ];",
															"            let configuredFecRedundancySize = configuration[\"fec-redundancy-size\"];",
															"            let configuredFecRedundancySizeIndex = fecRedundancySizes.indexOf(configuredFecRedundancySize);",
															"            let potentialDummyValues = fecRedundancySizes;",
															"            if ( configuredFecRedundancySizeIndex >= 0 ) {",
															"                potentialDummyValues.splice(configuredFecRedundancySizeIndex, 1);",
															"            }",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(fecRedundancySizes, configuredFecRedundancySize,",
															"                                    configuredFecRedundancySizeIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue);",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"fec-redundancy-size\";",
															"    ",
															"        // Self Testing Function",
															"        function CouldDummyBeCreated(fecRedundancySizes, configuredFecRedundancySize,",
															"                                    configuredFecRedundancySizeIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue) {",
															"            pm.test(\"CouldFecRedundancySizesBeCreated\", function () {",
															"                pm.expect(fecRedundancySizes).to.be.an(\"array\");",
															"                pm.expect(fecRedundancySizes.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldConfiguredFecRedundancySizeBeRetrieved\", function () {",
															"                pm.expect(configuredFecRedundancySize).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldConfiguredFecRedundancySizeIndexBeEvaluated\", function () {",
															"                pm.expect(configuredFecRedundancySizeIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        } ",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_NOT_YET_DEFINED\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// fec-interleaver-kind",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------------Checking Configuration of fec-interleaver-kind-----------------------\");",
															"            ",
															"        try {",
															"            let fecInterleaverKinds = [\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NONE\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_BLOCK\", ",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_CONVOLUTION\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NOT_YET_DEFINED\"",
															"                                      ];",
															"            let configuredFecInterleaverKind = configuration[\"fec-interleaver-kind\"];",
															"            let configuredFecInterleaverKindIndex = fecInterleaverKinds.indexOf(configuredFecInterleaverKind);",
															"            let potentialDummyValues = fecInterleaverKinds;",
															"            if ( configuredFecInterleaverKindIndex >= 0 ) {",
															"                potentialDummyValues.splice(configuredFecInterleaverKindIndex, 1);",
															"            }",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(fecInterleaverKinds, configuredFecInterleaverKind,",
															"                                    configuredFecInterleaverKindIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue);",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"fec-interleaver-kind\";",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(fecInterleaverKinds, configuredFecInterleaverKind,",
															"                                    configuredFecInterleaverKindIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue) {",
															"            pm.test(\"CouldFecInterleaverKindsBeCreated\", function () {",
															"                pm.expect(fecInterleaverKinds).to.be.an(\"array\");",
															"                pm.expect(fecInterleaverKinds.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldConfiguredFecInterleaverKindBeRetrieved\", function () {",
															"                pm.expect(configuredFecInterleaverKind).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldConfiguredFecInterleaverKindIndexBeEvaluated\", function () {",
															"                pm.expect(configuredFecInterleaverKindIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NOT_YET_DEFINED\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// fec-interleaver-depth",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------------Checking Configuration of fec-interleaver-depth----------------------\");",
															"            ",
															"        try {",
															"            let fecInterleaverDepths = [\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_1\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_2\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_3\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_4\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_6\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_8\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_12\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_16\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_24\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_32\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_48\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_96\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NOT_YET_DEFINED\"",
															"                                      ];",
															"            let configuredfecInterleaverDepth = configuration[\"fec-interleaver-depth\"];",
															"            let configuredfecInterleaverDepthIndex = fecInterleaverDepths.indexOf(configuredfecInterleaverDepth);",
															"            let potentialDummyValues = fecInterleaverDepths;",
															"            if ( configuredfecInterleaverDepthIndex >= 0 ) {",
															"                potentialDummyValues.splice(configuredfecInterleaverDepthIndex, 1);",
															"            }",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(fecInterleaverDepths, configuredfecInterleaverDepth,",
															"                                    configuredfecInterleaverDepthIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue);",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"fec-interleaver-depth\";",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(fecInterleaverDepths, configuredfecInterleaverDepth,",
															"                                        configuredfecInterleaverDepthIndex,",
															"                                        potentialDummyValues,",
															"                                        dummyValueIndex,",
															"                                        dummyValue) {",
															"            pm.test(\"CouldFecInterleaverDepthsBeCreated\", function () {",
															"                pm.expect(fecInterleaverDepths).to.be.an(\"array\");",
															"                pm.expect(fecInterleaverDepths.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldConfiguredFecInterleaverDepthBeRetrieved\", function () {",
															"                pm.expect(configuredfecInterleaverDepth).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldConfiguredFecInterleaverDepthIndexBeEvaluated\", function () {",
															"                pm.expect(configuredfecInterleaverDepthIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_NOT_YET_DEFINED\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// encryption-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of encryption-is-on-------------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"encryption-is-on\";",
															"            ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"encryption-is-avail\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// cryptographic-key",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of cryptographic-key-------------------------\");",
															"            ",
															"        var dummyValue = GenerateRandomString(16);",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"cryptographic-key\";",
															"            ",
															"        // Functions",
															"        function GenerateRandomString(length) {",
															"            let randomString = \"\";",
															"            let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
															"            let charactersLength = characters.length;",
															"            for ( let i=0; i<length; i++ ) {",
															"                randomString += characters.charAt(Math.floor(Math.random() * charactersLength));",
															"            }",
															"            return randomString;",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"Cryptographic key not yet defined.\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// loop-back-kind-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of loop-back-kind-on------------------------\");",
															"            ",
															"        try {",
															"            var supportedLoopBackKindList = capability[\"supported-loop-back-kind-list\"];",
															"            var loopBackKindOn = configuration[\"loop-back-kind-on\"];",
															"            for (let i=0; i<supportedLoopBackKindList.length; i++) {",
															"                if ( (supportedLoopBackKindList[i]===\"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\")",
															"                        || (supportedLoopBackKindList[i]===loopBackKindOn) ) {",
															"                    supportedLoopBackKindList.splice(i, 1);",
															"                }",
															"            }",
															"            var dummyValue;",
															"            if ( supportedLoopBackKindList.length === 0 ) {",
															"                dummyValue = \"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\";",
															"            } else {",
															"                let dummyValueIndex = Math.floor( Math.random() * supportedLoopBackKindList.length );",
															"                dummyValue = supportedLoopBackKindList[dummyValueIndex];",
															"            }",
															"            CouldDummyBeCreated(supportedLoopBackKindList, loopBackKindOn, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"loop-back-kind-on\";",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(supportedLoopBackKindList, loopBackKindOn, dummyValue) {",
															"            pm.test(\"CouldDummyBeCreated\", function () {",
															"                pm.expect(supportedLoopBackKindList).to.be.an(\"array\");",
															"                pm.expect(loopBackKindOn).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try {",
															"            var supportedLoopBackKindList = capability[\"supported-loop-back-kind-list\"];",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"                    && (Math.floor(resultCode/100) === 2)",
															"                    && (dummyValueString === resultValueString) ) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"            } else {",
															"                if ( (resultValueString === JSON.stringify(\"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"))",
															"                        && (supportedLoopBackKindList.length===1)",
															"                        && (supportedLoopBackKindList[0]===\"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\")",
															"                        && (dummyCode === responseCodeForOperationFailed) ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(supportedLoopBackKindList, configurationValidationResults[attributeUnderTest]);",
															"        } catch (error) {",
															"            CouldResultBeEvaluated();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldResultBeEvaluated(supportedLoopBackKindList, configurationValidationResult) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(supportedLoopBackKindList).to.be.an(\"array\");",
															"                pm.expect(configurationValidationResult).to.be.a(\"string\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// maintenance-timer",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of maintenance-timer------------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"maintenance-timer\";",
															"            ",
															"        try {",
															"            var currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"            var maintenanceTimerRange = capability[\"maintenance-timer-range\"];",
															"            var dummyValue = getRandomValues(maintenanceTimerRange, currentValue);",
															"            CouldDummyValueBeDefined(maintenanceTimerRange, currentValue, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeDefined();",
															"        }",
															"            ",
															"        // Functions",
															"        function getRandomValues(availableValues, currentValue) {",
															"            var randomValue=0;",
															"        \tif(availableValues.includes(\"-\")) {",
															"        \t\tvar rangeValues = availableValues.split(\"-\");",
															"        \t\tdo {",
															"        \t\t    randomValue = getRandomValueFromAvailableValues(rangeValues[0], rangeValues[1]);",
															"        \t\t} while(randomValue===currentValue);",
															"        \t} else if(availableValues.includes(\",\")) {",
															"        \t    var concreteValues = availableValues.split(\",\");",
															"        \t    do {",
															"        \t        var randomIndex = getRandomValueFromAvailableValues(0,concreteValues.length);",
															"        \t        randomValue = concreteValues[randomIndex];",
															"        \t    } while(randomValue===currentValue);",
															"        \t}",
															"        \telse {",
															"        \t\trandomValue = availableValues;",
															"        \t}",
															"        \treturn randomValue;",
															"        }",
															"            ",
															"        function getRandomValueFromAvailableValues(min, max) {  ",
															"           return Math.floor(Math.random() * (max - min) + min);  ",
															"        } ",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeDefined(maintenanceTimerRange, currentValue, dummyValue) {",
															"            pm.test(\"CouldAnAvailableConfigurationValueBeRead\", function () {",
															"                pm.expect(maintenanceTimerRange).to.be.a(\"string\");",
															"                pm.expect(maintenanceTimerRange).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldDCurrentValueBeRead\", function () {",
															"                pm.expect(currentValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(dummyValue).to.not.be.undefined;",
															"            });",
															"        }",
															"     };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = -1;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// statistics-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of statistics-is-on------------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"statistics-is-on\";",
															"            ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"statistics-is-avail\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// problem-kind-severity-list/problem-kind-severity",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------Checking Configuration of problem-kind-severity-list/problem-kind-severity--------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"problem-kind-severity-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"problem-kind-name\";",
															"        var ATTRIBUTE_UNDER_TEST = \"problem-kind-severity\";",
															"            ",
															"        try {",
															"            var currentValue;",
															"            currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"            keysOfDatatypeInstanceUnderTest[0].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"            CouldCurrentConfigurationValuesBeRead(currentValue);",
															"        } catch (error) {",
															"            CouldCurrentConfigurationValuesBeRead();",
															"        }",
															"            ",
															"        try {",
															"            if ( currentValue !== \"ethernet-container-2-0:SEVERITY_TYPE_MINOR\" ) {",
															"                var dummyValue = \"ethernet-container-2-0:SEVERITY_TYPE_MINOR\";",
															"            } else {",
															"                var dummyValue = \"ethernet-container-2-0:SEVERITY_TYPE_MAJOR\";",
															"            }",
															"            CouldDummyValueBeDefined(true);",
															"        } catch (error) {",
															"            CouldDummyValueBeDefined(false);",
															"        }",
															"            ",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"            ",
															"        // Self Testing Function",
															"        function CouldCurrentConfigurationValuesBeRead(currentValue) {",
															"            pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
															"                pm.expect(currentValue).to.be.a(\"string\");",
															"                pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"            ",
															"        function CouldDummyValueBeDefined(success) {",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"ethernet-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// performance-monitoring-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------Checking Configuration of performance-monitoring-is-on-----------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"            ",
															"        try {",
															"            var dummyValue = !configuration[\"performance-monitoring-is-on\"];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"performance-monitoring-is-avail\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"/*//    another attribute's YANG name",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------Checking Configuration of performance-monitoring-is-on-----------------\");",
															"            ",
															"        try {",
															"            ",
															"            ",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"?\");",
															"            });",
															"        }    ",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try {",
															"        ",
															"        ",
															"            CouldResultBeEvaluated(true);",
															"        } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"        }",
															"            ",
															"        // Self Testing Function",
															"        function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, EvaluatingResultAsaString);",
															"}   //attributes.push(newAttribute);",
															"*/",
															"",
															"pm.collectionVariables.set( \"attributes\", attributes);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function ConvertingThisFunctionToString(functionToBeConverted) {",
															"    let functionAsAString = String(functionToBeConverted);",
															"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
															"    return functionAsAString.slice(indexOfFirstCurly);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointEthernetContainerConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f53ebae5-c0e7-4c18-9413-faa520c3d105",
														"exec": [
															"console.log(\"\\n--------------EntryPoint of EthernetContainer Validation of Configuration-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the EthernetContainerConfiguration TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].ethernetContainerList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointEthernetContainerConfiguration\");",
															"        console.log(\"Proceeding with terminating EthernetContainer validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST = 0;",
															"",
															"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "febe087a-ef1f-4456-9f2e-78340a5dc79c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cde01790-6091-4dd8-a60b-129cf497e5de",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "CollectionInformationLoading",
									"item": [
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5d742d4b-65e4-4643-84d7-caf17b4652c8",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b07b4f3e-f9c3-460c-969d-16497dacd2ac",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f884888d-b263-4440-8869-b0bdba32e030",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "be08bb20-33da-4050-9768-b80e6357e58e",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceStatus",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0456c211-a0ef-428f-8341-994da8505912",
														"exec": [
															"console.log(\"\\n------------------------------Uploading Interface Status----------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Status",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "71a8fbf1-9dc4-470e-b28d-a96f8593f58a",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4f8c53c2-e3c2-4a77-8186-31d5eba5a76b",
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "AttributeConfiguration",
									"item": [
										{
											"name": "EntryPointAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "93b1b17b-b316-47c7-a6fa-e04e98de9f5f",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the AttributeConfiguration Tests ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var attributes = pm.collectionVariables.get(\"attributes\");",
															"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
															"    ",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    ",
															"    CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"        ",
															"    if ( indexOfAttributeUnderTest < attributes.length ) {",
															"        postman.setNextRequest();",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointAttributeConfiguration\");",
															"    }",
															"        ",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri) {",
															"    pm.test(\"CouldTheAttributesBeLoaded\", function () {",
															"        pm.expect(attributes).to.be.an(\"array\");",
															"    });",
															"    pm.test(\"CouldIndexOfAttributeUnderTestBeLoaded\", function () {",
															"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"CouldTheDummyUriBeLoaded\", function () {",
															"        pm.expect(dummyUri).to.be.a(\"string\");",
															"        pm.expect(dummyUri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Writing",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4406e940-9654-4490-9750-4585b13828d2",
														"exec": [
															"/****************************************************************************************",
															"* Retrieving DummyCode",
															"****************************************************************************************/",
															"try {",
															"    var dummyCode = JSON.parse(pm.response.code);",
															"    var dummyErrorMessage = \"\";",
															"    if ( Math.floor(dummyCode/100) !== 2 ) {",
															"        var dummyErrorMessage = JSON.parse(pm.response.stream).errors.error[0][\"error-message\"];",
															"    }",
															"    CouldResponseBeRetrieved(dummyCode, dummyErrorMessage);",
															"} catch (error) {",
															"    CouldResponseBeRetrieved();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting Local Variables",
															"****************************************************************************************/   ",
															"pm.variables.set(\"dummyCode\", dummyCode);",
															"pm.variables.set(\"dummyErrorMessage\", dummyErrorMessage);",
															"",
															"    ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldResponseBeRetrieved(responseCode, responseErrorMessage) {",
															"    pm.test(\"CouldTheDummyCodeOfPuttingBeReceived\", function () {",
															"        pm.expect(responseCode).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"CouldTheErrorMessagePuttingBeComposed\", function () {",
															"        pm.expect(responseErrorMessage).to.be.a(\"string\");",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "ae5813f0-8595-4422-964f-bc65cbe3dd90",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Writing",
															"* ",
															"* This Request is for PUTting an boolean attribute with the alternate value and",
															"* providing this value as dummyValueString to the local Variables.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfWritingAsaString = pm.environment.get(\"PreRequestOfWritingAsaString\");",
															"    eval(PreRequestOfWritingAsaString);",
															"    CouldPreRequestOfWritingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfWritingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfWritingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfWritingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Reading",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b9829bc0-f81d-4d90-abc7-ad9b0d683f6d",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Reading",
															"* ",
															"* This Request is for GETting the value of the attributeUnderTest and providing it ",
															"* as ResultValue to the local Variables",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfReadingAsaString = pm.environment.get(\"PreRequestOfReadingAsaString\");",
															"    eval(PreRequestOfReadingAsaString);",
															"    CouldPreRequestOfReadingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfReadingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfReadingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfReadingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4e057d73-8bbf-4a97-baad-fe6bb5e2023d",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PostRequestOfReadingAsaString = pm.environment.get(\"PostRequestOfReadingAsaString\");",
															"    eval(PostRequestOfReadingAsaString);",
															"    CouldPostRequestOfReadingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPostRequestOfReadingBeExecuted();",
															"}",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPostRequestOfReadingBeExecuted(success) {",
															"    pm.test(\"CouldPostRequestOfReadingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Evaluating",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4425de21-7162-4c19-906c-86ed5b18f55e",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Evaluating",
															"* ",
															"* This Request compares resultValue with dummyValue.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfEvaluatingAsaString = pm.environment.get(\"PreRequestOfEvaluatingAsaString\");",
															"    eval(PreRequestOfEvaluatingAsaString);",
															"    CouldPreRequestOfEvaluatingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfEvaluatingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfEvaluatingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfEvaluatingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Restoring",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2c0c1545-9793-4941-99d4-e550c336f791",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Restoring",
															"* ",
															"* This Request is for Restoring the initial value to the attributeUnderTest",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfRestoringAsaString = pm.environment.get(\"PreRequestOfRestoringAsaString\");",
															"    eval(PreRequestOfRestoringAsaString);",
															"    CouldPreRequestOfRestoringBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfRestoringBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfRestoringBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfRestoringBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4e16306b-ee71-415b-8d78-7b307e3fd33f",
														"exec": [
															"/****************************************************************************************",
															"* Setting Local Variables",
															"****************************************************************************************/   ",
															"pm.variables.clear();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ReversalPointAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3c253e72-89c8-4cc3-a8ed-0d8c88362b13",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"        ",
															"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
															"        ",
															"    CouldTheInputBeLoaded(dummyUri, indexOfAttributeUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextAttributeUnderTest = indexOfAttributeUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", indexOfPotentialNextAttributeUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointAttributeConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfAttributeUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "32fdee2b-ecab-409b-bc5d-2c20cfc4449d",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6c5d8c93-42d0-4163-b69c-ed1d78070331",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is terminating the Test",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6b356611-8345-47a7-8bbc-c3aa0a2e25dd",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3d087cde-89e5-4a1a-9ae4-b8362301ecdb",
														"exec": [
															"console.log(\"\\n-------------------Restoring the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"        ",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration",
															"                                                   );",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    completeClassName = moduleUnderTest + \":\" + technologyUnderTest + \"-configuration\";",
															"    configuration = AddHeadlineToDataObject(configuration, completeClassName);",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c6bc6aa5-e5ad-45db-a1ea-773c9cf28afd",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "50b750ce-fba7-4cb0-b362-3379be21d480",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5f0fe0fd-5231-426b-aafc-4d01d45fb22a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointEthernetContainerConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "3fd6be2f-1c2d-4042-b305-a6410799896f",
														"exec": [
															"console.log(\"\\n-------------ReversalPoint of EthernetContainer Validation of Configuration---------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Console.log of Validation Results",
															" ****************************************************************************************/",
															"let allConfigurationValidationResults = { \"allConfigurationValidationResults\" : configurationValidationResults };",
															"console.log(allConfigurationValidationResults);",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointEthernetContainerConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b6d01cdd-4566-4dce-a4e5-4837c16f5d82",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointEthernetContainerConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "bebafc61-d1ea-4a2a-b07e-f07ffd49fc83",
														"exec": [
															"console.log(\"\\n----------------------Terminating EthernetContainerConfiguration--------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is for clearing the Collection variables and terminating the TestCase",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4dfba4af-5300-401d-ba05-df9ddeabc46f",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "1db14cea-32de-43b1-b568-033e492e4c0d",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ec4c67d5-2e7b-482e-a6ff-01fc8eddf12c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6e55b761-4467-4904-9941-34f129a873e2",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "574ca6f9-e126-4dab-9d04-45a1bb793811",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "PureEthernetStructure",
					"item": [
						{
							"name": "PureEthernetStructureCompleteness",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "53f2e3bc-b6c5-4de0-8c1b-21f2bb33eb61",
														"exec": [
															"console.log(\"\\n\\n============================ PureEthernetStructureCompleteness.3 =============================\");",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Completeness of PureEthernetStructure Objects against definition ",
															"* ",
															"*                   PureEthernetStructure_2.0.0-tsp.191123.1000",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/pureEthernetStructure/tree/tsp",
															"* ",
															"****************************************************************************************/",
															" ",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"all\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"pure-ethernet-structure-2-0:pure-ethernet-structure-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function() {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function() {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "3ddd133d-c94c-467c-832c-f9d8358bb445",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointPureEthernetStructureCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "524b6acd-2114-49e3-ac36-bd41c07289ff",
														"exec": [
															"console.log(\"\\n--------------EntryPoint of PureEthernetStructure Validation for Completeness-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the PureEthernetStructureCompleteness TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].ethernetContainerList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointPureEthernetStructureCompleteness\");",
															"        console.log(\"Proceeding with terminating PureEthernetStructure validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c63ed19a-8b83-492b-9ff6-0b796b4cd331",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b1ca0498-b397-44ed-8d53-13de235ac865",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "db35ce29-05a0-412e-85ae-f45ffc35ad68",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "baaf5558-e3f9-4e87-b398-96323b56fd8d",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6de547b5-0c11-499e-9f13-cee1d4f7d086",
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "6046a626-e332-4ae4-89ad-fb279435c621",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d399bd52-2bac-430a-9aea-8f80a64eb582",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "NetworkPreparation",
									"item": [
										{
											"name": "SwitchingOnMonitoring",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b806abd4-84b0-4d8b-8b0c-7489c0c93a1d",
														"exec": [
															"console.log(\"\\n---------------------------------Switching Monitoring On----------------------------------\");",
															"/****************************************************************************************",
															" * ",
															" * Switching Monitoring On",
															" * ",
															" * This Request is for activating collection of performance data on the device under",
															" * test, so the data can be retrieved during validating completeness of the implementation",
															" *  ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration);",
															"} catch (error) {",
															"    CouldInputForSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Forming the Body",
															" ****************************************************************************************/",
															"try {",
															"    let requestBodyString = ('{ \"' + moduleUnderTest + ':performance-monitoring-is-on\": true }');",
															"    var requestBody = JSON.parse(requestBodyString);",
															"    CouldRequestBodyBeFormed(requestBody);",
															"} catch (error) {",
															"    CouldRequestBodyBeFormed();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Calling for Preparation of the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(requestBody);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST,",
															"    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE,",
															"    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForSwitchingMonitoringOnBeLoaded(SettingTheRequestVariables, capability, configuration) {",
															"    pm.test(\"CouldInputForSwitchingMonitoringOnBeLoaded\", function() {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(configuration).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyBeFormed(requestBody) {",
															"    pm.test(\"CouldRequestBodyBeFormed\", function() {",
															"        pm.expect(requestBody).to.be.an(\"object\");",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, ",
															"                                                keysOfDatatypeInstanceUnderTest,",
															"                                                attributeUnterTest, ",
															"                                                contentType,",
															"                                                filteredDepth, ",
															"                                                filteredFields, ",
															"                                                requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"            \"current-problems\", \"current-performance\",",
															"            \"historical-performances\"",
															"        ]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function() {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "8af06aa8-26a9-4473-9926-48ed75378d20",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched on.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched on.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "45f004ea-7ce4-4404-8b02-510109c806ae",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ad04a505-4779-45fa-82a9-774f8e10bddd",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "ValidationRequests",
									"item": [
										{
											"name": "PacCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "c8f82052-64eb-4d1c-8281-288c2411d81e",
														"exec": [
															"console.log(\"\\n---------------------Checking EthernetContainer_Pac for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* PacCompleteness",
															"* ",
															"* This Request is for validating EthernetContainer Pac Objects against definition ",
															"* EthernetContainer_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the *_Pac class",
															"*  - availability of all attributes in this particular class",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"pac\";             // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 3;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_PAC_SCHEMA = {\t",
															"    \"type\": \"object\",",
															"\t\"properties\": {",
															"        \"ethernet-container-capability\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"available-queue-list\":                                     { \"type\": \"array\"   },",
															"                \"explicit-congestion-notification-is-avail\": \t\t\t\t{ \"type\": \"boolean\" },",
															"                \"ingress-policing-is-avail\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"supported-header-compression-kind-list\":                   { \"type\": \"array\"   },",
															"                \"egress-shaping-is-avail\": \t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"information-rate-min\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"information-rate-max\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"burst-size-min\": \t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"burst-size-max\": \t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"bundling-is-avail\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"bundling-group-size-max\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"support-of-management-frames-without-preamble-is-avail\": \t{ \"type\": \"boolean\" },",
															"                \"fec-is-avail\": \t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"fec-word-size-max\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"number\"  },",
															"                \"supported-fec-redundancy-size-list\":                       { \"type\": \"array\"   },",
															"                \"supported-fec-interleaver-kind-list\":                      { \"type\": \"array\"   },",
															"                \"supported-fec-interleaver-depth-list\":                     { \"type\": \"array\"   },",
															"                \"encryption-is-avail\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"admin-shut-down-is-avail\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"supported-loop-back-kind-list\":                            { \"type\": \"array\"   },",
															"                \"maintenance-timer-range\": \t\t\t\t\t\t\t\t\t{ \"type\": \"string\"  },",
															"                \"statistics-is-avail\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"                \"supported-alarm-list\":                                     { \"type\": \"array\"   },",
															"                \"performance-monitoring-is-avail\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"            },",
															"        },",
															"        \"ethernet-container-configuration\":{",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"interface-name\": \t\t\t\t\t\t\t                { \"type\": \"string\"  },",
															"                \"interface-is-on\": \t\t\t\t\t\t\t                { \"type\": \"boolean\" },",
															"                \"queue-behavior-list\":                                      { \"type\": \"array\"   },",
															"                \"explicit-congestion-notification-is-on\": \t                { \"type\": \"boolean\" },",
															"                \"ingress-policing-profile\":                                 { \"type\": \"string\"  },",
															"                \"egress-shaping-is-on\":                  \t\t\t\t\t{ \"type\": \"boolean\" },\t",
															"                \"maximum-information-rate\": \t\t\t\t                { \"type\": \"number\"  },",
															"                \"maximum-burst-size\": \t\t\t\t\t\t                { \"type\": \"number\"  },\t",
															"                \"bundling-is-on\": \t\t\t\t\t\t\t                { \"type\": \"boolean\" },",
															"                \"header-compression-kind\":                                  { \"type\": \"string\"  },",
															"                \"fec-is-on\": \t\t\t\t\t\t\t\t                { \"type\": \"boolean\" },",
															"                \"fec-word-size\": \t\t\t\t\t\t\t                { \"type\": \"number\"  },\t\t",
															"                \"fec-redundancy-size\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_2\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_4\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_8\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_16\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_20\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t\t ]",
															"                },",
															"                \"fec-interleaver-kind\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_BLOCK\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_CONVOLUTION\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t\t  ]",
															"                },",
															"                \"fec-interleaver-depth\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_1\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_2\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_3\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_4\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_6\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_8\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_12\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_16\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_24\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_32\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_48\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_96\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t\t   ]",
															"                },",
															"                \"encryption-is-on\": \t\t\t\t\t\t                { \"type\": \"boolean\" },\t",
															"                \"cryptographic-key\": \t\t\t\t\t\t                { \"type\": \"string\"  },\t\t",
															"                \"loop-back-kind-on\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t   ]",
															"                },",
															"                \"maintenance-timer\": \t\t\t\t\t\t                { \"type\": \"number\"  },",
															"                \"statistics-is-on\": \t\t\t\t\t\t                { \"type\": \"boolean\" },",
															"                \"problem-kind-severity-list\":                               { \"type\": \"array\"   },",
															"                \"performance-monitoring-is-on\": \t\t\t                { \"type\": \"boolean\" },",
															"            },",
															"        },",
															"        \"ethernet-container-status\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"interface-status\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_UP\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_DOWN\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_TESTING\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_DORMANT\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t  ]",
															"                },",
															"                \"bundling-is-up\":                                           { \"type\": \"boolean\" },",
															"                \"remote-site-is-faulty\":                                    { \"type\": \"boolean\" },                ",
															"                \"loop-back-kind-up\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t\t]",
															"                },",
															"                \"statistics-is-up\":                                         { \"type\": \"boolean\" },",
															"                \"performance-monitoring-is-up\":                             { \"type\": \"boolean\" },",
															"                \"timestamp\":                                                { \"type\": \"string\"  },",
															"                \"last-10-sec-data-input-rate\":                              { \"type\": \"integer\" },",
															"                \"last-10-sec-data-output-rate\":                             { \"type\": \"integer\" },",
															"                \"total-bytes-input\":                                        { \"type\": \"string\" },",
															"                \"total-bytes-output\":                                       { \"type\": \"string\" },",
															"                \"forwarded-bytes-input\":                                    { \"type\": \"string\" },",
															"                \"forwarded-bytes-output\":                                   { \"type\": \"string\" },",
															"            },",
															"        },",
															"        \"ethernet-container-current-problems\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"current-problem-list\":                                     { \"type\": \"array\"   },",
															"                \"number-of-current-problems\":  \t\t\t                    { \"type\": \"number\"  },",
															"                \"time-of-latest-change\":                                    { \"type\": \"string\"  },",
															"            },",
															"        },",
															"        \"ethernet-container-current-performance\": {",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"current-performance-data-list\":                            { \"type\": \"array\"   },",
															"                \"number-of-current-performance-sets\":                       { \"type\": \"number\"  },",
															"            },",
															"\t    },",
															"        \"ethernet-container-historical-performances\":{",
															"            \"type\": \"object\",",
															"            \"properties\": {",
															"                \"historical-performance-data-list\":                         { \"type\": \"array\"   },",
															"                \"number-of-historical-performance-sets\":                    { \"type\": \"number\"  },",
															"                \"time-of-latest-change\": \t\t\t                        { \"type\": \"string\"  },",
															"            },",
															"        },",
															"\t},",
															"\t\"required\": [\"ethernet-container-capability\",",
															"                    \"ethernet-container-configuration\",",
															"                    \"ethernet-container-status\",",
															"                    \"ethernet-container-current-problems\",",
															"                    \"ethernet-container-current-performance\",",
															"                    \"ethernet-container-historical-performances\",",
															"    ]",
															"};",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_PAC_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1494e41d-068c-45a8-812e-a39e2a34644e",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CapabilityCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d9945995-5e73-4a36-bae8-08f7b3ca3e8b",
														"exec": [
															"console.log(\"\\n--------------------Checking EthernetContainerCapability for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* CapabilityCompleteness",
															"* ",
															"* This Request is for validating EthernetContainer Capability Objects against definition ",
															"* EthernetContainer_2.0.0-tsp.191123.1240",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Capability class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_CAPABILITY_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"available-queue-list\": {",
															"\t\t\t\"type\": \"array\",",
															"            \"items\": {",
															"            \t\"type\": \"object\",",
															"            \t\"properties\": {",
															"\t\t\t\t\t\"queue-name\": { \"enum\": [",
															"                                        \"ethernet-container-2-0:QUEUE_NAME_TYPE_BEST_EFFORT_QUEUE\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE1\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE2\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE3\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE4\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_EXPEDITED_FORWARDING_QUEUE\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_CLASS_SELECTOR_QUEUE6\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_CLASS_SELECTOR_QUEUE7\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_QUEUENAME_NOT_YET_DEFINED\"",
															"        \t\t\t\t\t\t\t]",
															"        \t\t\t}, \t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"max-queue-depth\": \t\t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\"queue-depth-configuration-is-avail\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\t\"available-dropping-behavior-kind-list\":{  ",
															"    \t\t\t\t\t\"type\": \"array\",",
															"    \t\t\t\t\t\"items\": { \"enum\": [\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_DROP_TAIL\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_RED\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_WRED\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_NOT_YET_DEFINED\"\t\t\t",
															"\t\t\t\t\t\t\t       ]",
															"        \t\t\t    }",
															"        \t\t\t},\t\t\t\t\t",
															"\t\t\t\t\t\"available-drop-precedence-kind-list\": {  ",
															"    \t\t\t\t\t\"type\": \"array\",",
															"    \t\t\t\t\t\"items\": { \"enum\": [\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_ALL\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_LOW\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_MEDIUM\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_HIGH\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_NOT_YET_DEFINED\"\t",
															"\t\t\t\t\t\t\t\t\t]",
															"        \t\t\t    }\t\t\t\t\t\t\t\t\t",
															"            \t\t},",
															"\t\t\t\t\t\"wred-profile-per-drop-precedence-is-available\":{ \"type\": \"boolean\" },",
															"\t\t\t\t\t\"available-scheduling-kind-list\": {  ",
															"    \t\t\t\t\t\"type\": \"array\",",
															"    \t\t\t\t\t\"items\": { \"enum\": [\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_STRICT\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_WFQ\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_WRR\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_DWRR\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_NOT_YET_DEFINED\"",
															"                                   ]",
															"                        }",
															"\t\t\t\t\t}",
															"\t\t\t\t},\t\t\t\t\t",
															"\t\t\t\t\"required\": [\"queue-name\",",
															"\t\t\t\t\t\t\t\t\"max-queue-depth\",",
															"\t\t\t\t\t\t\t\t\"queue-depth-configuration-is-avail\",",
															"\t\t\t\t\t\t\t\t\"available-dropping-behavior-kind-list\",",
															"\t\t\t\t\t\t\t\t\"available-drop-precedence-kind-list\",",
															"\t\t\t\t\t\t\t\t\"wred-profile-per-drop-precedence-is-available\",",
															"\t\t\t\t\t\t\t\t\"available-scheduling-kind-list\"",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"explicit-congestion-notification-is-avail\": \t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"ingress-policing-is-avail\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"supported-header-compression-kind-list\": {    ",
															"\t\t\t\"type\": \"array\",",
															"            \"items\": {\t\t",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"header-compression-name\": { \"type\": \"string\" },",
															"\t\t\t\t\t\"header-compression-mode\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:HEADER_COMPRESSION_MODE_TYPE_AUTO\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:HEADER_COMPRESSION_MODE_TYPE_PROTOCOL_BASED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:HEADER_COMPRESSION_MODE_TYPE_LENGTH_BASED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:HEADER_COMPRESSION_MODE_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t\t ]",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"compressed-protocol-layer-list\": {",
															"\t\t\t\t\t\t\"type\": \"array\",",
															"\t\t\t\t\t\t\"items\": { \"enum\": [\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_ETHERNET_MAC\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_VLAN\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_Q_IN_Q\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_MPLS\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_IPV4\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_IPV6\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_TCP\",\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_UDP\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_RTP\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_GTP_U\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_OTHERS\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t},\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"mpls-payload-kind-list\": { \t\t\t\t\t\t",
															"\t\t\t\t\t    \"type\": \"array\",",
															"\t\t\t\t\t\t\"items\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:MPLS_PAYLOAD_KIND_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:MPLS_PAYLOAD_KIND_TYPE_AUTO\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:MPLS_PAYLOAD_KIND_TYPE_ETH_O_MPLS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:MPLS_PAYLOAD_KIND_TYPE_IP_O_MPLS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:MPLS_PAYLOAD_KIND_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t   ]",
															"\t\t\t\t\t\t}",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"compressed-header-length\": { \"type\": \"integer\" }",
															"\t\t\t\t},",
															"\t\t\t\t\"required\": [\"header-compression-name\",",
															"\t\t\t\t\t\t\t\t\"header-compression-mode\",",
															"\t\t\t\t\t\t\t\t\"compressed-protocol-layer-list\",",
															"\t\t\t\t\t\t\t\t\"mpls-payload-kind-list\",",
															"\t\t\t\t\t\t\t\t\"compressed-header-length\"",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"egress-shaping-is-avail\": \t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"information-rate-min\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"information-rate-max\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"\t\t\"burst-size-min\": \t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"burst-size-max\": \t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"bundling-is-avail\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"bundling-group-size-max\": \t\t\t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"support-of-management-frames-without-preamble-is-avail\": \t{ \"type\": \"boolean\" },",
															"\t\t\"fec-is-avail\": \t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"fec-word-size-max\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"\t\t\"supported-fec-redundancy-size-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": \t\t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"string\" }",
															"\t\t},",
															"\t\t\"supported-fec-interleaver-kind-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": \t\t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"string\"\t}",
															"\t\t},",
															"\t\t\"supported-fec-interleaver-depth-list\": {\t",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": \t\t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"string\" }",
															"\t\t},",
															"\t\t\"encryption-is-avail\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"admin-shut-down-is-avail\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"supported-loop-back-kind-list\": {  ",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": { \"enum\": [\t\t\t\t\t",
															"\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\",",
															"\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",",
															"\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",",
															"\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t   ]",
															"\t\t\t}\t",
															"\t\t},",
															"\t\t\"maintenance-timer-range\": \t\t\t\t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\"statistics-is-avail\": \t\t\t\t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"\t\t\"supported-alarm-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": \t\t\t\t\t\t\t\t\t\t\t\t{ \"type\": \"string\" }",
															"\t\t},",
															"\t\t\"performance-monitoring-is-avail\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" } \t\t",
															"\t},",
															"\t\"required\": [\"available-queue-list\",",
															"\t\t\t\t\t\"explicit-congestion-notification-is-avail\",",
															"\t\t\t\t\t\"ingress-policing-is-avail\",",
															"\t\t\t\t\t\"supported-header-compression-kind-list\",",
															"\t\t\t\t\t\"egress-shaping-is-avail\", \t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"information-rate-min\",\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"information-rate-max\",\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"burst-size-min\", \t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"burst-size-max\", \t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"bundling-is-avail\", \t\t\t\t\t\t\t\t\t\t ",
															"\t\t\t\t\t\"bundling-group-size-max\", \t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"support-of-management-frames-without-preamble-is-avail\", \t",
															"\t\t\t\t\t\"fec-is-avail\", \t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"fec-word-size-max\",\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\"supported-fec-redundancy-size-list\",",
															"\t\t\t\t\t\"supported-fec-interleaver-kind-list\",",
															"\t\t\t\t\t\"supported-fec-interleaver-depth-list\",",
															"\t\t\t\t\t\"encryption-is-avail\",",
															"\t\t\t\t\t\"admin-shut-down-is-avail\",",
															"\t\t\t\t\t\"supported-loop-back-kind-list\",",
															"\t\t\t\t\t\"maintenance-timer-range\",",
															"\t\t\t\t\t\"statistics-is-avail\",",
															"\t\t\t\t\t\"supported-alarm-list\",",
															"\t\t\t\t\t\"performance-monitoring-is-avail\"",
															"\t]",
															"};",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_CAPABILITY_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ca2d9c82-2601-475f-9696-ce9b65bed999",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ConfigurationCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e98c8d15-c4c2-43be-bfb0-750fbbd276d6",
														"exec": [
															"console.log(\"\\n----------------Checking EthernetContainerConfiguration for Completeness------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ConfigurationCompleteness",
															"* ",
															"* This Request is for validating EthernetContainer Configuration Objects against definition ",
															"* EthernetContainer_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Configuration class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                                FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_CONFIGURATION_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"        \"interface-name\": \t\t\t\t\t\t\t{ \"type\": \"string\" }, ",
															"        \"interface-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"\t\t\"queue-behavior-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"                    \"queue-name\": { \"enum\": [",
															"                                        \"ethernet-container-2-0:QUEUE_NAME_TYPE_BEST_EFFORT_QUEUE\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE1\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE2\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE3\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_ASSURED_FORWARDING_QUEUE4\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_EXPEDITED_FORWARDING_QUEUE\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_CLASS_SELECTOR_QUEUE6\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_CLASS_SELECTOR_QUEUE7\",",
															"        \t\t\t\t\t\t\t\t\"ethernet-container-2-0:QUEUE_NAME_TYPE_QUEUENAME_NOT_YET_DEFINED\"",
															"        \t\t\t\t\t\t\t]",
															"        \t\t\t},",
															"        \t\t\t\"queue-depth\": \t\t\t\t\t\t\t{ \"type\": \"number\" },",
															"                    \"dropping-behavior-kind\": { \"enum\": [",
															"        \t\t\t\t\t\t\t\t\t\t    \"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_DROP_TAIL\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_RED\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_WRED\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_NOT_YET_DEFINED\"\t\t\t",
															"        \t\t\t\t\t\t\t\t\t\t]",
															"        \t\t\t},",
															"        \t\t\t\"wred-behavior-list\": {",
															"            \t\t\t\"type\": \"array\",",
															"            \t\t\t\"items\": {",
															"            \t\t\t    \"type\": \"object\",",
															"            \t\t\t    \"properties\": {",
															"            \t\t\t\t    \"affected-drop-precedence\": { \"enum\": [",
															"                        \t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_ALL\",",
															"                        \t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_LOW\",",
															"                        \t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_MEDIUM\",",
															"                        \t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_HIGH\",",
															"                        \t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:DROP_PRECEDENCE_TYPE_NOT_YET_DEFINED\"\t",
															"                \t\t\t\t\t\t\t\t\t\t\t  ]",
															"            \t\t\t\t    },",
															"            \t\t\t\t    \"affected-protocol\": { \"enum\": [",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_NONE\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_ETHERNET_MAC\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_VLAN\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_Q_IN_Q\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_MPLS\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_IPV4\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_IPV6\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_TCP\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_UDP\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_RTP\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_GTP_U\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_OTHERS\",",
															"        \t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:PROTOCOL_LAYER_TYPE_NOT_YET_DEFINED\"",
															"            \t\t\t\t\t\t\t\t\t       ]",
															"            \t\t\t\t    },",
															"            \t\t\t\t    \"wred-profile\":   \t\t\t\t    { \"type\": \"string\" }",
															"            \t\t\t\t},",
															"            \t\t\t    \"required\": [\"affected-drop-precedence\",",
															"            \t\t\t\t    \t\t    \"affected-protocol\",",
															"            \t\t\t\t    \t\t    \"wred-profile\"",
															"            \t\t\t    ]",
															"            \t\t\t}",
															"    \t\t\t    },",
															"    \t\t\t    \"scheduler-kind\": { \"enum\": [",
															"                                            \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_STRICT\",",
															"                                            \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_WFQ\",",
															"                                            \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_WRR\",",
															"                                            \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_DWRR\",",
															"                                            \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_NOT_YET_DEFINED\"",
															"                                        ]",
															"                    },",
															"                    \"weighting\": \t\t\t\t\t\t\t{ \"type\": \"number\" }",
															"    \t\t    },",
															"    \t\t    \"required\": [\"queue-name\",",
															"                                \"queue-depth\",",
															"                                \"dropping-behavior-kind\",",
															"                                \"wred-behavior-list\",",
															"                                \"scheduler-kind\",",
															"                                \"weighting\"",
															"                ]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"explicit-congestion-notification-is-on\": \t{ \"type\": \"boolean\" }, ",
															"        \"ingress-policing-profile\":                 { \"type\": \"string\" },",
															"        \"egress-shaping-is-on\": \t\t\t\t\t{ \"type\": \"boolean\" },\t\t\t",
															"        \"maximum-information-rate\": \t\t\t\t{ \"type\": \"number\" },  ",
															"\t\t\"maximum-burst-size\": \t\t\t\t\t\t{ \"type\": \"number\" }, \t\t\t",
															"        \"bundling-is-on\": \t\t\t\t\t\t\t{ \"type\": \"boolean\" },",
															"        \"header-compression-kind\":                  { \"type\": \"string\" },",
															"        \"fec-is-on\": \t\t\t\t\t\t\t\t{ \"type\": \"boolean\" }, ",
															"        \"fec-word-size\": \t\t\t\t\t\t\t{ \"type\": \"number\" },\t\t\t\t",
															"        \"fec-redundancy-size\": { \"enum\": [ ",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_2\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_4\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_8\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_16\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_20\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_NOT_YET_DEFINED\"\t",
															"\t\t\t\t\t\t\t\t ]",
															"\t\t},",
															"        \"fec-interleaver-kind\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_BLOCK\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_CONVOLUTION\",",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t  ]",
															"\t\t}, ",
															"        \"fec-interleaver-depth\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_1\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_2\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_3\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_4\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_6\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_8\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_12\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_16\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_24\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_32\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_48\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_96\",",
															"\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_NOT_YET_DEFINED\",",
															"\t\t\t\t\t\t\t\t   ]",
															"\t\t},\t\t\t\t\t\t\t\t\t\t\t",
															"        \"encryption-is-on\": \t\t\t\t\t\t{ \"type\": \"boolean\" }, \t\t\t",
															"        \"cryptographic-key\": \t\t\t\t\t\t{ \"type\": \"string\" }, \t\t\t",
															"        \"loop-back-kind-on\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t   ]",
															"\t\t},\t\t\t\t\t\t\t\t\t\t\t\t\t\t",
															"        \"maintenance-timer\": \t\t\t\t\t\t{ \"type\": \"number\" }, ",
															"        \"statistics-is-on\": \t\t\t\t\t\t{ \"type\": \"boolean\" }, \t\t\t",
															" \t\t\"problem-kind-severity-list\": { ",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"        \t\t\t\"problem-kind-name\": \t\t\t\t\t{ \"type\": \"string\" },",
															"        \t\t\t\"problem-kind-severity\": { \"enum\": [",
															"                                                \"ethernet-container-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"                                                \"ethernet-container-2-0:SEVERITY_TYPE_WARNING\",",
															"                                                \"ethernet-container-2-0:SEVERITY_TYPE_MINOR\",",
															"                                                \"ethernet-container-2-0:SEVERITY_TYPE_MAJOR\",",
															"                                                \"ethernet-container-2-0:SEVERITY_TYPE_CRITICAL\",",
															"                                                \"ethernet-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"",
															"                                               ]",
															"                    }",
															"\t\t\t    },",
															"\t\t\t    \"required\": [\"problem-kind-name\",",
															"\t\t\t\t\t\t\t    \"problem-kind-severity\"",
															"\t\t\t\t]",
															"\t\t    }",
															"\t\t}, \t\t\t            \t\t\t",
															"        \"performance-monitoring-is-on\": \t\t\t{ \"type\": \"boolean\" }",
															"    },",
															"\t\"required\": [\"interface-name\",",
															"\t\t\t\t\t\"interface-is-on\",",
															"\t\t\t\t\t\"queue-behavior-list\",",
															"\t\t\t\t\t\"explicit-congestion-notification-is-on\",",
															"\t\t\t\t\t\"egress-shaping-is-on\",",
															"\t\t\t\t\t\"maximum-information-rate\",",
															"\t\t\t\t\t\"maximum-burst-size\",",
															"\t\t\t\t\t\"bundling-is-on\",",
															"\t\t\t\t\t\"fec-is-on\",",
															"\t\t\t\t\t\"fec-word-size\",",
															"\t\t\t\t\t\"fec-redundancy-size\",",
															"\t\t\t\t\t\"fec-interleaver-kind\",",
															"\t\t\t\t\t\"fec-interleaver-depth\",",
															"\t\t\t\t\t\"encryption-is-on\",",
															"\t\t\t\t\t\"cryptographic-key\",",
															"\t\t\t\t\t\"loop-back-kind-on\",",
															"\t\t\t\t\t\"maintenance-timer\",",
															"\t\t\t\t\t\"statistics-is-on\",",
															"\t\t\t\t\t\"problem-kind-severity-list\",",
															"\t\t\t\t\t\"performance-monitoring-is-on\"",
															"\t]",
															"};",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_CONFIGURATION_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                    attributeUnterTest, contentType,",
															"                                                    filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6891c75e-1e7f-495f-b83a-e07b55b1776a",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "StatusCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6f1edfc0-6ff5-4ff1-9a1e-8dc18ef72333",
														"exec": [
															"console.log(\"\\n-------------------Checking EthernetContainerStatus for Completeness----------------------\");",
															"/****************************************************************************************",
															"* ",
															"* StatusCompleteness",
															"* ",
															"* This Request is for validating EthernetContainer Status Objects against definition ",
															"* EthernetContainer_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the Status class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_STATUS_SCHEMA = {",
															"\t\"type\": \"object\",",
															"\t\"properties\": {",
															"\t\t\"interface-status\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_UP\", ",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_DOWN\", ",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_TESTING\", ",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_UNKNOWN\", ",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_DORMANT\", ",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_NOT_PRESENT\", ",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_LOWER_LAYER_DOWN\",",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_ADMIN_DOWN\", ",
															"\t\t\t\t\t\t\t\t\"ethernet-container-2-0:INTERFACE_STATUS_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t  ]",
															"\t\t},",
															"\t\t\"bundling-is-up\":               { \"type\": \"boolean\" },   ",
															"\t\t\"remote-site-is-faulty\":        { \"type\": \"boolean\" },                   ",
															"\t\t\"loop-back-kind-up\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\",\t\t",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_LOCAL\", ",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_BACK_TO_REMOTE\", ",
															"\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t   ]",
															"\t\t},",
															"\t\t\"statistics-is-up\":             { \"type\": \"boolean\" },",
															"\t\t\"performance-monitoring-is-up\": { \"type\": \"boolean\" },",
															"\t\t\"timestamp\":                    { \"type\": \"string\" },",
															"\t\t\"last-10-sec-data-input-rate\":  { \"type\": \"integer\" },",
															"\t\t\"last-10-sec-data-output-rate\": { \"type\": \"integer\" },",
															"\t\t\"total-bytes-input\":            { \"type\": \"string\" },",
															"\t\t\"total-bytes-output\":           { \"type\": \"string\" },",
															"\t\t\"forwarded-bytes-input\":        { \"type\": \"string\" },",
															"\t\t\"forwarded-bytes-output\":       { \"type\": \"string\" }",
															"\t},",
															"\t\"required\": [\"interface-status\", ",
															"\t\t\t\t    \"bundling-is-up\", ",
															"\t\t\t\t    \"remote-site-is-faulty\", ",
															"\t\t\t\t    \"loop-back-kind-up\", ",
															"\t\t\t\t    \"statistics-is-up\", ",
															"\t\t\t\t    \"performance-monitoring-is-up\", ",
															"\t\t\t\t    \"timestamp\", ",
															"\t\t\t\t    \"last-10-sec-data-input-rate\", ",
															"\t\t\t\t    \"last-10-sec-data-output-rate\", ",
															"\t\t\t\t    \"total-bytes-input\", ",
															"\t\t\t\t    \"total-bytes-output\", ",
															"\t\t\t\t    \"forwarded-bytes-input\", ",
															"\t\t\t\t    \"forwarded-bytes-output\"",
															"\t]",
															"};",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_STATUS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7780afca-cf31-48fb-a6e1-150c72745348",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentProblemsCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "45eca560-d490-4b62-a376-495bbb68c0f1",
														"exec": [
															"console.log(\"\\n---------------Checking EthernetContainerCurrentProblems for Completeness-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentProblemsCompleteness",
															"* ",
															"* This Request is for validating EthernetContainer CurrentProblems Objects against definition ",
															"* EthernetContainer_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentProblems class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-problems\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_CURRENT_PROBLEMS_SCHEMA = {\t",
															"\t\"type\": \"object\", ",
															"\t\"properties\": {",
															"\t\t\"current-problem-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t    \"type\": \"object\",",
															"\t\t\t    \"properties\": {",
															"\t\t\t\t\t\"problem-name\": \t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"sequence-number\": \t\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\"timestamp\": \t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"problem-severity\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SEVERITY_TYPE_NON_ALARMED\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SEVERITY_TYPE_WARNING\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SEVERITY_TYPE_MINOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SEVERITY_TYPE_MAJOR\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SEVERITY_TYPE_CRITICAL\",",
															"\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t  ]",
															"\t\t\t\t\t}",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"problem-name\", ",
															"\t\t\t\t\t\t    \t\"sequence-number\",\t\t\t\t\t\t\t\t\t\t\t  ",
															"\t\t\t\t\t\t\t    \"timestamp\",",
															"\t\t\t\t\t\t\t    \"problem-severity\"\t",
															"\t\t\t\t]\t\t\t\t\t\t",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-current-problems\": \t\t\t{ \"type\": \"number\" },",
															"\t\t\"time-of-latest-change\": \t\t\t\t{ \"type\": \"string\" },",
															"\t},",
															"\t\"required\": [ \"current-problem-list\",",
															"\t                \"number-of-current-problems\",",
															"\t                \"time-of-latest-change\"",
															"\t] ",
															"};",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_CURRENT_PROBLEMS_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "89fc1718-6f29-449d-9b51-70cf4761aa12",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "CurrentPerformanceCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "e658f236-6814-48d1-ab6f-0c87e9819905",
														"exec": [
															"console.log(\"\\n-------------Checking EthernetContainerCurrentPerformance for Completeness----------------\");",
															"/****************************************************************************************",
															"* ",
															"* CurrentPerformanceCompleteness",
															"* ",
															"* This Request is for validating EthernetContainer CurrentPerformance Objects against definition ",
															"* EthernetContainer_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the CurrentPerformance class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"current-performance\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_CURRENT_PERFORMANCE_SCHEMA = {\t",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"\t\t\"current-performance-data-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\"tx-ethernet-bytes-max-s\": \t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"tx-ethernet-bytes-max-m\":\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\"tx-ethernet-bytes-sum\":\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\"queue-utilization-list\": {",
															"\t\t\t\t\t\t\t\t\"type\": \"array\",",
															"\t\t\t\t\t\t\t\t\"items\": {",
															"\t\t\t\t\t\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\t\t\t\"queue-name\": \t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\t\t\t\"max-queue-length\":\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\t\t\t\"avg-queue-length\":\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\t\t\t\"required\": [ \"queue-name\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t    \"max-queue-length\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t    \"avg-queue-length\"",
															"\t\t\t\t\t\t\t\t\t]\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t}",
															"\t\t\t\t\t\t\t},\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\"fec-corrected-blocks\":\t\t\t{ \"type\": \"number\" },\t",
															"\t\t\t\t\t\t\t\"fec-uncorrectable-blocks\":\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"time-period\": \t\t\t\t\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t},\t\t\t\t",
															"\t\t\t\t\t\t\"required\": [ \"tx-ethernet-bytes-max-s\",",
															"\t\t\t\t\t\t\t\t\t\t\"tx-ethernet-bytes-max-m\",",
															"\t\t\t\t\t\t\t\t\t\t\"tx-ethernet-bytes-sum\",",
															"\t\t\t\t\t\t\t\t\t\t\"queue-utilization-list\",",
															"\t\t\t\t\t\t\t\t\t\t\"fec-corrected-blocks\",",
															"\t\t\t\t\t\t\t\t\t\t\"fec-uncorrectable-blocks\",",
															"\t\t\t\t\t\t\t\t\t\t\"time-period\"",
															"\t\t\t\t\t\t]\t\t\t\t\t",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"timestamp\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"suspect-interval-flag\": \t\t\t{ \"type\": \"boolean\" },\t\t\t",
															"\t\t\t\t\t\"elapsed-time\": \t\t\t\t\t{ \"type\": \"string\" },\t\t",
															"\t\t\t\t\t\"scanner-id\": \t\t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"granularity-period\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t]",
															"\t\t\t\t\t},\t ",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"performance-data\",",
															"                                \"timestamp\",",
															"                                \"suspect-interval-flag\",",
															"                                \"elapsed-time\",",
															"                                \"scanner-id\",",
															"                                \"granularity-period\",",
															"    \t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-current-performance-sets\":\t\t    { \"type\": \"number\" },\t\t\t",
															"\t},",
															"\t\"required\":\t[ \"current-performance-data-list\",",
															"\t                \"number-of-current-performance-sets\"",
															"\t]",
															"};",
															"try {",
															"    if (capability[\"performance-monitoring-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", ETHERNET_CONTAINER_CURRENT_PERFORMANCE_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"current-performance-data-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        ETHERNET_CONTAINER_CURRENT_PERFORMANCE_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldEthernetContainerCurrentPerformanceBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldEthernetContainerCurrentPerformanceBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_CURRENT_PERFORMANCE_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldEthernetContainerCurrentPerformanceBeShortened(success) {",
															"    pm.test(\"CouldEthernetContainerCurrentPerformanceBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "e2d95303-f233-4884-8540-345c2bd3181d",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "HistoricalPerformancesCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "0229ad34-4a53-44a8-be9b-75c4b3ef39f1",
														"exec": [
															"console.log(\"\\n------------Checking EthernetContainerHistoricalPerformances for Completeness-------------\");",
															"/*******************************************************************************",
															"* ",
															"* HistoricalPerformancesCompleteness",
															"* ",
															"* This Request is for validating EthernetContainer HistoricalPerformances Objects against definition ",
															"* EthernetContainer_2.0.0-tsp.191123.1240",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"*",
															"* It checks for ",
															"*  - reachability of the HistoricalPerformances class",
															"*  - availability of all attributes in the class and subordinate layers",
															"*  - correct datatypes",
															"*  - correct enumeration values",
															"*  - no additional, vendor specific amendments",
															"*",
															"*******************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var RemoveAttributeFromRequired = pm.environment.get(\"RemoveAttributeFromRequired\");",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    var capability = pm.collectionVariables.get(\"capability\");",
															"    CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"historical-performances\";// choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // define number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"let ETHERNET_CONTAINER_HISTORICAL_PERFORMANCES_SCHEMA = {\t",
															"    \"type\": \"object\",",
															"    \"properties\": {",
															"\t\t\"historical-performance-data-list\": {",
															"\t\t\t\"type\": \"array\",",
															"\t\t\t\"items\": {",
															"\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\"performance-data\": {",
															"\t\t\t\t\t\t\"type\": \"object\", ",
															"\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\"tx-ethernet-bytes-max-s\": \t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"tx-ethernet-bytes-max-m\":\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\"tx-ethernet-bytes-sum\":\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\"queue-utilization-list\": {",
															"\t\t\t\t\t\t\t\t\"type\": \"array\",",
															"\t\t\t\t\t\t\t\t\"items\": {",
															"\t\t\t\t\t\t\t\t\t\"type\": \"object\",",
															"\t\t\t\t\t\t\t\t\t\"properties\": {",
															"\t\t\t\t\t\t\t\t\t\t\"queue-name\": \t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\t\t\t\t\t\"max-queue-length\":\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\t\t\t\"avg-queue-length\":\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t\t\t\t},",
															"\t\t\t\t\t\t\t\t\t\"required\": [ \"queue-name\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t    \"max-queue-length\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t    \"avg-queue-length\"",
															"\t\t\t\t\t\t\t\t\t]\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\t}",
															"\t\t\t\t\t\t\t},\t\t\t\t\t\t\t\t\t\t\t\t",
															"\t\t\t\t\t\t\t\"fec-corrected-blocks\":\t\t\t{ \"type\": \"number\" },\t",
															"\t\t\t\t\t\t\t\"fec-uncorrectable-blocks\":\t\t{ \"type\": \"number\" },",
															"\t\t\t\t\t\t\t\"time-period\": \t\t\t\t\t{ \"type\": \"number\" }",
															"\t\t\t\t\t\t},\t\t\t\t",
															"\t\t\t\t\t\t\"required\": [ \"tx-ethernet-bytes-max-s\",",
															"\t\t\t\t\t\t\t\t\t\t\"tx-ethernet-bytes-max-m\",",
															"\t\t\t\t\t\t\t\t\t\t\"tx-ethernet-bytes-sum\",",
															"\t\t\t\t\t\t\t\t\t\t\"queue-utilization-list\",",
															"\t\t\t\t\t\t\t\t\t\t\"fec-corrected-blocks\",",
															"\t\t\t\t\t\t\t\t\t\t\"fec-uncorrectable-blocks\",",
															"\t\t\t\t\t\t\t\t\t\t\"time-period\"",
															"\t\t\t\t\t\t]\t\t\t\t\t",
															"\t\t\t\t\t},",
															"\t\t\t\t\t\"suspect-interval-flag\": \t\t\t{ \"type\": \"boolean\" },",
															"\t\t\t\t\t\"history-data-id\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"period-end-time\": \t\t\t\t\t{ \"type\": \"string\" },",
															"\t\t\t\t\t\"granularity-period\": { \"enum\": [",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_UNKNOWN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-15-MIN\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_PERIOD-24-HOURS\",",
															"\t\t\t\t\t\t\t\t\t\t\t\t\"ethernet-container-2-0:GRANULARITY_PERIOD_TYPE_NOT_YET_DEFINED\"",
															"\t\t\t\t\t\t\t\t\t\t\t]\t\t\t\t",
															"\t\t\t\t\t},\t \t ",
															"\t\t\t\t},",
															"\t\t\t\t\"required\":\t[ \"performance-data\",",
															"    \t\t\t\t\t\t\t\"suspect-interval-flag\",",
															"    \t\t\t\t\t\t\t\"history-data-id\",",
															"    \t\t\t\t\t\t\t\"period-end-time\",",
															"    \t\t\t\t\t\t\t\"granularity-period\",",
															"\t\t\t\t]",
															"\t\t\t}",
															"\t\t},",
															"\t\t\"number-of-historical-performance-sets\":\t\t{ \"type\": \"number\" },",
															"\t\t\"time-of-latest-change\": \t\t\t\t        { \"type\": \"string\" },\t\t",
															"\t},",
															"\t\"required\":\t[ \"historical-performance-data-list\",",
															"\t                \"number-of-historical-performance-sets\",",
															"\t                \"time-of-latest-change\"",
															"\t]",
															"};",
															"try {",
															"    if (capability[\"performance-monitoring-is-avail\"]===false) {",
															"        pm.variables.set(\"schemaToBeShortened\", ETHERNET_CONTAINER_HISTORICAL_PERFORMANCES_SCHEMA);",
															"        pm.variables.set(\"unRequiredAttribute\", \"historical-performance-data-list\");",
															"        eval(RemoveAttributeFromRequired)();",
															"        ETHERNET_CONTAINER_HISTORICAL_PERFORMANCES_SCHEMA = pm.variables.get(\"shortenedSchema\");",
															"        CouldEthernetContainerHistoricalPerformancesBeShortened(true);",
															"    }",
															"} catch (error) {",
															"    CouldEthernetContainerHistoricalPerformancesBeShortened(false);",
															"}",
															"pm.variables.set(\"schema\", ETHERNET_CONTAINER_HISTORICAL_PERFORMANCES_SCHEMA);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															" function CouldInputBeLoaded(capability, RemoveAttributeFromRequired, SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputBeLoaded\", function () {",
															"        pm.expect(capability).to.be.an(\"object\");",
															"        pm.expect(RemoveAttributeFromRequired).to.be.a(\"string\");",
															"        pm.expect(RemoveAttributeFromRequired).to.not.have.lengthOf(0);",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldEthernetContainerHistoricalPerformancesBeShortened(success) {",
															"    pm.test(\"CouldEthernetContainerHistoricalPerformancesBeShortened\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5590fc7e-c35f-474b-be81-92a1cf8f6b97",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  ValidatingCompleteness = pm.environment.get(\"ValidatingCompleteness\");",
															"    CouldValidatingCompletenessBeLoaded(ValidatingCompleteness);",
															"} catch (error) {",
															"    CouldValidatingCompletenessBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Validating Completeness",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(ValidatingCompleteness)();",
															"    CouldFunctionForValidatingCompletenessBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForValidatingCompletenessBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldValidatingCompletenessBeLoaded(ValidatingCompleteness) {",
															"    pm.test(\"CouldValidatingCompletenessBeLoaded\", function () {",
															"        pm.expect(ValidatingCompleteness).to.be.a(\"string\");",
															"        pm.expect(ValidatingCompleteness).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForValidatingCompletenessBeCalled(success) {",
															"    pm.test(\"CouldFunctionForValidatingCompletenessBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "88589d94-649b-4583-81ef-8a5d774e2601",
														"exec": [
															"console.log(\"\\n-------------------Restoring the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"        ",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration",
															"                                                   );",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    completeClassName = moduleUnderTest + \":\" + technologyUnderTest + \"-configuration\";",
															"    configuration = AddHeadlineToDataObject(configuration, completeClassName);",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "53660af6-867a-46ed-8535-4ddd05773890",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d0863395-d14e-4a99-b9b1-21b2f9b76abe",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "91584f63-3310-489a-a8be-2d94278f5b16",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointPureEthernetStructureCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "2a87ef24-610e-45d9-a22c-49098630be93",
														"exec": [
															"console.log(\"\\n-------------ReversalPoint of EthernetContainer Validation for Completeness---------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointEthernetContainerCompleteness\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "c35994d8-1ee7-4edc-8199-9bb261b61052",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointPureEthernetStructureCompleteness",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "873c6da9-0495-4dad-b53d-8b48ba5295fb",
														"exec": [
															"console.log(\"\\n-----------------------Terminating EthernetContainerCompleteness--------------------------\");",
															"/****************************************************************************************",
															" * ",
															" * ExitPoint",
															" * ",
															" * This Request is for clearing the Collection variables and terminating the TestCase",
															" * ",
															" ****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															" * Required Input Parameters",
															" ****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Setting up Local Variables and Preparing the Request",
															" ****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({",
															"        key: \"Accept\",",
															"        value: \"application/json\"",
															"    });",
															"} catch (error) {}",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, controller, indexOfDeviceUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function() {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function() {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9d18ef2d-5881-4a3e-bb15-adf1a3b40580",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3adf9b68-46ec-4ae7-a93a-1398c4d5d8fe",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "362598cf-fdc8-4e72-872c-6a090d9a9e8a",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "eee3382a-4976-4e94-aa2e-978f9fcee7f3",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "404d65c2-d990-4b9a-9a5b-b3008e2a7980",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "PureEthernetStructureConfiguration",
							"item": [
								{
									"name": "SetUp",
									"item": [
										{
											"name": "UserInputConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "9aaa8fb0-85fe-4de4-b61a-5f5941bfd686",
														"exec": [
															"console.log(\"\\n\\n============================ EthernetContainerConfiguration.1 =============================\");",
															"/****************************************************************************************",
															"* ",
															"* RequestCollection for validating Configuration of EthernetContainer Objects against definition ",
															"* ",
															"*                   EthernetContainer_2.0.0-tsp.191123.1240",
															"* ",
															"* as it can be found on https://github.com/openBackhaul/ethernetContainer/tree/tsp",
															"* ",
															"****************************************************************************************/",
															" ",
															"",
															"/****************************************************************************************",
															"* Manual Definition of the Mode of Operation of this TestCase",
															"* ",
															"* It is recommended to apply this TestCase on devices on the local (not remote) site",
															"* of the microwave connection, otherwise the management connection might break and ",
															"* configurations, which are done during the validation, cannot be reversed.",
															"* ",
															"****************************************************************************************/",
															"MULTIPLICITY_OF_TEST_CASE_ITERATIONS = \"one\"; // \"none\", \"one\" or \"all\" interfaces to be validated",
															"IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Provided Collection Variables ",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"PAC_UNDER_TEST = \"ethernet-container-2-0:ethernet-container-pac\"; // e.g. \"air-interface-2-0:air-interface-pac\"",
															"INITIAL_INDEX_OF_LTP_UNDER_TEST = 0;",
															"RESPONSE_CODE_FOR_OPERATION_FAILED = 501;       // 500: Expected translation of aggreed <error-tag> operation failed",
															"CONFIGURATION_VALIDATION_RESULTS = {};",
															"",
															"try {",
															"    var moduleUnderTest = ModuleOf(PAC_UNDER_TEST);",
															"    var technologyUnderTest = TechnologyOf(PAC_UNDER_TEST);",
															"    AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest);",
															"} catch (error) {",
															"    AreModuleAndTechnologyUnderTestDefined();",
															"}",
															"",
															"pm.collectionVariables.set(\"multiplicityOfTestCaseIterations\", MULTIPLICITY_OF_TEST_CASE_ITERATIONS);",
															"pm.collectionVariables.set(\"pacUnderTest\", PAC_UNDER_TEST);",
															"pm.collectionVariables.set(\"moduleUnderTest\", moduleUnderTest);",
															"pm.collectionVariables.set(\"technologyUnderTest\", technologyUnderTest);",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", INITIAL_INDEX_OF_LTP_UNDER_TEST);",
															"pm.collectionVariables.set(\"responseCodeForOperationFailed\", RESPONSE_CODE_FOR_OPERATION_FAILED);",
															"pm.collectionVariables.set(\"configurationValidationResults\", CONFIGURATION_VALIDATION_RESULTS);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Functions",
															" ****************************************************************************************/",
															"function ModuleOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    return pacUnderTest.slice(0, indexOfColon);",
															"}",
															"",
															"function TechnologyOf(pacUnderTest) {",
															"    let indexOfColon = pacUnderTest.indexOf(\":\");",
															"    let indexOfLastMinus = pacUnderTest.lastIndexOf(\"-\");",
															"    return pacUnderTest.slice(indexOfColon + 1, indexOfLastMinus);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function IsValueOfMultiplicityOfTestCaseIterationsCorrect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS) {",
															"    pm.test(\"IsValueOfMultiplicityOfTestCaseIterationsCorrect\", function() {",
															"        pm.expect(MULTIPLICITY_OF_TEST_CASE_ITERATIONS).to.be.oneOf([\"none\", \"one\", \"all\"]);",
															"    });",
															"}",
															"",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreModuleAndTechnologyUnderTestDefined(moduleUnderTest, technologyUnderTest) {",
															"    pm.test(\"AreModuleAndTechnologyUnderTestDefined\", function() {",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "250ad34d-d796-4dd8-856c-53e1280774db",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DefiningDummyValuesAndEvaluations()",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "817b3de6-450e-46c4-93a0-08fa46f4fc60",
														"exec": [
															"console.log(\"\\n----------Defining DummyValues and Evaluation Criteria in Configuration Validation--------\");",
															"/****************************************************************************************",
															"* ",
															"* Definition of DefiningDummyValuesAndEvaluations()",
															"*  ",
															"* Functions for Defining DummyValues and Evaluation Criteria in all Configuration Validations.",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"        ",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"class Attribute {",
															"    constructor (CreatingDummyValueAsaString, ",
															"                    EvaluatingResultAsaString, ",
															"                    defaultValueForStandardEvaluation,",
															"                    capabilityAttributeToBeFalseIfFeatureNotSupported) {",
															"        this.CreatingDummyValueAsaString = CreatingDummyValueAsaString;",
															"        this.EvaluatingResultAsaString = EvaluatingResultAsaString;",
															"        this.defaultValueForStandardEvaluation = defaultValueForStandardEvaluation;",
															"        this.capabilityAttributeToBeFalseIfFeatureNotSupported = capabilityAttributeToBeFalseIfFeatureNotSupported;",
															"    }",
															"}",
															"var attributes = [];",
															"",
															"var CreatingDummyValueAsaString;",
															"var EvaluatingResultAsaString;",
															"var defaultValueForStandardEvaluation;",
															"var capabilityAttributeToBeFalseIfFeatureNotSupported;",
															"var newAttribute;",
															"",
															"// interface-name",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of interface-name--------------------------\");",
															"            ",
															"        // Individual Values Definition ",
															"        var dummyValue = \"Dummy \" + String(Math.floor(Math.random() * 999));",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"interface-name\";",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"Interface name not yet defined.\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// interface-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of interface-is-on-----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"interface-is-on\";",
															"            ",
															"        // Individual Values Definition ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"            ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// queue-behavior-list/queue-depth",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------Checking Configuration of queue-behavior-list/queue-depth-----------------\");",
															"            ",
															"        // Individual Values Definition",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"queue-name\";",
															"        try {",
															"            keysOfDatatypeInstanceUnderTest[0].value = capability[\"available-queue-list\"][0][keysOfDatatypeInstanceUnderTest[0].key];",
															"            var dummyQueueMaxQueueDepth = 0;",
															"            for (let i=0; i<(capability[\"available-queue-list\"].length); i++) {",
															"                let sampleQueueDepthIsConfigurable = capability[\"available-queue-list\"][i][\"queue-depth-configuration-is-avail\"];",
															"                if ( sampleQueueDepthIsConfigurable === true ) {",
															"                    keysOfDatatypeInstanceUnderTest[0].value = capability[\"available-queue-list\"][i][keysOfDatatypeInstanceUnderTest[0].key];",
															"                    dummyQueueMaxQueueDepth = capability[\"available-queue-list\"][i][\"max-queue-depth\"];",
															"                    break;",
															"                }",
															"            }",
															"            var dummyValue = Math.abs( Math.floor(Math.random() * dummyQueueMaxQueueDepth) );",
															"            CouldDummyValueBeCreated(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeCreated();",
															"        }",
															"        var DATATYPE_UNDER_TEST = \"queue-behavior-list\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"        var ATTRIBUTE_UNDER_TEST = \"queue-depth\";",
															"            ",
															"        // Self Testing Function",
															"        function CouldDummyValueBeCreated(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try {",
															"            let dummyQueueName = keysOfDatatypeInstanceUnderTest[0].value;",
															"            let dummyQueueCapabilityIndex = QueueIndexOf(dummyQueueName, capability);",
															"            let dummyQueueDepthIsConfigurable = capability[\"available-queue-list\"][dummyQueueCapabilityIndex][\"queue-depth-configuration-is-avail\"];",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"                    && (Math.floor(resultCode/100) === 2) ",
															"                    && (dummyValueString===resultValueString) ) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"            } else {",
															"                if ( (dummyQueueDepthIsConfigurable === false)",
															"                        && (resultValueString === JSON.stringify(\"-1\"))",
															"                         && (dummyCode === responseCodeForOperationFailed) ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(true);",
															"        } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"        }",
															"            ",
															"        // Functions",
															"        function QueueIndexOf (queueName, capability) {",
															"            for (let i=0; i<(capability[\"available-queue-list\"].length); i++) {",
															"                let sampleQueueName = capability[\"available-queue-list\"][i][\"queue-name\"];",
															"                if ( sampleQueueName === queueName ) {",
															"                    return i;",
															"                }",
															"            }",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = -1;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"queue-depth-configuration-is-avail\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// queue-behavior-list/dropping-behavior-kind",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------Checking Configuration of queue-behavior-list/dropping-behavior-kind-----------\");",
															"            ",
															"        // Individual Values Definition ",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"queue-name\";",
															"        try {",
															"            let availableDroppingBehaviorKinds = capability[\"available-queue-list\"][0][\"available-dropping-behavior-kind-list\"];",
															"            keysOfDatatypeInstanceUnderTest[0].value = capability[\"available-queue-list\"][0][keysOfDatatypeInstanceUnderTest[0].key];",
															"            let dummyQueueConfigurationIndex = QueueConfigurationIndexOf(keysOfDatatypeInstanceUnderTest[0].value,configuration);",
															"                ",
															"            let configuredDroppingBehaviorKindName = configuration[\"queue-behavior-list\"][dummyQueueConfigurationIndex][\"dropping-behavior-kind\"];",
															"            let configuredDroppingBehaviorKindIndex = availableDroppingBehaviorKinds.indexOf(configuredDroppingBehaviorKindName);",
															"                ",
															"            let potentialDummyValues = availableDroppingBehaviorKinds;",
															"            if ( configuredDroppingBehaviorKindIndex >= 0 ) {",
															"                potentialDummyValues.splice(configuredDroppingBehaviorKindIndex, 1);",
															"            }",
															"            if ( potentialDummyValues.length === 0 ) {",
															"                potentialDummyValues = [\"No alternatives available\"];",
															"            }",
															"                ",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"                ",
															"            CouldDummyBeCreated(availableDroppingBehaviorKinds, keysOfDatatypeInstanceUnderTest[0].value,",
															"                                    dummyQueueConfigurationIndex,",
															"                                    configuredDroppingBehaviorKindName,",
															"                                    configuredDroppingBehaviorKindIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue);",
															"                ",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"queue-behavior-list\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"        var ATTRIBUTE_UNDER_TEST = \"dropping-behavior-kind\";",
															"            ",
															"        // Functions",
															"        function QueueConfigurationIndexOf (queueName, configuration) {",
															"            for (let i=0; i<(configuration[\"queue-behavior-list\"].length); i++) {",
															"                let sampleQueueName = configuration[\"queue-behavior-list\"][i][\"queue-name\"];",
															"                if ( sampleQueueName === queueName ) {",
															"                    return i;",
															"                }",
															"            }",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(availableDroppingBehaviorKinds, dummyQueueName,",
															"                                    dummyQueueConfigurationIndex,",
															"                                    configuredDroppingBehaviorKindName,",
															"                                    configuredDroppingBehaviorKindIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue) {",
															"            pm.test(\"CouldAvailableDroppingBehaviorKindsBeRetrieved\", function () {",
															"                pm.expect(availableDroppingBehaviorKinds).to.be.an(\"array\");",
															"                pm.expect(availableDroppingBehaviorKinds.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyQueueNameBeRetrieved\", function () {",
															"                pm.expect(dummyQueueName).to.be.a(\"string\");",
															"                pm.expect(dummyQueueName).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldDummyQueueConfigurationIndexBeEvaluated\", function () {",
															"                pm.expect(dummyQueueConfigurationIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldConfiguredDroppingBehaviorKindNameBeRetrieved\", function () {",
															"                pm.expect(configuredDroppingBehaviorKindName).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldConfiguredDroppingBehaviorKindIndexBeEvaluated\", function () {",
															"                pm.expect(configuredDroppingBehaviorKindIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        } ",
															"        ",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try {",
															"            keysOfDatatypeInstanceUnderTest[0].value = capability[\"available-queue-list\"][0][keysOfDatatypeInstanceUnderTest[0].key];",
															"            let dummyQueueConfigurationIndex = QueueConfigurationIndexOf(keysOfDatatypeInstanceUnderTest[0].value,configuration);",
															"            let initialDroppingBehaviorKindName = configuration[\"queue-behavior-list\"][dummyQueueConfigurationIndex][\"dropping-behavior-kind\"];",
															"                ",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"                    && (Math.floor(resultCode/100) === 2) ",
															"                    && (dummyValueString===resultValueString) ) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"            } else {",
															"                if ( (dummyValueString === JSON.stringify(\"No alternatives available\"))",
															"                        && (resultValueString === JSON.stringify(initialDroppingBehaviorKindName))",
															"                         && (dummyCode === responseCodeForOperationFailed) ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(true);",
															"        } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"        }",
															"        ",
															"        // Functions",
															"        function QueueConfigurationIndexOf (queueName, configuration) {",
															"            for (let i=0; i<(configuration[\"queue-behavior-list\"].length); i++) {",
															"                let sampleQueueName = configuration[\"queue-behavior-list\"][i][\"queue-name\"];",
															"                if ( sampleQueueName === queueName ) {",
															"                    return i;",
															"                }",
															"            }",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"            ",
															"    defaultValueForStandardEvaluation = \"ethernet-container-2-0:DROPPING_BEHAVIOR_KIND_TYPE_NOT_YET_DEFINED\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// queue-behavior-list/wred-behavior-list/wred-profile",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------Checking Configuration of queue-behavior-list/wred-behavior-list/wred-profile-------\");",
															"        console.log(\"Testing queue-behavior-list/wred-behavior-list/wred-profile is not yet implemented.\")",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    ",
															"    EvaluatingResult = () => {",
															"        ",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"    // attributes.push(newAttribute);",
															"}  ",
															"",
															"// queue-behavior-list/scheduler-kind",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------------Checking Configuration of queue-behavior-list/scheduler-kind---------------\");",
															"            ",
															"        // Individual Values Definition",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"queue-name\";",
															"        try {",
															"            let availableSchedulerKinds = capability[\"available-queue-list\"][0][\"available-scheduling-kind-list\"];",
															"            keysOfDatatypeInstanceUnderTest[0].value = capability[\"available-queue-list\"][0][keysOfDatatypeInstanceUnderTest[0].key];",
															"            let dummyQueueConfigurationIndex = QueueConfigurationIndexOf(keysOfDatatypeInstanceUnderTest[0].value,configuration);",
															"                ",
															"            let configuredSchedulerKindName = configuration[\"queue-behavior-list\"][dummyQueueConfigurationIndex][\"scheduler-kind\"];",
															"            let configuredSchedulerKindIndex = availableSchedulerKinds.indexOf(configuredSchedulerKindName);",
															"                ",
															"            let potentialDummyValues = availableSchedulerKinds;",
															"            if ( configuredSchedulerKindIndex >= 0 ) {",
															"                potentialDummyValues.splice(configuredSchedulerKindIndex, 1);",
															"            }",
															"            if ( potentialDummyValues.length === 0 ) {",
															"                potentialDummyValues = [\"No alternatives available\"];",
															"            }",
															"                ",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"                ",
															"            CouldDummyBeCreated(availableSchedulerKinds, keysOfDatatypeInstanceUnderTest[0].value,",
															"                                    dummyQueueConfigurationIndex,",
															"                                    configuredSchedulerKindName,",
															"                                    configuredSchedulerKindIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue);",
															"                ",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"queue-behavior-list\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"        var ATTRIBUTE_UNDER_TEST = \"scheduler-kind\";",
															"            ",
															"        // Functions",
															"        function QueueConfigurationIndexOf (queueName, configuration) {",
															"            for (let i=0; i<(configuration[\"queue-behavior-list\"].length); i++) {",
															"                let sampleQueueName = configuration[\"queue-behavior-list\"][i][\"queue-name\"];",
															"                if ( sampleQueueName === queueName ) {",
															"                    return i;",
															"                }",
															"            }",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(availableSchedulerKinds, dummyQueueName,",
															"                                    dummyQueueConfigurationIndex,",
															"                                    configuredSchedulerKindName,",
															"                                    configuredSchedulerKindIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue) {",
															"            pm.test(\"CouldAvailableSchedulerKindsBeRetrieved\", function () {",
															"                pm.expect(availableSchedulerKinds).to.be.an(\"array\");",
															"                pm.expect(availableSchedulerKinds.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyQueueNameBeRetrieved\", function () {",
															"                pm.expect(dummyQueueName).to.be.a(\"string\");",
															"                pm.expect(dummyQueueName).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldDummyQueueConfigurationIndexBeEvaluated\", function () {",
															"                pm.expect(dummyQueueConfigurationIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldConfiguredSchedulerKindNameBeRetrieved\", function () {",
															"                pm.expect(configuredSchedulerKindName).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldConfiguredSchedulerKindIndexBeEvaluated\", function () {",
															"                pm.expect(configuredSchedulerKindIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try {",
															"                ",
															"            keysOfDatatypeInstanceUnderTest[0].value = capability[\"available-queue-list\"][0][keysOfDatatypeInstanceUnderTest[0].key];",
															"            let dummyQueueConfigurationIndex = QueueConfigurationIndexOf(keysOfDatatypeInstanceUnderTest[0].value,configuration);",
															"            let initialSchedulerKindName = configuration[\"queue-behavior-list\"][dummyQueueConfigurationIndex][\"scheduler-kind\"];",
															"                ",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"                    && (Math.floor(resultCode/100) === 2) ",
															"                    && (dummyValueString===resultValueString) ) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"            } else {",
															"                if ( (dummyValueString === JSON.stringify(\"No alternatives available\"))",
															"                        && (resultValueString === JSON.stringify(initialSchedulerKindName))",
															"                         && (dummyCode === responseCodeForOperationFailed) ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(true);",
															"        } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"        }",
															"            ",
															"        // Functions",
															"        function QueueConfigurationIndexOf (queueName, configuration) {",
															"            for (let i=0; i<(configuration[\"queue-behavior-list\"].length); i++) {",
															"                let sampleQueueName = configuration[\"queue-behavior-list\"][i][\"queue-name\"];",
															"                if ( sampleQueueName === queueName ) {",
															"                    return i;",
															"                }",
															"            }",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_NOT_YET_DEFINED\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 ); ",
															"}   attributes.push(newAttribute);",
															"",
															"// queue-behavior-list/weighting",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------Checking Configuration of queue-behavior-list/weighting------------------\");",
															"            ",
															"        // Individual Values Definition",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"queue-name\";",
															"        try {",
															"            var dummyQueueIndex = 0;",
															"            keysOfDatatypeInstanceUnderTest[0].value = configuration[\"queue-behavior-list\"][dummyQueueIndex][keysOfDatatypeInstanceUnderTest[0].key];",
															"            var dummyValue = Math.floor(Math.random() * 100);",
															"                ",
															"            var weightableSchedulerKinds = [\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_WFQ\",",
															"                                                \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_WRR\",",
															"                                                \"ethernet-container-2-0:SCHEDULER_KIND_TYPE_DWRR\"",
															"                                           ];",
															"                ",
															"            for (let i=0; i<(configuration[\"queue-behavior-list\"].length); i++) {",
															"                let sampleSchedulerKind = configuration[\"queue-behavior-list\"][i][\"scheduler-kind\"];",
															"                if ( weightableSchedulerKinds.includes(sampleSchedulerKind) ) {",
															"                    dummyQueueIndex = i;",
															"                    keysOfDatatypeInstanceUnderTest[0].value = configuration[\"queue-behavior-list\"][i][keysOfDatatypeInstanceUnderTest[0].key];",
															"                    break;",
															"                }",
															"            }",
															"                ",
															"            CouldDummyNameAndValueBeCreated(keysOfDatatypeInstanceUnderTest[0].value, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyNameAndValueBeCreated();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"queue-behavior-list\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"        var ATTRIBUTE_UNDER_TEST = \"weighting\";",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyNameAndValueBeCreated(dummyQueueName, dummyValue) {",
															"            pm.test(\"CouldDummyNameBeCreated\", function () {",
															"                pm.expect(dummyQueueName).to.be.a(\"string\");",
															"                pm.expect(dummyQueueName).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        // Individual Evaluation Definition",
															"        try {",
															"                ",
															"            let dummyQueueCapabilityIndex = QueueCapabilityIndexOf(keysOfDatatypeInstanceUnderTest[0].value, capability);",
															"            let availableSchedulingKindList = capability[\"available-queue-list\"][dummyQueueCapabilityIndex][\"available-scheduling-kind-list\"];",
															"                ",
															"            let wfqIsAvailable = availableSchedulingKindList.includes(\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_WFQ\");",
															"            let dwrrIsAvailable = availableSchedulingKindList.includes(\"ethernet-container-2-0:SCHEDULER_KIND_TYPE_DWRR\");",
															"            let weightingIsObsolete = (wfqIsAvailable===false) && (dwrrIsAvailable===false);",
															"                ",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"                    && (Math.floor(resultCode/100) === 2) ",
															"                    && (dummyValueString===resultValueString) ) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"            } else {",
															"                if ( (weightingIsObsolete === true)",
															"                        && (resultValueString === JSON.stringify(\"false\"))",
															"                        && (dummyCode === responseCodeForOperationFailed) ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(keysOfDatatypeInstanceUnderTest[0].value, dummyQueueCapabilityIndex, ",
															"                                        availableSchedulingKindList, ",
															"                                        wfqIsAvailable, ",
															"                                        dwrrIsAvailable, ",
															"                                        weightingIsObsolete, ",
															"                                        configurationValidationResults[NameOfAttributeUnderTest]",
															"                                  );",
															"        } catch (error) {",
															"            CouldResultBeEvaluated();",
															"        }",
															"            ",
															"        // Functions",
															"        function QueueCapabilityIndexOf(queueName, capability) {",
															"            for (let i=0; i<(capability[\"available-queue-list\"].length); i++) {",
															"                let sampleQueueName = capability[\"available-queue-list\"][i][\"queue-name\"];",
															"                if ( sampleQueueName === queueName ) {",
															"                    return i;",
															"                }",
															"            }",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldResultBeEvaluated(dummyQueueName, dummyQueueCapabilityIndex, ",
															"                                        availableSchedulingKindList, ",
															"                                        wfqIsAvailable, ",
															"                                        dwrrIsAvailable, ",
															"                                        weightingIsObsolete, ",
															"                                        configurationValidationResults) {",
															"            pm.test(\"CouldDummyQueueNameBeRetrieved\", function () {",
															"                pm.expect(dummyQueueName).to.be.a(\"string\");",
															"                pm.expect(dummyQueueName).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldDummyQueueCapabilityIndexBeCalculated\", function () {",
															"                pm.expect(dummyQueueCapabilityIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldTheAvailableSchedulingKindListBeRetrieved\", function () {",
															"                pm.expect(availableSchedulingKindList).to.be.an(\"array\");",
															"            });",
															"            pm.test(\"CouldWfqIsAvailableBeCalculated\", function () {",
															"                pm.expect(wfqIsAvailable).to.be.a(\"boolean\");",
															"            });",
															"            pm.test(\"CouldDwrrIsAvailableBeCalculated\", function () {",
															"                pm.expect(dwrrIsAvailable).to.be.a(\"boolean\");",
															"            });",
															"            pm.test(\"CouldWeightingIsObsoleteBeCalculated\", function () {",
															"                pm.expect(weightingIsObsolete).to.be.a(\"boolean\");",
															"            });",
															"            pm.test(\"CouldConfigurationValidationResultsBeCalculated\", function () {",
															"                pm.expect(configurationValidationResults).to.be.a(\"string\");",
															"                pm.expect(configurationValidationResults).to.not.have.lengthOf(0);  ",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = -1;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// explicit-congestion-notification-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------Checking Configuration of explicit-congestion-notification-is-on-------------\");",
															"            ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        var ATTRIBUTE_UNDER_TEST = \"explicit-congestion-notification-is-on\";",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"explicit-congestion-notification-is-avail\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// ingress-policing-profile",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------------------Checking Configuration of ingress-policing-profile---------------------\");",
															"            ",
															"        // Individual Values Definition ",
															"        var dummyValue = \"Not yet tested\";",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"ingress-policing-profile\";",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try {",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"                    && (Math.floor(resultCode/100) === 2) ",
															"                    && (dummyValueString===resultValueString)) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"Not yet tested\";",
															"            } else {",
															"                if ( dummyCode === responseCodeForOperationFailed ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"Not yet tested\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(true);",
															"        } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"            ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"ingress-policing-is-avail\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// egress-shaping-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------------Checking Configuration of egress-shaping-is-on----------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"egress-shaping-is-on\";",
															"            ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"    ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"egress-shaping-is-avail\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// maximum-information-rate",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------------------Checking Configuration of maximum-information-rate--------------------\");",
															"        ",
															"        try {",
															"            var minimumValue = capability[\"information-rate-min\"];",
															"            var maximumValue = capability[\"information-rate-max\"];",
															"            var valueRange = maximumValue - minimumValue; ",
															"            var dummyValue = Math.abs( minimumValue + Math.floor(Math.random() * valueRange) );",
															"            CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue);",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"maximum-information-rate\";",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue) {",
															"            pm.test(\"CouldMinimumValueBeReadFromCapabilities\", function () {",
															"                pm.expect(minimumValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldMaximumValueBeReadFromCapabilities\", function () {",
															"                pm.expect(maximumValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldValueRangeBeCalculated\", function () {",
															"                pm.expect(valueRange).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = -1;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// maximum-burst-size",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of maximum-burst-size-----------------------\");",
															"            ",
															"        try {",
															"            var minimumValue = capability[\"burst-size-min\"];",
															"            var maximumValue = capability[\"burst-size-max\"];",
															"            var valueRange = maximumValue - minimumValue; ",
															"            var dummyValue = Math.abs( minimumValue + Math.floor(Math.random() * valueRange) );",
															"            CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue);",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"maximum-burst-size\";",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue) {",
															"            pm.test(\"CouldMinimumValueBeReadFromCapabilities\", function () {",
															"                pm.expect(minimumValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldMaximumValueBeReadFromCapabilities\", function () {",
															"                pm.expect(maximumValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldValueRangeBeCalculated\", function () {",
															"                pm.expect(valueRange).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"            ",
															"    defaultValueForStandardEvaluation = -1;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}  attributes.push(newAttribute);",
															"",
															"// bundling-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------------Checking Configuration of bundling-is-on-------------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"bundling-is-on\";",
															"            ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"bundling-is-avail\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// header-compression-kind",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n---------------------Checking Configuration of header-compression-kind--------------------\");",
															"            ",
															"        try {",
															"            let supportedHeaderCompressionKindNames = [];",
															"            for ( let i=0; i<capability[\"supported-header-compression-kind-list\"].length; i++ ) {",
															"                let sampleName = capability[\"supported-header-compression-kind-list\"][i][\"header-compression-name\"];",
															"                supportedHeaderCompressionKindNames.push(sampleName);",
															"            }",
															"            let configuredHeaderCompressionKind = configuration[\"header-compression-kind\"];",
															"            let configuredHeaderCompressionKindIndex = supportedHeaderCompressionKindNames.indexOf(configuredHeaderCompressionKind);",
															"            let potentialDummyValues = supportedHeaderCompressionKindNames;",
															"            if ( configuredHeaderCompressionKindIndex >= 0 ) {",
															"                potentialDummyValues.splice(configuredHeaderCompressionKindIndex, 1);",
															"            }    ",
															"            if ( potentialDummyValues.length === 0 ) {",
															"                potentialDummyValues = [\"No alternatives available\"];",
															"            }",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(supportedHeaderCompressionKindNames, configuredHeaderCompressionKind,",
															"                                    configuredHeaderCompressionKindIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue);",
															"                ",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"header-compression-kind\";",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(supportedHeaderCompressionKindNames, configuredHeaderCompressionKind,",
															"                                        configuredHeaderCompressionKindIndex,",
															"                                        potentialDummyValues,",
															"                                        dummyValueIndex,",
															"                                        dummyValue) {",
															"            pm.test(\"CouldSupportedHeaderCompressionKindNamesBeRetrieved\", function () {",
															"                pm.expect(supportedHeaderCompressionKindNames).to.be.an(\"array\");",
															"            });",
															"            pm.test(\"CouldConfiguredHeaderCompressionKindNameBeRetrieved\", function () {",
															"                pm.expect(configuredHeaderCompressionKind).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldConfiguredHeaderCompressionKindIndexBeEvaluated\", function () {",
															"                pm.expect(configuredHeaderCompressionKindIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try {",
															"                ",
															"            let initialHeaderCompressionKindName = configuration[\"header-compression-kind\"];",
															"                ",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"                    && (Math.floor(resultCode/100) === 2) ",
															"                    && (dummyValueString===resultValueString) ) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"            } else {",
															"                if ( (dummyValueString === JSON.stringify(\"No alternatives available\"))",
															"                        && (resultValueString === JSON.stringify(initialHeaderCompressionKindName))",
															"                         && (dummyCode === responseCodeForOperationFailed) ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(true);",
															"        } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// fec-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------------------Checking Configuration of fec-is-on---------------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"fec-is-on\";",
															"            ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"fec-is-avail\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// fec-word-size",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------------------------Checking Configuration of fec-word-size-------------------------\");",
															"            ",
															"        try {",
															"            var minimumValue = 20;",
															"            var maximumValue = capability[\"fec-word-size-max\"];",
															"            var valueRange = maximumValue - minimumValue; ",
															"            var dummyValue = minimumValue + Math.floor(Math.random() * valueRange);",
															"            CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue);",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"fec-word-size\";",
															"            ",
															"        // Self Testing Function",
															"        function CouldDummyValueBeSet(minimumValue, maximumValue, valueRange, dummyValue) {",
															"            pm.test(\"CouldMinimumValueBeReadFromCapabilities\", function () {",
															"                pm.expect(minimumValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldMaximumValueBeReadFromCapabilities\", function () {",
															"                pm.expect(maximumValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldValueRangeBeCalculated\", function () {",
															"                pm.expect(valueRange).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"number\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = -1;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// fec-redundancy-size",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------------Checking Configuration of fec-redundancy-size------------------------\");",
															"            ",
															"        try {",
															"            let fecRedundancySizes = [\"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_2\",",
															"                                        \"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_4\", ",
															"                                        \"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_8\",",
															"                                        \"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_16\",",
															"                                        \"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_20\",",
															"                                        \"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_NOT_YET_DEFINED\"",
															"                                  ];",
															"            let configuredFecRedundancySize = configuration[\"fec-redundancy-size\"];",
															"            let configuredFecRedundancySizeIndex = fecRedundancySizes.indexOf(configuredFecRedundancySize);",
															"            let potentialDummyValues = fecRedundancySizes;",
															"            if ( configuredFecRedundancySizeIndex >= 0 ) {",
															"                potentialDummyValues.splice(configuredFecRedundancySizeIndex, 1);",
															"            }",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(fecRedundancySizes, configuredFecRedundancySize,",
															"                                    configuredFecRedundancySizeIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue);",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"fec-redundancy-size\";",
															"    ",
															"        // Self Testing Function",
															"        function CouldDummyBeCreated(fecRedundancySizes, configuredFecRedundancySize,",
															"                                    configuredFecRedundancySizeIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue) {",
															"            pm.test(\"CouldFecRedundancySizesBeCreated\", function () {",
															"                pm.expect(fecRedundancySizes).to.be.an(\"array\");",
															"                pm.expect(fecRedundancySizes.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldConfiguredFecRedundancySizeBeRetrieved\", function () {",
															"                pm.expect(configuredFecRedundancySize).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldConfiguredFecRedundancySizeIndexBeEvaluated\", function () {",
															"                pm.expect(configuredFecRedundancySizeIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        } ",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"ethernet-container-2-0:FEC_REDUNDANCY_SIZE_TYPE_NOT_YET_DEFINED\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// fec-interleaver-kind",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------------Checking Configuration of fec-interleaver-kind-----------------------\");",
															"            ",
															"        try {",
															"            let fecInterleaverKinds = [\"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NONE\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_BLOCK\", ",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_CONVOLUTION\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NOT_YET_DEFINED\"",
															"                                      ];",
															"            let configuredFecInterleaverKind = configuration[\"fec-interleaver-kind\"];",
															"            let configuredFecInterleaverKindIndex = fecInterleaverKinds.indexOf(configuredFecInterleaverKind);",
															"            let potentialDummyValues = fecInterleaverKinds;",
															"            if ( configuredFecInterleaverKindIndex >= 0 ) {",
															"                potentialDummyValues.splice(configuredFecInterleaverKindIndex, 1);",
															"            }",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(fecInterleaverKinds, configuredFecInterleaverKind,",
															"                                    configuredFecInterleaverKindIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue);",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"fec-interleaver-kind\";",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(fecInterleaverKinds, configuredFecInterleaverKind,",
															"                                    configuredFecInterleaverKindIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue) {",
															"            pm.test(\"CouldFecInterleaverKindsBeCreated\", function () {",
															"                pm.expect(fecInterleaverKinds).to.be.an(\"array\");",
															"                pm.expect(fecInterleaverKinds.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldConfiguredFecInterleaverKindBeRetrieved\", function () {",
															"                pm.expect(configuredFecInterleaverKind).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldConfiguredFecInterleaverKindIndexBeEvaluated\", function () {",
															"                pm.expect(configuredFecInterleaverKindIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NOT_YET_DEFINED\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// fec-interleaver-depth",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n----------------------Checking Configuration of fec-interleaver-depth----------------------\");",
															"            ",
															"        try {",
															"            let fecInterleaverDepths = [\"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_1\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_2\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_3\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_4\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_6\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_8\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_12\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_16\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_24\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_32\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_48\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_96\",",
															"                                        \"ethernet-container-2-0:FEC_INTERLEAVER_KIND_TYPE_NOT_YET_DEFINED\"",
															"                                      ];",
															"            let configuredfecInterleaverDepth = configuration[\"fec-interleaver-depth\"];",
															"            let configuredfecInterleaverDepthIndex = fecInterleaverDepths.indexOf(configuredfecInterleaverDepth);",
															"            let potentialDummyValues = fecInterleaverDepths;",
															"            if ( configuredfecInterleaverDepthIndex >= 0 ) {",
															"                potentialDummyValues.splice(configuredfecInterleaverDepthIndex, 1);",
															"            }",
															"            let dummyValueIndex = Math.floor(Math.random() * potentialDummyValues.length);",
															"            var dummyValue = potentialDummyValues[dummyValueIndex];",
															"            CouldDummyBeCreated(fecInterleaverDepths, configuredfecInterleaverDepth,",
															"                                    configuredfecInterleaverDepthIndex,",
															"                                    potentialDummyValues,",
															"                                    dummyValueIndex,",
															"                                    dummyValue);",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"fec-interleaver-depth\";",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(fecInterleaverDepths, configuredfecInterleaverDepth,",
															"                                        configuredfecInterleaverDepthIndex,",
															"                                        potentialDummyValues,",
															"                                        dummyValueIndex,",
															"                                        dummyValue) {",
															"            pm.test(\"CouldFecInterleaverDepthsBeCreated\", function () {",
															"                pm.expect(fecInterleaverDepths).to.be.an(\"array\");",
															"                pm.expect(fecInterleaverDepths.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldConfiguredFecInterleaverDepthBeRetrieved\", function () {",
															"                pm.expect(configuredfecInterleaverDepth).to.be.a(\"string\");",
															"            });",
															"            pm.test(\"CouldConfiguredFecInterleaverDepthIndexBeEvaluated\", function () {",
															"                pm.expect(configuredfecInterleaverDepthIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldPotentialDummyValuesBeBuild\", function () {",
															"                pm.expect(potentialDummyValues).to.be.an(\"array\");",
															"                pm.expect(potentialDummyValues.length).to.be.at.least(1);",
															"            });",
															"            pm.test(\"CouldDummyValueIndexBeCalculated\", function () {",
															"                pm.expect(dummyValueIndex).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeCreated\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"ethernet-container-2-0:FEC_INTERLEAVER_DEPTH_TYPE_NOT_YET_DEFINED\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// encryption-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of encryption-is-on-------------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"encryption-is-on\";",
															"            ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"encryption-is-avail\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// cryptographic-key",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of cryptographic-key-------------------------\");",
															"            ",
															"        var dummyValue = GenerateRandomString(16);",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"cryptographic-key\";",
															"            ",
															"        // Functions",
															"        function GenerateRandomString(length) {",
															"            let randomString = \"\";",
															"            let characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
															"            let charactersLength = characters.length;",
															"            for ( let i=0; i<length; i++ ) {",
															"                randomString += characters.charAt(Math.floor(Math.random() * charactersLength));",
															"            }",
															"            return randomString;",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"Cryptographic key not yet defined.\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// loop-back-kind-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of loop-back-kind-on------------------------\");",
															"            ",
															"        try {",
															"            var supportedLoopBackKindList = capability[\"supported-loop-back-kind-list\"];",
															"            var loopBackKindOn = configuration[\"loop-back-kind-on\"];",
															"            for (let i=0; i<supportedLoopBackKindList.length; i++) {",
															"                if ( (supportedLoopBackKindList[i]===\"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\")",
															"                        || (supportedLoopBackKindList[i]===loopBackKindOn) ) {",
															"                    supportedLoopBackKindList.splice(i, 1);",
															"                }",
															"            }",
															"            var dummyValue;",
															"            if ( supportedLoopBackKindList.length === 0 ) {",
															"                dummyValue = \"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\";",
															"            } else {",
															"                let dummyValueIndex = Math.floor( Math.random() * supportedLoopBackKindList.length );",
															"                dummyValue = supportedLoopBackKindList[dummyValueIndex];",
															"            }",
															"            CouldDummyBeCreated(supportedLoopBackKindList, loopBackKindOn, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyBeCreated();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"loop-back-kind-on\";",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyBeCreated(supportedLoopBackKindList, loopBackKindOn, dummyValue) {",
															"            pm.test(\"CouldDummyBeCreated\", function () {",
															"                pm.expect(supportedLoopBackKindList).to.be.an(\"array\");",
															"                pm.expect(loopBackKindOn).to.be.a(\"string\");",
															"                pm.expect(dummyValue).to.be.a(\"string\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try {",
															"            var supportedLoopBackKindList = capability[\"supported-loop-back-kind-list\"];",
															"            if ( (Math.floor(dummyCode/100) === 2)",
															"                    && (Math.floor(resultCode/100) === 2)",
															"                    && (dummyValueString === resultValueString) ) {",
															"                configurationValidationResults[NameOfAttributeUnderTest] = \"ok\";",
															"            } else {",
															"                if ( (resultValueString === JSON.stringify(\"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\"))",
															"                        && (supportedLoopBackKindList.length===1)",
															"                        && (supportedLoopBackKindList[0]===\"ethernet-container-2-0:LOOP_BACK_TYPE_NONE\")",
															"                        && (dummyCode === responseCodeForOperationFailed) ) {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not supported\";",
															"                } else {",
															"                    configurationValidationResults[NameOfAttributeUnderTest] = \"not configurable\";",
															"                }",
															"            }",
															"            CouldResultBeEvaluated(supportedLoopBackKindList, configurationValidationResults[attributeUnderTest]);",
															"        } catch (error) {",
															"            CouldResultBeEvaluated();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldResultBeEvaluated(supportedLoopBackKindList, configurationValidationResult) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(supportedLoopBackKindList).to.be.an(\"array\");",
															"                pm.expect(configurationValidationResult).to.be.a(\"string\");",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"ethernet-container-2-0:LOOP_BACK_TYPE_NOT_YET_DEFINED\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// maintenance-timer",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-----------------------Checking Configuration of maintenance-timer------------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"maintenance-timer\";",
															"            ",
															"        try {",
															"            var currentValue = configuration[ATTRIBUTE_UNDER_TEST];",
															"            var maintenanceTimerRange = capability[\"maintenance-timer-range\"];",
															"            var dummyValue = getRandomValues(maintenanceTimerRange, currentValue);",
															"            CouldDummyValueBeDefined(maintenanceTimerRange, currentValue, dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeDefined();",
															"        }",
															"            ",
															"        // Functions",
															"        function getRandomValues(availableValues, currentValue) {",
															"            var randomValue=0;",
															"        \tif(availableValues.includes(\"-\")) {",
															"        \t\tvar rangeValues = availableValues.split(\"-\");",
															"        \t\tdo {",
															"        \t\t    randomValue = getRandomValueFromAvailableValues(rangeValues[0], rangeValues[1]);",
															"        \t\t} while(randomValue===currentValue);",
															"        \t} else if(availableValues.includes(\",\")) {",
															"        \t    var concreteValues = availableValues.split(\",\");",
															"        \t    do {",
															"        \t        var randomIndex = getRandomValueFromAvailableValues(0,concreteValues.length);",
															"        \t        randomValue = concreteValues[randomIndex];",
															"        \t    } while(randomValue===currentValue);",
															"        \t}",
															"        \telse {",
															"        \t\trandomValue = availableValues;",
															"        \t}",
															"        \treturn randomValue;",
															"        }",
															"            ",
															"        function getRandomValueFromAvailableValues(min, max) {  ",
															"           return Math.floor(Math.random() * (max - min) + min);  ",
															"        } ",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeDefined(maintenanceTimerRange, currentValue, dummyValue) {",
															"            pm.test(\"CouldAnAvailableConfigurationValueBeRead\", function () {",
															"                pm.expect(maintenanceTimerRange).to.be.a(\"string\");",
															"                pm.expect(maintenanceTimerRange).to.not.have.lengthOf(0);",
															"            });",
															"            pm.test(\"CouldDCurrentValueBeRead\", function () {",
															"                pm.expect(currentValue).to.be.a(\"number\");",
															"            });",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(dummyValue).to.not.be.undefined;",
															"            });",
															"        }",
															"     };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = -1;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// statistics-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n------------------------Checking Configuration of statistics-is-on------------------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"statistics-is-on\";",
															"            ",
															"        try {",
															"            var dummyValue = !configuration[ATTRIBUTE_UNDER_TEST];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"statistics-is-avail\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// problem-kind-severity-list/problem-kind-severity",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n--------Checking Configuration of problem-kind-severity-list/problem-kind-severity--------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"problem-kind-severity-list\";",
															"        var DATATYPE_INDEX_UNDER_TEST = 0;",
															"        var keysOfDatatypeInstanceUnderTest = [{}];",
															"        keysOfDatatypeInstanceUnderTest[0].key = \"problem-kind-name\";",
															"        var ATTRIBUTE_UNDER_TEST = \"problem-kind-severity\";",
															"            ",
															"        try {",
															"            var currentValue;",
															"            currentValue = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][ATTRIBUTE_UNDER_TEST];",
															"            keysOfDatatypeInstanceUnderTest[0].value = configuration[DATATYPE_UNDER_TEST][DATATYPE_INDEX_UNDER_TEST][keysOfDatatypeInstanceUnderTest[0].key];",
															"            CouldCurrentConfigurationValuesBeRead(currentValue);",
															"        } catch (error) {",
															"            CouldCurrentConfigurationValuesBeRead();",
															"        }",
															"            ",
															"        try {",
															"            if ( currentValue !== \"ethernet-container-2-0:SEVERITY_TYPE_MINOR\" ) {",
															"                var dummyValue = \"ethernet-container-2-0:SEVERITY_TYPE_MINOR\";",
															"            } else {",
															"                var dummyValue = \"ethernet-container-2-0:SEVERITY_TYPE_MAJOR\";",
															"            }",
															"            CouldDummyValueBeDefined(true);",
															"        } catch (error) {",
															"            CouldDummyValueBeDefined(false);",
															"        }",
															"            ",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = keysOfDatatypeInstanceUnderTest;",
															"            ",
															"        // Self Testing Function",
															"        function CouldCurrentConfigurationValuesBeRead(currentValue) {",
															"            pm.test(\"CouldCurrentConfigurationValuesBeRead\", function () {",
															"                pm.expect(currentValue).to.be.a(\"string\");",
															"                pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"            });",
															"        }",
															"            ",
															"        function CouldDummyValueBeDefined(success) {",
															"            pm.test(\"CouldDummyValueBeDefined\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = \"ethernet-container-2-0:SEVERITY_TYPE_NOT_YET_DEFINED\";",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"// performance-monitoring-is-on",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------Checking Configuration of performance-monitoring-is-on-----------------\");",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"            ",
															"        try {",
															"            var dummyValue = !configuration[\"performance-monitoring-is-on\"];",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"boolean\");",
															"            });",
															"        }",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {};",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"        ",
															"    defaultValueForStandardEvaluation = false;",
															"    capabilityAttributeToBeFalseIfFeatureNotSupported = \"performance-monitoring-is-avail\";",
															"        ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, ",
															"                                    EvaluatingResultAsaString, ",
															"                                    defaultValueForStandardEvaluation,",
															"                                    capabilityAttributeToBeFalseIfFeatureNotSupported",
															"                                 );",
															"}   attributes.push(newAttribute);",
															"",
															"/*//    another attribute's YANG name",
															"{",
															"    CreatingDummyValue = () => {",
															"        console.log(\"\\n-------------------Checking Configuration of performance-monitoring-is-on-----------------\");",
															"            ",
															"        try {",
															"            ",
															"            ",
															"            CouldDummyValueBeSet(dummyValue);",
															"        } catch (error) {",
															"            CouldDummyValueBeSet();",
															"        }",
															"            ",
															"        var DATATYPE_UNDER_TEST = \"\";",
															"        var KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [{}];",
															"        var ATTRIBUTE_UNDER_TEST = \"performance-monitoring-is-on\";",
															"            ",
															"        // Self Testing Functions",
															"        function CouldDummyValueBeSet(dummyValue) {",
															"            pm.test(\"CouldDummyValueBeSet\", function () {",
															"                pm.expect(dummyValue).to.be.a(\"?\");",
															"            });",
															"        }    ",
															"    };",
															"    CreatingDummyValueAsaString = ConvertingThisFunctionToString(CreatingDummyValue);",
															"        ",
															"    EvaluatingResult = () => {",
															"        try {",
															"        ",
															"        ",
															"            CouldResultBeEvaluated(true);",
															"        } catch (error) {",
															"            CouldResultBeEvaluated(false);",
															"        }",
															"            ",
															"        // Self Testing Function",
															"        function CouldResultBeEvaluated(success) {",
															"            pm.test(\"CouldResultBeEvaluated\", function () {",
															"                pm.expect(success).to.be.true;",
															"            });",
															"        }",
															"    };",
															"    EvaluatingResultAsaString = ConvertingThisFunctionToString(EvaluatingResult);",
															"    ",
															"    newAttribute = new Attribute(CreatingDummyValueAsaString, EvaluatingResultAsaString);",
															"}   //attributes.push(newAttribute);",
															"*/",
															"",
															"pm.collectionVariables.set( \"attributes\", attributes);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function ConvertingThisFunctionToString(functionToBeConverted) {",
															"    let functionAsAString = String(functionToBeConverted);",
															"    let indexOfFirstCurly = functionAsAString.indexOf(\"{\");",
															"    return functionAsAString.slice(indexOfFirstCurly);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "EntryPointEthernetContainerConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "efd46516-949a-4167-bb1a-912ec54f3848",
														"exec": [
															"console.log(\"\\n--------------EntryPoint of EthernetContainer Validation of Configuration-----------------\");",
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the EthernetContainerConfiguration TestCase ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var controller = pm.environment.get(\"controller\");",
															"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var multiplicityOfTestCaseIterations = pm.collectionVariables.get(\"multiplicityOfTestCaseIterations\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, dummyUri, ",
															"                            multiplicityOfTestCaseIterations, ",
															"                            indexOfLtpUnderTest",
															"                         );",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"    var numberOfExistingInterfaces = controller.nodeList[indexOfDeviceUnderTest].ethernetContainerList.length;",
															"    var maximumIndexOfLtpUnderTest;",
															"    ",
															"    switch (multiplicityOfTestCaseIterations) {",
															"        case \"none\":",
															"            maximumIndexOfLtpUnderTest = -1;",
															"            break;",
															"        case \"one\":",
															"            maximumIndexOfLtpUnderTest = Math.min( 0, (numberOfExistingInterfaces-1) );",
															"            break;",
															"        case \"all\":",
															"            maximumIndexOfLtpUnderTest = (numberOfExistingInterfaces-1);",
															"            break;",
															"    }",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldMaximumIndexOfLtpUnderTestBeDetermined();",
															"}",
															"",
															"try {",
															"    if (indexOfLtpUnderTest<=maximumIndexOfLtpUnderTest) {",
															"        postman.setNextRequest();",
															"        console.log(\"Testing of the \" + (indexOfLtpUnderTest+1) + \". out of \" ",
															"                        + (maximumIndexOfLtpUnderTest+1) ",
															"                        + \" Interfaces will be started:\"",
															"                    );",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointEthernetContainerConfiguration\");",
															"        console.log(\"Proceeding with terminating EthernetContainer validation for Completeness.\");",
															"    }",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Provided Collection Variables ",
															"****************************************************************************************/",
															"INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST = 0;",
															"",
															"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", INITIAL_INDEX_OF_ATTRIBUTE_UNDER_TEST);",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(controller, indexOfDeviceUnderTest, uri, ",
															"                                multiplicityOfTestCaseIterations, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(controller).to.be.an(\"object\");",
															"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");        ",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(multiplicityOfTestCaseIterations).to.be.a(\"string\");",
															"        pm.expect(multiplicityOfTestCaseIterations).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldMaximumIndexOfLtpUnderTestBeDetermined(maximumIndexOfLtpUnderTest) {",
															"    pm.test(\"CouldMaximumIndexOfLtpUnderTestBeDetermined\", function () {",
															"        pm.expect(maximumIndexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "106b8cad-d7ef-4464-987d-dd4cbd30a6d3",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1d7c2034-82c0-4db3-9985-0ba51ccd8f0b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "CollectionInformationLoading",
									"item": [
										{
											"name": "UploadingInterfaceCapability",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "494f9657-d859-4bc2-80b2-346922ff543d",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Capabilities-------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the Interface Capabilities",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"capability\";      // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "eacdb174-ee16-4147-ab29-94c71a72de7c",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "21f01472-5858-4ae8-b6c3-128de30d54ec",
														"exec": [
															"console.log(\"\\n---------------------------Uploading Interface Configuration------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Configuration",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfKeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "8451b916-1eff-45e2-90ca-1a5bde2f6d23",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "UploadingInterfaceStatus",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "42835205-c72d-49a3-a212-16f3dfa19a6d",
														"exec": [
															"console.log(\"\\n------------------------------Uploading Interface Status----------------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Uploading the current Interface Status",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"    CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables);",
															"} catch (error) {",
															"    CouldInputForUploadingDeviceInformationBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"const CLASS_UNDER_TEST = \"status\";          // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"nonconfig\";           // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ",
															"                                    ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, FILTER_DEPTH, FILTERED_FIELDS);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"",
															"try {",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForUploadingDeviceInformationBeLoaded(SettingTheRequestVariables) {",
															"    pm.test(\"CouldInputForUploadingDeviceInformationBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest,",
															"                                            attributeUnterTest, contentType, filteredDepth, ",
															"                                            filteredFields) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f5bdddf0-15ba-4b76-a5a8-7c5a671cb292",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var  UploadingInterfaceInformation = pm.environment.get(\"UploadingInterfaceInformation\");",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation);",
															"} catch (error) {",
															"    CouldUploadingInterfaceInformationFunctionBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Uploading Interface Information",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"",
															"try {",
															"    eval(UploadingInterfaceInformation)();",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForUploadingInterfaceInformationBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldUploadingInterfaceInformationFunctionBeLoaded(UploadingInterfaceInformation) {",
															"    pm.test(\"CouldUploadingInterfaceInformationFunctionBeLoaded\", function () {",
															"        pm.expect(UploadingInterfaceInformation).to.be.a(\"string\");",
															"        pm.expect(UploadingInterfaceInformation).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForUploadingInterfaceInformationBeCalled(success) {",
															"    pm.test(\"CouldFunctionForUploadingInterfaceInformationBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "DisplayCollectionVariables",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4dba5978-7e18-443d-b167-9aa953d3a4e1",
														"exec": [
															"console.log(\"\\n--------------------------Displaying all Collection Variables-----------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Displaying the Collection Variables right before starting the validation",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Displaying ",
															"****************************************************************************************/",
															"try {",
															"    console.log(\"Interface will be tested with the following set of Collection variables:\");",
															"    let allCollectionVariables = { \"allCollectionVariables\" : pm.collectionVariables.toObject() };",
															"    console.log(allCollectionVariables);",
															"    CouldAllCollectionVariablesBeDisplayed(true);",
															"} catch (error) {",
															"    CouldAllCollectionVariablesBeDisplayed(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldAllCollectionVariablesBeDisplayed(success) {",
															"    pm.test(\"CouldAllCollectionVariablesBeDisplayed\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "AttributeConfiguration",
									"item": [
										{
											"name": "EntryPointAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "813b35c8-d850-4e70-8dc2-0a3cdf649df4",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* EntryPoint",
															"* ",
															"* Manages the number of iterations of the AttributeConfiguration Tests ",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var attributes = pm.collectionVariables.get(\"attributes\");",
															"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
															"    ",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    ",
															"    CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the next Step ",
															"****************************************************************************************/",
															"try {",
															"        ",
															"    if ( indexOfAttributeUnderTest < attributes.length ) {",
															"        postman.setNextRequest();",
															"    } else {",
															"        postman.setNextRequest(\"ExitPointAttributeConfiguration\");",
															"    }",
															"        ",
															"    CouldFurtherProceedingBeDetermined(true);",
															"} catch (error) {",
															"    CouldFurtherProceedingBeDetermined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(attributes, indexOfAttributeUnderTest, dummyUri) {",
															"    pm.test(\"CouldTheAttributesBeLoaded\", function () {",
															"        pm.expect(attributes).to.be.an(\"array\");",
															"    });",
															"    pm.test(\"CouldIndexOfAttributeUnderTestBeLoaded\", function () {",
															"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"CouldTheDummyUriBeLoaded\", function () {",
															"        pm.expect(dummyUri).to.be.a(\"string\");",
															"        pm.expect(dummyUri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFurtherProceedingBeDetermined(success) {",
															"    pm.test(\"CouldFurtherProceedingBeDetermined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Writing",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "420ef2d1-5397-43ca-8ed0-204bb9206980",
														"exec": [
															"/****************************************************************************************",
															"* Retrieving DummyCode",
															"****************************************************************************************/",
															"try {",
															"    var dummyCode = JSON.parse(pm.response.code);",
															"    var dummyErrorMessage = \"\";",
															"    if ( Math.floor(dummyCode/100) !== 2 ) {",
															"        var dummyErrorMessage = JSON.parse(pm.response.stream).errors.error[0][\"error-message\"];",
															"    }",
															"    CouldResponseBeRetrieved(dummyCode, dummyErrorMessage);",
															"} catch (error) {",
															"    CouldResponseBeRetrieved();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting Local Variables",
															"****************************************************************************************/   ",
															"pm.variables.set(\"dummyCode\", dummyCode);",
															"pm.variables.set(\"dummyErrorMessage\", dummyErrorMessage);",
															"",
															"    ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldResponseBeRetrieved(responseCode, responseErrorMessage) {",
															"    pm.test(\"CouldTheDummyCodeOfPuttingBeReceived\", function () {",
															"        pm.expect(responseCode).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"CouldTheErrorMessagePuttingBeComposed\", function () {",
															"        pm.expect(responseErrorMessage).to.be.a(\"string\");",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "154180fc-1b75-4baa-bb7d-299ab1abdad5",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Writing",
															"* ",
															"* This Request is for PUTting an boolean attribute with the alternate value and",
															"* providing this value as dummyValueString to the local Variables.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfWritingAsaString = pm.environment.get(\"PreRequestOfWritingAsaString\");",
															"    eval(PreRequestOfWritingAsaString);",
															"    CouldPreRequestOfWritingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfWritingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfWritingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfWritingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Reading",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "950fb26e-eabb-4822-9cb3-36698506cbc5",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Reading",
															"* ",
															"* This Request is for GETting the value of the attributeUnderTest and providing it ",
															"* as ResultValue to the local Variables",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfReadingAsaString = pm.environment.get(\"PreRequestOfReadingAsaString\");",
															"    eval(PreRequestOfReadingAsaString);",
															"    CouldPreRequestOfReadingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfReadingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfReadingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfReadingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "8c3c4af9-56e7-4104-bcbd-8730b003b3a3",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PostRequestOfReadingAsaString = pm.environment.get(\"PostRequestOfReadingAsaString\");",
															"    eval(PostRequestOfReadingAsaString);",
															"    CouldPostRequestOfReadingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPostRequestOfReadingBeExecuted();",
															"}",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPostRequestOfReadingBeExecuted(success) {",
															"    pm.test(\"CouldPostRequestOfReadingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Evaluating",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "fba3ca98-9244-4478-bc57-7ed0de3912dc",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Evaluating",
															"* ",
															"* This Request compares resultValue with dummyValue.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfEvaluatingAsaString = pm.environment.get(\"PreRequestOfEvaluatingAsaString\");",
															"    eval(PreRequestOfEvaluatingAsaString);",
															"    CouldPreRequestOfEvaluatingBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfEvaluatingBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfEvaluatingBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfEvaluatingBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Restoring",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "76b1011c-ee03-43c5-852d-dac77a3c0668",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* Restoring",
															"* ",
															"* This Request is for Restoring the initial value to the attributeUnderTest",
															"*  ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters and Execution",
															"****************************************************************************************/",
															"try {",
															"    var PreRequestOfRestoringAsaString = pm.environment.get(\"PreRequestOfRestoringAsaString\");",
															"    eval(PreRequestOfRestoringAsaString);",
															"    CouldPreRequestOfRestoringBeExecuted(true);",
															"} catch (error) {",
															"    CouldPreRequestOfRestoringBeExecuted();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldPreRequestOfRestoringBeExecuted(success) {",
															"    pm.test(\"CouldPreRequestOfRestoringBeExecuted\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "7dab4e10-1d5b-41a9-9ab4-74e50454f26d",
														"exec": [
															"/****************************************************************************************",
															"* Setting Local Variables",
															"****************************************************************************************/   ",
															"pm.variables.clear();"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ReversalPointAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "bb3edbab-41ef-4b09-845c-28ebb44e98b3",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"        ",
															"    var indexOfAttributeUnderTest = pm.collectionVariables.get(\"indexOfAttributeUnderTest\");",
															"        ",
															"    CouldTheInputBeLoaded(dummyUri, indexOfAttributeUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextAttributeUnderTest = indexOfAttributeUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfAttributeUnderTest\", indexOfPotentialNextAttributeUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointAttributeConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfAttributeUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfAttributeUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "cc3439ef-7a45-4cac-a322-337749d52ce4",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointAttributeConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "5cb7bc5a-17b6-4fd4-a82c-7a8e82b32234",
														"exec": [
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is terminating the Test",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "b2b530a3-f861-40b9-9606-5f5b317c3f51",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "NetworkRestoration",
									"item": [
										{
											"name": "SettingOriginalInterfaceConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f0a0393d-4412-4462-bffb-75b9783c2998",
														"exec": [
															"console.log(\"\\n-------------------Restoring the Original Interface Configuration Again-------------------\");",
															"/****************************************************************************************",
															"* ",
															"* Setting the Original Interface Configuration Again",
															"* ",
															"* This Request is for restoring the configuration from before the interface validation ",
															"* on the device.",
															"* ",
															"****************************************************************************************/",
															"",
															"",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var SettingTheRequestVariables = pm.environment.get(\"SettingTheRequestVariables\");",
															"        ",
															"    var moduleUnderTest = pm.collectionVariables.get(\"moduleUnderTest\");",
															"    var technologyUnderTest = pm.collectionVariables.get(\"technologyUnderTest\");",
															"    var configuration = pm.collectionVariables.get(\"configuration\");",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration",
															"                                                   );",
															"} catch (error) {",
															"    CouldInputForSettingWrongRadioSignalIdBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Determining the required Changes",
															"****************************************************************************************/",
															"try {",
															"    completeClassName = moduleUnderTest + \":\" + technologyUnderTest + \"-configuration\";",
															"    configuration = AddHeadlineToDataObject(configuration, completeClassName);",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(true);",
															"} catch (error) {",
															"    CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Preparation of the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"const CLASS_UNDER_TEST = \"configuration\";   // choose from \"pac\", \"capability\", \"configuration\", ",
															"                                            // \"status\", \"current-problems\", \"current-performance\" ",
															"                                            // or \"historical-performances\"",
															"const DATATYPE_UNDER_TEST = \"\";",
															"const KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST = [\"\"];",
															"const ATTRIBUTE_UNDER_TEST = \"\";",
															"const CONTENT_TYPE = \"\";                    // choose from \"\", \"config\" or \"nonconfig\"",
															"const FILTER_DEPTH = 0;                     // number of levels beneath the addressed resource; 0 = all;",
															"const FILTERED_FIELDS = \"\";",
															"const REQUEST_BODY = JSON.stringify(configuration);",
															"AreValuesOfInputParametersCorrect(CLASS_UNDER_TEST, DATATYPE_UNDER_TEST, ",
															"                                    KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST, ATTRIBUTE_UNDER_TEST, CONTENT_TYPE, ",
															"                                    FILTER_DEPTH, FILTERED_FIELDS, REQUEST_BODY);",
															"",
															"pm.variables.set(\"classUnderTest\", CLASS_UNDER_TEST);",
															"pm.variables.set(\"datatypeUnderTest\", DATATYPE_UNDER_TEST);",
															"pm.variables.set(\"keysOfDatatypeInstanceUnderTest\", KEYS_OF_DATATYPE_INSTANCE_UNDER_TEST);",
															"pm.variables.set(\"attributeUnderTest\", ATTRIBUTE_UNDER_TEST);",
															"pm.variables.set(\"filteredContent\", CONTENT_TYPE);",
															"pm.variables.set(\"filteredDepth\", FILTER_DEPTH);",
															"pm.variables.set(\"filteredFields\", FILTERED_FIELDS);",
															"pm.variables.set(\"requestBody\", REQUEST_BODY);",
															"",
															"try {        ",
															"    eval(SettingTheRequestVariables)();",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForSettingTheRequestVariablesBeCalled(true);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Functions",
															"****************************************************************************************/",
															"function AddHeadlineToDataObject(objectWithoutHeadline, headline) {",
															"    let stringWithoutHeadline = JSON.stringify(objectWithoutHeadline);",
															"    let stringInclHeadline = '{\"' + headline + '\":' + stringWithoutHeadline + '}';",
															"    let objectInclHeadline = JSON.parse(stringInclHeadline);",
															"    return objectInclHeadline;",
															"}",
															"",
															" ",
															"/****************************************************************************************",
															"* Self Testing Functions",
															"****************************************************************************************/",
															"function CouldInputForSettingWrongRadioSignalIdBeLoaded(SettingTheRequestVariables, ",
															"                                                        moduleUnderTest, ",
															"                                                        technologyUnderTest, ",
															"                                                        configuration) {",
															"    pm.test(\"CouldInputForSettingWrongRadioSignalIdBeLoaded\", function () {",
															"        pm.expect(SettingTheRequestVariables).to.be.a(\"string\");",
															"        pm.expect(SettingTheRequestVariables).to.not.have.lengthOf(0);",
															"        pm.expect(moduleUnderTest).to.be.a(\"string\");",
															"        pm.expect(moduleUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(technologyUnderTest).to.be.a(\"string\");",
															"        pm.expect(technologyUnderTest).to.not.have.lengthOf(0);",
															"        pm.expect(configuration).to.be.a(\"object\");",
															"    });",
															"}",
															"",
															"function CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined(success) {",
															"    pm.test(\"CouldRequestBodyOfSettingOriginalInterfaceConfigurationBeDefined\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}",
															"",
															"function AreValuesOfInputParametersCorrect(classUnderTest, datatypeUnderTest, keysOfDatatypeInstanceUnderTest, ",
															"                                                attributeUnterTest, contentType,",
															"                                                filteredDepth, filteredFields, requestBody) {",
															"    pm.test(\"IsValueOfClassUnderTestCorrect\", function() {",
															"        pm.expect(classUnderTest).to.be.oneOf([\"pac\", \"capability\", \"configuration\", \"status\",",
															"                                                \"current-problems\", \"current-performance\",",
															"                                                \"historical-performances\"]);",
															"    });",
															"    pm.test(\"IsValueOfDatatypeUnderTestCorrect\", function() {",
															"        pm.expect(datatypeUnderTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfkeysOfDatatypeInstanceUnderTestCorrect\", function() {",
															"        pm.expect(keysOfDatatypeInstanceUnderTest).to.be.a(\"array\");",
															"    });",
															"    pm.test(\"IsValueOfAttributeUnderTestCorrect\", function() {",
															"        pm.expect(attributeUnterTest).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfContentTypeCorrect\", function() {",
															"        pm.expect(contentType).to.be.oneOf([\"\", \"config\", \"nonconfig\"]);",
															"    });",
															"    pm.test(\"IsValueOfFilteredDepthCorrect\", function() {",
															"        pm.expect(filteredDepth).to.be.a(\"number\");",
															"    });",
															"    pm.test(\"IsValueOfFilteredFieldsCorrect\", function() {",
															"        pm.expect(filteredFields).to.be.a(\"string\");",
															"    });",
															"    pm.test(\"IsValueOfRequestBodyCorrect\", function() {",
															"        pm.expect(requestBody).to.be.a(\"string\");",
															"        pm.expect(requestBody).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForSettingTheRequestVariablesBeCalled(success) {",
															"    pm.test(\"CouldFunctionForSettingTheRequestVariablesBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "144575c0-c47d-4751-bea1-8d0828edef5b",
														"exec": [
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var CommentingResponse = pm.environment.get(\"CommentingResponse\");",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse);",
															"} catch (error) {",
															"    CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Calling for Commenting the Response",
															"****************************************************************************************/",
															"pm.variables.set(\"response\", pm.response);",
															"pm.variables.set(\"positiveOutcome\", \" successfully switched back on original values.\");",
															"pm.variables.set(\"negativeOutcome\", \" could not be switched back on original values.\");",
															"",
															"try {",
															"    eval(CommentingResponse)();",
															"    CouldFunctionForCommentingTheResponseBeCalled(true);",
															"} catch (error) {",
															"    CouldFunctionForCommentingTheResponseBeCalled(false);",
															"}",
															"",
															"",
															"/****************************************************************************************",
															"* Clearing Local Variables",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded(CommentingResponse) {",
															"    pm.test(\"CouldInputForTestScriptOfSwitchingMonitoringOnBeLoaded\", function () {",
															"        pm.expect(CommentingResponse).to.be.a(\"string\");",
															"        pm.expect(CommentingResponse).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldFunctionForCommentingTheResponseBeCalled(success) {",
															"    pm.test(\"CouldFunctionForCommentingTheResponseBeCalled\", function () {",
															"        pm.expect(success).to.be.true;",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{{requestBody}}"
												},
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "3cba812c-d522-4a4c-8f40-1d3a2f6dfbfb",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2f321a6b-6282-4cfe-928f-ea780e52e379",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Terminating",
									"item": [
										{
											"name": "ReversalPointEthernetContainerConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "89b43bf2-22af-4d25-8f76-692c475914a2",
														"exec": [
															"console.log(\"\\n-------------ReversalPoint of EthernetContainer Validation of Configuration---------------\");",
															"/****************************************************************************************",
															"* ",
															"* ReversalPoint",
															"* ",
															"* Directs the flow of execution back to the StartPoint",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    var indexOfLtpUnderTest = pm.collectionVariables.get(\"indexOfLtpUnderTest\");",
															"    var configurationValidationResults = pm.collectionVariables.get(\"configurationValidationResults\");",
															"    CouldTheInputBeLoaded(dummyUri, indexOfLtpUnderTest);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Console.log of Validation Results",
															" ****************************************************************************************/",
															"let allConfigurationValidationResults = { \"allConfigurationValidationResults\" : configurationValidationResults };",
															"console.log(allConfigurationValidationResults);",
															"",
															"",
															"/****************************************************************************************",
															" * Providing Collection Variables for either Repeating or Terminating the TestCase",
															" ****************************************************************************************/",
															"var indexOfPotentialNextLtpUnderTest = indexOfLtpUnderTest + 1;",
															"pm.collectionVariables.set(\"indexOfLtpUnderTest\", indexOfPotentialNextLtpUnderTest);",
															"",
															"postman.setNextRequest(\"EntryPointEthernetContainerConfiguration\");",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri, indexOfLtpUnderTest) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"        pm.expect(indexOfLtpUnderTest).to.be.a(\"number\");",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0cd9adbc-e057-4693-bac9-8a217436fb19",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "ExitPointEthernetContainerConfiguration",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "b28b45c4-48d1-4d6a-87cb-05c48481d8b8",
														"exec": [
															"console.log(\"\\n----------------------Terminating EthernetContainerConfiguration--------------------------\");",
															"/****************************************************************************************",
															"* ",
															"* ExitPoint",
															"* ",
															"* This Request is for clearing the Collection variables and terminating the TestCase",
															"* ",
															"****************************************************************************************/",
															" ",
															" ",
															"/****************************************************************************************",
															"* Required Input Parameters",
															"****************************************************************************************/",
															"try {",
															"    var dummyUri = pm.environment.get(\"dummyUri\");",
															"    CouldTheInputBeLoaded(dummyUri);",
															"} catch (error) {",
															"    CouldTheInputBeLoaded();",
															"}",
															"",
															"",
															"/****************************************************************************************",
															" * Clearing all Collection Variables for Terminating the TestCase",
															" ****************************************************************************************/",
															"pm.collectionVariables.clear();",
															"",
															"",
															"/****************************************************************************************",
															"* Setting up Local Variables and Preparing the Request",
															"****************************************************************************************/",
															"pm.variables.clear();",
															"try {",
															"    pm.variables.set(\"uri\", dummyUri);",
															"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
															"} catch (error) { }",
															"CouldTheRequestBePrepared();",
															"",
															"",
															"/****************************************************************************************",
															" * Self Testing Functions",
															" ****************************************************************************************/",
															"function CouldTheInputBeLoaded(uri) {",
															"    pm.test(\"CouldTheInputBeLoaded\", function () {",
															"        pm.expect(uri).to.be.a(\"string\");",
															"        pm.expect(uri).to.not.have.lengthOf(0);",
															"    });",
															"}",
															"",
															"function CouldTheRequestBePrepared() {",
															"    pm.test(\"CouldTheRequestBePrepared\", function () {",
															"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
															"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
															"    });",
															"}"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "6000b7cb-ed7c-45aa-9245-84f1e1fc57de",
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{uri}}",
													"host": [
														"{{uri}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "116528ea-c9b6-4661-badc-4286802e0f8c",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7b458598-6199-4dca-b941-de6ac1bfcaa9",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "841f8ade-474d-42f3-b626-ae02e9fe14ba",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "dd0ed389-f60b-4886-9850-9b93dca96e9c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "f3e657c6-9f2c-4cde-9963-7970df1db6c4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a2057230-b978-4197-ab07-398a09096296",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "NetworkRestoration",
			"item": [],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "13770aad-42dc-4b9b-9964-d892704b1c47",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2b15cead-8a40-4989-b395-d57341d90e99",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Terminating",
			"item": [
				{
					"name": "ReversalPointInterfaceValidator",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "518c9b4d-6893-48b2-91cb-fb6042793e59",
								"exec": [
									"console.log(\"\\n------------------------ReversalPoint of the Interface Validator--------------------------\");",
									"/****************************************************************************************",
									"* ",
									"* ReversalPoint",
									"* ",
									"* Directs the flow of execution back to the StartPoint",
									"* ",
									"****************************************************************************************/",
									" ",
									" ",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    var indexOfDeviceUnderTest = pm.environment.get(\"indexOfDeviceUnderTest\");",
									"    CouldTheInputBeLoaded(dummyUri, indexOfDeviceUnderTest);",
									"} catch (error) {",
									"    CouldTheInputBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Providing Environment Variables for either Repeating or Terminating the Device Testing",
									" ****************************************************************************************/",
									"var indexOfPotentialNextDeviceUnderTest = indexOfDeviceUnderTest + 1;",
									"pm.environment.set(\"indexOfDeviceUnderTest\", indexOfPotentialNextDeviceUnderTest);",
									"",
									"postman.setNextRequest(\"StartPointDeviceTesting\");",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheRequestBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function CouldTheInputBeLoaded(uri, indexOfDeviceUnderTest) {",
									"    pm.test(\"CouldTheInputBeLoaded\", function () {",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"        pm.expect(indexOfDeviceUnderTest).to.be.a(\"number\");",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ceb752d6-8ae0-4f5e-bb36-4febb3f837a5",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "EndPointInterfaceValidator",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "9b29998e-9318-4c8f-8980-cbe5060c57df",
								"exec": [
									"console.log(\"\\n--------------------------Terminating the InterfaceValidator------------------------------\");",
									"/****************************************************************************************",
									"* ",
									"* EndPoint of the Interface Validator",
									"* ",
									"* This Request is for clearing the Environment variables and terminating the Program",
									"* ",
									"****************************************************************************************/",
									" ",
									" ",
									"/****************************************************************************************",
									"* Required Input Parameters",
									"****************************************************************************************/",
									"try {",
									"    var dummyUri = pm.environment.get(\"dummyUri\");",
									"    CouldTheInputBeLoaded(dummyUri);",
									"} catch (error) {",
									"    CouldTheInputBeLoaded();",
									"}",
									"",
									"",
									"/****************************************************************************************",
									" * Clearing all Environment Variables for Terminating the Program",
									" ****************************************************************************************/",
									"pm.environment.clear();",
									"",
									"",
									"/****************************************************************************************",
									"* Setting up Local Variables and Preparing the Request",
									"****************************************************************************************/",
									"pm.variables.clear();",
									"try {",
									"    pm.variables.set(\"uri\", dummyUri);",
									"    pm.request.headers.upsert({key:\"Accept\", value:\"application/json\"});",
									"} catch (error) { }",
									"CouldTheRequestBePrepared();",
									"",
									"",
									"/****************************************************************************************",
									" * Self Testing Functions",
									" ****************************************************************************************/",
									"function CouldTheInputBeLoaded(uri, controller, indexOfDeviceUnderTest) {",
									"    pm.test(\"CouldTheInputBeLoaded\", function () {",
									"        pm.expect(uri).to.be.a(\"string\");",
									"        pm.expect(uri).to.not.have.lengthOf(0);",
									"    });",
									"}",
									"",
									"function CouldTheRequestBePrepared() {",
									"    pm.test(\"CouldTheRequestBePrepared\", function () {",
									"        pm.expect(pm.variables.get(\"uri\")).to.be.a(\"string\");",
									"        pm.expect(pm.variables.get(\"uri\")).to.not.have.lengthOf(0);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1ffe2fb9-e83e-415a-958f-bab651305e7d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{uri}}",
							"host": [
								"{{uri}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7e65ade7-26f4-47ad-a8bd-0d55fef5c89d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "71417488-5ccc-454a-9257-98cd3ed56a47",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "a74781a1-7ff2-42ae-bba5-7fbdca6f5976",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "2c974100-37f3-4209-829d-f4c9d2de5625",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}